
Elev_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d98  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001ec8  08001ec8  00002ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f2c  08001f2c  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001f2c  08001f2c  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f2c  08001f2c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f2c  08001f2c  00002f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f30  08001f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001f34  00003000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000004  08001f38  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08001f38  000030fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000370f  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fcd  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00007710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c2  00000000  00000000  00007ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000347e  00000000  00000000  00007da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057c0  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ca45  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001d425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d28  00000000  00000000  0001d468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0001e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001eb0 	.word	0x08001eb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001eb0 	.word	0x08001eb0

08000170 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 800017c:	81bb      	strh	r3, [r7, #12]
 800017e:	2304      	movs	r3, #4
 8000180:	73bb      	strb	r3, [r7, #14]
 8000182:	2302      	movs	r3, #2
 8000184:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f107 020c 	add.w	r2, r7, #12
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fa71 	bl	8000678 <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 800019a:	813b      	strh	r3, [r7, #8]
 800019c:	2304      	movs	r3, #4
 800019e:	72bb      	strb	r3, [r7, #10]
 80001a0:	2302      	movs	r3, #2
 80001a2:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	f107 0208 	add.w	r2, r7, #8
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fa62 	bl	8000678 <MCAL_GPIO_Init>

}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6858      	ldr	r0, [r3, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f000 fae8 	bl	80007a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	6898      	ldr	r0, [r3, #8]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	885b      	ldrh	r3, [r3, #2]
 80001dc:	2200      	movs	r2, #0
 80001de:	4619      	mov	r1, r3
 80001e0:	f000 fae0 	bl	80007a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2102      	movs	r1, #2
 80001e8:	4806      	ldr	r0, [pc, #24]	@ (8000204 <Motor_TurnOff+0x48>)
 80001ea:	f000 fadb 	bl	80007a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_LOW);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2140      	movs	r1, #64	@ 0x40
 80001f2:	4805      	ldr	r0, [pc, #20]	@ (8000208 <Motor_TurnOff+0x4c>)
 80001f4:	f000 fad6 	bl	80007a4 <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 80001f8:	f001 f8d6 	bl	80013a8 <TIMER3_Stop>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	40010800 	.word	0x40010800

0800020c <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af02      	add	r7, sp, #8
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	68d8      	ldr	r0, [r3, #12]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	7c19      	ldrb	r1, [r3, #16]
 8000220:	78fa      	ldrb	r2, [r7, #3]
 8000222:	2324      	movs	r3, #36	@ 0x24
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022a:	f000 fd09 	bl	8000c40 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6858      	ldr	r0, [r3, #4]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	2201      	movs	r2, #1
 8000238:	4619      	mov	r1, r3
 800023a:	f000 fab3 	bl	80007a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6898      	ldr	r0, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	885b      	ldrh	r3, [r3, #2]
 8000246:	2200      	movs	r2, #0
 8000248:	4619      	mov	r1, r3
 800024a:	f000 faab 	bl	80007a4 <MCAL_GPIO_WritePin>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <Motor_Move_BackWard>:





void Motor_Move_BackWard(Motor_Config_t *Motor, uint8_t speed){
 8000256:	b580      	push	{r7, lr}
 8000258:	b084      	sub	sp, #16
 800025a:	af02      	add	r7, sp, #8
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	460b      	mov	r3, r1
 8000260:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	68d8      	ldr	r0, [r3, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7c19      	ldrb	r1, [r3, #16]
 800026a:	78fa      	ldrb	r2, [r7, #3]
 800026c:	2324      	movs	r3, #36	@ 0x24
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000274:	f000 fce4 	bl	8000c40 <PWM>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_LOW);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6858      	ldr	r0, [r3, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	4619      	mov	r1, r3
 8000284:	f000 fa8e 	bl	80007a4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_HIGH);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	885b      	ldrh	r3, [r3, #2]
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	f000 fa86 	bl	80007a4 <MCAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 80002ac:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 80002b2:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 80002b8:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	881a      	ldrh	r2, [r3, #0]
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <Stepper_Init+0x40>)
 80002c0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <Stepper_Init+0x44>)
 80002ca:	f000 f9d5 	bl	8000678 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <Stepper_Init+0x44>)
 80002d4:	f000 fa66 	bl	80007a4 <MCAL_GPIO_WritePin>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000020 	.word	0x20000020
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <EXTI0_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <EXTI0_IRQHandler+0x1c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	@ (8000308 <EXTI0_IRQHandler+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4798      	blx	r3

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	20000024 	.word	0x20000024

0800030c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8000310:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <EXTI1_IRQHandler+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <EXTI1_IRQHandler+0x1c>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 800031c:	4b03      	ldr	r3, [pc, #12]	@ (800032c <EXTI1_IRQHandler+0x20>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	4798      	blx	r3
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010400 	.word	0x40010400
 800032c:	20000024 	.word	0x20000024

08000330 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <EXTI2_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <EXTI2_IRQHandler+0x1c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000340:	4b03      	ldr	r3, [pc, #12]	@ (8000350 <EXTI2_IRQHandler+0x20>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4798      	blx	r3
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	20000024 	.word	0x20000024

08000354 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000358:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <EXTI3_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <EXTI3_IRQHandler+0x1c>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000364:	4b03      	ldr	r3, [pc, #12]	@ (8000374 <EXTI3_IRQHandler+0x20>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	20000024 	.word	0x20000024

08000378 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 800037c:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <EXTI4_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <EXTI4_IRQHandler+0x1c>)
 8000382:	f043 0310 	orr.w	r3, r3, #16
 8000386:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000388:	4b03      	ldr	r3, [pc, #12]	@ (8000398 <EXTI4_IRQHandler+0x20>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	20000024 	.word	0x20000024

0800039c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80003a0:	4b26      	ldr	r3, [pc, #152]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x22>
 80003ac:	4b23      	ldr	r3, [pc, #140]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a22      	ldr	r2, [pc, #136]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80003be:	4b1f      	ldr	r3, [pc, #124]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x40>
 80003ca:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80003dc:	4b17      	ldr	r3, [pc, #92]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x5e>
 80003e8:	4b14      	ldr	r3, [pc, #80]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a13      	ldr	r2, [pc, #76]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80003fa:	4b10      	ldr	r3, [pc, #64]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000402:	2b00      	cmp	r3, #0
 8000404:	d008      	beq.n	8000418 <EXTI9_5_IRQHandler+0x7c>
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0c      	ldr	r2, [pc, #48]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000420:	2b00      	cmp	r3, #0
 8000422:	d008      	beq.n	8000436 <EXTI9_5_IRQHandler+0x9a>
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800042e:	6153      	str	r3, [r2, #20]
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <EXTI9_5_IRQHandler+0xa4>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010400 	.word	0x40010400
 8000440:	20000024 	.word	0x20000024

08000444 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000448:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x22>
 8000454:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a29      	ldr	r2, [pc, #164]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b28      	ldr	r3, [pc, #160]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000464:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8000466:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x40>
 8000472:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a22      	ldr	r2, [pc, #136]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b21      	ldr	r3, [pc, #132]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000482:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8000484:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x5e>
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0x7c>
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004be:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI15_10_IRQHandler+0x9a>
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d6:	6153      	str	r3, [r2, #20]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004dc:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <EXTI15_10_IRQHandler+0xb8>
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b03      	ldr	r3, [pc, #12]	@ (8000504 <EXTI15_10_IRQHandler+0xc0>)
 80004f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004fa:	4798      	blx	r3
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010400 	.word	0x40010400
 8000504:	20000024 	.word	0x20000024

08000508 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000518:	f000 80a5 	beq.w	8000666 <Get_CRLH_Position+0x15e>
 800051c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000520:	f300 80a3 	bgt.w	800066a <Get_CRLH_Position+0x162>
 8000524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000528:	f000 809b 	beq.w	8000662 <Get_CRLH_Position+0x15a>
 800052c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000530:	f300 809b 	bgt.w	800066a <Get_CRLH_Position+0x162>
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000538:	f000 8091 	beq.w	800065e <Get_CRLH_Position+0x156>
 800053c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000540:	f300 8093 	bgt.w	800066a <Get_CRLH_Position+0x162>
 8000544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000548:	f000 8087 	beq.w	800065a <Get_CRLH_Position+0x152>
 800054c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000550:	f300 808b 	bgt.w	800066a <Get_CRLH_Position+0x162>
 8000554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000558:	d07d      	beq.n	8000656 <Get_CRLH_Position+0x14e>
 800055a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800055e:	f300 8084 	bgt.w	800066a <Get_CRLH_Position+0x162>
 8000562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000566:	d074      	beq.n	8000652 <Get_CRLH_Position+0x14a>
 8000568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800056c:	dc7d      	bgt.n	800066a <Get_CRLH_Position+0x162>
 800056e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000572:	d06c      	beq.n	800064e <Get_CRLH_Position+0x146>
 8000574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000578:	dc77      	bgt.n	800066a <Get_CRLH_Position+0x162>
 800057a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800057e:	d064      	beq.n	800064a <Get_CRLH_Position+0x142>
 8000580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000584:	dc71      	bgt.n	800066a <Get_CRLH_Position+0x162>
 8000586:	2b80      	cmp	r3, #128	@ 0x80
 8000588:	d05d      	beq.n	8000646 <Get_CRLH_Position+0x13e>
 800058a:	2b80      	cmp	r3, #128	@ 0x80
 800058c:	dc6d      	bgt.n	800066a <Get_CRLH_Position+0x162>
 800058e:	2b20      	cmp	r3, #32
 8000590:	dc48      	bgt.n	8000624 <Get_CRLH_Position+0x11c>
 8000592:	2b00      	cmp	r3, #0
 8000594:	dd69      	ble.n	800066a <Get_CRLH_Position+0x162>
 8000596:	3b01      	subs	r3, #1
 8000598:	2b1f      	cmp	r3, #31
 800059a:	d866      	bhi.n	800066a <Get_CRLH_Position+0x162>
 800059c:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <Get_CRLH_Position+0x9c>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	0800062b 	.word	0x0800062b
 80005a8:	0800062f 	.word	0x0800062f
 80005ac:	0800066b 	.word	0x0800066b
 80005b0:	08000633 	.word	0x08000633
 80005b4:	0800066b 	.word	0x0800066b
 80005b8:	0800066b 	.word	0x0800066b
 80005bc:	0800066b 	.word	0x0800066b
 80005c0:	08000637 	.word	0x08000637
 80005c4:	0800066b 	.word	0x0800066b
 80005c8:	0800066b 	.word	0x0800066b
 80005cc:	0800066b 	.word	0x0800066b
 80005d0:	0800066b 	.word	0x0800066b
 80005d4:	0800066b 	.word	0x0800066b
 80005d8:	0800066b 	.word	0x0800066b
 80005dc:	0800066b 	.word	0x0800066b
 80005e0:	0800063b 	.word	0x0800063b
 80005e4:	0800066b 	.word	0x0800066b
 80005e8:	0800066b 	.word	0x0800066b
 80005ec:	0800066b 	.word	0x0800066b
 80005f0:	0800066b 	.word	0x0800066b
 80005f4:	0800066b 	.word	0x0800066b
 80005f8:	0800066b 	.word	0x0800066b
 80005fc:	0800066b 	.word	0x0800066b
 8000600:	0800066b 	.word	0x0800066b
 8000604:	0800066b 	.word	0x0800066b
 8000608:	0800066b 	.word	0x0800066b
 800060c:	0800066b 	.word	0x0800066b
 8000610:	0800066b 	.word	0x0800066b
 8000614:	0800066b 	.word	0x0800066b
 8000618:	0800066b 	.word	0x0800066b
 800061c:	0800066b 	.word	0x0800066b
 8000620:	0800063f 	.word	0x0800063f
 8000624:	2b40      	cmp	r3, #64	@ 0x40
 8000626:	d00c      	beq.n	8000642 <Get_CRLH_Position+0x13a>
 8000628:	e01f      	b.n	800066a <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e01e      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800062e:	2304      	movs	r3, #4
 8000630:	e01c      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000632:	2308      	movs	r3, #8
 8000634:	e01a      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000636:	230c      	movs	r3, #12
 8000638:	e018      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800063a:	2310      	movs	r3, #16
 800063c:	e016      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 800063e:	2314      	movs	r3, #20
 8000640:	e014      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000642:	2318      	movs	r3, #24
 8000644:	e012      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000646:	231c      	movs	r3, #28
 8000648:	e010      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e00e      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 800064e:	2304      	movs	r3, #4
 8000650:	e00c      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000652:	2308      	movs	r3, #8
 8000654:	e00a      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000656:	230c      	movs	r3, #12
 8000658:	e008      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800065a:	2310      	movs	r3, #16
 800065c:	e006      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 800065e:	2314      	movs	r3, #20
 8000660:	e004      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000662:	2318      	movs	r3, #24
 8000664:	e002      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000666:	231c      	movs	r3, #28
 8000668:	e000      	b.n	800066c <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	2bff      	cmp	r3, #255	@ 0xff
 8000690:	d801      	bhi.n	8000696 <MCAL_GPIO_Init+0x1e>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	e001      	b.n	800069a <MCAL_GPIO_Init+0x22>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3304      	adds	r3, #4
 800069a:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff31 	bl	8000508 <Get_CRLH_Position>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	230f      	movs	r3, #15
 80006ac:	4093      	lsls	r3, r2
 80006ae:	43da      	mvns	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	401a      	ands	r2, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d00b      	beq.n	80006da <MCAL_GPIO_Init+0x62>
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d007      	beq.n	80006da <MCAL_GPIO_Init+0x62>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	d003      	beq.n	80006da <MCAL_GPIO_Init+0x62>
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d10e      	bne.n	80006f8 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	789b      	ldrb	r3, [r3, #2]
 80006de:	3b04      	subs	r3, #4
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	78db      	ldrb	r3, [r3, #3]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e02c      	b.n	8000752 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d003      	beq.n	8000708 <MCAL_GPIO_Init+0x90>
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e01c      	b.n	8000752 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d102      	bne.n	8000726 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000720:	2304      	movs	r3, #4
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e015      	b.n	8000752 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000726:	2308      	movs	r3, #8
 8000728:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d107      	bne.n	8000742 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	8812      	ldrh	r2, [r2, #0]
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	e007      	b.n	8000752 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	43d2      	mvns	r2, r2
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000752:	7bfc      	ldrb	r4, [r7, #15]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fed5 	bl	8000508 <Get_CRLH_Position>
 800075e:	4603      	mov	r3, r0
 8000760:	fa04 f203 	lsl.w	r2, r4, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	431a      	orrs	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	601a      	str	r2, [r3, #0]


}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}

08000776 <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	4013      	ands	r3, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e001      	b.n	8000798 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
 80007b0:	4613      	mov	r3, r2
 80007b2:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 80007b4:	787b      	ldrb	r3, [r7, #1]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80007ba:	887a      	ldrh	r2, [r7, #2]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80007c0:	e002      	b.n	80007c8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80007c2:	887a      	ldrh	r2, [r7, #2]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	615a      	str	r2, [r3, #20]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
	...

080007d4 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 80007de:	4b38      	ldr	r3, [pc, #224]	@ (80008c0 <I2C1_EV_IRQHandler+0xec>)
 80007e0:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ea:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007f4:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00a      	beq.n	800081c <I2C1_EV_IRQHandler+0x48>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d007      	beq.n	800081c <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000814:	2100      	movs	r1, #0
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f000 f866 	bl	80008e8 <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d014      	beq.n	8000856 <I2C1_EV_IRQHandler+0x82>
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d011      	beq.n	8000856 <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10b      	bne.n	8000856 <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 800084e:	2102      	movs	r1, #2
 8000850:	6978      	ldr	r0, [r7, #20]
 8000852:	f000 f849 	bl	80008e8 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00f      	beq.n	8000886 <I2C1_EV_IRQHandler+0xb2>
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00c      	beq.n	8000886 <I2C1_EV_IRQHandler+0xb2>
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d009      	beq.n	8000886 <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800087e:	2103      	movs	r1, #3
 8000880:	6978      	ldr	r0, [r7, #20]
 8000882:	f000 f831 	bl	80008e8 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088e:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00f      	beq.n	80008b6 <I2C1_EV_IRQHandler+0xe2>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00c      	beq.n	80008b6 <I2C1_EV_IRQHandler+0xe2>
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d009      	beq.n	80008b6 <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d103      	bne.n	80008b6 <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80008ae:	2104      	movs	r1, #4
 80008b0:	6978      	ldr	r0, [r7, #20]
 80008b2:	f000 f819 	bl	80008e8 <Slave_States>

		}
	}

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400

080008c4 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a32      	ldr	r2, [pc, #200]	@ (80009c0 <Slave_States+0xd8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d856      	bhi.n	80009b8 <Slave_States+0xd0>
 800090a:	a201      	add	r2, pc, #4	@ (adr r2, 8000910 <Slave_States+0x28>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	0800092b 	.word	0x0800092b
 8000914:	08000925 	.word	0x08000925
 8000918:	0800094f 	.word	0x0800094f
 800091c:	08000967 	.word	0x08000967
 8000920:	0800098b 	.word	0x0800098b
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000928:	e046      	b.n	80009b8 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	2b00      	cmp	r3, #0
 8000934:	d03b      	beq.n	80009ae <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	4922      	ldr	r1, [pc, #136]	@ (80009c4 <Slave_States+0xdc>)
 800093a:	4613      	mov	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	440b      	add	r3, r1
 8000944:	3320      	adds	r3, #32
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2000      	movs	r0, #0
 800094a:	4798      	blx	r3
		}

		break ;
 800094c:	e02f      	b.n	80009ae <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	491c      	ldr	r1, [pc, #112]	@ (80009c4 <Slave_States+0xdc>)
 8000952:	4613      	mov	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4413      	add	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	440b      	add	r3, r1
 800095c:	3320      	adds	r3, #32
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2002      	movs	r0, #2
 8000962:	4798      	blx	r3

		break ;
 8000964:	e028      	b.n	80009b8 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01f      	beq.n	80009b2 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4913      	ldr	r1, [pc, #76]	@ (80009c4 <Slave_States+0xdc>)
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	3320      	adds	r3, #32
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2003      	movs	r0, #3
 8000986:	4798      	blx	r3
		}

		break ;
 8000988:	e013      	b.n	80009b2 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10f      	bne.n	80009b6 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000996:	7bfa      	ldrb	r2, [r7, #15]
 8000998:	490a      	ldr	r1, [pc, #40]	@ (80009c4 <Slave_States+0xdc>)
 800099a:	4613      	mov	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	4413      	add	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	440b      	add	r3, r1
 80009a4:	3320      	adds	r3, #32
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2004      	movs	r0, #4
 80009aa:	4798      	blx	r3
		}

		break ;
 80009ac:	e003      	b.n	80009b6 <Slave_States+0xce>
		break ;
 80009ae:	bf00      	nop
 80009b0:	e002      	b.n	80009b8 <Slave_States+0xd0>
		break ;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <Slave_States+0xd0>
		break ;
 80009b6:	bf00      	nop
	}
	}

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40005400 	.word	0x40005400
 80009c4:	20000060 	.word	0x20000060

080009c8 <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	71fb      	strb	r3, [r7, #7]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d049      	beq.n	8000a76 <MCAL_RCC_CLK_Init+0xae>
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	f300 80cc 	bgt.w	8000b80 <MCAL_RCC_CLK_Init+0x1b8>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 80c8 	beq.w	8000b7e <MCAL_RCC_CLK_Init+0x1b6>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	f040 80c6 	bne.w	8000b80 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 80009f4:	4b65      	ldr	r3, [pc, #404]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a64      	ldr	r2, [pc, #400]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 80009fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009fe:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8000a00:	4b62      	ldr	r3, [pc, #392]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a61      	ldr	r2, [pc, #388]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a0a:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a5e      	ldr	r2, [pc, #376]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a16:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	2b48      	cmp	r3, #72	@ 0x48
 8000a1c:	d106      	bne.n	8000a2c <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 8000a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a5a      	ldr	r2, [pc, #360]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a24:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000a28:	6053      	str	r3, [r2, #4]
			break;
 8000a2a:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000a2c:	4b57      	ldr	r3, [pc, #348]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a56      	ldr	r2, [pc, #344]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a36:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 8000a38:	4b54      	ldr	r3, [pc, #336]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a53      	ldr	r2, [pc, #332]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 8000a44:	4b51      	ldr	r3, [pc, #324]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a50      	ldr	r2, [pc, #320]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 8000a50:	4b4e      	ldr	r3, [pc, #312]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a4d      	ldr	r2, [pc, #308]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5a:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8000a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a4a      	ldr	r2, [pc, #296]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a62:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000a66:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 8000a68:	4b48      	ldr	r3, [pc, #288]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a47      	ldr	r2, [pc, #284]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a72:	6053      	str	r3, [r2, #4]




		break;
 8000a74:	e084      	b.n	8000b80 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 8000a76:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a44      	ldr	r2, [pc, #272]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a7c:	f023 0301 	bic.w	r3, r3, #1
 8000a80:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8000a82:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a41      	ldr	r2, [pc, #260]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a8c:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	3b10      	subs	r3, #16
 8000a92:	2b14      	cmp	r3, #20
 8000a94:	d85d      	bhi.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
 8000a96:	a201      	add	r2, pc, #4	@ (adr r2, 8000a9c <MCAL_RCC_CLK_Init+0xd4>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000af1 	.word	0x08000af1
 8000aa0:	08000b53 	.word	0x08000b53
 8000aa4:	08000b53 	.word	0x08000b53
 8000aa8:	08000b53 	.word	0x08000b53
 8000aac:	08000aff 	.word	0x08000aff
 8000ab0:	08000b53 	.word	0x08000b53
 8000ab4:	08000b53 	.word	0x08000b53
 8000ab8:	08000b53 	.word	0x08000b53
 8000abc:	08000b0d 	.word	0x08000b0d
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b1b 	.word	0x08000b1b
 8000ac8:	08000b53 	.word	0x08000b53
 8000acc:	08000b29 	.word	0x08000b29
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b37 	.word	0x08000b37
 8000ae0:	08000b53 	.word	0x08000b53
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b53 	.word	0x08000b53
 8000aec:	08000b45 	.word	0x08000b45
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	4a25      	ldr	r2, [pc, #148]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000afa:	6053      	str	r3, [r2, #4]
			break;
 8000afc:	e029      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b04:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000b08:	6053      	str	r3, [r2, #4]
			break;
 8000b0a:	e022      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b16:	6053      	str	r3, [r2, #4]
			break;
 8000b18:	e01b      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b20:	f443 1350 	orr.w	r3, r3, #3407872	@ 0x340000
 8000b24:	6053      	str	r3, [r2, #4]
			break;
 8000b26:	e014      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b2e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8000b32:	6053      	str	r3, [r2, #4]
			break;
 8000b34:	e00d      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b3c:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8000b40:	6053      	str	r3, [r2, #4]
			break;
 8000b42:	e006      	b.n	8000b52 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b4a:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000b4e:	6053      	str	r3, [r2, #4]
			break;
 8000b50:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b5c:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 8000b5e:	bf00      	nop
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0f9      	beq.n	8000b60 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <MCAL_RCC_CLK_Init+0x1c4>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]



		break;
 8000b7c:	e000      	b.n	8000b80 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8000b7e:	bf00      	nop
	}
	}
	return status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000

08000b90 <TIMER1_Init>:

uint8_t PinStepper_flag = 0;


void TIMER1_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER1_CLK_EN();
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <TIMER1_Init+0x4c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <TIMER1_Init+0x4c>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ba4:	6193      	str	r3, [r2, #24]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER1->PSC = (Clock_Speed_MHz - 1);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <TIMER1_Init+0x50>)
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER1->ARR = 0xC350;  // 25000*2us = 0.05s
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <TIMER1_Init+0x50>)
 8000bb0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Enable Timer2
	TIMER1->CR1 |= (1<<0);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <TIMER1_Init+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <TIMER1_Init+0x50>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER1->SR) & (1<<0)));
 8000bc2:	bf00      	nop
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <TIMER1_Init+0x50>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <TIMER1_Init+0x34>
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <Delay_Timer1_us>:
	}
}


void Delay_Timer1_us(int us)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	TIMER1->CNT = 0;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <Delay_Timer1_us+0x28>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
	while((TIMER1->CNT) < us);
 8000bf2:	bf00      	nop
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <Delay_Timer1_us+0x28>)
 8000bf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d3fa      	bcc.n	8000bf4 <Delay_Timer1_us+0x10>
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <Delay_Timer1_ms>:


void Delay_Timer1_ms(int ms)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e006      	b.n	8000c2c <Delay_Timer1_ms+0x1c>
	{
		Delay_Timer1_us(1000);
 8000c1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c22:	f7ff ffdf 	bl	8000be4 <Delay_Timer1_us>
	for(i=0;i<ms;i++)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf4      	blt.n	8000c1e <Delay_Timer1_ms+0xe>
	}
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b098      	sub	sp, #96	@ 0x60
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	657b      	str	r3, [r7, #84]	@ 0x54

	while(loop_flag == 1)
 8000c60:	e017      	b.n	8000c92 <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8000c62:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000c66:	4a91      	ldr	r2, [pc, #580]	@ (8000eac <PWM+0x26c>)
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8000c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c7e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000c82:	d303      	bcc.n	8000c8c <PWM+0x4c>
			Prescalar_Value += 2;
 8000c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c86:	3302      	adds	r3, #2
 8000c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8000c8a:	e002      	b.n	8000c92 <PWM+0x52>
		}else{
			loop_flag = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	while(loop_flag == 1)
 8000c92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d0e3      	beq.n	8000c62 <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4a84      	ldr	r2, [pc, #528]	@ (8000eb0 <PWM+0x270>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f040 80d8 	bne.w	8000e54 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8000ca4:	4b83      	ldr	r3, [pc, #524]	@ (8000eb4 <PWM+0x274>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a82      	ldr	r2, [pc, #520]	@ (8000eb4 <PWM+0x274>)
 8000caa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cae:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8000cb0:	4b80      	ldr	r3, [pc, #512]	@ (8000eb4 <PWM+0x274>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a7f      	ldr	r2, [pc, #508]	@ (8000eb4 <PWM+0x274>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000cbc:	4b7d      	ldr	r3, [pc, #500]	@ (8000eb4 <PWM+0x274>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a7c      	ldr	r2, [pc, #496]	@ (8000eb4 <PWM+0x274>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f023 0201 	bic.w	r2, r3, #1
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	f200 8336 	bhi.w	8001348 <PWM+0x708>
 8000cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <PWM+0xa4>)
 8000cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce2:	bf00      	nop
 8000ce4:	08000cf5 	.word	0x08000cf5
 8000ce8:	08000d4d 	.word	0x08000d4d
 8000cec:	08000da5 	.word	0x08000da5
 8000cf0:	08000dfd 	.word	0x08000dfd
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000cf4:	4b70      	ldr	r3, [pc, #448]	@ (8000eb8 <PWM+0x278>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	653b      	str	r3, [r7, #80]	@ 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000cfa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cfe:	4619      	mov	r1, r3
 8000d00:	486e      	ldr	r0, [pc, #440]	@ (8000ebc <PWM+0x27c>)
 8000d02:	f7ff fcb9 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f043 0208 	orr.w	r2, r3, #8
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	f043 0201 	orr.w	r2, r3, #1
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000d2a:	7abb      	ldrb	r3, [r7, #10]
 8000d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	4a63      	ldr	r2, [pc, #396]	@ (8000ec0 <PWM+0x280>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	095a      	lsrs	r2, r3, #5
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8000d4a:	e2fd      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <PWM+0x284>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000d52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4858      	ldr	r0, [pc, #352]	@ (8000ebc <PWM+0x27c>)
 8000d5a:	f7ff fc8d 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000d82:	7abb      	ldrb	r3, [r7, #10]
 8000d84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec0 <PWM+0x280>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	095a      	lsrs	r2, r3, #5
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000da2:	e2d1      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000da4:	4b48      	ldr	r3, [pc, #288]	@ (8000ec8 <PWM+0x288>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	64bb      	str	r3, [r7, #72]	@ 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000daa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dae:	4619      	mov	r1, r3
 8000db0:	4842      	ldr	r0, [pc, #264]	@ (8000ebc <PWM+0x27c>)
 8000db2:	f7ff fc61 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f043 0208 	orr.w	r2, r3, #8
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8000dda:	7abb      	ldrb	r3, [r7, #10]
 8000ddc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	4a37      	ldr	r2, [pc, #220]	@ (8000ec0 <PWM+0x280>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	095a      	lsrs	r2, r3, #5
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8000dfa:	e2a5      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000dfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <PWM+0x28c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	647b      	str	r3, [r7, #68]	@ 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000e02:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e06:	4619      	mov	r1, r3
 8000e08:	482c      	ldr	r0, [pc, #176]	@ (8000ebc <PWM+0x27c>)
 8000e0a:	f7ff fc35 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8000e32:	7abb      	ldrb	r3, [r7, #10]
 8000e34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <PWM+0x280>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	095a      	lsrs	r2, r3, #5
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8000e52:	e279      	b.n	8001348 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e5a:	f040 80d1 	bne.w	8001000 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <PWM+0x274>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <PWM+0x274>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <PWM+0x274>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <PWM+0x274>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <PWM+0x274>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <PWM+0x274>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 0201 	bic.w	r2, r3, #1
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	f200 8259 	bhi.w	8001348 <PWM+0x708>
 8000e96:	a201      	add	r2, pc, #4	@ (adr r2, 8000e9c <PWM+0x25c>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ed1 	.word	0x08000ed1
 8000ea0:	08000f1d 	.word	0x08000f1d
 8000ea4:	08000f69 	.word	0x08000f69
 8000ea8:	08000fb5 	.word	0x08000fb5
 8000eac:	000f4240 	.word	0x000f4240
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	08001ec8 	.word	0x08001ec8
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	51eb851f 	.word	0x51eb851f
 8000ec4:	08001ecc 	.word	0x08001ecc
 8000ec8:	08001ed0 	.word	0x08001ed0
 8000ecc:	08001ed4 	.word	0x08001ed4
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000ed0:	4b9d      	ldr	r3, [pc, #628]	@ (8001148 <PWM+0x508>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	643b      	str	r3, [r7, #64]	@ 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000ed6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eda:	4619      	mov	r1, r3
 8000edc:	489b      	ldr	r0, [pc, #620]	@ (800114c <PWM+0x50c>)
 8000ede:	f7ff fbcb 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f043 0208 	orr.w	r2, r3, #8
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000f06:	7abb      	ldrb	r3, [r7, #10]
 8000f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a90      	ldr	r2, [pc, #576]	@ (8001150 <PWM+0x510>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	095a      	lsrs	r2, r3, #5
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8000f1a:	e215      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000f1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001154 <PWM+0x514>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000f22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4888      	ldr	r0, [pc, #544]	@ (800114c <PWM+0x50c>)
 8000f2a:	f7ff fba5 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	f043 0210 	orr.w	r2, r3, #16
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000f52:	7abb      	ldrb	r3, [r7, #10]
 8000f54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001150 <PWM+0x510>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	095a      	lsrs	r2, r3, #5
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000f66:	e1ef      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000f68:	4b7b      	ldr	r3, [pc, #492]	@ (8001158 <PWM+0x518>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000f6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f72:	4619      	mov	r1, r3
 8000f74:	4875      	ldr	r0, [pc, #468]	@ (800114c <PWM+0x50c>)
 8000f76:	f7ff fb7f 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f043 0208 	orr.w	r2, r3, #8
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8000f9e:	7abb      	ldrb	r3, [r7, #10]
 8000fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8001150 <PWM+0x510>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	095a      	lsrs	r2, r3, #5
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8000fb2:	e1c9      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000fb4:	4b69      	ldr	r3, [pc, #420]	@ (800115c <PWM+0x51c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000fba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4862      	ldr	r0, [pc, #392]	@ (800114c <PWM+0x50c>)
 8000fc2:	f7ff fb59 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8000fea:	7abb      	ldrb	r3, [r7, #10]
 8000fec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	4a57      	ldr	r2, [pc, #348]	@ (8001150 <PWM+0x510>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	095a      	lsrs	r2, r3, #5
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8000ffe:	e1a3      	b.n	8001348 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a57      	ldr	r2, [pc, #348]	@ (8001160 <PWM+0x520>)
 8001004:	4293      	cmp	r3, r2
 8001006:	f040 80db 	bne.w	80011c0 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 800100a:	4b56      	ldr	r3, [pc, #344]	@ (8001164 <PWM+0x524>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a55      	ldr	r2, [pc, #340]	@ (8001164 <PWM+0x524>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001016:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <PWM+0x524>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a52      	ldr	r2, [pc, #328]	@ (8001164 <PWM+0x524>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8001022:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <PWM+0x524>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <PWM+0x524>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800102e:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <PWM+0x524>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a4c      	ldr	r2, [pc, #304]	@ (8001164 <PWM+0x524>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 0201 	bic.w	r2, r3, #1
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	2b03      	cmp	r3, #3
 800104a:	f200 817d 	bhi.w	8001348 <PWM+0x708>
 800104e:	a201      	add	r2, pc, #4	@ (adr r2, 8001054 <PWM+0x414>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	080010b1 	.word	0x080010b1
 800105c:	080010fd 	.word	0x080010fd
 8001060:	08001175 	.word	0x08001175
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001064:	4b40      	ldr	r3, [pc, #256]	@ (8001168 <PWM+0x528>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800106a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800106e:	4619      	mov	r1, r3
 8001070:	4836      	ldr	r0, [pc, #216]	@ (800114c <PWM+0x50c>)
 8001072:	f7ff fb01 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f043 0208 	orr.w	r2, r3, #8
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001150 <PWM+0x510>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	095a      	lsrs	r2, r3, #5
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80010ae:	e14b      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80010b0:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <PWM+0x52c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80010b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ba:	4619      	mov	r1, r3
 80010bc:	4823      	ldr	r0, [pc, #140]	@ (800114c <PWM+0x50c>)
 80010be:	f7ff fadb 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	f043 0210 	orr.w	r2, r3, #16
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <PWM+0x510>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	095a      	lsrs	r2, r3, #5
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80010fa:	e125      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <PWM+0x508>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	4619      	mov	r1, r3
 8001108:	4819      	ldr	r0, [pc, #100]	@ (8001170 <PWM+0x530>)
 800110a:	f7ff fab5 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f043 0208 	orr.w	r2, r3, #8
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <PWM+0x510>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	095a      	lsrs	r2, r3, #5
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001146:	e0ff      	b.n	8001348 <PWM+0x708>
 8001148:	08001ed8 	.word	0x08001ed8
 800114c:	40010800 	.word	0x40010800
 8001150:	51eb851f 	.word	0x51eb851f
 8001154:	08001edc 	.word	0x08001edc
 8001158:	08001ee0 	.word	0x08001ee0
 800115c:	08001ee4 	.word	0x08001ee4
 8001160:	40000400 	.word	0x40000400
 8001164:	40021000 	.word	0x40021000
 8001168:	08001ee8 	.word	0x08001ee8
 800116c:	08001eec 	.word	0x08001eec
 8001170:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001174:	4b83      	ldr	r3, [pc, #524]	@ (8001384 <PWM+0x744>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4881      	ldr	r0, [pc, #516]	@ (8001388 <PWM+0x748>)
 8001182:	f7ff fa79 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80011aa:	7abb      	ldrb	r3, [r7, #10]
 80011ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a76      	ldr	r2, [pc, #472]	@ (800138c <PWM+0x74c>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	095a      	lsrs	r2, r3, #5
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80011be:	e0c3      	b.n	8001348 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a73      	ldr	r2, [pc, #460]	@ (8001390 <PWM+0x750>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	f040 80bf 	bne.w	8001348 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 80011ca:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <PWM+0x754>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a71      	ldr	r2, [pc, #452]	@ (8001394 <PWM+0x754>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 80011d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <PWM+0x754>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a6e      	ldr	r2, [pc, #440]	@ (8001394 <PWM+0x754>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80011e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <PWM+0x754>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001394 <PWM+0x754>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0201 	bic.w	r2, r3, #1
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	f200 80a3 	bhi.w	8001348 <PWM+0x708>
 8001202:	a201      	add	r2, pc, #4	@ (adr r2, 8001208 <PWM+0x5c8>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001219 	.word	0x08001219
 800120c:	08001265 	.word	0x08001265
 8001210:	080012b1 	.word	0x080012b1
 8001214:	080012fd 	.word	0x080012fd
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001218:	4b5f      	ldr	r3, [pc, #380]	@ (8001398 <PWM+0x758>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4619      	mov	r1, r3
 8001224:	4858      	ldr	r0, [pc, #352]	@ (8001388 <PWM+0x748>)
 8001226:	f7ff fa27 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f043 0208 	orr.w	r2, r3, #8
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800124e:	7abb      	ldrb	r3, [r7, #10]
 8001250:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <PWM+0x74c>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	095a      	lsrs	r2, r3, #5
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001262:	e071      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <PWM+0x75c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4845      	ldr	r0, [pc, #276]	@ (8001388 <PWM+0x748>)
 8001272:	f7ff fa01 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	f043 0210 	orr.w	r2, r3, #16
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800129a:	7abb      	ldrb	r3, [r7, #10]
 800129c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a3a      	ldr	r2, [pc, #232]	@ (800138c <PWM+0x74c>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	095a      	lsrs	r2, r3, #5
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80012ae:	e04b      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012b0:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <PWM+0x760>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4832      	ldr	r0, [pc, #200]	@ (8001388 <PWM+0x748>)
 80012be:	f7ff f9db 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f043 0208 	orr.w	r2, r3, #8
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	4a27      	ldr	r2, [pc, #156]	@ (800138c <PWM+0x74c>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	095a      	lsrs	r2, r3, #5
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 80012fa:	e025      	b.n	8001348 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012fc:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <PWM+0x764>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	481f      	ldr	r0, [pc, #124]	@ (8001388 <PWM+0x748>)
 800130a:	f7ff f9b5 	bl	8000678 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001332:	7abb      	ldrb	r3, [r7, #10]
 8001334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4a14      	ldr	r2, [pc, #80]	@ (800138c <PWM+0x74c>)
 800133c:	fba2 2303 	umull	r2, r3, r2, r3
 8001340:	095a      	lsrs	r2, r3, #5
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001346:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 800135a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3760      	adds	r7, #96	@ 0x60
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	08001edc 	.word	0x08001edc
 8001388:	40010c00 	.word	0x40010c00
 800138c:	51eb851f 	.word	0x51eb851f
 8001390:	40000800 	.word	0x40000800
 8001394:	40021000 	.word	0x40021000
 8001398:	08001ee8 	.word	0x08001ee8
 800139c:	08001eec 	.word	0x08001eec
 80013a0:	08001ec8 	.word	0x08001ec8
 80013a4:	08001ecc 	.word	0x08001ecc

080013a8 <TIMER3_Stop>:
	TIMER2->CNT = 0;
	TIMER2->CR1 |= (1<<0);
}

void TIMER3_Stop()
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <TIMER3_Stop+0x18>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a03      	ldr	r2, [pc, #12]	@ (80013c0 <TIMER3_Stop+0x18>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40000400 	.word	0x40000400

080013c4 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <TIM2_IRQHandler+0x68>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d128      	bne.n	8001422 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80013e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ea:	f023 0302 	bic.w	r3, r3, #2
 80013ee:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <TIM2_IRQHandler+0x6c>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <TIM2_IRQHandler+0x6c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <TIM2_IRQHandler+0x6c>)
 8001402:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001404:	e00d      	b.n	8001422 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <TIM2_IRQHandler+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 800140c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <TIM2_IRQHandler+0x70>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200000a9 	.word	0x200000a9
 8001430:	200000aa 	.word	0x200000aa
 8001434:	200000a8 	.word	0x200000a8

08001438 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <TIM3_IRQHandler+0x5c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d122      	bne.n	800148a <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <TIM3_IRQHandler+0x60>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <TIM3_IRQHandler+0x60>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <TIM3_IRQHandler+0x60>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <TIM3_IRQHandler+0x60>)
 8001456:	f023 0302 	bic.w	r3, r3, #2
 800145a:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <TIM3_IRQHandler+0x64>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <TIM3_IRQHandler+0x64>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <TIM3_IRQHandler+0x64>)
 800146e:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001470:	e00b      	b.n	800148a <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <TIM3_IRQHandler+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <TIM3_IRQHandler+0x60>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <TIM3_IRQHandler+0x60>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <TIM3_IRQHandler+0x68>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200000a9 	.word	0x200000a9
 8001498:	40000400 	.word	0x40000400
 800149c:	200000aa 	.word	0x200000aa
 80014a0:	200000a8 	.word	0x200000a8

080014a4 <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <TIM4_IRQHandler+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d122      	bne.n	80014f6 <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014c2:	f023 0302 	bic.w	r3, r3, #2
 80014c6:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <TIM4_IRQHandler+0x64>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <TIM4_IRQHandler+0x64>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <TIM4_IRQHandler+0x64>)
 80014da:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 80014dc:	e00b      	b.n	80014f6 <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <TIM4_IRQHandler+0x5c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <TIM4_IRQHandler+0x60>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <TIM4_IRQHandler+0x68>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200000a9 	.word	0x200000a9
 8001504:	40000800 	.word	0x40000800
 8001508:	200000aa 	.word	0x200000aa
 800150c:	200000a8 	.word	0x200000a8

08001510 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <which_UART+0x38>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <which_UART+0x14>
		return 0;
 8001520:	2300      	movs	r3, #0
 8001522:	e00c      	b.n	800153e <which_UART+0x2e>
	else if(USARTx == USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <which_UART+0x3c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <which_UART+0x20>
		return 1;
 800152c:	2301      	movs	r3, #1
 800152e:	e006      	b.n	800153e <which_UART+0x2e>
	else if(USARTx == USART3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <which_UART+0x40>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <which_UART+0x2c>
		return 2;
 8001538:	2302      	movs	r3, #2
 800153a:	e000      	b.n	800153e <which_UART+0x2e>
	return 3;
 800153c:	2303      	movs	r3, #3
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40013800 	.word	0x40013800
 800154c:	40004400 	.word	0x40004400
 8001550:	40004800 	.word	0x40004800

08001554 <USART_Disable_IRQ>:



void USART_Disable_IRQ()
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(1<<5);
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <USART_Disable_IRQ+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4a03      	ldr	r2, [pc, #12]	@ (800156c <USART_Disable_IRQ+0x18>)
 800155e:	f023 0320 	bic.w	r3, r3, #32
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40004400 	.word	0x40004400

08001570 <USART_Enable_IRQ>:


void USART_Enable_IRQ()
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	USART2->CR1 |= (1<<5);
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <USART_Enable_IRQ+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a03      	ldr	r2, [pc, #12]	@ (8001588 <USART_Enable_IRQ+0x18>)
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40004400 	.word	0x40004400

0800158c <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 800158c:	b4b0      	push	{r4, r5, r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8001596:	4b5e      	ldr	r3, [pc, #376]	@ (8001710 <MCAL_UART_Init+0x184>)
 8001598:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a5d      	ldr	r2, [pc, #372]	@ (8001714 <MCAL_UART_Init+0x188>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10e      	bne.n	80015c0 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 80015a2:	4a5d      	ldr	r2, [pc, #372]	@ (8001718 <MCAL_UART_Init+0x18c>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4614      	mov	r4, r2
 80015a8:	461d      	mov	r5, r3
 80015aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 80015b2:	4b5a      	ldr	r3, [pc, #360]	@ (800171c <MCAL_UART_Init+0x190>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a59      	ldr	r2, [pc, #356]	@ (800171c <MCAL_UART_Init+0x190>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	e026      	b.n	800160e <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a57      	ldr	r2, [pc, #348]	@ (8001720 <MCAL_UART_Init+0x194>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d10f      	bne.n	80015e8 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <MCAL_UART_Init+0x18c>)
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	f103 0414 	add.w	r4, r3, #20
 80015d0:	4615      	mov	r5, r2
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 80015da:	4b50      	ldr	r3, [pc, #320]	@ (800171c <MCAL_UART_Init+0x190>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a4f      	ldr	r2, [pc, #316]	@ (800171c <MCAL_UART_Init+0x190>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	e012      	b.n	800160e <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001724 <MCAL_UART_Init+0x198>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10e      	bne.n	800160e <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 80015f0:	4b49      	ldr	r3, [pc, #292]	@ (8001718 <MCAL_UART_Init+0x18c>)
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80015f8:	4615      	mov	r5, r2
 80015fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8001602:	4b46      	ldr	r3, [pc, #280]	@ (800171c <MCAL_UART_Init+0x190>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a45      	ldr	r2, [pc, #276]	@ (800171c <MCAL_UART_Init+0x190>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	7a12      	ldrb	r2, [r2, #8]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	7a52      	ldrb	r2, [r2, #9]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	7a92      	ldrb	r2, [r2, #10]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	7ad2      	ldrb	r2, [r2, #11]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	0119      	lsls	r1, r3, #4
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009a      	lsls	r2, r3, #2
 8001678:	441a      	add	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fbb2 f2f3 	udiv	r2, r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001690:	2064      	movs	r0, #100	@ 0x64
 8001692:	fb00 f303 	mul.w	r3, r0, r3
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <MCAL_UART_Init+0x19c>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	095b      	lsrs	r3, r3, #5
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	7b1b      	ldrb	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d026      	beq.n	8001706 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	7b12      	ldrb	r2, [r2, #12]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MCAL_UART_Init+0x188>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d106      	bne.n	80016dc <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 80016ce:	4b17      	ldr	r3, [pc, #92]	@ (800172c <MCAL_UART_Init+0x1a0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	@ (800172c <MCAL_UART_Init+0x1a0>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 80016da:	e014      	b.n	8001706 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <MCAL_UART_Init+0x194>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d106      	bne.n	80016f2 <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MCAL_UART_Init+0x1a0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a10      	ldr	r2, [pc, #64]	@ (800172c <MCAL_UART_Init+0x1a0>)
 80016ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	e009      	b.n	8001706 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <MCAL_UART_Init+0x198>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d105      	bne.n	8001706 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MCAL_UART_Init+0x1a0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <MCAL_UART_Init+0x1a0>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bcb0      	pop	{r4, r5, r7}
 800170e:	4770      	bx	lr
 8001710:	02255100 	.word	0x02255100
 8001714:	40013800 	.word	0x40013800
 8001718:	200000ac 	.word	0x200000ac
 800171c:	40021000 	.word	0x40021000
 8001720:	40004400 	.word	0x40004400
 8001724:	40004800 	.word	0x40004800
 8001728:	51eb851f 	.word	0x51eb851f
 800172c:	e000e104 	.word	0xe000e104

08001730 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8001744:	bf00      	nop
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fedc 	bl	8001510 <which_UART>
 8001758:	4603      	mov	r3, r0
 800175a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]
	}
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8001784:	bf00      	nop
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f9      	beq.n	8001786 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7ff febc 	bl	8001510 <which_UART>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 800179c:	7dfa      	ldrb	r2, [r7, #23]
 800179e:	490f      	ldr	r1, [pc, #60]	@ (80017dc <MCAL_UART_ReceiveData+0x6c>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3309      	adds	r3, #9
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	801a      	strh	r2, [r3, #0]
		}


	}

}
 80017c0:	e007      	b.n	80017d2 <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	801a      	strh	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000ac 	.word	0x200000ac

080017e0 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001898 <MCAL_UART_GPIO_SetPins+0xb8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d118      	bne.n	8001822 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80017f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80017f6:	2306      	movs	r3, #6
 80017f8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4825      	ldr	r0, [pc, #148]	@ (800189c <MCAL_UART_GPIO_SetPins+0xbc>)
 8001806:	f7fe ff37 	bl	8000678 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800180e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001810:	2308      	movs	r3, #8
 8001812:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	4820      	ldr	r0, [pc, #128]	@ (800189c <MCAL_UART_GPIO_SetPins+0xbc>)
 800181c:	f7fe ff2c 	bl	8000678 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8001820:	e036      	b.n	8001890 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1e      	ldr	r2, [pc, #120]	@ (80018a0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d116      	bne.n	8001858 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800182a:	2304      	movs	r3, #4
 800182c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800182e:	2306      	movs	r3, #6
 8001830:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	4817      	ldr	r0, [pc, #92]	@ (800189c <MCAL_UART_GPIO_SetPins+0xbc>)
 800183e:	f7fe ff1b 	bl	8000678 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001842:	2308      	movs	r3, #8
 8001844:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001846:	2308      	movs	r3, #8
 8001848:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	4812      	ldr	r0, [pc, #72]	@ (800189c <MCAL_UART_GPIO_SetPins+0xbc>)
 8001852:	f7fe ff11 	bl	8000678 <MCAL_GPIO_Init>
}
 8001856:	e01b      	b.n	8001890 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MCAL_UART_GPIO_SetPins+0xc4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d117      	bne.n	8001890 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001864:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8001866:	2306      	movs	r3, #6
 8001868:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001876:	f7fe feff 	bl	8000678 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800187a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800187e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8001880:	2308      	movs	r3, #8
 8001882:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <MCAL_UART_GPIO_SetPins+0xc8>)
 800188c:	f7fe fef4 	bl	8000678 <MCAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40013800 	.word	0x40013800
 800189c:	40010800 	.word	0x40010800
 80018a0:	40004400 	.word	0x40004400
 80018a4:	40004800 	.word	0x40004800
 80018a8:	40010c00 	.word	0x40010c00

080018ac <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 80018b0:	4b02      	ldr	r3, [pc, #8]	@ (80018bc <USART1_IRQHandler+0x10>)
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	4798      	blx	r3
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200000ac 	.word	0x200000ac

080018c0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 80018c4:	4b02      	ldr	r3, [pc, #8]	@ (80018d0 <USART2_IRQHandler+0x10>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	4798      	blx	r3
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000ac 	.word	0x200000ac

080018d4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 80018d8:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <USART3_IRQHandler+0x10>)
 80018da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018dc:	4798      	blx	r3
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000ac 	.word	0x200000ac

080018e8 <UART_Receiver_Callback>:
Robot_State MyCurrentState = DUMMY;


// Test succedded ----------------------------------------------------
void UART_Receiver_Callback(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART2, &initialSeverResponse, Disable);
 80018ec:	2200      	movs	r2, #0
 80018ee:	4914      	ldr	r1, [pc, #80]	@ (8001940 <UART_Receiver_Callback+0x58>)
 80018f0:	4814      	ldr	r0, [pc, #80]	@ (8001944 <UART_Receiver_Callback+0x5c>)
 80018f2:	f7ff ff3d 	bl	8001770 <MCAL_UART_ReceiveData>
	if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST){
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <UART_Receiver_Callback+0x58>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b45      	cmp	r3, #69	@ 0x45
 80018fe:	d004      	beq.n	800190a <UART_Receiver_Callback+0x22>
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <UART_Receiver_Callback+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b4c      	cmp	r3, #76	@ 0x4c
 8001908:	d113      	bne.n	8001932 <UART_Receiver_Callback+0x4a>
		newMessageArrived = 1;
 800190a:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <UART_Receiver_Callback+0x60>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
		if(initialSeverResponse == PARKING_REQUEST)
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <UART_Receiver_Callback+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b45      	cmp	r3, #69	@ 0x45
 8001918:	d103      	bne.n	8001922 <UART_Receiver_Callback+0x3a>
			isAParking = 1;
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <UART_Receiver_Callback+0x64>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e007      	b.n	8001932 <UART_Receiver_Callback+0x4a>
		else if(initialSeverResponse == RETRIEVAL_REQUEST)
 8001922:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <UART_Receiver_Callback+0x58>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b4c      	cmp	r3, #76	@ 0x4c
 800192a:	d102      	bne.n	8001932 <UART_Receiver_Callback+0x4a>
			isRetrieving = 1;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <UART_Receiver_Callback+0x68>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
	}
	MCAL_UART_SendData(USART2, &Buffer, Enable);
 8001932:	2201      	movs	r2, #1
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <UART_Receiver_Callback+0x6c>)
 8001936:	4803      	ldr	r0, [pc, #12]	@ (8001944 <UART_Receiver_Callback+0x5c>)
 8001938:	f7ff fefa 	bl	8001730 <MCAL_UART_SendData>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000f7 	.word	0x200000f7
 8001944:	40004400 	.word	0x40004400
 8001948:	200000f6 	.word	0x200000f6
 800194c:	200000f2 	.word	0x200000f2
 8001950:	200000f1 	.word	0x200000f1
 8001954:	20000000 	.word	0x20000000

08001958 <main>:
uint8_t Done_Arriving_At_Slot_Backward = 0;


uint8_t DoneSending = 0;

int main(void) {
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b094      	sub	sp, #80	@ 0x50
 800195c:	af00      	add	r7, sp, #0



	Clock_Init();
 800195e:	f000 fa27 	bl	8001db0 <Clock_Init>

	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_115200;
 8001962:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 800196e:	2320      	movs	r3, #32
 8001970:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	UART_Cfg.P_IRQ_CallBack = UART_Receiver_Callback;
 8001974:	4ba5      	ldr	r3, [pc, #660]	@ (8001c0c <main+0x2b4>)
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
	UART_Cfg.Parity = UART_Parity_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	UART_Cfg.StopBits = UART_StopBits_1;
 8001984:	2300      	movs	r3, #0
 8001986:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 800198a:	230c      	movs	r3, #12
 800198c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	MCAL_UART_Init(USART2, &UART_Cfg);
 8001990:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001994:	4619      	mov	r1, r3
 8001996:	489e      	ldr	r0, [pc, #632]	@ (8001c10 <main+0x2b8>)
 8001998:	f7ff fdf8 	bl	800158c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART2);
 800199c:	489c      	ldr	r0, [pc, #624]	@ (8001c10 <main+0x2b8>)
 800199e:	f7ff ff1f 	bl	80017e0 <MCAL_UART_GPIO_SetPins>
//			.TriggerCase = EXTI_Trigger_RISING
//	};
//
//	MCAL_EXTI_GPIO_Init(&EXTI_IR1);

	Motor_Config_t DC_Motor1 =
 80019a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001c14 <main+0x2bc>)
 80019a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80019a8:	461d      	mov	r5, r3
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3, //A6
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 80019b2:	4b99      	ldr	r3, [pc, #612]	@ (8001c18 <main+0x2c0>)
 80019b4:	f107 0414 	add.w	r4, r7, #20
 80019b8:	461d      	mov	r5, r3
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3, // B1
			.PWM_Channel = TIMER_CH4
	};


	Motor_intialize(&DC_Motor1);
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fbd2 	bl	8000170 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fbcd 	bl	8000170 <Motor_intialize>

	GPIO_PinConfig_t RED_StepperDirPin = {
 80019d6:	4b91      	ldr	r3, [pc, #580]	@ (8001c1c <main+0x2c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
			.GPIO_PinNumber = GPIO_PIN_8,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t BLUE_StepperDirPin = {
 80019dc:	4b90      	ldr	r3, [pc, #576]	@ (8001c20 <main+0x2c8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
			.GPIO_PinNumber = GPIO_PIN_6,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t IR_LED = {
 80019e2:	4b90      	ldr	r3, [pc, #576]	@ (8001c24 <main+0x2cc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60bb      	str	r3, [r7, #8]
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOC, &IR_LED);
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	488e      	ldr	r0, [pc, #568]	@ (8001c28 <main+0x2d0>)
 80019f0:	f7fe fe42 	bl	8000678 <MCAL_GPIO_Init>


	GPIO_PinConfig_t LimSwithch_Back = {
 80019f4:	4b8d      	ldr	r3, [pc, #564]	@ (8001c2c <main+0x2d4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	607b      	str	r3, [r7, #4]
			.GPIO_PinNumber = GPIO_PIN_1,
			.GPIO_MODE = GPIO_MODE_INPUT_PULLUP,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOA, &LimSwithch_Back);
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	488c      	ldr	r0, [pc, #560]	@ (8001c30 <main+0x2d8>)
 8001a00:	f7fe fe3a 	bl	8000678 <MCAL_GPIO_Init>

	GPIO_PinConfig_t LimSwithch_Forward = {
 8001a04:	4b8b      	ldr	r3, [pc, #556]	@ (8001c34 <main+0x2dc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	603b      	str	r3, [r7, #0]
			.GPIO_PinNumber = GPIO_PIN_0,
			.GPIO_MODE = GPIO_MODE_INPUT_PULLUP,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOA, &LimSwithch_Forward);
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4888      	ldr	r0, [pc, #544]	@ (8001c30 <main+0x2d8>)
 8001a10:	f7fe fe32 	bl	8000678 <MCAL_GPIO_Init>

	Stepper_Init(&RED_StepperDirPin);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fc41 	bl	80002a0 <Stepper_Init>
	Stepper_Init(&BLUE_StepperDirPin);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fc3c 	bl	80002a0 <Stepper_Init>
		//		Delay_Timer1_ms(7000);




		if(newMessageArrived)
 8001a28:	4b83      	ldr	r3, [pc, #524]	@ (8001c38 <main+0x2e0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <main+0xee>
		{
			newMessageArrived = 0;
 8001a32:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <main+0x2e0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
			if(MyCurrentState == DUMMY)
 8001a38:	4b80      	ldr	r3, [pc, #512]	@ (8001c3c <main+0x2e4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d102      	bne.n	8001a46 <main+0xee>
			{
				MyCurrentState = Idle;
 8001a40:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <main+0x2e4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
			}
		}



		switch(MyCurrentState)
 8001a46:	4b7d      	ldr	r3, [pc, #500]	@ (8001c3c <main+0x2e4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d8ec      	bhi.n	8001a28 <main+0xd0>
 8001a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <main+0xfc>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a71 	.word	0x08001a71
 8001a58:	08001b05 	.word	0x08001b05
 8001a5c:	08001b33 	.word	0x08001b33
 8001a60:	08001ccd 	.word	0x08001ccd
 8001a64:	08001d01 	.word	0x08001d01
 8001a68:	08001d49 	.word	0x08001d49
 8001a6c:	08001a29 	.word	0x08001a29
		{
		case Idle:
		{
			if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST || PreviousReceived == PARKING_REQUEST || PreviousReceived == RETRIEVAL_REQUEST ){
 8001a70:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <main+0x2e8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b45      	cmp	r3, #69	@ 0x45
 8001a78:	d00d      	beq.n	8001a96 <main+0x13e>
 8001a7a:	4b71      	ldr	r3, [pc, #452]	@ (8001c40 <main+0x2e8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a82:	d008      	beq.n	8001a96 <main+0x13e>
 8001a84:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <main+0x2ec>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b45      	cmp	r3, #69	@ 0x45
 8001a8a:	d004      	beq.n	8001a96 <main+0x13e>
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c44 <main+0x2ec>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a92:	f040 816b 	bne.w	8001d6c <main+0x414>
				PreviousReceived = initialSeverResponse;
 8001a96:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <main+0x2e8>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b69      	ldr	r3, [pc, #420]	@ (8001c44 <main+0x2ec>)
 8001a9e:	701a      	strb	r2, [r3, #0]

				USART_Disable_IRQ();
 8001aa0:	f7ff fd58 	bl	8001554 <USART_Disable_IRQ>


				Done_Arriving_At_Slot_Forward = 0;
 8001aa4:	4b68      	ldr	r3, [pc, #416]	@ (8001c48 <main+0x2f0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
				Done_Arriving_At_Slot_Backward = 0;
 8001aaa:	4b68      	ldr	r3, [pc, #416]	@ (8001c4c <main+0x2f4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
				mySendChar = RECEIVED_OK;
 8001ab0:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <main+0x2f8>)
 8001ab2:	2244      	movs	r2, #68	@ 0x44
 8001ab4:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4965      	ldr	r1, [pc, #404]	@ (8001c50 <main+0x2f8>)
 8001aba:	4855      	ldr	r0, [pc, #340]	@ (8001c10 <main+0x2b8>)
 8001abc:	f7ff fe38 	bl	8001730 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4964      	ldr	r1, [pc, #400]	@ (8001c54 <main+0x2fc>)
 8001ac4:	4852      	ldr	r0, [pc, #328]	@ (8001c10 <main+0x2b8>)
 8001ac6:	f7ff fe53 	bl	8001770 <MCAL_UART_ReceiveData>


				RecievedFromServer = RecievedFromServer - '0';
 8001aca:	4b62      	ldr	r3, [pc, #392]	@ (8001c54 <main+0x2fc>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3b30      	subs	r3, #48	@ 0x30
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c54 <main+0x2fc>)
 8001ad6:	701a      	strb	r2, [r3, #0]

				if(RecievedFromServer >= 1 && RecievedFromServer <= 6){
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <main+0x2fc>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8144 	beq.w	8001d6c <main+0x414>
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <main+0x2fc>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	f200 813e 	bhi.w	8001d6c <main+0x414>
					SlotNumber = RecievedFromServer;
 8001af0:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <main+0x2fc>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <main+0x300>)
 8001afa:	601a      	str	r2, [r3, #0]
					MyCurrentState = Wait_Slot_Number;
 8001afc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c3c <main+0x2e4>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 8001b02:	e133      	b.n	8001d6c <main+0x414>


		case Wait_Slot_Number:
		{
			mySendChar = ACK_SLOT_NUMBER;
 8001b04:	4b52      	ldr	r3, [pc, #328]	@ (8001c50 <main+0x2f8>)
 8001b06:	2259      	movs	r2, #89	@ 0x59
 8001b08:	801a      	strh	r2, [r3, #0]

			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4950      	ldr	r1, [pc, #320]	@ (8001c50 <main+0x2f8>)
 8001b0e:	4840      	ldr	r0, [pc, #256]	@ (8001c10 <main+0x2b8>)
 8001b10:	f7ff fe0e 	bl	8001730 <MCAL_UART_SendData>



			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8001b14:	2201      	movs	r2, #1
 8001b16:	494f      	ldr	r1, [pc, #316]	@ (8001c54 <main+0x2fc>)
 8001b18:	483d      	ldr	r0, [pc, #244]	@ (8001c10 <main+0x2b8>)
 8001b1a:	f7ff fe29 	bl	8001770 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == FIRST_REKEB){
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c54 <main+0x2fc>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b46      	cmp	r3, #70	@ 0x46
 8001b26:	f040 8123 	bne.w	8001d70 <main+0x418>
				MyCurrentState = Wait_First_Rekeb;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <main+0x2e4>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	701a      	strb	r2, [r3, #0]
			}


		}
		break;
 8001b30:	e11e      	b.n	8001d70 <main+0x418>


		case Wait_First_Rekeb:
		{
			mySendChar = 0;
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <main+0x2f8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	801a      	strh	r2, [r3, #0]

			if(isAParking)
 8001b38:	4b48      	ldr	r3, [pc, #288]	@ (8001c5c <main+0x304>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <main+0x1f0>
			{
				mySendChar = START_PARKING;
 8001b42:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <main+0x2f8>)
 8001b44:	2242      	movs	r2, #66	@ 0x42
 8001b46:	801a      	strh	r2, [r3, #0]
			}
			if(isRetrieving)
 8001b48:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <main+0x308>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <main+0x200>
			{
				mySendChar = START_RETRIEVING;
 8001b52:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <main+0x2f8>)
 8001b54:	224d      	movs	r2, #77	@ 0x4d
 8001b56:	801a      	strh	r2, [r3, #0]
			}

			//				mySendChar = START_PARKING;
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	493d      	ldr	r1, [pc, #244]	@ (8001c50 <main+0x2f8>)
 8001b5c:	482c      	ldr	r0, [pc, #176]	@ (8001c10 <main+0x2b8>)
 8001b5e:	f7ff fde7 	bl	8001730 <MCAL_UART_SendData>


			// 3- Move forward -- distance (Main Track)

			while(!Done_Arriving_At_Slot_Forward)
 8001b62:	e033      	b.n	8001bcc <main+0x274>
			{

				if((SlotNumber - 1 ))
 8001b64:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <main+0x300>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d028      	beq.n	8001bbe <main+0x266>
				{
					switch (SlotNumber){
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <main+0x300>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d019      	beq.n	8001ba8 <main+0x250>
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d118      	bne.n	8001baa <main+0x252>
					case 2:
						/* Damn */
						break;
					case 3:

						Motor_Move_ForWard(&DC_Motor1, MOTORS_SPEED);
 8001b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7c:	2150      	movs	r1, #80	@ 0x50
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fb44 	bl	800020c <Motor_Move_ForWard>
						Motor_Move_ForWard(&DC_Motor2, MOTORS_SPEED);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2150      	movs	r1, #80	@ 0x50
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb3e 	bl	800020c <Motor_Move_ForWard>

						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8001b90:	e002      	b.n	8001b98 <main+0x240>
							Delay_Timer1_ms(10);
 8001b92:	200a      	movs	r0, #10
 8001b94:	f7ff f83c 	bl	8000c10 <Delay_Timer1_ms>
						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4825      	ldr	r0, [pc, #148]	@ (8001c30 <main+0x2d8>)
 8001b9c:	f7fe fdeb 	bl	8000776 <MCAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f5      	bne.n	8001b92 <main+0x23a>
						}
						break;
 8001ba6:	e000      	b.n	8001baa <main+0x252>
						break;
 8001ba8:	bf00      	nop
//					while(!LineFlag){
//						Delay_Timer1_ms(10);
//					}
//					LineFlag = 0;
//					Delay_Timer1_ms(DELAY_SLOT_TO_SLOT * (SlotNumber - 1));
					Motor_TurnOff(&DC_Motor1);
 8001baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb04 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe faff 	bl	80001bc <Motor_TurnOff>
				}

				Delay_Timer1_ms(DELAY_PROCESS_TO_PROCESS);
 8001bbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001bc2:	f7ff f825 	bl	8000c10 <Delay_Timer1_ms>


				//					Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_UP);  // B9 --> RED Step
				//					Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 1100, Stepper_UP);  // B7 --> BLUE Step

				Done_Arriving_At_Slot_Forward = 1;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <main+0x2f0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			while(!Done_Arriving_At_Slot_Forward)
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <main+0x2f0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0c7      	beq.n	8001b64 <main+0x20c>
			}


			mySendChar = ARRIVED_INFRONTOF_SLOT;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <main+0x2f8>)
 8001bd6:	2248      	movs	r2, #72	@ 0x48
 8001bd8:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	491c      	ldr	r1, [pc, #112]	@ (8001c50 <main+0x2f8>)
 8001bde:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <main+0x2b8>)
 8001be0:	f7ff fda6 	bl	8001730 <MCAL_UART_SendData>

			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8001be4:	2201      	movs	r2, #1
 8001be6:	491b      	ldr	r1, [pc, #108]	@ (8001c54 <main+0x2fc>)
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <main+0x2b8>)
 8001bea:	f7ff fdc1 	bl	8001770 <MCAL_UART_ReceiveData>
			if(RecievedFromServer == DONE_PARKING || RecievedFromServer == DONE_RETREIVING){
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <main+0x2fc>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bf6:	d005      	beq.n	8001c04 <main+0x2ac>
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <main+0x2fc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c00:	f040 80b8 	bne.w	8001d74 <main+0x41c>
				MyCurrentState = Wait_Done_Parking;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <main+0x2e4>)
 8001c06:	2203      	movs	r2, #3
 8001c08:	701a      	strb	r2, [r3, #0]

			}


		}
		break;
 8001c0a:	e0b3      	b.n	8001d74 <main+0x41c>
 8001c0c:	080018e9 	.word	0x080018e9
 8001c10:	40004400 	.word	0x40004400
 8001c14:	08001ef0 	.word	0x08001ef0
 8001c18:	08001f04 	.word	0x08001f04
 8001c1c:	08001f18 	.word	0x08001f18
 8001c20:	08001f1c 	.word	0x08001f1c
 8001c24:	08001f20 	.word	0x08001f20
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	08001f24 	.word	0x08001f24
 8001c30:	40010800 	.word	0x40010800
 8001c34:	08001f28 	.word	0x08001f28
 8001c38:	200000f6 	.word	0x200000f6
 8001c3c:	20000002 	.word	0x20000002
 8001c40:	200000f7 	.word	0x200000f7
 8001c44:	200000f0 	.word	0x200000f0
 8001c48:	200000f8 	.word	0x200000f8
 8001c4c:	200000f9 	.word	0x200000f9
 8001c50:	200000f4 	.word	0x200000f4
 8001c54:	200000e8 	.word	0x200000e8
 8001c58:	200000ec 	.word	0x200000ec
 8001c5c:	200000f2 	.word	0x200000f2
 8001c60:	200000f1 	.word	0x200000f1

		case Wait_Done_Parking:
		{
			while(!Done_Arriving_At_Slot_Backward)
			{
				if((SlotNumber - 1 ))
 8001c64:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <main+0x42c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d028      	beq.n	8001cbe <main+0x366>
				{
					switch (SlotNumber){
 8001c6c:	4b45      	ldr	r3, [pc, #276]	@ (8001d84 <main+0x42c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d019      	beq.n	8001ca8 <main+0x350>
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d118      	bne.n	8001caa <main+0x352>
					case 2:
						/* Damn */
						break;
					case 3:

						Motor_Move_BackWard(&DC_Motor1, MOTORS_SPEED);
 8001c78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c7c:	2150      	movs	r1, #80	@ 0x50
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fae9 	bl	8000256 <Motor_Move_BackWard>
						Motor_Move_BackWard(&DC_Motor2, MOTORS_SPEED);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2150      	movs	r1, #80	@ 0x50
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fae3 	bl	8000256 <Motor_Move_BackWard>

						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001c90:	e002      	b.n	8001c98 <main+0x340>
							Delay_Timer1_ms(10);
 8001c92:	200a      	movs	r0, #10
 8001c94:	f7fe ffbc 	bl	8000c10 <Delay_Timer1_ms>
						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001c98:	2101      	movs	r1, #1
 8001c9a:	483b      	ldr	r0, [pc, #236]	@ (8001d88 <main+0x430>)
 8001c9c:	f7fe fd6b 	bl	8000776 <MCAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f5      	bne.n	8001c92 <main+0x33a>
						}
						break;
 8001ca6:	e000      	b.n	8001caa <main+0x352>
						break;
 8001ca8:	bf00      	nop
//					while(!LineFlag){
//						Delay_Timer1_ms(10);
//					}
//					LineFlag = 0;
//					Delay_Timer1_ms(DELAY_SLOT_TO_SLOT * (SlotNumber - 1));
					Motor_TurnOff(&DC_Motor1);
 8001caa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fa84 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fa7f 	bl	80001bc <Motor_TurnOff>
				}

				Delay_Timer1_ms(DELAY_PROCESS_TO_PROCESS);
 8001cbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001cc2:	f7fe ffa5 	bl	8000c10 <Delay_Timer1_ms>
				Done_Arriving_At_Slot_Backward = 1;
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <main+0x434>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
			while(!Done_Arriving_At_Slot_Backward)
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8001d8c <main+0x434>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0c7      	beq.n	8001c64 <main+0x30c>
				//					Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_Down);  // B9 --> Step
				//					Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 1100, Stepper_Down);  // B7 --> Step
			}


			mySendChar = ARRIVED_AT_ENTRY;
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <main+0x438>)
 8001cd6:	2249      	movs	r2, #73	@ 0x49
 8001cd8:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	492c      	ldr	r1, [pc, #176]	@ (8001d90 <main+0x438>)
 8001cde:	482d      	ldr	r0, [pc, #180]	@ (8001d94 <main+0x43c>)
 8001ce0:	f7ff fd26 	bl	8001730 <MCAL_UART_SendData>

			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	492c      	ldr	r1, [pc, #176]	@ (8001d98 <main+0x440>)
 8001ce8:	482a      	ldr	r0, [pc, #168]	@ (8001d94 <main+0x43c>)
 8001cea:	f7ff fd41 	bl	8001770 <MCAL_UART_ReceiveData>


			if(RecievedFromServer == FIRST_HOME){
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <main+0x440>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b47      	cmp	r3, #71	@ 0x47
 8001cf6:	d13f      	bne.n	8001d78 <main+0x420>
				MyCurrentState = Done_First_Home;
 8001cf8:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <main+0x444>)
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	701a      	strb	r2, [r3, #0]
			}


		}
		break;
 8001cfe:	e03b      	b.n	8001d78 <main+0x420>


		case Done_First_Home:
		{
			if(isAParking)
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <main+0x448>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <main+0x3ba>
			{
				mySendChar = FINISH_PARKING;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <main+0x438>)
 8001d0c:	2243      	movs	r2, #67	@ 0x43
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	e007      	b.n	8001d22 <main+0x3ca>
			}else if(isRetrieving)
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <main+0x44c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <main+0x3ca>
			{
				mySendChar = FINISH_RETRIEVING;
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <main+0x438>)
 8001d1e:	224e      	movs	r2, #78	@ 0x4e
 8001d20:	801a      	strh	r2, [r3, #0]
			}

			//				mySendChar = FINISH_PARKING;
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8001d22:	2201      	movs	r2, #1
 8001d24:	491a      	ldr	r1, [pc, #104]	@ (8001d90 <main+0x438>)
 8001d26:	481b      	ldr	r0, [pc, #108]	@ (8001d94 <main+0x43c>)
 8001d28:	f7ff fd02 	bl	8001730 <MCAL_UART_SendData>


			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	491a      	ldr	r1, [pc, #104]	@ (8001d98 <main+0x440>)
 8001d30:	4818      	ldr	r0, [pc, #96]	@ (8001d94 <main+0x43c>)
 8001d32:	f7ff fd1d 	bl	8001770 <MCAL_UART_ReceiveData>



			if(RecievedFromServer == IM_DONE)
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <main+0x440>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b4b      	cmp	r3, #75	@ 0x4b
 8001d3e:	d11d      	bne.n	8001d7c <main+0x424>
			{
				MyCurrentState = Wait_First_Done;
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <main+0x444>)
 8001d42:	2205      	movs	r2, #5
 8001d44:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 8001d46:	e019      	b.n	8001d7c <main+0x424>



		case Wait_First_Done:
		{
			isAParking = 0;
 8001d48:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <main+0x448>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
			isRetrieving = 0;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <main+0x44c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			MyCurrentState = Idle;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <main+0x444>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
			initialSeverResponse = 0;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <main+0x450>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
			PreviousReceived = 0;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <main+0x454>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

			USART_Enable_IRQ();
 8001d66:	f7ff fc03 	bl	8001570 <USART_Enable_IRQ>
		}
		break;
 8001d6a:	e009      	b.n	8001d80 <main+0x428>
		break;
 8001d6c:	bf00      	nop
 8001d6e:	e65b      	b.n	8001a28 <main+0xd0>
		break;
 8001d70:	bf00      	nop
 8001d72:	e659      	b.n	8001a28 <main+0xd0>
		break;
 8001d74:	bf00      	nop
 8001d76:	e657      	b.n	8001a28 <main+0xd0>
		break;
 8001d78:	bf00      	nop
 8001d7a:	e655      	b.n	8001a28 <main+0xd0>
		break;
 8001d7c:	bf00      	nop
 8001d7e:	e653      	b.n	8001a28 <main+0xd0>
		if(newMessageArrived)
 8001d80:	e652      	b.n	8001a28 <main+0xd0>
 8001d82:	bf00      	nop
 8001d84:	200000ec 	.word	0x200000ec
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	200000f9 	.word	0x200000f9
 8001d90:	200000f4 	.word	0x200000f4
 8001d94:	40004400 	.word	0x40004400
 8001d98:	200000e8 	.word	0x200000e8
 8001d9c:	20000002 	.word	0x20000002
 8001da0:	200000f2 	.word	0x200000f2
 8001da4:	200000f1 	.word	0x200000f1
 8001da8:	200000f7 	.word	0x200000f7
 8001dac:	200000f0 	.word	0x200000f0

08001db0 <Clock_Init>:
}



void Clock_Init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 8001db4:	2148      	movs	r1, #72	@ 0x48
 8001db6:	2001      	movs	r0, #1
 8001db8:	f7fe fe06 	bl	80009c8 <MCAL_RCC_CLK_Init>

	RCC_GPIOC_CLK_EN();
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <Clock_Init+0x60>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <Clock_Init+0x60>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <Clock_Init+0x60>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <Clock_Init+0x60>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd2:	61d3      	str	r3, [r2, #28]

	RCC_GPIOB_CLK_EN();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <Clock_Init+0x60>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <Clock_Init+0x60>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <Clock_Init+0x60>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <Clock_Init+0x60>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <Clock_Init+0x60>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <Clock_Init+0x60>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6193      	str	r3, [r2, #24]
	RCC_I2C1_CLK_EN();
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <Clock_Init+0x60>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <Clock_Init+0x60>)
 8001dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e02:	61d3      	str	r3, [r2, #28]

	TIMER1_Init(RCC_CLK_36M);
 8001e04:	2024      	movs	r0, #36	@ 0x24
 8001e06:	f7fe fec3 	bl	8000b90 <TIMER1_Init>

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000

08001e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e14:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopForever+0xe>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopForever+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e42:	f000 f811 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7ff fd87 	bl	8001958 <main>

08001e4a <LoopForever>:

LoopForever:
  b LoopForever
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
  ldr   r0, =_estack
 8001e4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001e58:	08001f34 	.word	0x08001f34
  ldr r2, =_sbss
 8001e5c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001e60:	200000fc 	.word	0x200000fc

08001e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC1_2_IRQHandler>
	...

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	4d0c      	ldr	r5, [pc, #48]	@ (8001ea0 <__libc_init_array+0x38>)
 8001e6e:	4c0d      	ldr	r4, [pc, #52]	@ (8001ea4 <__libc_init_array+0x3c>)
 8001e70:	1b64      	subs	r4, r4, r5
 8001e72:	10a4      	asrs	r4, r4, #2
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	f000 f81a 	bl	8001eb0 <_init>
 8001e7c:	2600      	movs	r6, #0
 8001e7e:	4d0a      	ldr	r5, [pc, #40]	@ (8001ea8 <__libc_init_array+0x40>)
 8001e80:	4c0a      	ldr	r4, [pc, #40]	@ (8001eac <__libc_init_array+0x44>)
 8001e82:	1b64      	subs	r4, r4, r5
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	42a6      	cmp	r6, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e90:	4798      	blx	r3
 8001e92:	3601      	adds	r6, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9a:	4798      	blx	r3
 8001e9c:	3601      	adds	r6, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001f2c 	.word	0x08001f2c
 8001ea4:	08001f2c 	.word	0x08001f2c
 8001ea8:	08001f2c 	.word	0x08001f2c
 8001eac:	08001f30 	.word	0x08001f30

08001eb0 <_init>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr

08001ebc <_fini>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	bf00      	nop
 8001ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec2:	bc08      	pop	{r3}
 8001ec4:	469e      	mov	lr, r3
 8001ec6:	4770      	bx	lr
