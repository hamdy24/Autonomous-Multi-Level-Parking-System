
Elev_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800291c  0800291c  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  0800291c  0800291c  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800291c  0800291c  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800291c  0800291c  0000391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002920  08002920  00003920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002924  00004000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000004  08002928  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002928  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003793  00000000  00000000  0000402d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff3  00000000  00000000  000077c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  000087b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c3  00000000  00000000  00008b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000348a  00000000  00000000  00008e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000583d  00000000  00000000  0000c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ca71  00000000  00000000  00011b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001e583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  0001e5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0001f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080028a0 	.word	0x080028a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080028a0 	.word	0x080028a0

08000170 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 800017c:	81bb      	strh	r3, [r7, #12]
 800017e:	2304      	movs	r3, #4
 8000180:	73bb      	strb	r3, [r7, #14]
 8000182:	2302      	movs	r3, #2
 8000184:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f107 020c 	add.w	r2, r7, #12
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fabd 	bl	8000710 <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 800019a:	813b      	strh	r3, [r7, #8]
 800019c:	2304      	movs	r3, #4
 800019e:	72bb      	strb	r3, [r7, #10]
 80001a0:	2302      	movs	r3, #2
 80001a2:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	f107 0208 	add.w	r2, r7, #8
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 faae 	bl	8000710 <MCAL_GPIO_Init>

}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6858      	ldr	r0, [r3, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f000 fb34 	bl	800083c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	6898      	ldr	r0, [r3, #8]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	885b      	ldrh	r3, [r3, #2]
 80001dc:	2200      	movs	r2, #0
 80001de:	4619      	mov	r1, r3
 80001e0:	f000 fb2c 	bl	800083c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2102      	movs	r1, #2
 80001e8:	4806      	ldr	r0, [pc, #24]	@ (8000204 <Motor_TurnOff+0x48>)
 80001ea:	f000 fb27 	bl	800083c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_LOW);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2140      	movs	r1, #64	@ 0x40
 80001f2:	4805      	ldr	r0, [pc, #20]	@ (8000208 <Motor_TurnOff+0x4c>)
 80001f4:	f000 fb22 	bl	800083c <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 80001f8:	f001 f922 	bl	8001440 <TIMER3_Stop>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	40010800 	.word	0x40010800

0800020c <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af02      	add	r7, sp, #8
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	68d8      	ldr	r0, [r3, #12]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	7c19      	ldrb	r1, [r3, #16]
 8000220:	78fa      	ldrb	r2, [r7, #3]
 8000222:	2324      	movs	r3, #36	@ 0x24
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022a:	f000 fd55 	bl	8000cd8 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6858      	ldr	r0, [r3, #4]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	2201      	movs	r2, #1
 8000238:	4619      	mov	r1, r3
 800023a:	f000 faff 	bl	800083c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6898      	ldr	r0, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	885b      	ldrh	r3, [r3, #2]
 8000246:	2200      	movs	r2, #0
 8000248:	4619      	mov	r1, r3
 800024a:	f000 faf7 	bl	800083c <MCAL_GPIO_WritePin>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <Motor_Move_BackWard>:





void Motor_Move_BackWard(Motor_Config_t *Motor, uint8_t speed){
 8000256:	b580      	push	{r7, lr}
 8000258:	b084      	sub	sp, #16
 800025a:	af02      	add	r7, sp, #8
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	460b      	mov	r3, r1
 8000260:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	68d8      	ldr	r0, [r3, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7c19      	ldrb	r1, [r3, #16]
 800026a:	78fa      	ldrb	r2, [r7, #3]
 800026c:	2324      	movs	r3, #36	@ 0x24
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000274:	f000 fd30 	bl	8000cd8 <PWM>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_LOW);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6858      	ldr	r0, [r3, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	4619      	mov	r1, r3
 8000284:	f000 fada 	bl	800083c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_HIGH);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	885b      	ldrh	r3, [r3, #2]
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	f000 fad2 	bl	800083c <MCAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 80002ac:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 80002b2:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 80002b8:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	881a      	ldrh	r2, [r3, #0]
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <Stepper_Init+0x40>)
 80002c0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	4806      	ldr	r0, [pc, #24]	@ (80002e4 <Stepper_Init+0x44>)
 80002ca:	f000 fa21 	bl	8000710 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <Stepper_Init+0x44>)
 80002d4:	f000 fab2 	bl	800083c <MCAL_GPIO_WritePin>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000020 	.word	0x20000020
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	4608      	mov	r0, r1
 80002f2:	4611      	mov	r1, r2
 80002f4:	461a      	mov	r2, r3
 80002f6:	4603      	mov	r3, r0
 80002f8:	70fb      	strb	r3, [r7, #3]
 80002fa:	460b      	mov	r3, r1
 80002fc:	803b      	strh	r3, [r7, #0]
 80002fe:	4613      	mov	r3, r2
 8000300:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 8000302:	7d3b      	ldrb	r3, [r7, #20]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <Stepper_Move_Steps+0x26>
 8000308:	2b01      	cmp	r3, #1
 800030a:	d013      	beq.n	8000334 <Stepper_Move_Steps+0x4c>
 800030c:	e025      	b.n	800035a <Stepper_Move_Steps+0x72>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 800030e:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <Stepper_Move_Steps+0x90>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	4819      	ldr	r0, [pc, #100]	@ (800037c <Stepper_Move_Steps+0x94>)
 8000318:	f000 fa90 	bl	800083c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	@ 0x40
 8000320:	4816      	ldr	r0, [pc, #88]	@ (800037c <Stepper_Move_Steps+0x94>)
 8000322:	f000 fa8b 	bl	800083c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_LOW);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800032c:	4813      	ldr	r0, [pc, #76]	@ (800037c <Stepper_Move_Steps+0x94>)
 800032e:	f000 fa85 	bl	800083c <MCAL_GPIO_WritePin>
		break;
 8000332:	e012      	b.n	800035a <Stepper_Move_Steps+0x72>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 8000334:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <Stepper_Move_Steps+0x90>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	480f      	ldr	r0, [pc, #60]	@ (800037c <Stepper_Move_Steps+0x94>)
 800033e:	f000 fa7d 	bl	800083c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_HIGH);
 8000342:	2201      	movs	r2, #1
 8000344:	2140      	movs	r1, #64	@ 0x40
 8000346:	480d      	ldr	r0, [pc, #52]	@ (800037c <Stepper_Move_Steps+0x94>)
 8000348:	f000 fa78 	bl	800083c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_HIGH);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000352:	480a      	ldr	r0, [pc, #40]	@ (800037c <Stepper_Move_Steps+0x94>)
 8000354:	f000 fa72 	bl	800083c <MCAL_GPIO_WritePin>

		break;
 8000358:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 800035a:	78b8      	ldrb	r0, [r7, #2]
 800035c:	883a      	ldrh	r2, [r7, #0]
 800035e:	78f9      	ldrb	r1, [r7, #3]
 8000360:	2324      	movs	r3, #36	@ 0x24
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	693b      	ldr	r3, [r7, #16]
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	4603      	mov	r3, r0
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f001 f876 	bl	800145c <PWM_Move_Steps>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000020 	.word	0x20000020
 800037c:	40010c00 	.word	0x40010c00

08000380 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <EXTI0_IRQHandler+0x1c>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <EXTI0_IRQHandler+0x1c>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000390:	4b03      	ldr	r3, [pc, #12]	@ (80003a0 <EXTI0_IRQHandler+0x20>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4798      	blx	r3

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010400 	.word	0x40010400
 80003a0:	20000024 	.word	0x20000024

080003a4 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <EXTI1_IRQHandler+0x1c>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <EXTI1_IRQHandler+0x1c>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80003b4:	4b03      	ldr	r3, [pc, #12]	@ (80003c4 <EXTI1_IRQHandler+0x20>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4798      	blx	r3
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40010400 	.word	0x40010400
 80003c4:	20000024 	.word	0x20000024

080003c8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <EXTI2_IRQHandler+0x1c>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <EXTI2_IRQHandler+0x1c>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80003d8:	4b03      	ldr	r3, [pc, #12]	@ (80003e8 <EXTI2_IRQHandler+0x20>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4798      	blx	r3
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010400 	.word	0x40010400
 80003e8:	20000024 	.word	0x20000024

080003ec <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <EXTI3_IRQHandler+0x1c>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <EXTI3_IRQHandler+0x1c>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <EXTI3_IRQHandler+0x20>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4798      	blx	r3
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010400 	.word	0x40010400
 800040c:	20000024 	.word	0x20000024

08000410 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8000414:	4b05      	ldr	r3, [pc, #20]	@ (800042c <EXTI4_IRQHandler+0x1c>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <EXTI4_IRQHandler+0x1c>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000420:	4b03      	ldr	r3, [pc, #12]	@ (8000430 <EXTI4_IRQHandler+0x20>)
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	4798      	blx	r3
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010400 	.word	0x40010400
 8000430:	20000024 	.word	0x20000024

08000434 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000438:	4b26      	ldr	r3, [pc, #152]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f003 0320 	and.w	r3, r3, #32
 8000440:	2b00      	cmp	r3, #0
 8000442:	d008      	beq.n	8000456 <EXTI9_5_IRQHandler+0x22>
 8000444:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a22      	ldr	r2, [pc, #136]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6153      	str	r3, [r2, #20]
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <EXTI9_5_IRQHandler+0xa4>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800045e:	2b00      	cmp	r3, #0
 8000460:	d008      	beq.n	8000474 <EXTI9_5_IRQHandler+0x40>
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <EXTI9_5_IRQHandler+0xa4>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000474:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800047c:	2b00      	cmp	r3, #0
 800047e:	d008      	beq.n	8000492 <EXTI9_5_IRQHandler+0x5e>
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800048a:	6153      	str	r3, [r2, #20]
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <EXTI9_5_IRQHandler+0xa4>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800049a:	2b00      	cmp	r3, #0
 800049c:	d008      	beq.n	80004b0 <EXTI9_5_IRQHandler+0x7c>
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a0c      	ldr	r2, [pc, #48]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 80004a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <EXTI9_5_IRQHandler+0xa4>)
 80004ac:	6a1b      	ldr	r3, [r3, #32]
 80004ae:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d008      	beq.n	80004ce <EXTI9_5_IRQHandler+0x9a>
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <EXTI9_5_IRQHandler+0xa0>)
 80004c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c6:	6153      	str	r3, [r2, #20]
 80004c8:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <EXTI9_5_IRQHandler+0xa4>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4798      	blx	r3
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010400 	.word	0x40010400
 80004d8:	20000024 	.word	0x20000024

080004dc <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 80004e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI15_10_IRQHandler+0x22>
 80004ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a29      	ldr	r2, [pc, #164]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b28      	ldr	r3, [pc, #160]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 80004fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004fc:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <EXTI15_10_IRQHandler+0x40>
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 800051c:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d008      	beq.n	800053a <EXTI15_10_IRQHandler+0x5e>
 8000528:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a1a      	ldr	r2, [pc, #104]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800052e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b19      	ldr	r3, [pc, #100]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000538:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <EXTI15_10_IRQHandler+0x7c>
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800054c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 8000554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000556:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <EXTI15_10_IRQHandler+0x9a>
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6153      	str	r3, [r2, #20]
 8000570:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 8000572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000574:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d008      	beq.n	8000594 <EXTI15_10_IRQHandler+0xb8>
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <EXTI15_10_IRQHandler+0xbc>)
 8000588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b03      	ldr	r3, [pc, #12]	@ (800059c <EXTI15_10_IRQHandler+0xc0>)
 8000590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000592:	4798      	blx	r3
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40010400 	.word	0x40010400
 800059c:	20000024 	.word	0x20000024

080005a0 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005b0:	f000 80a5 	beq.w	80006fe <Get_CRLH_Position+0x15e>
 80005b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005b8:	f300 80a3 	bgt.w	8000702 <Get_CRLH_Position+0x162>
 80005bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80005c0:	f000 809b 	beq.w	80006fa <Get_CRLH_Position+0x15a>
 80005c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80005c8:	f300 809b 	bgt.w	8000702 <Get_CRLH_Position+0x162>
 80005cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005d0:	f000 8091 	beq.w	80006f6 <Get_CRLH_Position+0x156>
 80005d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005d8:	f300 8093 	bgt.w	8000702 <Get_CRLH_Position+0x162>
 80005dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005e0:	f000 8087 	beq.w	80006f2 <Get_CRLH_Position+0x152>
 80005e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005e8:	f300 808b 	bgt.w	8000702 <Get_CRLH_Position+0x162>
 80005ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005f0:	d07d      	beq.n	80006ee <Get_CRLH_Position+0x14e>
 80005f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005f6:	f300 8084 	bgt.w	8000702 <Get_CRLH_Position+0x162>
 80005fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005fe:	d074      	beq.n	80006ea <Get_CRLH_Position+0x14a>
 8000600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000604:	dc7d      	bgt.n	8000702 <Get_CRLH_Position+0x162>
 8000606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800060a:	d06c      	beq.n	80006e6 <Get_CRLH_Position+0x146>
 800060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000610:	dc77      	bgt.n	8000702 <Get_CRLH_Position+0x162>
 8000612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000616:	d064      	beq.n	80006e2 <Get_CRLH_Position+0x142>
 8000618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800061c:	dc71      	bgt.n	8000702 <Get_CRLH_Position+0x162>
 800061e:	2b80      	cmp	r3, #128	@ 0x80
 8000620:	d05d      	beq.n	80006de <Get_CRLH_Position+0x13e>
 8000622:	2b80      	cmp	r3, #128	@ 0x80
 8000624:	dc6d      	bgt.n	8000702 <Get_CRLH_Position+0x162>
 8000626:	2b20      	cmp	r3, #32
 8000628:	dc48      	bgt.n	80006bc <Get_CRLH_Position+0x11c>
 800062a:	2b00      	cmp	r3, #0
 800062c:	dd69      	ble.n	8000702 <Get_CRLH_Position+0x162>
 800062e:	3b01      	subs	r3, #1
 8000630:	2b1f      	cmp	r3, #31
 8000632:	d866      	bhi.n	8000702 <Get_CRLH_Position+0x162>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <Get_CRLH_Position+0x9c>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	080006c3 	.word	0x080006c3
 8000640:	080006c7 	.word	0x080006c7
 8000644:	08000703 	.word	0x08000703
 8000648:	080006cb 	.word	0x080006cb
 800064c:	08000703 	.word	0x08000703
 8000650:	08000703 	.word	0x08000703
 8000654:	08000703 	.word	0x08000703
 8000658:	080006cf 	.word	0x080006cf
 800065c:	08000703 	.word	0x08000703
 8000660:	08000703 	.word	0x08000703
 8000664:	08000703 	.word	0x08000703
 8000668:	08000703 	.word	0x08000703
 800066c:	08000703 	.word	0x08000703
 8000670:	08000703 	.word	0x08000703
 8000674:	08000703 	.word	0x08000703
 8000678:	080006d3 	.word	0x080006d3
 800067c:	08000703 	.word	0x08000703
 8000680:	08000703 	.word	0x08000703
 8000684:	08000703 	.word	0x08000703
 8000688:	08000703 	.word	0x08000703
 800068c:	08000703 	.word	0x08000703
 8000690:	08000703 	.word	0x08000703
 8000694:	08000703 	.word	0x08000703
 8000698:	08000703 	.word	0x08000703
 800069c:	08000703 	.word	0x08000703
 80006a0:	08000703 	.word	0x08000703
 80006a4:	08000703 	.word	0x08000703
 80006a8:	08000703 	.word	0x08000703
 80006ac:	08000703 	.word	0x08000703
 80006b0:	08000703 	.word	0x08000703
 80006b4:	08000703 	.word	0x08000703
 80006b8:	080006d7 	.word	0x080006d7
 80006bc:	2b40      	cmp	r3, #64	@ 0x40
 80006be:	d00c      	beq.n	80006da <Get_CRLH_Position+0x13a>
 80006c0:	e01f      	b.n	8000702 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e01e      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	e01c      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80006ca:	2308      	movs	r3, #8
 80006cc:	e01a      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80006ce:	230c      	movs	r3, #12
 80006d0:	e018      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80006d2:	2310      	movs	r3, #16
 80006d4:	e016      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80006d6:	2314      	movs	r3, #20
 80006d8:	e014      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80006da:	2318      	movs	r3, #24
 80006dc:	e012      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80006de:	231c      	movs	r3, #28
 80006e0:	e010      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e00e      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	e00c      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80006ea:	2308      	movs	r3, #8
 80006ec:	e00a      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80006ee:	230c      	movs	r3, #12
 80006f0:	e008      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80006f2:	2310      	movs	r3, #16
 80006f4:	e006      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80006f6:	2314      	movs	r3, #20
 80006f8:	e004      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80006fa:	2318      	movs	r3, #24
 80006fc:	e002      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80006fe:	231c      	movs	r3, #28
 8000700:	e000      	b.n	8000704 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2bff      	cmp	r3, #255	@ 0xff
 8000728:	d801      	bhi.n	800072e <MCAL_GPIO_Init+0x1e>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	e001      	b.n	8000732 <MCAL_GPIO_Init+0x22>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3304      	adds	r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff31 	bl	80005a0 <Get_CRLH_Position>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	230f      	movs	r3, #15
 8000744:	4093      	lsls	r3, r2
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	401a      	ands	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	2b07      	cmp	r3, #7
 8000758:	d00b      	beq.n	8000772 <MCAL_GPIO_Init+0x62>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	2b06      	cmp	r3, #6
 8000760:	d007      	beq.n	8000772 <MCAL_GPIO_Init+0x62>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d003      	beq.n	8000772 <MCAL_GPIO_Init+0x62>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d10e      	bne.n	8000790 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	3b04      	subs	r3, #4
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	78db      	ldrb	r3, [r3, #3]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e02c      	b.n	80007ea <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d003      	beq.n	80007a0 <MCAL_GPIO_Init+0x90>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	789b      	ldrb	r3, [r3, #2]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d107      	bne.n	80007b0 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	789b      	ldrb	r3, [r3, #2]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e01c      	b.n	80007ea <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	789b      	ldrb	r3, [r3, #2]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d102      	bne.n	80007be <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 80007b8:	2304      	movs	r3, #4
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e015      	b.n	80007ea <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 80007be:	2308      	movs	r3, #8
 80007c0:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	789b      	ldrb	r3, [r3, #2]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d107      	bne.n	80007da <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	e007      	b.n	80007ea <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	8812      	ldrh	r2, [r2, #0]
 80007e2:	43d2      	mvns	r2, r2
 80007e4:	401a      	ands	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007ea:	7bfc      	ldrb	r4, [r7, #15]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fed5 	bl	80005a0 <Get_CRLH_Position>
 80007f6:	4603      	mov	r3, r0
 80007f8:	fa04 f203 	lsl.w	r2, r4, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	431a      	orrs	r2, r3
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	601a      	str	r2, [r3, #0]


}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bd90      	pop	{r4, r7, pc}

0800080e <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689a      	ldr	r2, [r3, #8]
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	4013      	ands	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	e001      	b.n	8000830 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	807b      	strh	r3, [r7, #2]
 8000848:	4613      	mov	r3, r2
 800084a:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 800084c:	787b      	ldrb	r3, [r7, #1]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000852:	887a      	ldrh	r2, [r7, #2]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000858:	e002      	b.n	8000860 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	615a      	str	r2, [r3, #20]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8000876:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <I2C1_EV_IRQHandler+0xec>)
 8000878:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000882:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800088c:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00a      	beq.n	80008b4 <I2C1_EV_IRQHandler+0x48>
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d007      	beq.n	80008b4 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80008ac:	2100      	movs	r1, #0
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f000 f866 	bl	8000980 <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d014      	beq.n	80008ee <I2C1_EV_IRQHandler+0x82>
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d011      	beq.n	80008ee <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10b      	bne.n	80008ee <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80008e6:	2102      	movs	r1, #2
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f000 f849 	bl	8000980 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00f      	beq.n	800091e <I2C1_EV_IRQHandler+0xb2>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00c      	beq.n	800091e <I2C1_EV_IRQHandler+0xb2>
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d009      	beq.n	800091e <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000916:	2103      	movs	r1, #3
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f000 f831 	bl	8000980 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000926:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00f      	beq.n	800094e <I2C1_EV_IRQHandler+0xe2>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <I2C1_EV_IRQHandler+0xe2>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d009      	beq.n	800094e <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000946:	2104      	movs	r1, #4
 8000948:	6978      	ldr	r0, [r7, #20]
 800094a:	f000 f819 	bl	8000980 <Slave_States>

		}
	}

}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40005400 	.word	0x40005400

0800095c <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a32      	ldr	r2, [pc, #200]	@ (8000a58 <Slave_States+0xd8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]

	switch (state)
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d856      	bhi.n	8000a50 <Slave_States+0xd0>
 80009a2:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <Slave_States+0x28>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	080009c3 	.word	0x080009c3
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	080009e7 	.word	0x080009e7
 80009b4:	080009ff 	.word	0x080009ff
 80009b8:	08000a23 	.word	0x08000a23
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80009c0:	e046      	b.n	8000a50 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d03b      	beq.n	8000a46 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	4922      	ldr	r1, [pc, #136]	@ (8000a5c <Slave_States+0xdc>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4413      	add	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	3320      	adds	r3, #32
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2000      	movs	r0, #0
 80009e2:	4798      	blx	r3
		}

		break ;
 80009e4:	e02f      	b.n	8000a46 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80009e6:	7bfa      	ldrb	r2, [r7, #15]
 80009e8:	491c      	ldr	r1, [pc, #112]	@ (8000a5c <Slave_States+0xdc>)
 80009ea:	4613      	mov	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4413      	add	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	440b      	add	r3, r1
 80009f4:	3320      	adds	r3, #32
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2002      	movs	r0, #2
 80009fa:	4798      	blx	r3

		break ;
 80009fc:	e028      	b.n	8000a50 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01f      	beq.n	8000a4a <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	4913      	ldr	r1, [pc, #76]	@ (8000a5c <Slave_States+0xdc>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4413      	add	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	440b      	add	r3, r1
 8000a18:	3320      	adds	r3, #32
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	4798      	blx	r3
		}

		break ;
 8000a20:	e013      	b.n	8000a4a <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10f      	bne.n	8000a4e <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	490a      	ldr	r1, [pc, #40]	@ (8000a5c <Slave_States+0xdc>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4413      	add	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3320      	adds	r3, #32
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2004      	movs	r0, #4
 8000a42:	4798      	blx	r3
		}

		break ;
 8000a44:	e003      	b.n	8000a4e <Slave_States+0xce>
		break ;
 8000a46:	bf00      	nop
 8000a48:	e002      	b.n	8000a50 <Slave_States+0xd0>
		break ;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <Slave_States+0xd0>
		break ;
 8000a4e:	bf00      	nop
	}
	}

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	20000060 	.word	0x20000060

08000a60 <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d049      	beq.n	8000b0e <MCAL_RCC_CLK_Init+0xae>
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	f300 80cc 	bgt.w	8000c18 <MCAL_RCC_CLK_Init+0x1b8>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80c8 	beq.w	8000c16 <MCAL_RCC_CLK_Init+0x1b6>
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	f040 80c6 	bne.w	8000c18 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8000a8c:	4b65      	ldr	r3, [pc, #404]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a64      	ldr	r2, [pc, #400]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a96:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8000a98:	4b62      	ldr	r3, [pc, #392]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a61      	ldr	r2, [pc, #388]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aa2:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8000aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aae:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2b48      	cmp	r3, #72	@ 0x48
 8000ab4:	d106      	bne.n	8000ac4 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a5a      	ldr	r2, [pc, #360]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000abc:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000ac0:	6053      	str	r3, [r2, #4]
			break;
 8000ac2:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000ac4:	4b57      	ldr	r3, [pc, #348]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a56      	ldr	r2, [pc, #344]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ace:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 8000ad0:	4b54      	ldr	r3, [pc, #336]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a53      	ldr	r2, [pc, #332]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 8000adc:	4b51      	ldr	r3, [pc, #324]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a50      	ldr	r2, [pc, #320]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 8000ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a4d      	ldr	r2, [pc, #308]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af2:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8000af4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a4a      	ldr	r2, [pc, #296]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000afa:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000afe:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 8000b00:	4b48      	ldr	r3, [pc, #288]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a47      	ldr	r2, [pc, #284]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b06:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b0a:	6053      	str	r3, [r2, #4]




		break;
 8000b0c:	e084      	b.n	8000c18 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 8000b0e:	4b45      	ldr	r3, [pc, #276]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a44      	ldr	r2, [pc, #272]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b14:	f023 0301 	bic.w	r3, r3, #1
 8000b18:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8000b1a:	4b42      	ldr	r3, [pc, #264]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a41      	ldr	r2, [pc, #260]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b24:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	3b10      	subs	r3, #16
 8000b2a:	2b14      	cmp	r3, #20
 8000b2c:	d85d      	bhi.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
 8000b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b34 <MCAL_RCC_CLK_Init+0xd4>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000b89 	.word	0x08000b89
 8000b38:	08000beb 	.word	0x08000beb
 8000b3c:	08000beb 	.word	0x08000beb
 8000b40:	08000beb 	.word	0x08000beb
 8000b44:	08000b97 	.word	0x08000b97
 8000b48:	08000beb 	.word	0x08000beb
 8000b4c:	08000beb 	.word	0x08000beb
 8000b50:	08000beb 	.word	0x08000beb
 8000b54:	08000ba5 	.word	0x08000ba5
 8000b58:	08000beb 	.word	0x08000beb
 8000b5c:	08000bb3 	.word	0x08000bb3
 8000b60:	08000beb 	.word	0x08000beb
 8000b64:	08000bc1 	.word	0x08000bc1
 8000b68:	08000beb 	.word	0x08000beb
 8000b6c:	08000beb 	.word	0x08000beb
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000bcf 	.word	0x08000bcf
 8000b78:	08000beb 	.word	0x08000beb
 8000b7c:	08000beb 	.word	0x08000beb
 8000b80:	08000beb 	.word	0x08000beb
 8000b84:	08000bdd 	.word	0x08000bdd
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a25      	ldr	r2, [pc, #148]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b92:	6053      	str	r3, [r2, #4]
			break;
 8000b94:	e029      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b9c:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000ba0:	6053      	str	r3, [r2, #4]
			break;
 8000ba2:	e022      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bae:	6053      	str	r3, [r2, #4]
			break;
 8000bb0:	e01b      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bb8:	f443 1350 	orr.w	r3, r3, #3407872	@ 0x340000
 8000bbc:	6053      	str	r3, [r2, #4]
			break;
 8000bbe:	e014      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bc6:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8000bca:	6053      	str	r3, [r2, #4]
			break;
 8000bcc:	e00d      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bd4:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8000bd8:	6053      	str	r3, [r2, #4]
			break;
 8000bda:	e006      	b.n	8000bea <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000be2:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000be6:	6053      	str	r3, [r2, #4]
			break;
 8000be8:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bf4:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 8000bf6:	bf00      	nop
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f9      	beq.n	8000bf8 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <MCAL_RCC_CLK_Init+0x1c4>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]



		break;
 8000c14:	e000      	b.n	8000c18 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8000c16:	bf00      	nop
	}
	}
	return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000

08000c28 <TIMER1_Init>:

uint8_t PinStepper_flag = 0;


void TIMER1_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER1_CLK_EN();
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <TIMER1_Init+0x4c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a0f      	ldr	r2, [pc, #60]	@ (8000c74 <TIMER1_Init+0x4c>)
 8000c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c3c:	6193      	str	r3, [r2, #24]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER1->PSC = (Clock_Speed_MHz - 1);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <TIMER1_Init+0x50>)
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER1->ARR = 0xC350;  // 25000*2us = 0.05s
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <TIMER1_Init+0x50>)
 8000c48:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Enable Timer2
	TIMER1->CR1 |= (1<<0);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <TIMER1_Init+0x50>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <TIMER1_Init+0x50>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER1->SR) & (1<<0)));
 8000c5a:	bf00      	nop
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <TIMER1_Init+0x50>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f9      	beq.n	8000c5c <TIMER1_Init+0x34>
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40012c00 	.word	0x40012c00

08000c7c <Delay_Timer1_us>:
	}
}


void Delay_Timer1_us(int us)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	TIMER1->CNT = 0;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <Delay_Timer1_us+0x28>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
	while((TIMER1->CNT) < us);
 8000c8a:	bf00      	nop
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <Delay_Timer1_us+0x28>)
 8000c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3fa      	bcc.n	8000c8c <Delay_Timer1_us+0x10>
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40012c00 	.word	0x40012c00

08000ca8 <Delay_Timer1_ms>:


void Delay_Timer1_ms(int ms)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e006      	b.n	8000cc4 <Delay_Timer1_ms+0x1c>
	{
		Delay_Timer1_us(1000);
 8000cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cba:	f7ff ffdf 	bl	8000c7c <Delay_Timer1_us>
	for(i=0;i<ms;i++)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf4      	blt.n	8000cb6 <Delay_Timer1_ms+0xe>
	}
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b098      	sub	sp, #96	@ 0x60
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	72fb      	strb	r3, [r7, #11]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	657b      	str	r3, [r7, #84]	@ 0x54

	while(loop_flag == 1)
 8000cf8:	e017      	b.n	8000d2a <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8000cfa:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cfe:	4a91      	ldr	r2, [pc, #580]	@ (8000f44 <PWM+0x26c>)
 8000d00:	fb02 f303 	mul.w	r3, r2, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d12:	65bb      	str	r3, [r7, #88]	@ 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8000d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d16:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000d1a:	d303      	bcc.n	8000d24 <PWM+0x4c>
			Prescalar_Value += 2;
 8000d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d1e:	3302      	adds	r3, #2
 8000d20:	657b      	str	r3, [r7, #84]	@ 0x54
 8000d22:	e002      	b.n	8000d2a <PWM+0x52>
		}else{
			loop_flag = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	while(loop_flag == 1)
 8000d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d0e3      	beq.n	8000cfa <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4a84      	ldr	r2, [pc, #528]	@ (8000f48 <PWM+0x270>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80d8 	bne.w	8000eec <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8000d3c:	4b83      	ldr	r3, [pc, #524]	@ (8000f4c <PWM+0x274>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a82      	ldr	r2, [pc, #520]	@ (8000f4c <PWM+0x274>)
 8000d42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d46:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8000d48:	4b80      	ldr	r3, [pc, #512]	@ (8000f4c <PWM+0x274>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f4c <PWM+0x274>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000d54:	4b7d      	ldr	r3, [pc, #500]	@ (8000f4c <PWM+0x274>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a7c      	ldr	r2, [pc, #496]	@ (8000f4c <PWM+0x274>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 0201 	bic.w	r2, r3, #1
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	f200 8336 	bhi.w	80013e0 <PWM+0x708>
 8000d74:	a201      	add	r2, pc, #4	@ (adr r2, 8000d7c <PWM+0xa4>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000d8d 	.word	0x08000d8d
 8000d80:	08000de5 	.word	0x08000de5
 8000d84:	08000e3d 	.word	0x08000e3d
 8000d88:	08000e95 	.word	0x08000e95
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000d8c:	4b70      	ldr	r3, [pc, #448]	@ (8000f50 <PWM+0x278>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	653b      	str	r3, [r7, #80]	@ 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000d92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d96:	4619      	mov	r1, r3
 8000d98:	486e      	ldr	r0, [pc, #440]	@ (8000f54 <PWM+0x27c>)
 8000d9a:	f7ff fcb9 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f043 0208 	orr.w	r2, r3, #8
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000dc2:	7abb      	ldrb	r3, [r7, #10]
 8000dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000dc6:	fb02 f303 	mul.w	r3, r2, r3
 8000dca:	4a63      	ldr	r2, [pc, #396]	@ (8000f58 <PWM+0x280>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	095a      	lsrs	r2, r3, #5
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8000de2:	e2fd      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000de4:	4b5d      	ldr	r3, [pc, #372]	@ (8000f5c <PWM+0x284>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000dea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4858      	ldr	r0, [pc, #352]	@ (8000f54 <PWM+0x27c>)
 8000df2:	f7ff fc8d 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	f043 0210 	orr.w	r2, r3, #16
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000e1a:	7abb      	ldrb	r3, [r7, #10]
 8000e1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	4a4d      	ldr	r2, [pc, #308]	@ (8000f58 <PWM+0x280>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	095a      	lsrs	r2, r3, #5
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000e3a:	e2d1      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000e3c:	4b48      	ldr	r3, [pc, #288]	@ (8000f60 <PWM+0x288>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	64bb      	str	r3, [r7, #72]	@ 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000e42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e46:	4619      	mov	r1, r3
 8000e48:	4842      	ldr	r0, [pc, #264]	@ (8000f54 <PWM+0x27c>)
 8000e4a:	f7ff fc61 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f043 0208 	orr.w	r2, r3, #8
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8000e72:	7abb      	ldrb	r3, [r7, #10]
 8000e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	4a37      	ldr	r2, [pc, #220]	@ (8000f58 <PWM+0x280>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	095a      	lsrs	r2, r3, #5
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8000e92:	e2a5      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000e94:	4b33      	ldr	r3, [pc, #204]	@ (8000f64 <PWM+0x28c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	647b      	str	r3, [r7, #68]	@ 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000e9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482c      	ldr	r0, [pc, #176]	@ (8000f54 <PWM+0x27c>)
 8000ea2:	f7ff fc35 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8000eca:	7abb      	ldrb	r3, [r7, #10]
 8000ecc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <PWM+0x280>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	095a      	lsrs	r2, r3, #5
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8000eea:	e279      	b.n	80013e0 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef2:	f040 80d1 	bne.w	8001098 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <PWM+0x274>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <PWM+0x274>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <PWM+0x274>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <PWM+0x274>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <PWM+0x274>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <PWM+0x274>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 0201 	bic.w	r2, r3, #1
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	f200 8259 	bhi.w	80013e0 <PWM+0x708>
 8000f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <PWM+0x25c>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f69 	.word	0x08000f69
 8000f38:	08000fb5 	.word	0x08000fb5
 8000f3c:	08001001 	.word	0x08001001
 8000f40:	0800104d 	.word	0x0800104d
 8000f44:	000f4240 	.word	0x000f4240
 8000f48:	40012c00 	.word	0x40012c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	080028b8 	.word	0x080028b8
 8000f54:	40010800 	.word	0x40010800
 8000f58:	51eb851f 	.word	0x51eb851f
 8000f5c:	080028bc 	.word	0x080028bc
 8000f60:	080028c0 	.word	0x080028c0
 8000f64:	080028c4 	.word	0x080028c4
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000f68:	4b9d      	ldr	r3, [pc, #628]	@ (80011e0 <PWM+0x508>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	643b      	str	r3, [r7, #64]	@ 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f72:	4619      	mov	r1, r3
 8000f74:	489b      	ldr	r0, [pc, #620]	@ (80011e4 <PWM+0x50c>)
 8000f76:	f7ff fbcb 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f043 0208 	orr.w	r2, r3, #8
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000f9e:	7abb      	ldrb	r3, [r7, #10]
 8000fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	4a90      	ldr	r2, [pc, #576]	@ (80011e8 <PWM+0x510>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	095a      	lsrs	r2, r3, #5
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8000fb2:	e215      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80011ec <PWM+0x514>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000fba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4888      	ldr	r0, [pc, #544]	@ (80011e4 <PWM+0x50c>)
 8000fc2:	f7ff fba5 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f043 0210 	orr.w	r2, r3, #16
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000fea:	7abb      	ldrb	r3, [r7, #10]
 8000fec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80011e8 <PWM+0x510>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	095a      	lsrs	r2, r3, #5
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000ffe:	e1ef      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001000:	4b7b      	ldr	r3, [pc, #492]	@ (80011f0 <PWM+0x518>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001006:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800100a:	4619      	mov	r1, r3
 800100c:	4875      	ldr	r0, [pc, #468]	@ (80011e4 <PWM+0x50c>)
 800100e:	f7ff fb7f 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f043 0208 	orr.w	r2, r3, #8
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a6a      	ldr	r2, [pc, #424]	@ (80011e8 <PWM+0x510>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	095a      	lsrs	r2, r3, #5
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800104a:	e1c9      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800104c:	4b69      	ldr	r3, [pc, #420]	@ (80011f4 <PWM+0x51c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001052:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001056:	4619      	mov	r1, r3
 8001058:	4862      	ldr	r0, [pc, #392]	@ (80011e4 <PWM+0x50c>)
 800105a:	f7ff fb59 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001082:	7abb      	ldrb	r3, [r7, #10]
 8001084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a57      	ldr	r2, [pc, #348]	@ (80011e8 <PWM+0x510>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	095a      	lsrs	r2, r3, #5
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001096:	e1a3      	b.n	80013e0 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a57      	ldr	r2, [pc, #348]	@ (80011f8 <PWM+0x520>)
 800109c:	4293      	cmp	r3, r2
 800109e:	f040 80db 	bne.w	8001258 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 80010a2:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <PWM+0x524>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a55      	ldr	r2, [pc, #340]	@ (80011fc <PWM+0x524>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <PWM+0x524>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a52      	ldr	r2, [pc, #328]	@ (80011fc <PWM+0x524>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 80010ba:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <PWM+0x524>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <PWM+0x524>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <PWM+0x524>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a4c      	ldr	r2, [pc, #304]	@ (80011fc <PWM+0x524>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 0201 	bic.w	r2, r3, #1
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	f200 817d 	bhi.w	80013e0 <PWM+0x708>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <PWM+0x414>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	08001149 	.word	0x08001149
 80010f4:	08001195 	.word	0x08001195
 80010f8:	0800120d 	.word	0x0800120d
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <PWM+0x528>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001102:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001106:	4619      	mov	r1, r3
 8001108:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <PWM+0x50c>)
 800110a:	f7ff fb01 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f043 0208 	orr.w	r2, r3, #8
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <PWM+0x510>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	095a      	lsrs	r2, r3, #5
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001146:	e14b      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001148:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <PWM+0x52c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800114e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001152:	4619      	mov	r1, r3
 8001154:	4823      	ldr	r0, [pc, #140]	@ (80011e4 <PWM+0x50c>)
 8001156:	f7ff fadb 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	f043 0210 	orr.w	r2, r3, #16
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	4a18      	ldr	r2, [pc, #96]	@ (80011e8 <PWM+0x510>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	095a      	lsrs	r2, r3, #5
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001192:	e125      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <PWM+0x508>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800119a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119e:	4619      	mov	r1, r3
 80011a0:	4819      	ldr	r0, [pc, #100]	@ (8001208 <PWM+0x530>)
 80011a2:	f7ff fab5 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f043 0208 	orr.w	r2, r3, #8
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80011ca:	7abb      	ldrb	r3, [r7, #10]
 80011cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <PWM+0x510>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	095a      	lsrs	r2, r3, #5
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 80011de:	e0ff      	b.n	80013e0 <PWM+0x708>
 80011e0:	080028c8 	.word	0x080028c8
 80011e4:	40010800 	.word	0x40010800
 80011e8:	51eb851f 	.word	0x51eb851f
 80011ec:	080028cc 	.word	0x080028cc
 80011f0:	080028d0 	.word	0x080028d0
 80011f4:	080028d4 	.word	0x080028d4
 80011f8:	40000400 	.word	0x40000400
 80011fc:	40021000 	.word	0x40021000
 8001200:	080028d8 	.word	0x080028d8
 8001204:	080028dc 	.word	0x080028dc
 8001208:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800120c:	4b83      	ldr	r3, [pc, #524]	@ (800141c <PWM+0x744>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4881      	ldr	r0, [pc, #516]	@ (8001420 <PWM+0x748>)
 800121a:	f7ff fa79 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	4a76      	ldr	r2, [pc, #472]	@ (8001424 <PWM+0x74c>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	095a      	lsrs	r2, r3, #5
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001256:	e0c3      	b.n	80013e0 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a73      	ldr	r2, [pc, #460]	@ (8001428 <PWM+0x750>)
 800125c:	4293      	cmp	r3, r2
 800125e:	f040 80bf 	bne.w	80013e0 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 8001262:	4b72      	ldr	r3, [pc, #456]	@ (800142c <PWM+0x754>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a71      	ldr	r2, [pc, #452]	@ (800142c <PWM+0x754>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 800126e:	4b6f      	ldr	r3, [pc, #444]	@ (800142c <PWM+0x754>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a6e      	ldr	r2, [pc, #440]	@ (800142c <PWM+0x754>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800127a:	4b6c      	ldr	r3, [pc, #432]	@ (800142c <PWM+0x754>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a6b      	ldr	r2, [pc, #428]	@ (800142c <PWM+0x754>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 0201 	bic.w	r2, r3, #1
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	2b03      	cmp	r3, #3
 8001296:	f200 80a3 	bhi.w	80013e0 <PWM+0x708>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <PWM+0x5c8>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012fd 	.word	0x080012fd
 80012a8:	08001349 	.word	0x08001349
 80012ac:	08001395 	.word	0x08001395
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001430 <PWM+0x758>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4619      	mov	r1, r3
 80012bc:	4858      	ldr	r0, [pc, #352]	@ (8001420 <PWM+0x748>)
 80012be:	f7ff fa27 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f043 0208 	orr.w	r2, r3, #8
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	f043 0201 	orr.w	r2, r3, #1
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001424 <PWM+0x74c>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	095a      	lsrs	r2, r3, #5
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80012fa:	e071      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001434 <PWM+0x75c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4845      	ldr	r0, [pc, #276]	@ (8001420 <PWM+0x748>)
 800130a:	f7ff fa01 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001332:	7abb      	ldrb	r3, [r7, #10]
 8001334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4a3a      	ldr	r2, [pc, #232]	@ (8001424 <PWM+0x74c>)
 800133c:	fba2 2303 	umull	r2, r3, r2, r3
 8001340:	095a      	lsrs	r2, r3, #5
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001346:	e04b      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001348:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <PWM+0x760>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4619      	mov	r1, r3
 8001354:	4832      	ldr	r0, [pc, #200]	@ (8001420 <PWM+0x748>)
 8001356:	f7ff f9db 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f043 0208 	orr.w	r2, r3, #8
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800137e:	7abb      	ldrb	r3, [r7, #10]
 8001380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <PWM+0x74c>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	095a      	lsrs	r2, r3, #5
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001392:	e025      	b.n	80013e0 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <PWM+0x764>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	481f      	ldr	r0, [pc, #124]	@ (8001420 <PWM+0x748>)
 80013a2:	f7ff f9b5 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80013ca:	7abb      	ldrb	r3, [r7, #10]
 80013cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <PWM+0x74c>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	095a      	lsrs	r2, r3, #5
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80013de:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 80013f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	3760      	adds	r7, #96	@ 0x60
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	080028cc 	.word	0x080028cc
 8001420:	40010c00 	.word	0x40010c00
 8001424:	51eb851f 	.word	0x51eb851f
 8001428:	40000800 	.word	0x40000800
 800142c:	40021000 	.word	0x40021000
 8001430:	080028d8 	.word	0x080028d8
 8001434:	080028dc 	.word	0x080028dc
 8001438:	080028b8 	.word	0x080028b8
 800143c:	080028bc 	.word	0x080028bc

08001440 <TIMER3_Stop>:
	TIMER2->CNT = 0;
	TIMER2->CR1 |= (1<<0);
}

void TIMER3_Stop()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <TIMER3_Stop+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <TIMER3_Stop+0x18>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40000400 	.word	0x40000400

0800145c <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b096      	sub	sp, #88	@ 0x58
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	70fb      	strb	r3, [r7, #3]
 800146e:	460b      	mov	r3, r1
 8001470:	803b      	strh	r3, [r7, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 8001476:	4b9b      	ldr	r3, [pc, #620]	@ (80016e4 <PWM_Move_Steps+0x288>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 800147c:	4a9a      	ldr	r2, [pc, #616]	@ (80016e8 <PWM_Move_Steps+0x28c>)
 800147e:	883b      	ldrh	r3, [r7, #0]
 8001480:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8001488:	2300      	movs	r3, #0
 800148a:	653b      	str	r3, [r7, #80]	@ 0x50
 800148c:	2301      	movs	r3, #1
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	while(loop_flag == 1)
 8001490:	e017      	b.n	80014c2 <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8001492:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001496:	4a95      	ldr	r2, [pc, #596]	@ (80016ec <PWM_Move_Steps+0x290>)
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	4619      	mov	r1, r3
 800149e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014aa:	653b      	str	r3, [r7, #80]	@ 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 80014ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014ae:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80014b2:	d303      	bcc.n	80014bc <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 80014b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014b6:	3302      	adds	r3, #2
 80014b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014ba:	e002      	b.n	80014c2 <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	while(loop_flag == 1)
 80014c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d0e3      	beq.n	8001492 <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a88      	ldr	r2, [pc, #544]	@ (80016f0 <PWM_Move_Steps+0x294>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f040 8120 	bne.w	8001714 <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 80014d4:	4b87      	ldr	r3, [pc, #540]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a86      	ldr	r2, [pc, #536]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014de:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 80014e0:	4b84      	ldr	r3, [pc, #528]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a83      	ldr	r2, [pc, #524]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80014ec:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a80      	ldr	r2, [pc, #512]	@ (80016f4 <PWM_Move_Steps+0x298>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 80014f8:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7e      	ldr	r2, [pc, #504]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001502:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 8001504:	4b7c      	ldr	r3, [pc, #496]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7b      	ldr	r2, [pc, #492]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 800150a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800150e:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a78      	ldr	r2, [pc, #480]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 8001516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800151a:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 800151c:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a75      	ldr	r2, [pc, #468]	@ (80016f8 <PWM_Move_Steps+0x29c>)
 8001522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001526:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0201 	bic.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b03      	cmp	r3, #3
 8001538:	f200 83c2 	bhi.w	8001cc0 <PWM_Move_Steps+0x864>
 800153c:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <PWM_Move_Steps+0xe8>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001555 	.word	0x08001555
 8001548:	080015b9 	.word	0x080015b9
 800154c:	0800161d 	.word	0x0800161d
 8001550:	08001681 	.word	0x08001681
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001554:	4b69      	ldr	r3, [pc, #420]	@ (80016fc <PWM_Move_Steps+0x2a0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800155a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800155e:	4619      	mov	r1, r3
 8001560:	4867      	ldr	r0, [pc, #412]	@ (8001700 <PWM_Move_Steps+0x2a4>)
 8001562:	f7ff f8d5 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f043 0208 	orr.w	r2, r3, #8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a5c      	ldr	r2, [pc, #368]	@ (8001704 <PWM_Move_Steps+0x2a8>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	095a      	lsrs	r2, r3, #5
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f043 0203 	orr.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60da      	str	r2, [r3, #12]
			break;
 80015b6:	e383      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <PWM_Move_Steps+0x2ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80015be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80015c2:	4619      	mov	r1, r3
 80015c4:	484e      	ldr	r0, [pc, #312]	@ (8001700 <PWM_Move_Steps+0x2a4>)
 80015c6:	f7ff f8a3 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80015ee:	78bb      	ldrb	r3, [r7, #2]
 80015f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a43      	ldr	r2, [pc, #268]	@ (8001704 <PWM_Move_Steps+0x2a8>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	095a      	lsrs	r2, r3, #5
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b101 << 0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f043 0205 	orr.w	r2, r3, #5
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60da      	str	r2, [r3, #12]
			break;
 800161a:	e351      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800161c:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <PWM_Move_Steps+0x2b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	643b      	str	r3, [r7, #64]	@ 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001622:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001626:	4619      	mov	r1, r3
 8001628:	4835      	ldr	r0, [pc, #212]	@ (8001700 <PWM_Move_Steps+0x2a4>)
 800162a:	f7ff f871 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f043 0208 	orr.w	r2, r3, #8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001652:	78bb      	ldrb	r3, [r7, #2]
 8001654:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	4a2a      	ldr	r2, [pc, #168]	@ (8001704 <PWM_Move_Steps+0x2a8>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	095a      	lsrs	r2, r3, #5
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f043 0209 	orr.w	r2, r3, #9
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60da      	str	r2, [r3, #12]
			break;
 800167e:	e31f      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <PWM_Move_Steps+0x2b4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	63fb      	str	r3, [r7, #60]	@ 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001686:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800168a:	4619      	mov	r1, r3
 800168c:	481c      	ldr	r0, [pc, #112]	@ (8001700 <PWM_Move_Steps+0x2a4>)
 800168e:	f7ff f83f 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80016b6:	78bb      	ldrb	r3, [r7, #2]
 80016b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <PWM_Move_Steps+0x2a8>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	095a      	lsrs	r2, r3, #5
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b10001 << 0);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f043 0211 	orr.w	r2, r3, #17
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
			break;
 80016e2:	e2ed      	b.n	8001cc0 <PWM_Move_Steps+0x864>
 80016e4:	200000a9 	.word	0x200000a9
 80016e8:	200000aa 	.word	0x200000aa
 80016ec:	000f4240 	.word	0x000f4240
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	080028b8 	.word	0x080028b8
 8001700:	40010800 	.word	0x40010800
 8001704:	51eb851f 	.word	0x51eb851f
 8001708:	080028bc 	.word	0x080028bc
 800170c:	080028c0 	.word	0x080028c0
 8001710:	080028c4 	.word	0x080028c4
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171a:	f040 80dd 	bne.w	80018d8 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 800171e:	4ba0      	ldr	r3, [pc, #640]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a9f      	ldr	r2, [pc, #636]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 800172a:	4b9d      	ldr	r3, [pc, #628]	@ (80019a0 <PWM_Move_Steps+0x544>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a9c      	ldr	r2, [pc, #624]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001736:	4b9a      	ldr	r3, [pc, #616]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a99      	ldr	r2, [pc, #612]	@ (80019a0 <PWM_Move_Steps+0x544>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 8001742:	4b98      	ldr	r3, [pc, #608]	@ (80019a4 <PWM_Move_Steps+0x548>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a97      	ldr	r2, [pc, #604]	@ (80019a4 <PWM_Move_Steps+0x548>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 0201 	bic.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	2b03      	cmp	r3, #3
 800175e:	f200 82af 	bhi.w	8001cc0 <PWM_Move_Steps+0x864>
 8001762:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <PWM_Move_Steps+0x30c>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	080017d1 	.word	0x080017d1
 8001770:	08001829 	.word	0x08001829
 8001774:	08001881 	.word	0x08001881
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001778:	4b8b      	ldr	r3, [pc, #556]	@ (80019a8 <PWM_Move_Steps+0x54c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800177e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001782:	4619      	mov	r1, r3
 8001784:	4889      	ldr	r0, [pc, #548]	@ (80019ac <PWM_Move_Steps+0x550>)
 8001786:	f7fe ffc3 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f043 0208 	orr.w	r2, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80017ae:	78bb      	ldrb	r3, [r7, #2]
 80017b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	4a7e      	ldr	r2, [pc, #504]	@ (80019b0 <PWM_Move_Steps+0x554>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	095a      	lsrs	r2, r3, #5
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f043 0203 	orr.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60da      	str	r2, [r3, #12]
			break;
 80017ce:	e277      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80017d0:	4b78      	ldr	r3, [pc, #480]	@ (80019b4 <PWM_Move_Steps+0x558>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80017d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017da:	4619      	mov	r1, r3
 80017dc:	4873      	ldr	r0, [pc, #460]	@ (80019ac <PWM_Move_Steps+0x550>)
 80017de:	f7fe ff97 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	f043 0210 	orr.w	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001806:	78bb      	ldrb	r3, [r7, #2]
 8001808:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	4a68      	ldr	r2, [pc, #416]	@ (80019b0 <PWM_Move_Steps+0x554>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	095a      	lsrs	r2, r3, #5
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b101 << 0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f043 0205 	orr.w	r2, r3, #5
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
			break;
 8001826:	e24b      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001828:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <PWM_Move_Steps+0x55c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	633b      	str	r3, [r7, #48]	@ 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800182e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001832:	4619      	mov	r1, r3
 8001834:	485d      	ldr	r0, [pc, #372]	@ (80019ac <PWM_Move_Steps+0x550>)
 8001836:	f7fe ff6b 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f043 0208 	orr.w	r2, r3, #8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	4a52      	ldr	r2, [pc, #328]	@ (80019b0 <PWM_Move_Steps+0x554>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	095a      	lsrs	r2, r3, #5
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f043 0209 	orr.w	r2, r3, #9
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60da      	str	r2, [r3, #12]
			break;
 800187e:	e21f      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001880:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <PWM_Move_Steps+0x560>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4847      	ldr	r0, [pc, #284]	@ (80019ac <PWM_Move_Steps+0x550>)
 800188e:	f7fe ff3f 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a3c      	ldr	r2, [pc, #240]	@ (80019b0 <PWM_Move_Steps+0x554>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	095a      	lsrs	r2, r3, #5
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b10001 << 0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f043 0211 	orr.w	r2, r3, #17
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60da      	str	r2, [r3, #12]
			break;
 80018d6:	e1f3      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <PWM_Move_Steps+0x564>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	f040 80f7 	bne.w	8001ad0 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <PWM_Move_Steps+0x544>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a2e      	ldr	r2, [pc, #184]	@ (80019a0 <PWM_Move_Steps+0x544>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80018ee:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <PWM_Move_Steps+0x544>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a2b      	ldr	r2, [pc, #172]	@ (80019a0 <PWM_Move_Steps+0x544>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <PWM_Move_Steps+0x544>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a28      	ldr	r2, [pc, #160]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <PWM_Move_Steps+0x544>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a25      	ldr	r2, [pc, #148]	@ (80019a0 <PWM_Move_Steps+0x544>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <PWM_Move_Steps+0x548>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <PWM_Move_Steps+0x548>)
 8001918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800191c:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0201 	bic.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	2b03      	cmp	r3, #3
 800192e:	f200 81c7 	bhi.w	8001cc0 <PWM_Move_Steps+0x864>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <PWM_Move_Steps+0x4dc>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	080019c9 	.word	0x080019c9
 8001940:	08001a21 	.word	0x08001a21
 8001944:	08001a79 	.word	0x08001a79
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <PWM_Move_Steps+0x568>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800194e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001952:	4619      	mov	r1, r3
 8001954:	4815      	ldr	r0, [pc, #84]	@ (80019ac <PWM_Move_Steps+0x550>)
 8001956:	f7fe fedb 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f043 0208 	orr.w	r2, r3, #8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <PWM_Move_Steps+0x554>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	095a      	lsrs	r2, r3, #5
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f043 0203 	orr.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60da      	str	r2, [r3, #12]
			break;
 800199e:	e18f      	b.n	8001cc0 <PWM_Move_Steps+0x864>
 80019a0:	40021000 	.word	0x40021000
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	080028c8 	.word	0x080028c8
 80019ac:	40010800 	.word	0x40010800
 80019b0:	51eb851f 	.word	0x51eb851f
 80019b4:	080028cc 	.word	0x080028cc
 80019b8:	080028d0 	.word	0x080028d0
 80019bc:	080028d4 	.word	0x080028d4
 80019c0:	40000400 	.word	0x40000400
 80019c4:	080028d8 	.word	0x080028d8
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80019c8:	4b9c      	ldr	r3, [pc, #624]	@ (8001c3c <PWM_Move_Steps+0x7e0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80019ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	489a      	ldr	r0, [pc, #616]	@ (8001c40 <PWM_Move_Steps+0x7e4>)
 80019d6:	f7fe fe9b 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80019fe:	78bb      	ldrb	r3, [r7, #2]
 8001a00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a8f      	ldr	r2, [pc, #572]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	095a      	lsrs	r2, r3, #5
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b101 << 0);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f043 0205 	orr.w	r2, r3, #5
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60da      	str	r2, [r3, #12]
			break;
 8001a1e:	e14f      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001a20:	4b89      	ldr	r3, [pc, #548]	@ (8001c48 <PWM_Move_Steps+0x7ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4887      	ldr	r0, [pc, #540]	@ (8001c4c <PWM_Move_Steps+0x7f0>)
 8001a2e:	f7fe fe6f 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f043 0208 	orr.w	r2, r3, #8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001a56:	78bb      	ldrb	r3, [r7, #2]
 8001a58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	4a79      	ldr	r2, [pc, #484]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	095a      	lsrs	r2, r3, #5
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60da      	str	r2, [r3, #12]
			break;
 8001a76:	e123      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001a78:	4b75      	ldr	r3, [pc, #468]	@ (8001c50 <PWM_Move_Steps+0x7f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4871      	ldr	r0, [pc, #452]	@ (8001c4c <PWM_Move_Steps+0x7f0>)
 8001a86:	f7fe fe43 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	095a      	lsrs	r2, r3, #5
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60da      	str	r2, [r3, #12]
			break;
 8001ace:	e0f7      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a60      	ldr	r2, [pc, #384]	@ (8001c54 <PWM_Move_Steps+0x7f8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f040 80f3 	bne.w	8001cc0 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 8001ada:	4b5f      	ldr	r3, [pc, #380]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a5e      	ldr	r2, [pc, #376]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001af2:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	4a58      	ldr	r2, [pc, #352]	@ (8001c58 <PWM_Move_Steps+0x7fc>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 8001afe:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <PWM_Move_Steps+0x800>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a56      	ldr	r2, [pc, #344]	@ (8001c5c <PWM_Move_Steps+0x800>)
 8001b04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b08:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0201 	bic.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	f200 80d1 	bhi.w	8001cc0 <PWM_Move_Steps+0x864>
 8001b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <PWM_Move_Steps+0x6c8>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b8d 	.word	0x08001b8d
 8001b2c:	08001be5 	.word	0x08001be5
 8001b30:	08001c69 	.word	0x08001c69
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001b34:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <PWM_Move_Steps+0x804>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4842      	ldr	r0, [pc, #264]	@ (8001c4c <PWM_Move_Steps+0x7f0>)
 8001b42:	f7fe fde5 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f043 0208 	orr.w	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001b6a:	78bb      	ldrb	r3, [r7, #2]
 8001b6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	095a      	lsrs	r2, r3, #5
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f043 0203 	orr.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60da      	str	r2, [r3, #12]
			break;
 8001b8a:	e099      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <PWM_Move_Steps+0x7e0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	482c      	ldr	r0, [pc, #176]	@ (8001c4c <PWM_Move_Steps+0x7f0>)
 8001b9a:	f7fe fdb9 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001bc2:	78bb      	ldrb	r3, [r7, #2]
 8001bc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	095a      	lsrs	r2, r3, #5
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b001 << 0);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60da      	str	r2, [r3, #12]
			break;
 8001be2:	e06d      	b.n	8001cc0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <PWM_Move_Steps+0x808>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4816      	ldr	r0, [pc, #88]	@ (8001c4c <PWM_Move_Steps+0x7f0>)
 8001bf2:	f7fe fd8d 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f043 0208 	orr.w	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001c1a:	78bb      	ldrb	r3, [r7, #2]
 8001c1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <PWM_Move_Steps+0x7e8>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	095a      	lsrs	r2, r3, #5
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60da      	str	r2, [r3, #12]
			break;
 8001c3a:	e041      	b.n	8001cc0 <PWM_Move_Steps+0x864>
 8001c3c:	080028dc 	.word	0x080028dc
 8001c40:	40010800 	.word	0x40010800
 8001c44:	51eb851f 	.word	0x51eb851f
 8001c48:	080028c8 	.word	0x080028c8
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	080028cc 	.word	0x080028cc
 8001c54:	40000800 	.word	0x40000800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	080028d8 	.word	0x080028d8
 8001c64:	080028b8 	.word	0x080028b8
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <PWM_Move_Steps+0x8ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	4825      	ldr	r0, [pc, #148]	@ (8001d0c <PWM_Move_Steps+0x8b0>)
 8001c76:	f7fe fd4b 	bl	8000710 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001c9e:	78bb      	ldrb	r3, [r7, #2]
 8001ca0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <PWM_Move_Steps+0x8b4>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	095a      	lsrs	r2, r3, #5
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60da      	str	r2, [r3, #12]
			break;
 8001cbe:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8001cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28


	TIMERx->DIER |=(0b1<<0);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]





}
 8001cfe:	bf00      	nop
 8001d00:	3758      	adds	r7, #88	@ 0x58
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	080028bc 	.word	0x080028bc
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	51eb851f 	.word	0x51eb851f

08001d14 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <TIM2_IRQHandler+0x68>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d128      	bne.n	8001d72 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8001d20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3a:	f023 0302 	bic.w	r3, r3, #2
 8001d3e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <TIM2_IRQHandler+0x6c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <TIM2_IRQHandler+0x6c>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <TIM2_IRQHandler+0x6c>)
 8001d52:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001d54:	e00d      	b.n	8001d72 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <TIM2_IRQHandler+0x68>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8001d5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <TIM2_IRQHandler+0x70>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200000a9 	.word	0x200000a9
 8001d80:	200000aa 	.word	0x200000aa
 8001d84:	200000a8 	.word	0x200000a8

08001d88 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <TIM3_IRQHandler+0x5c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d122      	bne.n	8001dda <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <TIM3_IRQHandler+0x64>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <TIM3_IRQHandler+0x64>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <TIM3_IRQHandler+0x64>)
 8001dbe:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001dc0:	e00b      	b.n	8001dda <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <TIM3_IRQHandler+0x5c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <TIM3_IRQHandler+0x60>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <TIM3_IRQHandler+0x68>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	200000a9 	.word	0x200000a9
 8001de8:	40000400 	.word	0x40000400
 8001dec:	200000aa 	.word	0x200000aa
 8001df0:	200000a8 	.word	0x200000a8

08001df4 <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <TIM4_IRQHandler+0x5c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d122      	bne.n	8001e46 <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	4a10      	ldr	r2, [pc, #64]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <TIM4_IRQHandler+0x64>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <TIM4_IRQHandler+0x64>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <TIM4_IRQHandler+0x64>)
 8001e2a:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001e2c:	e00b      	b.n	8001e46 <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <TIM4_IRQHandler+0x5c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 8001e34:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <TIM4_IRQHandler+0x60>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <TIM4_IRQHandler+0x68>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200000a9 	.word	0x200000a9
 8001e54:	40000800 	.word	0x40000800
 8001e58:	200000aa 	.word	0x200000aa
 8001e5c:	200000a8 	.word	0x200000a8

08001e60 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <which_UART+0x38>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <which_UART+0x14>
		return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e00c      	b.n	8001e8e <which_UART+0x2e>
	else if(USARTx == USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <which_UART+0x3c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <which_UART+0x20>
		return 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e006      	b.n	8001e8e <which_UART+0x2e>
	else if(USARTx == USART3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <which_UART+0x40>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <which_UART+0x2c>
		return 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e000      	b.n	8001e8e <which_UART+0x2e>
	return 3;
 8001e8c:	2303      	movs	r3, #3
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	40004800 	.word	0x40004800

08001ea4 <USART_Disable_IRQ>:



void USART_Disable_IRQ()
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(1<<5);
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <USART_Disable_IRQ+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <USART_Disable_IRQ+0x18>)
 8001eae:	f023 0320 	bic.w	r3, r3, #32
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40004400 	.word	0x40004400

08001ec0 <USART_Enable_IRQ>:


void USART_Enable_IRQ()
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	USART2->CR1 |= (1<<5);
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <USART_Enable_IRQ+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a03      	ldr	r2, [pc, #12]	@ (8001ed8 <USART_Enable_IRQ+0x18>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40004400 	.word	0x40004400

08001edc <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8001edc:	b4b0      	push	{r4, r5, r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8002060 <MCAL_UART_Init+0x184>)
 8001ee8:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a5d      	ldr	r2, [pc, #372]	@ (8002064 <MCAL_UART_Init+0x188>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10e      	bne.n	8001f10 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8002068 <MCAL_UART_Init+0x18c>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efe:	682b      	ldr	r3, [r5, #0]
 8001f00:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8001f02:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4a59      	ldr	r2, [pc, #356]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0c:	6193      	str	r3, [r2, #24]
 8001f0e:	e026      	b.n	8001f5e <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a57      	ldr	r2, [pc, #348]	@ (8002070 <MCAL_UART_Init+0x194>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d10f      	bne.n	8001f38 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 8001f18:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <MCAL_UART_Init+0x18c>)
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	f103 0414 	add.w	r4, r3, #20
 8001f20:	4615      	mov	r5, r2
 8001f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 8001f2a:	4b50      	ldr	r3, [pc, #320]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	e012      	b.n	8001f5e <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002074 <MCAL_UART_Init+0x198>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d10e      	bne.n	8001f5e <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 8001f40:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <MCAL_UART_Init+0x18c>)
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8001f48:	4615      	mov	r5, r2
 8001f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8001f52:	4b46      	ldr	r3, [pc, #280]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a45      	ldr	r2, [pc, #276]	@ (800206c <MCAL_UART_Init+0x190>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5c:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7a12      	ldrb	r2, [r2, #8]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	7a52      	ldrb	r2, [r2, #9]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	7a92      	ldrb	r2, [r2, #10]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	7ad2      	ldrb	r2, [r2, #11]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	0119      	lsls	r1, r3, #4
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe0:	2064      	movs	r0, #100	@ 0x64
 8001fe2:	fb00 f303 	mul.w	r3, r0, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <MCAL_UART_Init+0x19c>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d026      	beq.n	8002056 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	7b12      	ldrb	r2, [r2, #12]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <MCAL_UART_Init+0x188>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d106      	bne.n	800202c <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MCAL_UART_Init+0x1a0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	@ (800207c <MCAL_UART_Init+0x1a0>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 800202a:	e014      	b.n	8002056 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <MCAL_UART_Init+0x194>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d106      	bne.n	8002042 <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MCAL_UART_Init+0x1a0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a10      	ldr	r2, [pc, #64]	@ (800207c <MCAL_UART_Init+0x1a0>)
 800203a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	e009      	b.n	8002056 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <MCAL_UART_Init+0x198>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d105      	bne.n	8002056 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MCAL_UART_Init+0x1a0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <MCAL_UART_Init+0x1a0>)
 8002050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bcb0      	pop	{r4, r5, r7}
 800205e:	4770      	bx	lr
 8002060:	02255100 	.word	0x02255100
 8002064:	40013800 	.word	0x40013800
 8002068:	200000ac 	.word	0x200000ac
 800206c:	40021000 	.word	0x40021000
 8002070:	40004400 	.word	0x40004400
 8002074:	40004800 	.word	0x40004800
 8002078:	51eb851f 	.word	0x51eb851f
 800207c:	e000e104 	.word	0xe000e104

08002080 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8002094:	bf00      	nop
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f9      	beq.n	8002096 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fedc 	bl	8001e60 <which_UART>
 80020a8:	4603      	mov	r3, r0
 80020aa:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
	}
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 80020d4:	bf00      	nop
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f9      	beq.n	80020d6 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff febc 	bl	8001e60 <which_UART>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	490f      	ldr	r1, [pc, #60]	@ (800212c <MCAL_UART_ReceiveData+0x6c>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3309      	adds	r3, #9
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b29b      	uxth	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	b29a      	uxth	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8002110:	e007      	b.n	8002122 <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	b29b      	uxth	r3, r3
 8002118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211c:	b29a      	uxth	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	801a      	strh	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200000ac 	.word	0x200000ac

08002130 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a2b      	ldr	r2, [pc, #172]	@ (80021e8 <MCAL_UART_GPIO_SetPins+0xb8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d118      	bne.n	8002172 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8002140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002144:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002146:	2306      	movs	r3, #6
 8002148:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	4825      	ldr	r0, [pc, #148]	@ (80021ec <MCAL_UART_GPIO_SetPins+0xbc>)
 8002156:	f7fe fadb 	bl	8000710 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800215a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002160:	2308      	movs	r3, #8
 8002162:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	4820      	ldr	r0, [pc, #128]	@ (80021ec <MCAL_UART_GPIO_SetPins+0xbc>)
 800216c:	f7fe fad0 	bl	8000710 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8002170:	e036      	b.n	80021e0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d116      	bne.n	80021a8 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800217a:	2304      	movs	r3, #4
 800217c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800217e:	2306      	movs	r3, #6
 8002180:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	4619      	mov	r1, r3
 800218c:	4817      	ldr	r0, [pc, #92]	@ (80021ec <MCAL_UART_GPIO_SetPins+0xbc>)
 800218e:	f7fe fabf 	bl	8000710 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8002192:	2308      	movs	r3, #8
 8002194:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002196:	2308      	movs	r3, #8
 8002198:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	4619      	mov	r1, r3
 80021a0:	4812      	ldr	r0, [pc, #72]	@ (80021ec <MCAL_UART_GPIO_SetPins+0xbc>)
 80021a2:	f7fe fab5 	bl	8000710 <MCAL_GPIO_Init>
}
 80021a6:	e01b      	b.n	80021e0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <MCAL_UART_GPIO_SetPins+0xc4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d117      	bne.n	80021e0 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80021b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80021b6:	2306      	movs	r3, #6
 80021b8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <MCAL_UART_GPIO_SetPins+0xc8>)
 80021c6:	f7fe faa3 	bl	8000710 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80021ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80021d0:	2308      	movs	r3, #8
 80021d2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <MCAL_UART_GPIO_SetPins+0xc8>)
 80021dc:	f7fe fa98 	bl	8000710 <MCAL_GPIO_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40010800 	.word	0x40010800
 80021f0:	40004400 	.word	0x40004400
 80021f4:	40004800 	.word	0x40004800
 80021f8:	40010c00 	.word	0x40010c00

080021fc <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <USART1_IRQHandler+0x10>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4798      	blx	r3
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200000ac 	.word	0x200000ac

08002210 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <USART2_IRQHandler+0x10>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	4798      	blx	r3
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200000ac 	.word	0x200000ac

08002224 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8002228:	4b02      	ldr	r3, [pc, #8]	@ (8002234 <USART3_IRQHandler+0x10>)
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222c:	4798      	blx	r3
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200000ac 	.word	0x200000ac

08002238 <UART_Receiver_Callback>:
Robot_State MyCurrentState = DUMMY;


// Test succedded ----------------------------------------------------
void UART_Receiver_Callback(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART2, &initialSeverResponse, Disable);
 800223c:	2200      	movs	r2, #0
 800223e:	4914      	ldr	r1, [pc, #80]	@ (8002290 <UART_Receiver_Callback+0x58>)
 8002240:	4814      	ldr	r0, [pc, #80]	@ (8002294 <UART_Receiver_Callback+0x5c>)
 8002242:	f7ff ff3d 	bl	80020c0 <MCAL_UART_ReceiveData>
	if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST){
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <UART_Receiver_Callback+0x58>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b45      	cmp	r3, #69	@ 0x45
 800224e:	d004      	beq.n	800225a <UART_Receiver_Callback+0x22>
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <UART_Receiver_Callback+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b4c      	cmp	r3, #76	@ 0x4c
 8002258:	d113      	bne.n	8002282 <UART_Receiver_Callback+0x4a>
		newMessageArrived = 1;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <UART_Receiver_Callback+0x60>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
		if(initialSeverResponse == PARKING_REQUEST)
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <UART_Receiver_Callback+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b45      	cmp	r3, #69	@ 0x45
 8002268:	d103      	bne.n	8002272 <UART_Receiver_Callback+0x3a>
			isAParking = 1;
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <UART_Receiver_Callback+0x64>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e007      	b.n	8002282 <UART_Receiver_Callback+0x4a>
		else if(initialSeverResponse == RETRIEVAL_REQUEST)
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <UART_Receiver_Callback+0x58>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b4c      	cmp	r3, #76	@ 0x4c
 800227a:	d102      	bne.n	8002282 <UART_Receiver_Callback+0x4a>
			isRetrieving = 1;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <UART_Receiver_Callback+0x68>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
	}
	MCAL_UART_SendData(USART2, &Buffer, Enable);
 8002282:	2201      	movs	r2, #1
 8002284:	4907      	ldr	r1, [pc, #28]	@ (80022a4 <UART_Receiver_Callback+0x6c>)
 8002286:	4803      	ldr	r0, [pc, #12]	@ (8002294 <UART_Receiver_Callback+0x5c>)
 8002288:	f7ff fefa 	bl	8002080 <MCAL_UART_SendData>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200000f7 	.word	0x200000f7
 8002294:	40004400 	.word	0x40004400
 8002298:	200000f6 	.word	0x200000f6
 800229c:	200000f2 	.word	0x200000f2
 80022a0:	200000f1 	.word	0x200000f1
 80022a4:	20000000 	.word	0x20000000

080022a8 <main>:
uint8_t Done_Arriving_At_Slot_Backward = 0;


uint8_t DoneSending = 0;

int main(void) {
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b098      	sub	sp, #96	@ 0x60
 80022ac:	af02      	add	r7, sp, #8



	Clock_Init();
 80022ae:	f000 fa77 	bl	80027a0 <Clock_Init>

	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_115200;
 80022b2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80022b6:	643b      	str	r3, [r7, #64]	@ 0x40
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80022be:	2320      	movs	r3, #32
 80022c0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	UART_Cfg.P_IRQ_CallBack = UART_Receiver_Callback;
 80022c4:	4b97      	ldr	r3, [pc, #604]	@ (8002524 <main+0x27c>)
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	UART_Cfg.Parity = UART_Parity_NONE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	UART_Cfg.StopBits = UART_StopBits_1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 80022da:	230c      	movs	r3, #12
 80022dc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	MCAL_UART_Init(USART2, &UART_Cfg);
 80022e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022e4:	4619      	mov	r1, r3
 80022e6:	4890      	ldr	r0, [pc, #576]	@ (8002528 <main+0x280>)
 80022e8:	f7ff fdf8 	bl	8001edc <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART2);
 80022ec:	488e      	ldr	r0, [pc, #568]	@ (8002528 <main+0x280>)
 80022ee:	f7ff ff1f 	bl	8002130 <MCAL_UART_GPIO_SetPins>
	//			.TriggerCase = EXTI_Trigger_RISING
	//	};
	//
	//	MCAL_EXTI_GPIO_Init(&EXTI_IR1);

	Motor_Config_t DC_Motor1 =
 80022f2:	4b8e      	ldr	r3, [pc, #568]	@ (800252c <main+0x284>)
 80022f4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80022f8:	461d      	mov	r5, r3
 80022fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fe:	682b      	ldr	r3, [r5, #0]
 8002300:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3, //A6
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 8002302:	4b8b      	ldr	r3, [pc, #556]	@ (8002530 <main+0x288>)
 8002304:	f107 0414 	add.w	r4, r7, #20
 8002308:	461d      	mov	r5, r3
 800230a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800230c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3, // B1
			.PWM_Channel = TIMER_CH4
	};


	Motor_intialize(&DC_Motor1);
 8002312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff2a 	bl	8000170 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff25 	bl	8000170 <Motor_intialize>

	GPIO_PinConfig_t RED_StepperDirPin = {
 8002326:	4b83      	ldr	r3, [pc, #524]	@ (8002534 <main+0x28c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
			.GPIO_PinNumber = GPIO_PIN_6,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t BLUE_StepperDirPin = {
 800232c:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <main+0x290>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
			.GPIO_PinNumber = GPIO_PIN_8,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t IR_LED = {
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <main+0x294>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60bb      	str	r3, [r7, #8]
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOC, &IR_LED);
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4619      	mov	r1, r3
 800233e:	4880      	ldr	r0, [pc, #512]	@ (8002540 <main+0x298>)
 8002340:	f7fe f9e6 	bl	8000710 <MCAL_GPIO_Init>


	GPIO_PinConfig_t LimSwithch_Back = {
 8002344:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <main+0x29c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	607b      	str	r3, [r7, #4]
			.GPIO_PinNumber = GPIO_PIN_1,
			.GPIO_MODE = GPIO_MODE_INPUT_PULLUP,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOA, &LimSwithch_Back);
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	487e      	ldr	r0, [pc, #504]	@ (8002548 <main+0x2a0>)
 8002350:	f7fe f9de 	bl	8000710 <MCAL_GPIO_Init>

	GPIO_PinConfig_t LimSwithch_Forward = {
 8002354:	4b7d      	ldr	r3, [pc, #500]	@ (800254c <main+0x2a4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	603b      	str	r3, [r7, #0]
			.GPIO_PinNumber = GPIO_PIN_0,
			.GPIO_MODE = GPIO_MODE_INPUT_PULLUP,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOA, &LimSwithch_Forward);
 800235a:	463b      	mov	r3, r7
 800235c:	4619      	mov	r1, r3
 800235e:	487a      	ldr	r0, [pc, #488]	@ (8002548 <main+0x2a0>)
 8002360:	f7fe f9d6 	bl	8000710 <MCAL_GPIO_Init>

	Stepper_Init(&RED_StepperDirPin);
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4618      	mov	r0, r3
 800236a:	f7fd ff99 	bl	80002a0 <Stepper_Init>
	Stepper_Init(&BLUE_StepperDirPin);
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	4618      	mov	r0, r3
 8002374:	f7fd ff94 	bl	80002a0 <Stepper_Init>
		//		Delay_Timer1_ms(7000);




		if(newMessageArrived)
 8002378:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <main+0x2a8>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <main+0xee>
		{
			newMessageArrived = 0;
 8002382:	4b73      	ldr	r3, [pc, #460]	@ (8002550 <main+0x2a8>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
			if(MyCurrentState == DUMMY)
 8002388:	4b72      	ldr	r3, [pc, #456]	@ (8002554 <main+0x2ac>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d102      	bne.n	8002396 <main+0xee>
			{
				MyCurrentState = Idle;
 8002390:	4b70      	ldr	r3, [pc, #448]	@ (8002554 <main+0x2ac>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
			}
		}



		switch(MyCurrentState)
 8002396:	4b6f      	ldr	r3, [pc, #444]	@ (8002554 <main+0x2ac>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b06      	cmp	r3, #6
 800239c:	d8ec      	bhi.n	8002378 <main+0xd0>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <main+0xfc>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023c1 	.word	0x080023c1
 80023a8:	08002455 	.word	0x08002455
 80023ac:	08002483 	.word	0x08002483
 80023b0:	080026d3 	.word	0x080026d3
 80023b4:	08002707 	.word	0x08002707
 80023b8:	08002733 	.word	0x08002733
 80023bc:	08002379 	.word	0x08002379
		{
		case Idle:
		{
			if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST || PreviousReceived == PARKING_REQUEST || PreviousReceived == RETRIEVAL_REQUEST ){
 80023c0:	4b65      	ldr	r3, [pc, #404]	@ (8002558 <main+0x2b0>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b45      	cmp	r3, #69	@ 0x45
 80023c8:	d00d      	beq.n	80023e6 <main+0x13e>
 80023ca:	4b63      	ldr	r3, [pc, #396]	@ (8002558 <main+0x2b0>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b4c      	cmp	r3, #76	@ 0x4c
 80023d2:	d008      	beq.n	80023e6 <main+0x13e>
 80023d4:	4b61      	ldr	r3, [pc, #388]	@ (800255c <main+0x2b4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b45      	cmp	r3, #69	@ 0x45
 80023da:	d004      	beq.n	80023e6 <main+0x13e>
 80023dc:	4b5f      	ldr	r3, [pc, #380]	@ (800255c <main+0x2b4>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b4c      	cmp	r3, #76	@ 0x4c
 80023e2:	f040 81b8 	bne.w	8002756 <main+0x4ae>
				PreviousReceived = initialSeverResponse;
 80023e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002558 <main+0x2b0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b5b      	ldr	r3, [pc, #364]	@ (800255c <main+0x2b4>)
 80023ee:	701a      	strb	r2, [r3, #0]

				USART_Disable_IRQ();
 80023f0:	f7ff fd58 	bl	8001ea4 <USART_Disable_IRQ>


				Done_Arriving_At_Slot_Forward = 0;
 80023f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002560 <main+0x2b8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
				Done_Arriving_At_Slot_Backward = 0;
 80023fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002564 <main+0x2bc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
				mySendChar = RECEIVED_OK;
 8002400:	4b59      	ldr	r3, [pc, #356]	@ (8002568 <main+0x2c0>)
 8002402:	2244      	movs	r2, #68	@ 0x44
 8002404:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8002406:	2201      	movs	r2, #1
 8002408:	4957      	ldr	r1, [pc, #348]	@ (8002568 <main+0x2c0>)
 800240a:	4847      	ldr	r0, [pc, #284]	@ (8002528 <main+0x280>)
 800240c:	f7ff fe38 	bl	8002080 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002410:	2201      	movs	r2, #1
 8002412:	4956      	ldr	r1, [pc, #344]	@ (800256c <main+0x2c4>)
 8002414:	4844      	ldr	r0, [pc, #272]	@ (8002528 <main+0x280>)
 8002416:	f7ff fe53 	bl	80020c0 <MCAL_UART_ReceiveData>


				RecievedFromServer = RecievedFromServer - '0';
 800241a:	4b54      	ldr	r3, [pc, #336]	@ (800256c <main+0x2c4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	3b30      	subs	r3, #48	@ 0x30
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b51      	ldr	r3, [pc, #324]	@ (800256c <main+0x2c4>)
 8002426:	701a      	strb	r2, [r3, #0]

				if(RecievedFromServer >= 1 && RecievedFromServer <= 6){
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <main+0x2c4>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8191 	beq.w	8002756 <main+0x4ae>
 8002434:	4b4d      	ldr	r3, [pc, #308]	@ (800256c <main+0x2c4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b06      	cmp	r3, #6
 800243c:	f200 818b 	bhi.w	8002756 <main+0x4ae>
					SlotNumber = RecievedFromServer;
 8002440:	4b4a      	ldr	r3, [pc, #296]	@ (800256c <main+0x2c4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <main+0x2c8>)
 800244a:	601a      	str	r2, [r3, #0]
					MyCurrentState = Wait_Slot_Number;
 800244c:	4b41      	ldr	r3, [pc, #260]	@ (8002554 <main+0x2ac>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 8002452:	e180      	b.n	8002756 <main+0x4ae>


		case Wait_Slot_Number:
		{
			mySendChar = ACK_SLOT_NUMBER;
 8002454:	4b44      	ldr	r3, [pc, #272]	@ (8002568 <main+0x2c0>)
 8002456:	2259      	movs	r2, #89	@ 0x59
 8002458:	801a      	strh	r2, [r3, #0]

			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 800245a:	2201      	movs	r2, #1
 800245c:	4942      	ldr	r1, [pc, #264]	@ (8002568 <main+0x2c0>)
 800245e:	4832      	ldr	r0, [pc, #200]	@ (8002528 <main+0x280>)
 8002460:	f7ff fe0e 	bl	8002080 <MCAL_UART_SendData>



			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002464:	2201      	movs	r2, #1
 8002466:	4941      	ldr	r1, [pc, #260]	@ (800256c <main+0x2c4>)
 8002468:	482f      	ldr	r0, [pc, #188]	@ (8002528 <main+0x280>)
 800246a:	f7ff fe29 	bl	80020c0 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == FIRST_REKEB){
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <main+0x2c4>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b46      	cmp	r3, #70	@ 0x46
 8002476:	f040 8170 	bne.w	800275a <main+0x4b2>
				MyCurrentState = Wait_First_Rekeb;
 800247a:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <main+0x2ac>)
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
			}


		}
		break;
 8002480:	e16b      	b.n	800275a <main+0x4b2>


		case Wait_First_Rekeb:
		{
			mySendChar = 0;
 8002482:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <main+0x2c0>)
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]

			if(isAParking)
 8002488:	4b3a      	ldr	r3, [pc, #232]	@ (8002574 <main+0x2cc>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <main+0x1f0>
			{
				mySendChar = START_PARKING;
 8002492:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <main+0x2c0>)
 8002494:	2242      	movs	r2, #66	@ 0x42
 8002496:	801a      	strh	r2, [r3, #0]
			}
			if(isRetrieving)
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <main+0x2d0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <main+0x200>
			{
				mySendChar = START_RETRIEVING;
 80024a2:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <main+0x2c0>)
 80024a4:	224d      	movs	r2, #77	@ 0x4d
 80024a6:	801a      	strh	r2, [r3, #0]
			}

			//				mySendChar = START_PARKING;
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80024a8:	2201      	movs	r2, #1
 80024aa:	492f      	ldr	r1, [pc, #188]	@ (8002568 <main+0x2c0>)
 80024ac:	481e      	ldr	r0, [pc, #120]	@ (8002528 <main+0x280>)
 80024ae:	f7ff fde7 	bl	8002080 <MCAL_UART_SendData>


			// 3- Move forward -- distance (Main Track)

			while(!Done_Arriving_At_Slot_Forward)
 80024b2:	e08c      	b.n	80025ce <main+0x326>
			{

				if((SlotNumber - 1 ))
 80024b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002570 <main+0x2c8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d028      	beq.n	800250e <main+0x266>
				{
					if (SlotNumber==3 || SlotNumber ==6){
 80024bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <main+0x2c8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <main+0x224>
 80024c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <main+0x2c8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d116      	bne.n	80024fa <main+0x252>
						Motor_Move_ForWard(&DC_Motor1, MOTORS_SPEED);
 80024cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d0:	2150      	movs	r1, #80	@ 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe9a 	bl	800020c <Motor_Move_ForWard>
						Motor_Move_ForWard(&DC_Motor2, MOTORS_SPEED);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2150      	movs	r1, #80	@ 0x50
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd fe94 	bl	800020c <Motor_Move_ForWard>

						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 80024e4:	e002      	b.n	80024ec <main+0x244>
							Delay_Timer1_ms(10);
 80024e6:	200a      	movs	r0, #10
 80024e8:	f7fe fbde 	bl	8000ca8 <Delay_Timer1_ms>
						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 80024ec:	2102      	movs	r1, #2
 80024ee:	4816      	ldr	r0, [pc, #88]	@ (8002548 <main+0x2a0>)
 80024f0:	f7fe f98d 	bl	800080e <MCAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f5      	bne.n	80024e6 <main+0x23e>
						}

					}
					Motor_TurnOff(&DC_Motor1);
 80024fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fd fe5c 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe57 	bl	80001bc <Motor_TurnOff>
				}


				if(SlotNumber == 4 || SlotNumber == 6){
 800250e:	4b18      	ldr	r3, [pc, #96]	@ (8002570 <main+0x2c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d003      	beq.n	800251e <main+0x276>
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <main+0x2c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d150      	bne.n	80025c0 <main+0x318>
					for(int i=0; i< STEPPER_To2nd_Floor; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	657b      	str	r3, [r7, #84]	@ 0x54
 8002522:	e049      	b.n	80025b8 <main+0x310>
 8002524:	08002239 	.word	0x08002239
 8002528:	40004400 	.word	0x40004400
 800252c:	080028e0 	.word	0x080028e0
 8002530:	080028f4 	.word	0x080028f4
 8002534:	08002908 	.word	0x08002908
 8002538:	0800290c 	.word	0x0800290c
 800253c:	08002910 	.word	0x08002910
 8002540:	40011000 	.word	0x40011000
 8002544:	08002914 	.word	0x08002914
 8002548:	40010800 	.word	0x40010800
 800254c:	08002918 	.word	0x08002918
 8002550:	200000f6 	.word	0x200000f6
 8002554:	20000002 	.word	0x20000002
 8002558:	200000f7 	.word	0x200000f7
 800255c:	200000f0 	.word	0x200000f0
 8002560:	200000f8 	.word	0x200000f8
 8002564:	200000f9 	.word	0x200000f9
 8002568:	200000f4 	.word	0x200000f4
 800256c:	200000e8 	.word	0x200000e8
 8002570:	200000ec 	.word	0x200000ec
 8002574:	200000f2 	.word	0x200000f2
 8002578:	200000f1 	.word	0x200000f1
					{
						Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 2200, Stepper_UP);  // B9 --> RED Step
 800257c:	2301      	movs	r3, #1
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	f640 0398 	movw	r3, #2200	@ 0x898
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2332      	movs	r3, #50	@ 0x32
 8002588:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800258c:	2103      	movs	r1, #3
 800258e:	4877      	ldr	r0, [pc, #476]	@ (800276c <main+0x4c4>)
 8002590:	f7fd feaa 	bl	80002e8 <Stepper_Move_Steps>
						Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 2200, Stepper_UP);  // B7 --> BLUE Step
 8002594:	2301      	movs	r3, #1
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	f640 0398 	movw	r3, #2200	@ 0x898
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2332      	movs	r3, #50	@ 0x32
 80025a0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80025a4:	2101      	movs	r1, #1
 80025a6:	4871      	ldr	r0, [pc, #452]	@ (800276c <main+0x4c4>)
 80025a8:	f7fd fe9e 	bl	80002e8 <Stepper_Move_Steps>
						Delay_Timer1_ms(100);
 80025ac:	2064      	movs	r0, #100	@ 0x64
 80025ae:	f7fe fb7b 	bl	8000ca8 <Delay_Timer1_ms>
					for(int i=0; i< STEPPER_To2nd_Floor; i++)
 80025b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b4:	3301      	adds	r3, #1
 80025b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025be:	dbdd      	blt.n	800257c <main+0x2d4>
					}

				}

				Delay_Timer1_ms(DELAY_PROCESS_TO_PROCESS);
 80025c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025c4:	f7fe fb70 	bl	8000ca8 <Delay_Timer1_ms>

				Done_Arriving_At_Slot_Forward = 1;
 80025c8:	4b69      	ldr	r3, [pc, #420]	@ (8002770 <main+0x4c8>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
			while(!Done_Arriving_At_Slot_Forward)
 80025ce:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <main+0x4c8>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f43f af6e 	beq.w	80024b4 <main+0x20c>
			}


			mySendChar = ARRIVED_INFRONTOF_SLOT;
 80025d8:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <main+0x4cc>)
 80025da:	2248      	movs	r2, #72	@ 0x48
 80025dc:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80025de:	2201      	movs	r2, #1
 80025e0:	4964      	ldr	r1, [pc, #400]	@ (8002774 <main+0x4cc>)
 80025e2:	4865      	ldr	r0, [pc, #404]	@ (8002778 <main+0x4d0>)
 80025e4:	f7ff fd4c 	bl	8002080 <MCAL_UART_SendData>

			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80025e8:	2201      	movs	r2, #1
 80025ea:	4964      	ldr	r1, [pc, #400]	@ (800277c <main+0x4d4>)
 80025ec:	4862      	ldr	r0, [pc, #392]	@ (8002778 <main+0x4d0>)
 80025ee:	f7ff fd67 	bl	80020c0 <MCAL_UART_ReceiveData>
			if(RecievedFromServer == DONE_PARKING || RecievedFromServer == DONE_RETREIVING){
 80025f2:	4b62      	ldr	r3, [pc, #392]	@ (800277c <main+0x4d4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b4a      	cmp	r3, #74	@ 0x4a
 80025fa:	d005      	beq.n	8002608 <main+0x360>
 80025fc:	4b5f      	ldr	r3, [pc, #380]	@ (800277c <main+0x4d4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b4f      	cmp	r3, #79	@ 0x4f
 8002604:	f040 80ab 	bne.w	800275e <main+0x4b6>
				MyCurrentState = Wait_Done_Parking;
 8002608:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <main+0x4d8>)
 800260a:	2203      	movs	r2, #3
 800260c:	701a      	strb	r2, [r3, #0]

			}


		}
		break;
 800260e:	e0a6      	b.n	800275e <main+0x4b6>

		case Wait_Done_Parking:
		{
			while(!Done_Arriving_At_Slot_Backward)
			{
				if((SlotNumber - 1 ))
 8002610:	4b5c      	ldr	r3, [pc, #368]	@ (8002784 <main+0x4dc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d028      	beq.n	800266a <main+0x3c2>
				{
					if (SlotNumber==3 || SlotNumber ==6){
 8002618:	4b5a      	ldr	r3, [pc, #360]	@ (8002784 <main+0x4dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <main+0x380>
 8002620:	4b58      	ldr	r3, [pc, #352]	@ (8002784 <main+0x4dc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d116      	bne.n	8002656 <main+0x3ae>

						Motor_Move_BackWard(&DC_Motor1, MOTORS_SPEED);
 8002628:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800262c:	2150      	movs	r1, #80	@ 0x50
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fe11 	bl	8000256 <Motor_Move_BackWard>
						Motor_Move_BackWard(&DC_Motor2, MOTORS_SPEED);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2150      	movs	r1, #80	@ 0x50
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fe0b 	bl	8000256 <Motor_Move_BackWard>

						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8002640:	e002      	b.n	8002648 <main+0x3a0>
							Delay_Timer1_ms(10);
 8002642:	200a      	movs	r0, #10
 8002644:	f7fe fb30 	bl	8000ca8 <Delay_Timer1_ms>
						while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8002648:	2101      	movs	r1, #1
 800264a:	484f      	ldr	r0, [pc, #316]	@ (8002788 <main+0x4e0>)
 800264c:	f7fe f8df 	bl	800080e <MCAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f5      	bne.n	8002642 <main+0x39a>
						}

					}
					Motor_TurnOff(&DC_Motor1);
 8002656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd fdae 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fda9 	bl	80001bc <Motor_TurnOff>
				}



				if(SlotNumber == 4 || SlotNumber == 6){
 800266a:	4b46      	ldr	r3, [pc, #280]	@ (8002784 <main+0x4dc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <main+0x3d2>
 8002672:	4b44      	ldr	r3, [pc, #272]	@ (8002784 <main+0x4dc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d124      	bne.n	80026c4 <main+0x41c>
					for(int i=0; i<STEPPER_To2nd_Floor; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	653b      	str	r3, [r7, #80]	@ 0x50
 800267e:	e01d      	b.n	80026bc <main+0x414>
					{
						Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 2200, Stepper_Down);  // B9 --> RED Step
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	f640 0398 	movw	r3, #2200	@ 0x898
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2332      	movs	r3, #50	@ 0x32
 800268c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002690:	2103      	movs	r1, #3
 8002692:	4836      	ldr	r0, [pc, #216]	@ (800276c <main+0x4c4>)
 8002694:	f7fd fe28 	bl	80002e8 <Stepper_Move_Steps>
						Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 2200, Stepper_Down);  // B7 --> BLUE Step
 8002698:	2300      	movs	r3, #0
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	f640 0398 	movw	r3, #2200	@ 0x898
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2332      	movs	r3, #50	@ 0x32
 80026a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80026a8:	2101      	movs	r1, #1
 80026aa:	4830      	ldr	r0, [pc, #192]	@ (800276c <main+0x4c4>)
 80026ac:	f7fd fe1c 	bl	80002e8 <Stepper_Move_Steps>
						Delay_Timer1_ms(100);
 80026b0:	2064      	movs	r0, #100	@ 0x64
 80026b2:	f7fe faf9 	bl	8000ca8 <Delay_Timer1_ms>
					for(int i=0; i<STEPPER_To2nd_Floor; i++)
 80026b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b8:	3301      	adds	r3, #1
 80026ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80026bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026c2:	dbdd      	blt.n	8002680 <main+0x3d8>
					}

				}
				Delay_Timer1_ms(DELAY_PROCESS_TO_PROCESS);
 80026c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80026c8:	f7fe faee 	bl	8000ca8 <Delay_Timer1_ms>
				Done_Arriving_At_Slot_Backward = 1;
 80026cc:	4b2f      	ldr	r3, [pc, #188]	@ (800278c <main+0x4e4>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
			while(!Done_Arriving_At_Slot_Backward)
 80026d2:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <main+0x4e4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d09a      	beq.n	8002610 <main+0x368>
				//					Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_Down);  // B9 --> Step
				//					Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 1100, Stepper_Down);  // B7 --> Step
			}


			mySendChar = ARRIVED_AT_ENTRY;
 80026da:	4b26      	ldr	r3, [pc, #152]	@ (8002774 <main+0x4cc>)
 80026dc:	2249      	movs	r2, #73	@ 0x49
 80026de:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80026e0:	2201      	movs	r2, #1
 80026e2:	4924      	ldr	r1, [pc, #144]	@ (8002774 <main+0x4cc>)
 80026e4:	4824      	ldr	r0, [pc, #144]	@ (8002778 <main+0x4d0>)
 80026e6:	f7ff fccb 	bl	8002080 <MCAL_UART_SendData>

			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80026ea:	2201      	movs	r2, #1
 80026ec:	4923      	ldr	r1, [pc, #140]	@ (800277c <main+0x4d4>)
 80026ee:	4822      	ldr	r0, [pc, #136]	@ (8002778 <main+0x4d0>)
 80026f0:	f7ff fce6 	bl	80020c0 <MCAL_UART_ReceiveData>


			if(RecievedFromServer == FIRST_HOME){
 80026f4:	4b21      	ldr	r3, [pc, #132]	@ (800277c <main+0x4d4>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b47      	cmp	r3, #71	@ 0x47
 80026fc:	d131      	bne.n	8002762 <main+0x4ba>
				MyCurrentState = Done_First_Home;
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <main+0x4d8>)
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
			}


		}
		break;
 8002704:	e02d      	b.n	8002762 <main+0x4ba>
			//				mySendChar = FINISH_PARKING;
			//			}else if(isRetrieving)
			//			{
			//			}

			mySendChar = FINISH_PARKING;
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <main+0x4cc>)
 8002708:	2243      	movs	r2, #67	@ 0x43
 800270a:	801a      	strh	r2, [r3, #0]

			//				mySendChar = FINISH_PARKING;
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 800270c:	2201      	movs	r2, #1
 800270e:	4919      	ldr	r1, [pc, #100]	@ (8002774 <main+0x4cc>)
 8002710:	4819      	ldr	r0, [pc, #100]	@ (8002778 <main+0x4d0>)
 8002712:	f7ff fcb5 	bl	8002080 <MCAL_UART_SendData>


			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002716:	2201      	movs	r2, #1
 8002718:	4918      	ldr	r1, [pc, #96]	@ (800277c <main+0x4d4>)
 800271a:	4817      	ldr	r0, [pc, #92]	@ (8002778 <main+0x4d0>)
 800271c:	f7ff fcd0 	bl	80020c0 <MCAL_UART_ReceiveData>



			if(RecievedFromServer == IM_DONE)
 8002720:	4b16      	ldr	r3, [pc, #88]	@ (800277c <main+0x4d4>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b4b      	cmp	r3, #75	@ 0x4b
 8002728:	d11d      	bne.n	8002766 <main+0x4be>
			{
				MyCurrentState = Wait_First_Done;
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <main+0x4d8>)
 800272c:	2205      	movs	r2, #5
 800272e:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 8002730:	e019      	b.n	8002766 <main+0x4be>



		case Wait_First_Done:
		{
			isAParking = 0;
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <main+0x4e8>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
			isRetrieving = 0;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <main+0x4ec>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
			MyCurrentState = Idle;
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <main+0x4d8>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
			initialSeverResponse = 0;
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <main+0x4f0>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
			PreviousReceived = 0;
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <main+0x4f4>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]

			USART_Enable_IRQ();
 8002750:	f7ff fbb6 	bl	8001ec0 <USART_Enable_IRQ>
		}
		break;
 8002754:	e009      	b.n	800276a <main+0x4c2>
		break;
 8002756:	bf00      	nop
 8002758:	e60e      	b.n	8002378 <main+0xd0>
		break;
 800275a:	bf00      	nop
 800275c:	e60c      	b.n	8002378 <main+0xd0>
		break;
 800275e:	bf00      	nop
 8002760:	e60a      	b.n	8002378 <main+0xd0>
		break;
 8002762:	bf00      	nop
 8002764:	e608      	b.n	8002378 <main+0xd0>
		break;
 8002766:	bf00      	nop
 8002768:	e606      	b.n	8002378 <main+0xd0>
		if(newMessageArrived)
 800276a:	e605      	b.n	8002378 <main+0xd0>
 800276c:	40000800 	.word	0x40000800
 8002770:	200000f8 	.word	0x200000f8
 8002774:	200000f4 	.word	0x200000f4
 8002778:	40004400 	.word	0x40004400
 800277c:	200000e8 	.word	0x200000e8
 8002780:	20000002 	.word	0x20000002
 8002784:	200000ec 	.word	0x200000ec
 8002788:	40010800 	.word	0x40010800
 800278c:	200000f9 	.word	0x200000f9
 8002790:	200000f2 	.word	0x200000f2
 8002794:	200000f1 	.word	0x200000f1
 8002798:	200000f7 	.word	0x200000f7
 800279c:	200000f0 	.word	0x200000f0

080027a0 <Clock_Init>:
}



void Clock_Init()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 80027a4:	2148      	movs	r1, #72	@ 0x48
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe f95a 	bl	8000a60 <MCAL_RCC_CLK_Init>

	RCC_GPIOC_CLK_EN();
 80027ac:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <Clock_Init+0x60>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a13      	ldr	r2, [pc, #76]	@ (8002800 <Clock_Init+0x60>)
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <Clock_Init+0x60>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <Clock_Init+0x60>)
 80027be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c2:	61d3      	str	r3, [r2, #28]

	RCC_GPIOB_CLK_EN();
 80027c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <Clock_Init+0x60>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <Clock_Init+0x60>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <Clock_Init+0x60>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <Clock_Init+0x60>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <Clock_Init+0x60>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <Clock_Init+0x60>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6193      	str	r3, [r2, #24]
	RCC_I2C1_CLK_EN();
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <Clock_Init+0x60>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <Clock_Init+0x60>)
 80027ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027f2:	61d3      	str	r3, [r2, #28]

	TIMER1_Init(RCC_CLK_36M);
 80027f4:	2024      	movs	r0, #36	@ 0x24
 80027f6:	f7fe fa17 	bl	8000c28 <TIMER1_Init>

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000

08002804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002804:	480d      	ldr	r0, [pc, #52]	@ (800283c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002808:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800280c:	480c      	ldr	r0, [pc, #48]	@ (8002840 <LoopForever+0x6>)
  ldr r1, =_edata
 800280e:	490d      	ldr	r1, [pc, #52]	@ (8002844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002810:	4a0d      	ldr	r2, [pc, #52]	@ (8002848 <LoopForever+0xe>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002814:	e002      	b.n	800281c <LoopCopyDataInit>

08002816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281a:	3304      	adds	r3, #4

0800281c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800281c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002820:	d3f9      	bcc.n	8002816 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002824:	4c0a      	ldr	r4, [pc, #40]	@ (8002850 <LoopForever+0x16>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002828:	e001      	b.n	800282e <LoopFillZerobss>

0800282a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800282c:	3204      	adds	r2, #4

0800282e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002830:	d3fb      	bcc.n	800282a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002832:	f000 f811 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002836:	f7ff fd37 	bl	80022a8 <main>

0800283a <LoopForever>:

LoopForever:
  b LoopForever
 800283a:	e7fe      	b.n	800283a <LoopForever>
  ldr   r0, =_estack
 800283c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002848:	08002924 	.word	0x08002924
  ldr r2, =_sbss
 800284c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002850:	200000fc 	.word	0x200000fc

08002854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC1_2_IRQHandler>
	...

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4d0c      	ldr	r5, [pc, #48]	@ (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	@ (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 f81a 	bl	80028a0 <_init>
 800286c:	2600      	movs	r6, #0
 800286e:	4d0a      	ldr	r5, [pc, #40]	@ (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	@ (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f855 3b04 	ldr.w	r3, [r5], #4
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	0800291c 	.word	0x0800291c
 8002894:	0800291c 	.word	0x0800291c
 8002898:	0800291c 	.word	0x0800291c
 800289c:	08002920 	.word	0x08002920

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr
