
Liftin_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d0  080038d0  0000503c  2**0
                  CONTENTS
  4 .ARM          00000000  080038d0  080038d0  0000503c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d0  080038d0  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d0  080038d0  000048d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080038d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000003c  08003914  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003914  00005138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b4b  00000000  00000000  00005065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001480  00000000  00000000  00009bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  0000b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000034c  00000000  00000000  0000b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a98  00000000  00000000  0000b834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000783c  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d3f1  00000000  00000000  00016b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00023ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e0  00000000  00000000  00023f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0002501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000003c 	.word	0x2000003c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800380c 	.word	0x0800380c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000040 	.word	0x20000040
 800016c:	0800380c 	.word	0x0800380c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 8000958:	81bb      	strh	r3, [r7, #12]
 800095a:	2304      	movs	r3, #4
 800095c:	73bb      	strb	r3, [r7, #14]
 800095e:	2302      	movs	r3, #2
 8000960:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f107 020c 	add.w	r2, r7, #12
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fe9d 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 8000976:	813b      	strh	r3, [r7, #8]
 8000978:	2304      	movs	r3, #4
 800097a:	72bb      	strb	r3, [r7, #10]
 800097c:	2302      	movs	r3, #2
 800097e:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f107 0208 	add.w	r2, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fe8e 	bl	80016ac <MCAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6858      	ldr	r0, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	f000 ff14 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6898      	ldr	r0, [r3, #8]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	f000 ff0c 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2102      	movs	r1, #2
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <Motor_TurnOff+0x48>)
 80009c6:	f000 ff07 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_LOW);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <Motor_TurnOff+0x4c>)
 80009d0:	f000 ff02 	bl	80017d8 <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 80009d4:	f001 fd0c 	bl	80023f0 <TIMER3_Stop>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	40010800 	.word	0x40010800

080009e8 <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68d8      	ldr	r0, [r3, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7c19      	ldrb	r1, [r3, #16]
 80009fc:	78fa      	ldrb	r2, [r7, #3]
 80009fe:	2324      	movs	r3, #36	@ 0x24
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	f001 f935 	bl	8001c74 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6858      	ldr	r0, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	f000 fedf 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6898      	ldr	r0, [r3, #8]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	f000 fed7 	bl	80017d8 <MCAL_GPIO_WritePin>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <Motor_Move_BackWard>:





void Motor_Move_BackWard(Motor_Config_t *Motor, uint8_t speed){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af02      	add	r7, sp, #8
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68d8      	ldr	r0, [r3, #12]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7c19      	ldrb	r1, [r3, #16]
 8000a46:	78fa      	ldrb	r2, [r7, #3]
 8000a48:	2324      	movs	r3, #36	@ 0x24
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a50:	f001 f910 	bl	8001c74 <PWM>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_LOW);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6858      	ldr	r0, [r3, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f000 feba 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_HIGH);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6898      	ldr	r0, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 feb2 	bl	80017d8 <MCAL_GPIO_WritePin>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	@ 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 8000a8a:	4a79      	ldr	r2, [pc, #484]	@ (8000c70 <LCD_enuInit+0x1f4>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RS = {
 8000a94:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000a96:	2304      	movs	r3, #4
 8000a98:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &RS);
 8000aa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4872      	ldr	r0, [pc, #456]	@ (8000c74 <LCD_enuInit+0x1f8>)
 8000aaa:	f000 fdff 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t RW = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RW = {
 8000ab2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000aba:	2302      	movs	r3, #2
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &RW);
 8000ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486b      	ldr	r0, [pc, #428]	@ (8000c74 <LCD_enuInit+0x1f8>)
 8000ac8:	f000 fdf0 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig_t EN = {
 8000ad0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &EN);
 8000ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4863      	ldr	r0, [pc, #396]	@ (8000c74 <LCD_enuInit+0x1f8>)
 8000ae6:	f000 fde1 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	895b      	ldrh	r3, [r3, #10]
	GPIO_PinConfig_t D7 = {
 8000aee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000af0:	2304      	movs	r3, #4
 8000af2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000af6:	2302      	movs	r3, #2
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D7);
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	485d      	ldr	r0, [pc, #372]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000b04:	f000 fdd2 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	899b      	ldrh	r3, [r3, #12]
	GPIO_PinConfig_t D6 = {
 8000b0c:	843b      	strh	r3, [r7, #32]
 8000b0e:	2304      	movs	r3, #4
 8000b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000b14:	2302      	movs	r3, #2
 8000b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D6);
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4855      	ldr	r0, [pc, #340]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000b22:	f000 fdc3 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	89db      	ldrh	r3, [r3, #14]
	GPIO_PinConfig_t D5 = {
 8000b2a:	83bb      	strh	r3, [r7, #28]
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	77bb      	strb	r3, [r7, #30]
 8000b30:	2302      	movs	r3, #2
 8000b32:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D5);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	484f      	ldr	r0, [pc, #316]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000b3c:	f000 fdb6 	bl	80016ac <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	8a1b      	ldrh	r3, [r3, #16]
	GPIO_PinConfig_t D4 = {
 8000b44:	833b      	strh	r3, [r7, #24]
 8000b46:	2304      	movs	r3, #4
 8000b48:	76bb      	strb	r3, [r7, #26]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	76fb      	strb	r3, [r7, #27]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &D4);
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4847      	ldr	r0, [pc, #284]	@ (8000c74 <LCD_enuInit+0x1f8>)
 8000b56:	f000 fda9 	bl	80016ac <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(GPIOA, Copy_pstrConfigs->RW_Pin, GPIO_PIN_LOW);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	88db      	ldrh	r3, [r3, #6]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4844      	ldr	r0, [pc, #272]	@ (8000c74 <LCD_enuInit+0x1f8>)
 8000b64:	f000 fe38 	bl	80017d8 <MCAL_GPIO_WritePin>

	TIMER1_Init(RCC_CLK_8M);
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f001 f82b 	bl	8001bc4 <TIMER1_Init>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
	Delay_Timer1_ms(35); //power on
 8000b6e:	2023      	movs	r0, #35	@ 0x23
 8000b70:	f001 f868 	bl	8001c44 <Delay_Timer1_ms>
	//MCAL_GPIO_WritePin(GPIsOA, GPIO_PIN_5, GPIO_PIN_LOW);

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d10a      	bne.n	8000b92 <LCD_enuInit+0x116>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	889b      	ldrh	r3, [r3, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000b86:	f000 fe27 	bl	80017d8 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 8000b8a:	2028      	movs	r0, #40	@ 0x28
 8000b8c:	f000 f876 	bl	8000c7c <LCD_enuWriteAndLatch>
 8000b90:	e041      	b.n	8000c16 <LCD_enuInit+0x19a>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d13d      	bne.n	8000c16 <LCD_enuInit+0x19a>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4835      	ldr	r0, [pc, #212]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000ba4:	f000 fe18 	bl	80017d8 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 8000ba8:	2038      	movs	r0, #56	@ 0x38
 8000baa:	f000 f867 	bl	8000c7c <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8a5b      	ldrh	r3, [r3, #18]
		GPIO_PinConfig_t D3 = {
 8000bb2:	82bb      	strh	r3, [r7, #20]
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	75bb      	strb	r3, [r7, #22]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D3);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	482d      	ldr	r0, [pc, #180]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000bc4:	f000 fd72 	bl	80016ac <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	8a9b      	ldrh	r3, [r3, #20]
		GPIO_PinConfig_t D2 = {
 8000bcc:	823b      	strh	r3, [r7, #16]
 8000bce:	2304      	movs	r3, #4
 8000bd0:	74bb      	strb	r3, [r7, #18]
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D2);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4826      	ldr	r0, [pc, #152]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000bde:	f000 fd65 	bl	80016ac <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	8adb      	ldrh	r3, [r3, #22]
		GPIO_PinConfig_t D1 = {
 8000be6:	81bb      	strh	r3, [r7, #12]
 8000be8:	2304      	movs	r3, #4
 8000bea:	73bb      	strb	r3, [r7, #14]
 8000bec:	2302      	movs	r3, #2
 8000bee:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D1);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4820      	ldr	r0, [pc, #128]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000bf8:	f000 fd58 	bl	80016ac <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	8b1b      	ldrh	r3, [r3, #24]
		GPIO_PinConfig_t D0 = {
 8000c00:	813b      	strh	r3, [r7, #8]
 8000c02:	2304      	movs	r3, #4
 8000c04:	72bb      	strb	r3, [r7, #10]
 8000c06:	2302      	movs	r3, #2
 8000c08:	72fb      	strb	r3, [r7, #11]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D0);
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4819      	ldr	r0, [pc, #100]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000c12:	f000 fd4b 	bl	80016ac <MCAL_GPIO_Init>
	}


	Delay_Timer1_ms(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f001 f814 	bl	8001c44 <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	889b      	ldrh	r3, [r3, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000c26:	f000 fdd7 	bl	80017d8 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 8000c2a:	200c      	movs	r0, #12
 8000c2c:	f000 f826 	bl	8000c7c <LCD_enuWriteAndLatch>

	Delay_Timer1_ms(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 f807 	bl	8001c44 <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	889b      	ldrh	r3, [r3, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480e      	ldr	r0, [pc, #56]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000c40:	f000 fdca 	bl	80017d8 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 f819 	bl	8000c7c <LCD_enuWriteAndLatch>

	Delay_Timer1_ms(3);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f000 fffa 	bl	8001c44 <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	889b      	ldrh	r3, [r3, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <LCD_enuInit+0x1fc>)
 8000c5a:	f000 fdbd 	bl	80017d8 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f000 f80c 	bl	8000c7c <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 8000c64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3738      	adds	r7, #56	@ 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000058 	.word	0x20000058
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 8000c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	88db      	ldrh	r3, [r3, #6]
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	487c      	ldr	r0, [pc, #496]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000c96:	f000 fd9f 	bl	80017d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 8000c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	891b      	ldrh	r3, [r3, #8]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4878      	ldr	r0, [pc, #480]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000ca6:	f000 fd97 	bl	80017d8 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b28      	cmp	r3, #40	@ 0x28
 8000cae:	d152      	bne.n	8000d56 <LCD_enuWriteAndLatch+0xda>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 8000cb0:	4b74      	ldr	r3, [pc, #464]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4873      	ldr	r0, [pc, #460]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000cba:	f000 fd76 	bl	80017aa <MCAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d146      	bne.n	8000d56 <LCD_enuWriteAndLatch+0xda>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000cc8:	4b6e      	ldr	r3, [pc, #440]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	8959      	ldrh	r1, [r3, #10]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	09db      	lsrs	r3, r3, #7
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	486c      	ldr	r0, [pc, #432]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000cd8:	f000 fd7e 	bl	80017d8 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000cdc:	4b69      	ldr	r3, [pc, #420]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	8999      	ldrh	r1, [r3, #12]
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	099b      	lsrs	r3, r3, #6
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4865      	ldr	r0, [pc, #404]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000cf2:	f000 fd71 	bl	80017d8 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000cf6:	4b63      	ldr	r3, [pc, #396]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	89d9      	ldrh	r1, [r3, #14]
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	485f      	ldr	r0, [pc, #380]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d0c:	f000 fd64 	bl	80017d8 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000d10:	4b5c      	ldr	r3, [pc, #368]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	8a19      	ldrh	r1, [r3, #16]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	4858      	ldr	r0, [pc, #352]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d26:	f000 fd57 	bl	80017d8 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000d2a:	4b56      	ldr	r3, [pc, #344]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	891b      	ldrh	r3, [r3, #8]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	4854      	ldr	r0, [pc, #336]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d36:	f000 fd4f 	bl	80017d8 <MCAL_GPIO_WritePin>
			Delay_Timer1_ms(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 ff82 	bl	8001c44 <Delay_Timer1_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000d40:	4b50      	ldr	r3, [pc, #320]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	891b      	ldrh	r3, [r3, #8]
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	484f      	ldr	r0, [pc, #316]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d4c:	f000 fd44 	bl	80017d8 <MCAL_GPIO_WritePin>
			Delay_Timer1_ms(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 ff77 	bl	8001c44 <Delay_Timer1_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 8000d56:	4b4b      	ldr	r3, [pc, #300]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	f040 8095 	bne.w	8000e8c <LCD_enuWriteAndLatch+0x210>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000d62:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	8959      	ldrh	r1, [r3, #10]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	09db      	lsrs	r3, r3, #7
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4845      	ldr	r0, [pc, #276]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d72:	f000 fd31 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000d76:	4b43      	ldr	r3, [pc, #268]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	8999      	ldrh	r1, [r3, #12]
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	099b      	lsrs	r3, r3, #6
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	483f      	ldr	r0, [pc, #252]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000d8c:	f000 fd24 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000d90:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	89d9      	ldrh	r1, [r3, #14]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	4838      	ldr	r0, [pc, #224]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000da6:	f000 fd17 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	8a19      	ldrh	r1, [r3, #16]
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4832      	ldr	r0, [pc, #200]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000dc0:	f000 fd0a 	bl	80017d8 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	891b      	ldrh	r3, [r3, #8]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482e      	ldr	r0, [pc, #184]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000dd0:	f000 fd02 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 ff35 	bl	8001c44 <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000dda:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	891b      	ldrh	r3, [r3, #8]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4828      	ldr	r0, [pc, #160]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000de6:	f000 fcf7 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 ff2a 	bl	8001c44 <Delay_Timer1_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8000df0:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	8959      	ldrh	r1, [r3, #10]
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	4820      	ldr	r0, [pc, #128]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e06:	f000 fce7 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	8999      	ldrh	r1, [r3, #12]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	481a      	ldr	r0, [pc, #104]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e20:	f000 fcda 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	89d9      	ldrh	r1, [r3, #14]
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e3a:	f000 fccd 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	8a19      	ldrh	r1, [r3, #16]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e50:	f000 fcc2 	bl	80017d8 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	891b      	ldrh	r3, [r3, #8]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e60:	f000 fcba 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 feed 	bl	8001c44 <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <LCD_enuWriteAndLatch+0x208>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	891b      	ldrh	r3, [r3, #8]
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <LCD_enuWriteAndLatch+0x20c>)
 8000e76:	f000 fcaf 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 fee2 	bl	8001c44 <Delay_Timer1_ms>
 8000e80:	e082      	b.n	8000f88 <LCD_enuWriteAndLatch+0x30c>
 8000e82:	bf00      	nop
 8000e84:	20000058 	.word	0x20000058
 8000e88:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 8000e8c:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d178      	bne.n	8000f88 <LCD_enuWriteAndLatch+0x30c>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000e96:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	8959      	ldrh	r1, [r3, #10]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	09db      	lsrs	r3, r3, #7
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	483c      	ldr	r0, [pc, #240]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000ea6:	f000 fc97 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	8999      	ldrh	r1, [r3, #12]
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	099b      	lsrs	r3, r3, #6
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4836      	ldr	r0, [pc, #216]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000ec0:	f000 fc8a 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000ec4:	4b33      	ldr	r3, [pc, #204]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	89d9      	ldrh	r1, [r3, #14]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	095b      	lsrs	r3, r3, #5
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	482f      	ldr	r0, [pc, #188]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000eda:	f000 fc7d 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	8a19      	ldrh	r1, [r3, #16]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4829      	ldr	r0, [pc, #164]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000ef4:	f000 fc70 	bl	80017d8 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	8a59      	ldrh	r1, [r3, #18]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4822      	ldr	r0, [pc, #136]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f0e:	f000 fc63 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	8a99      	ldrh	r1, [r3, #20]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f28:	f000 fc56 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	8ad9      	ldrh	r1, [r3, #22]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	085b      	lsrs	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f42:	f000 fc49 	bl	80017d8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	8b19      	ldrh	r1, [r3, #24]
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f58:	f000 fc3e 	bl	80017d8 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	891b      	ldrh	r3, [r3, #8]
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f68:	f000 fc36 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fe69 	bl	8001c44 <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <LCD_enuWriteAndLatch+0x318>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	891b      	ldrh	r3, [r3, #8]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <LCD_enuWriteAndLatch+0x31c>)
 8000f7e:	f000 fc2b 	bl	80017d8 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 fe5e 	bl	8001c44 <Delay_Timer1_ms>
	}

	return Local_ErrorState;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000058 	.word	0x20000058
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8000fa8:	e00e      	b.n	8000fc8 <LCD_enuSendString+0x2c>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <LCD_enuSendString+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	889b      	ldrh	r3, [r3, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <LCD_enuSendString+0x44>)
 8000fb6:	f000 fc0f 	bl	80017d8 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe5a 	bl	8000c7c <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1ec      	bne.n	8000faa <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000058 	.word	0x20000058
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <LCD_enuJumpCursorTo+0x94>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	481e      	ldr	r0, [pc, #120]	@ (800107c <LCD_enuJumpCursorTo+0x98>)
 8001004:	f000 fbe8 	bl	80017d8 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d108      	bne.n	8001020 <LCD_enuJumpCursorTo+0x3c>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	3b80      	subs	r3, #128	@ 0x80
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe31 	bl	8000c7c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e025      	b.n	800106c <LCD_enuJumpCursorTo+0x88>
	}

	else if (Copy_u8StartX_Position == 2) {
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d108      	bne.n	8001038 <LCD_enuJumpCursorTo+0x54>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	3b40      	subs	r3, #64	@ 0x40
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe25 	bl	8000c7c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e019      	b.n	800106c <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 3) {
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d108      	bne.n	8001050 <LCD_enuJumpCursorTo+0x6c>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	3b6c      	subs	r3, #108	@ 0x6c
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe19 	bl	8000c7c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e00d      	b.n	800106c <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 4) {
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d108      	bne.n	8001068 <LCD_enuJumpCursorTo+0x84>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	3b2c      	subs	r3, #44	@ 0x2c
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe0d 	bl	8000c7c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e001      	b.n	800106c <LCD_enuJumpCursorTo+0x88>
	} else {
		Local_ErrorState = ES_NOT_OK;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000058 	.word	0x20000058
 800107c:	40010c00 	.word	0x40010c00

08001080 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 800108c:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 8001092:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 8001098:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <Stepper_Init+0x40>)
 80010a0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <Stepper_Init+0x44>)
 80010aa:	f000 faff 	bl	80016ac <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <Stepper_Init+0x44>)
 80010b4:	f000 fb90 	bl	80017d8 <MCAL_GPIO_WritePin>

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	40010c00 	.word	0x40010c00

080010c8 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	70fb      	strb	r3, [r7, #3]
 80010da:	460b      	mov	r3, r1
 80010dc:	803b      	strh	r3, [r7, #0]
 80010de:	4613      	mov	r3, r2
 80010e0:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <Stepper_Move_Steps+0x26>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d008      	beq.n	80010fe <Stepper_Move_Steps+0x36>
 80010ec:	e00f      	b.n	800110e <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <Stepper_Move_Steps+0x64>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	480e      	ldr	r0, [pc, #56]	@ (8001130 <Stepper_Move_Steps+0x68>)
 80010f8:	f000 fb6e 	bl	80017d8 <MCAL_GPIO_WritePin>
		break;
 80010fc:	e007      	b.n	800110e <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <Stepper_Move_Steps+0x64>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	480a      	ldr	r0, [pc, #40]	@ (8001130 <Stepper_Move_Steps+0x68>)
 8001108:	f000 fb66 	bl	80017d8 <MCAL_GPIO_WritePin>
		break;
 800110c:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 800110e:	78b8      	ldrb	r0, [r7, #2]
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	78f9      	ldrb	r1, [r7, #3]
 8001114:	2324      	movs	r3, #36	@ 0x24
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4603      	mov	r3, r0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f001 f974 	bl	800240c <PWM_Move_Steps>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000005c 	.word	0x2000005c
 8001130:	40010c00 	.word	0x40010c00

08001134 <HC_SR04_Init>:
/********************************************************************/

#include "UltraSonic_Private.h"


ES_t HC_SR04_Init(HC_SR04_Config_t* Copy_pArrUltrasonicConfigs) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	TIMER1_Init(RCC_CLK_36M);
 800113c:	2024      	movs	r0, #36	@ 0x24
 800113e:	f000 fd41 	bl	8001bc4 <TIMER1_Init>

	uint8_t Local_Iterator = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
 800114a:	e03c      	b.n	80011c6 <HC_SR04_Init+0x92>

		GPIO_PinConfig_t Trigger = {
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].triggerPin,
 800114c:	7dfa      	ldrb	r2, [r7, #23]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	891b      	ldrh	r3, [r3, #8]
		GPIO_PinConfig_t Trigger = {
 800115e:	823b      	strh	r3, [r7, #16]
 8001160:	2304      	movs	r3, #4
 8001162:	74bb      	strb	r3, [r7, #18]
 8001164:	2302      	movs	r3, #2
 8001166:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(Copy_pArrUltrasonicConfigs[Local_Iterator].trigPort, &Trigger);
 8001168:	7dfa      	ldrb	r2, [r7, #23]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	461a      	mov	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f107 0210 	add.w	r2, r7, #16
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fa93 	bl	80016ac <MCAL_GPIO_Init>

		GPIO_PinConfig_t Echo = {
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].echoPin,
 800118a:	7dfa      	ldrb	r2, [r7, #23]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	895b      	ldrh	r3, [r3, #10]
		GPIO_PinConfig_t Echo = {
 800119c:	81bb      	strh	r3, [r7, #12]
 800119e:	2301      	movs	r3, #1
 80011a0:	73bb      	strb	r3, [r7, #14]
				.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
		};

		MCAL_GPIO_Init(Copy_pArrUltrasonicConfigs[Local_Iterator].echoPort, &Echo);
 80011a2:	7dfa      	ldrb	r2, [r7, #23]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fa76 	bl	80016ac <MCAL_GPIO_Init>
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	3301      	adds	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HC_SR04_Init+0xac>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	7dfa      	ldrb	r2, [r7, #23]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3bd      	bcc.n	800114c <HC_SR04_Init+0x18>
	}


	Private_pConfigs = Copy_pArrUltrasonicConfigs;
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HC_SR04_Init+0xb0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]

    return ES_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000001a 	.word	0x2000001a
 80011e4:	20000060 	.word	0x20000060

080011e8 <HC_SR04_Trigger>:

void HC_SR04_Trigger(uint8_t Sensor_Num) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    // Send a 10us pulse on the trigger pin to initiate measurement
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_HIGH);
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HC_SR04_Trigger+0x50>)
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	891b      	ldrh	r3, [r3, #8]
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <HC_SR04_Trigger+0x54>)
 800120a:	f000 fae5 	bl	80017d8 <MCAL_GPIO_WritePin>
    Delay_Timer1_ms(10); // Delay for 10us
 800120e:	200a      	movs	r0, #10
 8001210:	f000 fd18 	bl	8001c44 <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_LOW);
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <HC_SR04_Trigger+0x50>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	891b      	ldrh	r3, [r3, #8]
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <HC_SR04_Trigger+0x54>)
 800122c:	f000 fad4 	bl	80017d8 <MCAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000060 	.word	0x20000060
 800123c:	40010800 	.word	0x40010800

08001240 <HC_SR04_ReadDistance>:

ES_t HC_SR04_ReadDistance(uint8_t Sensor_Num,uint32_t* distance_cm) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
    // Send trigger signal to start measurement
    HC_SR04_Trigger(Sensor_Num);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffca 	bl	80011e8 <HC_SR04_Trigger>

    uint8_t echoValue;
    // Wait for the rising edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].echoPort,Private_pConfigs[Sensor_Num].echoPin);
 8001254:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HC_SR04_ReadDistance+0xd8>)
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	6858      	ldr	r0, [r3, #4]
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <HC_SR04_ReadDistance+0xd8>)
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	895b      	ldrh	r3, [r3, #10]
 8001278:	4619      	mov	r1, r3
 800127a:	f000 fa96 	bl	80017aa <MCAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]
    }
    while ( echoValue == GPIO_PIN_LOW);
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e5      	beq.n	8001254 <HC_SR04_ReadDistance+0x14>

    uint32_t startTime = Get_TIMER1_Counter();
 8001288:	f001 f8a8 	bl	80023dc <Get_TIMER1_Counter>
 800128c:	6138      	str	r0, [r7, #16]
//    STK_enuGetElapsedTimeUs(&startTime);

    // Wait for the falling edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].echoPort,Private_pConfigs[Sensor_Num].echoPin);
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HC_SR04_ReadDistance+0xd8>)
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	6858      	ldr	r0, [r3, #4]
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HC_SR04_ReadDistance+0xd8>)
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	79fa      	ldrb	r2, [r7, #7]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	895b      	ldrh	r3, [r3, #10]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f000 fa79 	bl	80017aa <MCAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75fb      	strb	r3, [r7, #23]
    }
    while (echoValue == GPIO_PIN_HIGH);
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d0e5      	beq.n	800128e <HC_SR04_ReadDistance+0x4e>

    uint32_t endTime = Get_TIMER1_Counter();
 80012c2:	f001 f88b 	bl	80023dc <Get_TIMER1_Counter>
 80012c6:	60f8      	str	r0, [r7, #12]
//    STK_enuGetElapsedTimeUs(&endTime);

    // Calculate distance in centimeters
    uint32_t pulseDuration = endTime - startTime;
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	60bb      	str	r3, [r7, #8]
    *distance_cm = (pulseDuration * 0.0343) / 2; // Speed of sound is approximately 343 m/s
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f7ff f88f 	bl	80003f4 <__aeabi_ui2d>
 80012d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001310 <HC_SR04_ReadDistance+0xd0>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f904 	bl	80004e8 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f0:	f7ff fa24 	bl	800073c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fb06 	bl	800090c <__aeabi_d2uiz>
 8001300:	4602      	mov	r2, r0
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]

    return ES_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	04816f00 	.word	0x04816f00
 8001314:	3fa18fc5 	.word	0x3fa18fc5
 8001318:	20000060 	.word	0x20000060

0800131c <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <EXTI0_IRQHandler+0x1c>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <EXTI0_IRQHandler+0x1c>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <EXTI0_IRQHandler+0x20>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4798      	blx	r3

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010400 	.word	0x40010400
 800133c:	20000064 	.word	0x20000064

08001340 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <EXTI1_IRQHandler+0x1c>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	4a04      	ldr	r2, [pc, #16]	@ (800135c <EXTI1_IRQHandler+0x1c>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <EXTI1_IRQHandler+0x20>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4798      	blx	r3
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010400 	.word	0x40010400
 8001360:	20000064 	.word	0x20000064

08001364 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <EXTI2_IRQHandler+0x1c>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <EXTI2_IRQHandler+0x1c>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <EXTI2_IRQHandler+0x20>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4798      	blx	r3
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010400 	.word	0x40010400
 8001384:	20000064 	.word	0x20000064

08001388 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <EXTI3_IRQHandler+0x1c>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <EXTI3_IRQHandler+0x1c>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <EXTI3_IRQHandler+0x20>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4798      	blx	r3
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40010400 	.word	0x40010400
 80013a8:	20000064 	.word	0x20000064

080013ac <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <EXTI4_IRQHandler+0x1c>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <EXTI4_IRQHandler+0x1c>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <EXTI4_IRQHandler+0x20>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4798      	blx	r3
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40010400 	.word	0x40010400
 80013cc:	20000064 	.word	0x20000064

080013d0 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <EXTI9_5_IRQHandler+0x22>
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6153      	str	r3, [r2, #20]
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <EXTI9_5_IRQHandler+0xa4>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <EXTI9_5_IRQHandler+0x40>
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a1b      	ldr	r2, [pc, #108]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <EXTI9_5_IRQHandler+0xa4>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <EXTI9_5_IRQHandler+0x5e>
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001426:	6153      	str	r3, [r2, #20]
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <EXTI9_5_IRQHandler+0xa4>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <EXTI9_5_IRQHandler+0x7c>
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a0c      	ldr	r2, [pc, #48]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <EXTI9_5_IRQHandler+0xa4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <EXTI9_5_IRQHandler+0x9a>
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <EXTI9_5_IRQHandler+0xa0>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001462:	6153      	str	r3, [r2, #20]
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <EXTI9_5_IRQHandler+0xa4>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	4798      	blx	r3
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010400 	.word	0x40010400
 8001474:	20000064 	.word	0x20000064

08001478 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <EXTI15_10_IRQHandler+0x22>
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	6153      	str	r3, [r2, #20]
 8001494:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <EXTI15_10_IRQHandler+0x40>
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014b0:	6153      	str	r3, [r2, #20]
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 80014b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b6:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80014b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <EXTI15_10_IRQHandler+0x5e>
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ce:	6153      	str	r3, [r2, #20]
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <EXTI15_10_IRQHandler+0x7c>
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f2:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <EXTI15_10_IRQHandler+0x9a>
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150a:	6153      	str	r3, [r2, #20]
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 800150e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001510:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <EXTI15_10_IRQHandler+0xb8>
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <EXTI15_10_IRQHandler+0xbc>)
 8001524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <EXTI15_10_IRQHandler+0xc0>)
 800152c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152e:	4798      	blx	r3
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40010400 	.word	0x40010400
 8001538:	20000064 	.word	0x20000064

0800153c <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800154c:	f000 80a5 	beq.w	800169a <Get_CRLH_Position+0x15e>
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001554:	f300 80a3 	bgt.w	800169e <Get_CRLH_Position+0x162>
 8001558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800155c:	f000 809b 	beq.w	8001696 <Get_CRLH_Position+0x15a>
 8001560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001564:	f300 809b 	bgt.w	800169e <Get_CRLH_Position+0x162>
 8001568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156c:	f000 8091 	beq.w	8001692 <Get_CRLH_Position+0x156>
 8001570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001574:	f300 8093 	bgt.w	800169e <Get_CRLH_Position+0x162>
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800157c:	f000 8087 	beq.w	800168e <Get_CRLH_Position+0x152>
 8001580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001584:	f300 808b 	bgt.w	800169e <Get_CRLH_Position+0x162>
 8001588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800158c:	d07d      	beq.n	800168a <Get_CRLH_Position+0x14e>
 800158e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001592:	f300 8084 	bgt.w	800169e <Get_CRLH_Position+0x162>
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d074      	beq.n	8001686 <Get_CRLH_Position+0x14a>
 800159c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a0:	dc7d      	bgt.n	800169e <Get_CRLH_Position+0x162>
 80015a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a6:	d06c      	beq.n	8001682 <Get_CRLH_Position+0x146>
 80015a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ac:	dc77      	bgt.n	800169e <Get_CRLH_Position+0x162>
 80015ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b2:	d064      	beq.n	800167e <Get_CRLH_Position+0x142>
 80015b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b8:	dc71      	bgt.n	800169e <Get_CRLH_Position+0x162>
 80015ba:	2b80      	cmp	r3, #128	@ 0x80
 80015bc:	d05d      	beq.n	800167a <Get_CRLH_Position+0x13e>
 80015be:	2b80      	cmp	r3, #128	@ 0x80
 80015c0:	dc6d      	bgt.n	800169e <Get_CRLH_Position+0x162>
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	dc48      	bgt.n	8001658 <Get_CRLH_Position+0x11c>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dd69      	ble.n	800169e <Get_CRLH_Position+0x162>
 80015ca:	3b01      	subs	r3, #1
 80015cc:	2b1f      	cmp	r3, #31
 80015ce:	d866      	bhi.n	800169e <Get_CRLH_Position+0x162>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <Get_CRLH_Position+0x9c>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	08001663 	.word	0x08001663
 80015e0:	0800169f 	.word	0x0800169f
 80015e4:	08001667 	.word	0x08001667
 80015e8:	0800169f 	.word	0x0800169f
 80015ec:	0800169f 	.word	0x0800169f
 80015f0:	0800169f 	.word	0x0800169f
 80015f4:	0800166b 	.word	0x0800166b
 80015f8:	0800169f 	.word	0x0800169f
 80015fc:	0800169f 	.word	0x0800169f
 8001600:	0800169f 	.word	0x0800169f
 8001604:	0800169f 	.word	0x0800169f
 8001608:	0800169f 	.word	0x0800169f
 800160c:	0800169f 	.word	0x0800169f
 8001610:	0800169f 	.word	0x0800169f
 8001614:	0800166f 	.word	0x0800166f
 8001618:	0800169f 	.word	0x0800169f
 800161c:	0800169f 	.word	0x0800169f
 8001620:	0800169f 	.word	0x0800169f
 8001624:	0800169f 	.word	0x0800169f
 8001628:	0800169f 	.word	0x0800169f
 800162c:	0800169f 	.word	0x0800169f
 8001630:	0800169f 	.word	0x0800169f
 8001634:	0800169f 	.word	0x0800169f
 8001638:	0800169f 	.word	0x0800169f
 800163c:	0800169f 	.word	0x0800169f
 8001640:	0800169f 	.word	0x0800169f
 8001644:	0800169f 	.word	0x0800169f
 8001648:	0800169f 	.word	0x0800169f
 800164c:	0800169f 	.word	0x0800169f
 8001650:	0800169f 	.word	0x0800169f
 8001654:	08001673 	.word	0x08001673
 8001658:	2b40      	cmp	r3, #64	@ 0x40
 800165a:	d00c      	beq.n	8001676 <Get_CRLH_Position+0x13a>
 800165c:	e01f      	b.n	800169e <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e01e      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001662:	2304      	movs	r3, #4
 8001664:	e01c      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001666:	2308      	movs	r3, #8
 8001668:	e01a      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800166a:	230c      	movs	r3, #12
 800166c:	e018      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800166e:	2310      	movs	r3, #16
 8001670:	e016      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001672:	2314      	movs	r3, #20
 8001674:	e014      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001676:	2318      	movs	r3, #24
 8001678:	e012      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800167a:	231c      	movs	r3, #28
 800167c:	e010      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800167e:	2300      	movs	r3, #0
 8001680:	e00e      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001682:	2304      	movs	r3, #4
 8001684:	e00c      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001686:	2308      	movs	r3, #8
 8001688:	e00a      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800168a:	230c      	movs	r3, #12
 800168c:	e008      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800168e:	2310      	movs	r3, #16
 8001690:	e006      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001692:	2314      	movs	r3, #20
 8001694:	e004      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001696:	2318      	movs	r3, #24
 8001698:	e002      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800169a:	231c      	movs	r3, #28
 800169c:	e000      	b.n	80016a0 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2bff      	cmp	r3, #255	@ 0xff
 80016c4:	d801      	bhi.n	80016ca <MCAL_GPIO_Init+0x1e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	e001      	b.n	80016ce <MCAL_GPIO_Init+0x22>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <Get_CRLH_Position>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	230f      	movs	r3, #15
 80016e0:	4093      	lsls	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	401a      	ands	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	789b      	ldrb	r3, [r3, #2]
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	d00b      	beq.n	800170e <MCAL_GPIO_Init+0x62>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d007      	beq.n	800170e <MCAL_GPIO_Init+0x62>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d003      	beq.n	800170e <MCAL_GPIO_Init+0x62>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	789b      	ldrb	r3, [r3, #2]
 800170a:	2b04      	cmp	r3, #4
 800170c:	d10e      	bne.n	800172c <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	3b04      	subs	r3, #4
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	b25a      	sxtb	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	e02c      	b.n	8001786 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d003      	beq.n	800173c <MCAL_GPIO_Init+0x90>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e01c      	b.n	8001786 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	2b08      	cmp	r3, #8
 8001752:	d102      	bne.n	800175a <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001754:	2304      	movs	r3, #4
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e015      	b.n	8001786 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 800175a:	2308      	movs	r3, #8
 800175c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	e007      	b.n	8001786 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	43d2      	mvns	r2, r2
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001786:	7bfc      	ldrb	r4, [r7, #15]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fed5 	bl	800153c <Get_CRLH_Position>
 8001792:	4603      	mov	r3, r0
 8001794:	fa04 f203 	lsl.w	r2, r4, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	431a      	orrs	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	601a      	str	r2, [r3, #0]


}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}

080017aa <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e001      	b.n	80017cc <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80017f4:	e002      	b.n	80017fc <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	615a      	str	r2, [r3, #20]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
	...

08001808 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8001812:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <I2C1_EV_IRQHandler+0xec>)
 8001814:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800181e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <I2C1_EV_IRQHandler+0x48>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8001848:	2100      	movs	r1, #0
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f000 f866 	bl	800191c <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d014      	beq.n	800188a <I2C1_EV_IRQHandler+0x82>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d011      	beq.n	800188a <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10b      	bne.n	800188a <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001882:	2102      	movs	r1, #2
 8001884:	6978      	ldr	r0, [r7, #20]
 8001886:	f000 f849 	bl	800191c <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001892:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00f      	beq.n	80018ba <I2C1_EV_IRQHandler+0xb2>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <I2C1_EV_IRQHandler+0xb2>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80018b2:	2103      	movs	r1, #3
 80018b4:	6978      	ldr	r0, [r7, #20]
 80018b6:	f000 f831 	bl	800191c <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c2:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00f      	beq.n	80018ea <I2C1_EV_IRQHandler+0xe2>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00c      	beq.n	80018ea <I2C1_EV_IRQHandler+0xe2>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80018e2:	2104      	movs	r1, #4
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f000 f819 	bl	800191c <Slave_States>

		}
	}

}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40005400 	.word	0x40005400

080018f8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a32      	ldr	r2, [pc, #200]	@ (80019f4 <Slave_States+0xd8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d856      	bhi.n	80019ec <Slave_States+0xd0>
 800193e:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <Slave_States+0x28>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	0800195f 	.word	0x0800195f
 8001948:	08001959 	.word	0x08001959
 800194c:	08001983 	.word	0x08001983
 8001950:	0800199b 	.word	0x0800199b
 8001954:	080019bf 	.word	0x080019bf
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 800195c:	e046      	b.n	80019ec <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03b      	beq.n	80019e2 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4922      	ldr	r1, [pc, #136]	@ (80019f8 <Slave_States+0xdc>)
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	3320      	adds	r3, #32
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2000      	movs	r0, #0
 800197e:	4798      	blx	r3
		}

		break ;
 8001980:	e02f      	b.n	80019e2 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	491c      	ldr	r1, [pc, #112]	@ (80019f8 <Slave_States+0xdc>)
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3320      	adds	r3, #32
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2002      	movs	r0, #2
 8001996:	4798      	blx	r3

		break ;
 8001998:	e028      	b.n	80019ec <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01f      	beq.n	80019e6 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	4913      	ldr	r1, [pc, #76]	@ (80019f8 <Slave_States+0xdc>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	3320      	adds	r3, #32
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2003      	movs	r0, #3
 80019ba:	4798      	blx	r3
		}

		break ;
 80019bc:	e013      	b.n	80019e6 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	490a      	ldr	r1, [pc, #40]	@ (80019f8 <Slave_States+0xdc>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3320      	adds	r3, #32
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2004      	movs	r0, #4
 80019de:	4798      	blx	r3
		}

		break ;
 80019e0:	e003      	b.n	80019ea <Slave_States+0xce>
		break ;
 80019e2:	bf00      	nop
 80019e4:	e002      	b.n	80019ec <Slave_States+0xd0>
		break ;
 80019e6:	bf00      	nop
 80019e8:	e000      	b.n	80019ec <Slave_States+0xd0>
		break ;
 80019ea:	bf00      	nop
	}
	}

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	200000a0 	.word	0x200000a0

080019fc <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	460a      	mov	r2, r1
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d049      	beq.n	8001aaa <MCAL_RCC_CLK_Init+0xae>
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	f300 80cc 	bgt.w	8001bb4 <MCAL_RCC_CLK_Init+0x1b8>
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80c8 	beq.w	8001bb2 <MCAL_RCC_CLK_Init+0x1b6>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	f040 80c6 	bne.w	8001bb4 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8001a28:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a64      	ldr	r2, [pc, #400]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a61      	ldr	r2, [pc, #388]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8001a40:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	2b48      	cmp	r3, #72	@ 0x48
 8001a50:	d106      	bne.n	8001a60 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 8001a52:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a58:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8001a5c:	6053      	str	r3, [r2, #4]
			break;
 8001a5e:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8001a60:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a56      	ldr	r2, [pc, #344]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 8001a6c:	4b54      	ldr	r3, [pc, #336]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a53      	ldr	r2, [pc, #332]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 8001a78:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8e:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8001a90:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a96:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001a9a:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 8001a9c:	4b48      	ldr	r3, [pc, #288]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a47      	ldr	r2, [pc, #284]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001aa2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001aa6:	6053      	str	r3, [r2, #4]




		break;
 8001aa8:	e084      	b.n	8001bb4 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 8001aaa:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a44      	ldr	r2, [pc, #272]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8001ab6:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a41      	ldr	r2, [pc, #260]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	3b10      	subs	r3, #16
 8001ac6:	2b14      	cmp	r3, #20
 8001ac8:	d85d      	bhi.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <MCAL_RCC_CLK_Init+0xd4>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001b25 	.word	0x08001b25
 8001ad4:	08001b87 	.word	0x08001b87
 8001ad8:	08001b87 	.word	0x08001b87
 8001adc:	08001b87 	.word	0x08001b87
 8001ae0:	08001b33 	.word	0x08001b33
 8001ae4:	08001b87 	.word	0x08001b87
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001b87 	.word	0x08001b87
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b87 	.word	0x08001b87
 8001af8:	08001b4f 	.word	0x08001b4f
 8001afc:	08001b87 	.word	0x08001b87
 8001b00:	08001b5d 	.word	0x08001b5d
 8001b04:	08001b87 	.word	0x08001b87
 8001b08:	08001b87 	.word	0x08001b87
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b6b 	.word	0x08001b6b
 8001b14:	08001b87 	.word	0x08001b87
 8001b18:	08001b87 	.word	0x08001b87
 8001b1c:	08001b87 	.word	0x08001b87
 8001b20:	08001b79 	.word	0x08001b79
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a25      	ldr	r2, [pc, #148]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b2e:	6053      	str	r3, [r2, #4]
			break;
 8001b30:	e029      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b38:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8001b3c:	6053      	str	r3, [r2, #4]
			break;
 8001b3e:	e022      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b4a:	6053      	str	r3, [r2, #4]
			break;
 8001b4c:	e01b      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b54:	f443 1350 	orr.w	r3, r3, #3407872	@ 0x340000
 8001b58:	6053      	str	r3, [r2, #4]
			break;
 8001b5a:	e014      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b62:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8001b66:	6053      	str	r3, [r2, #4]
			break;
 8001b68:	e00d      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b70:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8001b74:	6053      	str	r3, [r2, #4]
			break;
 8001b76:	e006      	b.n	8001b86 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b7e:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8001b82:	6053      	str	r3, [r2, #4]
			break;
 8001b84:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 8001b92:	bf00      	nop
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <MCAL_RCC_CLK_Init+0x1c4>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]



		break;
 8001bb0:	e000      	b.n	8001bb4 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8001bb2:	bf00      	nop
	}
	}
	return status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <TIMER1_Init>:

uint8_t PinStepper_flag = 0;


void TIMER1_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER1_CLK_EN();
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <TIMER1_Init+0x4c>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <TIMER1_Init+0x4c>)
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bd8:	6193      	str	r3, [r2, #24]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER1->PSC = (Clock_Speed_MHz - 1);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <TIMER1_Init+0x50>)
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER1->ARR = 0xC350;  // 25000*2us = 0.05s
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <TIMER1_Init+0x50>)
 8001be4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001be8:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Enable Timer2
	TIMER1->CR1 |= (1<<0);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <TIMER1_Init+0x50>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <TIMER1_Init+0x50>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER1->SR) & (1<<0)));
 8001bf6:	bf00      	nop
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <TIMER1_Init+0x50>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f9      	beq.n	8001bf8 <TIMER1_Init+0x34>
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40012c00 	.word	0x40012c00

08001c18 <Delay_Timer1_us>:
	}
}


void Delay_Timer1_us(int us)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	TIMER1->CNT = 0;
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <Delay_Timer1_us+0x28>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
	while((TIMER1->CNT) < us);
 8001c26:	bf00      	nop
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <Delay_Timer1_us+0x28>)
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3fa      	bcc.n	8001c28 <Delay_Timer1_us+0x10>
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <Delay_Timer1_ms>:


void Delay_Timer1_ms(int ms)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e006      	b.n	8001c60 <Delay_Timer1_ms+0x1c>
	{
		Delay_Timer1_us(1000);
 8001c52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c56:	f7ff ffdf 	bl	8001c18 <Delay_Timer1_us>
	for(i=0;i<ms;i++)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf4      	blt.n	8001c52 <Delay_Timer1_ms+0xe>
	}
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b098      	sub	sp, #96	@ 0x60
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	72fb      	strb	r3, [r7, #11]
 8001c82:	4613      	mov	r3, r2
 8001c84:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c90:	2301      	movs	r3, #1
 8001c92:	657b      	str	r3, [r7, #84]	@ 0x54

	while(loop_flag == 1)
 8001c94:	e017      	b.n	8001cc6 <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8001c96:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001c9a:	4a91      	ldr	r2, [pc, #580]	@ (8001ee0 <PWM+0x26c>)
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cae:	65bb      	str	r3, [r7, #88]	@ 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8001cb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001cb6:	d303      	bcc.n	8001cc0 <PWM+0x4c>
			Prescalar_Value += 2;
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	3302      	adds	r3, #2
 8001cbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cbe:	e002      	b.n	8001cc6 <PWM+0x52>
		}else{
			loop_flag = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	while(loop_flag == 1)
 8001cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d0e3      	beq.n	8001c96 <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4a84      	ldr	r2, [pc, #528]	@ (8001ee4 <PWM+0x270>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	f040 80d8 	bne.w	8001e88 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8001cd8:	4b83      	ldr	r3, [pc, #524]	@ (8001ee8 <PWM+0x274>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a82      	ldr	r2, [pc, #520]	@ (8001ee8 <PWM+0x274>)
 8001cde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ce2:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8001ce4:	4b80      	ldr	r3, [pc, #512]	@ (8001ee8 <PWM+0x274>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee8 <PWM+0x274>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee8 <PWM+0x274>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee8 <PWM+0x274>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0201 	bic.w	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	f200 8336 	bhi.w	800237c <PWM+0x708>
 8001d10:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <PWM+0xa4>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d81 	.word	0x08001d81
 8001d20:	08001dd9 	.word	0x08001dd9
 8001d24:	08001e31 	.word	0x08001e31
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001d28:	4b70      	ldr	r3, [pc, #448]	@ (8001eec <PWM+0x278>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	653b      	str	r3, [r7, #80]	@ 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001d2e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001d32:	4619      	mov	r1, r3
 8001d34:	486e      	ldr	r0, [pc, #440]	@ (8001ef0 <PWM+0x27c>)
 8001d36:	f7ff fcb9 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f043 0208 	orr.w	r2, r3, #8
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a63      	ldr	r2, [pc, #396]	@ (8001ef4 <PWM+0x280>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	095a      	lsrs	r2, r3, #5
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8001d7e:	e2fd      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001d80:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <PWM+0x284>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001d86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4858      	ldr	r0, [pc, #352]	@ (8001ef0 <PWM+0x27c>)
 8001d8e:	f7ff fc8d 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	f043 0210 	orr.w	r2, r3, #16
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001db6:	7abb      	ldrb	r3, [r7, #10]
 8001db8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef4 <PWM+0x280>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	095a      	lsrs	r2, r3, #5
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001dd6:	e2d1      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001dd8:	4b48      	ldr	r3, [pc, #288]	@ (8001efc <PWM+0x288>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001dde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001de2:	4619      	mov	r1, r3
 8001de4:	4842      	ldr	r0, [pc, #264]	@ (8001ef0 <PWM+0x27c>)
 8001de6:	f7ff fc61 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f043 0208 	orr.w	r2, r3, #8
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a37      	ldr	r2, [pc, #220]	@ (8001ef4 <PWM+0x280>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	095a      	lsrs	r2, r3, #5
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001e2e:	e2a5      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001e30:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <PWM+0x28c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	647b      	str	r3, [r7, #68]	@ 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001e36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482c      	ldr	r0, [pc, #176]	@ (8001ef0 <PWM+0x27c>)
 8001e3e:	f7ff fc35 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <PWM+0x280>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	095a      	lsrs	r2, r3, #5
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001e86:	e279      	b.n	800237c <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8e:	f040 80d1 	bne.w	8002034 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <PWM+0x274>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <PWM+0x274>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <PWM+0x274>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <PWM+0x274>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <PWM+0x274>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <PWM+0x274>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0201 	bic.w	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	f200 8259 	bhi.w	800237c <PWM+0x708>
 8001eca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <PWM+0x25c>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001f05 	.word	0x08001f05
 8001ed4:	08001f51 	.word	0x08001f51
 8001ed8:	08001f9d 	.word	0x08001f9d
 8001edc:	08001fe9 	.word	0x08001fe9
 8001ee0:	000f4240 	.word	0x000f4240
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003824 	.word	0x08003824
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	51eb851f 	.word	0x51eb851f
 8001ef8:	08003828 	.word	0x08003828
 8001efc:	0800382c 	.word	0x0800382c
 8001f00:	08003830 	.word	0x08003830
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001f04:	4b9d      	ldr	r3, [pc, #628]	@ (800217c <PWM+0x508>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	643b      	str	r3, [r7, #64]	@ 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001f0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f0e:	4619      	mov	r1, r3
 8001f10:	489b      	ldr	r0, [pc, #620]	@ (8002180 <PWM+0x50c>)
 8001f12:	f7ff fbcb 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f043 0208 	orr.w	r2, r3, #8
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001f3a:	7abb      	ldrb	r3, [r7, #10]
 8001f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	4a90      	ldr	r2, [pc, #576]	@ (8002184 <PWM+0x510>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	095a      	lsrs	r2, r3, #5
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001f4e:	e215      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001f50:	4b8d      	ldr	r3, [pc, #564]	@ (8002188 <PWM+0x514>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001f56:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4888      	ldr	r0, [pc, #544]	@ (8002180 <PWM+0x50c>)
 8001f5e:	f7ff fba5 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001f86:	7abb      	ldrb	r3, [r7, #10]
 8001f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002184 <PWM+0x510>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	095a      	lsrs	r2, r3, #5
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001f9a:	e1ef      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	@ (800218c <PWM+0x518>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001fa2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4875      	ldr	r0, [pc, #468]	@ (8002180 <PWM+0x50c>)
 8001faa:	f7ff fb7f 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f043 0208 	orr.w	r2, r3, #8
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001fd2:	7abb      	ldrb	r3, [r7, #10]
 8001fd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <PWM+0x510>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095a      	lsrs	r2, r3, #5
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001fe6:	e1c9      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001fe8:	4b69      	ldr	r3, [pc, #420]	@ (8002190 <PWM+0x51c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001fee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4862      	ldr	r0, [pc, #392]	@ (8002180 <PWM+0x50c>)
 8001ff6:	f7ff fb59 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800201e:	7abb      	ldrb	r3, [r7, #10]
 8002020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <PWM+0x510>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	095a      	lsrs	r2, r3, #5
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002032:	e1a3      	b.n	800237c <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <PWM+0x520>)
 8002038:	4293      	cmp	r3, r2
 800203a:	f040 80db 	bne.w	80021f4 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 800203e:	4b56      	ldr	r3, [pc, #344]	@ (8002198 <PWM+0x524>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a55      	ldr	r2, [pc, #340]	@ (8002198 <PWM+0x524>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 800204a:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <PWM+0x524>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <PWM+0x524>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002056:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <PWM+0x524>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	4a4f      	ldr	r2, [pc, #316]	@ (8002198 <PWM+0x524>)
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002062:	4b4d      	ldr	r3, [pc, #308]	@ (8002198 <PWM+0x524>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <PWM+0x524>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0201 	bic.w	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	2b03      	cmp	r3, #3
 800207e:	f200 817d 	bhi.w	800237c <PWM+0x708>
 8002082:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <PWM+0x414>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	08002099 	.word	0x08002099
 800208c:	080020e5 	.word	0x080020e5
 8002090:	08002131 	.word	0x08002131
 8002094:	080021a9 	.word	0x080021a9
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002098:	4b40      	ldr	r3, [pc, #256]	@ (800219c <PWM+0x528>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800209e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020a2:	4619      	mov	r1, r3
 80020a4:	4836      	ldr	r0, [pc, #216]	@ (8002180 <PWM+0x50c>)
 80020a6:	f7ff fb01 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f043 0208 	orr.w	r2, r3, #8
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <PWM+0x510>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095a      	lsrs	r2, r3, #5
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80020e2:	e14b      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <PWM+0x52c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80020ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ee:	4619      	mov	r1, r3
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <PWM+0x50c>)
 80020f2:	f7ff fadb 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800211a:	7abb      	ldrb	r3, [r7, #10]
 800211c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <PWM+0x510>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	095a      	lsrs	r2, r3, #5
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 800212e:	e125      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <PWM+0x508>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213a:	4619      	mov	r1, r3
 800213c:	4819      	ldr	r0, [pc, #100]	@ (80021a4 <PWM+0x530>)
 800213e:	f7ff fab5 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f043 0208 	orr.w	r2, r3, #8
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002166:	7abb      	ldrb	r3, [r7, #10]
 8002168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <PWM+0x510>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	095a      	lsrs	r2, r3, #5
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800217a:	e0ff      	b.n	800237c <PWM+0x708>
 800217c:	08003834 	.word	0x08003834
 8002180:	40010800 	.word	0x40010800
 8002184:	51eb851f 	.word	0x51eb851f
 8002188:	08003838 	.word	0x08003838
 800218c:	0800383c 	.word	0x0800383c
 8002190:	08003840 	.word	0x08003840
 8002194:	40000400 	.word	0x40000400
 8002198:	40021000 	.word	0x40021000
 800219c:	08003844 	.word	0x08003844
 80021a0:	08003848 	.word	0x08003848
 80021a4:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80021a8:	4b83      	ldr	r3, [pc, #524]	@ (80023b8 <PWM+0x744>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80021ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4881      	ldr	r0, [pc, #516]	@ (80023bc <PWM+0x748>)
 80021b6:	f7ff fa79 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80021de:	7abb      	ldrb	r3, [r7, #10]
 80021e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a76      	ldr	r2, [pc, #472]	@ (80023c0 <PWM+0x74c>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095a      	lsrs	r2, r3, #5
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80021f2:	e0c3      	b.n	800237c <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a73      	ldr	r2, [pc, #460]	@ (80023c4 <PWM+0x750>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f040 80bf 	bne.w	800237c <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 80021fe:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <PWM+0x754>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a71      	ldr	r2, [pc, #452]	@ (80023c8 <PWM+0x754>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 800220a:	4b6f      	ldr	r3, [pc, #444]	@ (80023c8 <PWM+0x754>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a6e      	ldr	r2, [pc, #440]	@ (80023c8 <PWM+0x754>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002216:	4b6c      	ldr	r3, [pc, #432]	@ (80023c8 <PWM+0x754>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	4a6b      	ldr	r2, [pc, #428]	@ (80023c8 <PWM+0x754>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0201 	bic.w	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	2b03      	cmp	r3, #3
 8002232:	f200 80a3 	bhi.w	800237c <PWM+0x708>
 8002236:	a201      	add	r2, pc, #4	@ (adr r2, 800223c <PWM+0x5c8>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002299 	.word	0x08002299
 8002244:	080022e5 	.word	0x080022e5
 8002248:	08002331 	.word	0x08002331
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800224c:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <PWM+0x758>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	4619      	mov	r1, r3
 8002258:	4858      	ldr	r0, [pc, #352]	@ (80023bc <PWM+0x748>)
 800225a:	f7ff fa27 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f043 0208 	orr.w	r2, r3, #8
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a4d      	ldr	r2, [pc, #308]	@ (80023c0 <PWM+0x74c>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	095a      	lsrs	r2, r3, #5
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	635a      	str	r2, [r3, #52]	@ 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002296:	e071      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002298:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <PWM+0x75c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4845      	ldr	r0, [pc, #276]	@ (80023bc <PWM+0x748>)
 80022a6:	f7ff fa01 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80022ce:	7abb      	ldrb	r3, [r7, #10]
 80022d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	4a3a      	ldr	r2, [pc, #232]	@ (80023c0 <PWM+0x74c>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	095a      	lsrs	r2, r3, #5
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80022e2:	e04b      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <PWM+0x760>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4832      	ldr	r0, [pc, #200]	@ (80023bc <PWM+0x748>)
 80022f2:	f7ff f9db 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f043 0208 	orr.w	r2, r3, #8
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800231a:	7abb      	ldrb	r3, [r7, #10]
 800231c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <PWM+0x74c>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095a      	lsrs	r2, r3, #5
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	63da      	str	r2, [r3, #60]	@ 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800232e:	e025      	b.n	800237c <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <PWM+0x764>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	481f      	ldr	r0, [pc, #124]	@ (80023bc <PWM+0x748>)
 800233e:	f7ff f9b5 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002366:	7abb      	ldrb	r3, [r7, #10]
 8002368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <PWM+0x74c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095a      	lsrs	r2, r3, #5
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 800237a:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 800238e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3760      	adds	r7, #96	@ 0x60
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08003838 	.word	0x08003838
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	51eb851f 	.word	0x51eb851f
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08003844 	.word	0x08003844
 80023d0:	08003848 	.word	0x08003848
 80023d4:	08003824 	.word	0x08003824
 80023d8:	08003828 	.word	0x08003828

080023dc <Get_TIMER1_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER1_Counter()
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return (TIMER1->CNT);
 80023e0:	4b02      	ldr	r3, [pc, #8]	@ (80023ec <Get_TIMER1_Counter+0x10>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40012c00 	.word	0x40012c00

080023f0 <TIMER3_Stop>:
	TIMER2->CNT = 0;
	TIMER2->CR1 |= (1<<0);
}

void TIMER3_Stop()
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <TIMER3_Stop+0x18>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a03      	ldr	r2, [pc, #12]	@ (8002408 <TIMER3_Stop+0x18>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40000400 	.word	0x40000400

0800240c <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b096      	sub	sp, #88	@ 0x58
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	70fb      	strb	r3, [r7, #3]
 800241e:	460b      	mov	r3, r1
 8002420:	803b      	strh	r3, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 8002426:	4b9b      	ldr	r3, [pc, #620]	@ (8002694 <PWM_Move_Steps+0x288>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 800242c:	4a9a      	ldr	r2, [pc, #616]	@ (8002698 <PWM_Move_Steps+0x28c>)
 800242e:	883b      	ldrh	r3, [r7, #0]
 8002430:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002438:	2300      	movs	r3, #0
 800243a:	653b      	str	r3, [r7, #80]	@ 0x50
 800243c:	2301      	movs	r3, #1
 800243e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	while(loop_flag == 1)
 8002440:	e017      	b.n	8002472 <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8002442:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002446:	4a95      	ldr	r2, [pc, #596]	@ (800269c <PWM_Move_Steps+0x290>)
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4619      	mov	r1, r3
 800244e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	fbb1 f3f3 	udiv	r3, r1, r3
 800245a:	653b      	str	r3, [r7, #80]	@ 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 800245c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800245e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002462:	d303      	bcc.n	800246c <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 8002464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002466:	3302      	adds	r3, #2
 8002468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800246a:	e002      	b.n	8002472 <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	while(loop_flag == 1)
 8002472:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002476:	2b01      	cmp	r3, #1
 8002478:	d0e3      	beq.n	8002442 <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a88      	ldr	r2, [pc, #544]	@ (80026a0 <PWM_Move_Steps+0x294>)
 800247e:	4293      	cmp	r3, r2
 8002480:	f040 8120 	bne.w	80026c4 <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 8002484:	4b87      	ldr	r3, [pc, #540]	@ (80026a4 <PWM_Move_Steps+0x298>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a86      	ldr	r2, [pc, #536]	@ (80026a4 <PWM_Move_Steps+0x298>)
 800248a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800248e:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002490:	4b84      	ldr	r3, [pc, #528]	@ (80026a4 <PWM_Move_Steps+0x298>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a83      	ldr	r2, [pc, #524]	@ (80026a4 <PWM_Move_Steps+0x298>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800249c:	4b81      	ldr	r3, [pc, #516]	@ (80026a4 <PWM_Move_Steps+0x298>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a80      	ldr	r2, [pc, #512]	@ (80026a4 <PWM_Move_Steps+0x298>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 80024a8:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7e      	ldr	r2, [pc, #504]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 80024b4:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7b      	ldr	r2, [pc, #492]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024be:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 80024c0:	4b79      	ldr	r3, [pc, #484]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a78      	ldr	r2, [pc, #480]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024ca:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 80024cc:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a75      	ldr	r2, [pc, #468]	@ (80026a8 <PWM_Move_Steps+0x29c>)
 80024d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024d6:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0201 	bic.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	f200 83c2 	bhi.w	8002c70 <PWM_Move_Steps+0x864>
 80024ec:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <PWM_Move_Steps+0xe8>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002569 	.word	0x08002569
 80024fc:	080025cd 	.word	0x080025cd
 8002500:	08002631 	.word	0x08002631
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002504:	4b69      	ldr	r3, [pc, #420]	@ (80026ac <PWM_Move_Steps+0x2a0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800250a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800250e:	4619      	mov	r1, r3
 8002510:	4867      	ldr	r0, [pc, #412]	@ (80026b0 <PWM_Move_Steps+0x2a4>)
 8002512:	f7ff f8cb 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f043 0208 	orr.w	r2, r3, #8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	4a5c      	ldr	r2, [pc, #368]	@ (80026b4 <PWM_Move_Steps+0x2a8>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	095a      	lsrs	r2, r3, #5
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f043 0203 	orr.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]
			break;
 8002566:	e383      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <PWM_Move_Steps+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	647b      	str	r3, [r7, #68]	@ 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800256e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002572:	4619      	mov	r1, r3
 8002574:	484e      	ldr	r0, [pc, #312]	@ (80026b0 <PWM_Move_Steps+0x2a4>)
 8002576:	f7ff f899 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800259e:	78bb      	ldrb	r3, [r7, #2]
 80025a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a43      	ldr	r2, [pc, #268]	@ (80026b4 <PWM_Move_Steps+0x2a8>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	095a      	lsrs	r2, r3, #5
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b101 << 0);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f043 0205 	orr.w	r2, r3, #5
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60da      	str	r2, [r3, #12]
			break;
 80025ca:	e351      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <PWM_Move_Steps+0x2b0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	643b      	str	r3, [r7, #64]	@ 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80025d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025d6:	4619      	mov	r1, r3
 80025d8:	4835      	ldr	r0, [pc, #212]	@ (80026b0 <PWM_Move_Steps+0x2a4>)
 80025da:	f7ff f867 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f043 0208 	orr.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002602:	78bb      	ldrb	r3, [r7, #2]
 8002604:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	4a2a      	ldr	r2, [pc, #168]	@ (80026b4 <PWM_Move_Steps+0x2a8>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095a      	lsrs	r2, r3, #5
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f043 0209 	orr.w	r2, r3, #9
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60da      	str	r2, [r3, #12]
			break;
 800262e:	e31f      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <PWM_Move_Steps+0x2b4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	63fb      	str	r3, [r7, #60]	@ 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002636:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800263a:	4619      	mov	r1, r3
 800263c:	481c      	ldr	r0, [pc, #112]	@ (80026b0 <PWM_Move_Steps+0x2a4>)
 800263e:	f7ff f835 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002666:	78bb      	ldrb	r3, [r7, #2]
 8002668:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <PWM_Move_Steps+0x2a8>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095a      	lsrs	r2, r3, #5
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
			TIMERx->DIER |= (0b10001 << 0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f043 0211 	orr.w	r2, r3, #17
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60da      	str	r2, [r3, #12]
			break;
 8002692:	e2ed      	b.n	8002c70 <PWM_Move_Steps+0x864>
 8002694:	200000e9 	.word	0x200000e9
 8002698:	200000ea 	.word	0x200000ea
 800269c:	000f4240 	.word	0x000f4240
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	08003824 	.word	0x08003824
 80026b0:	40010800 	.word	0x40010800
 80026b4:	51eb851f 	.word	0x51eb851f
 80026b8:	08003828 	.word	0x08003828
 80026bc:	0800382c 	.word	0x0800382c
 80026c0:	08003830 	.word	0x08003830
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ca:	f040 80dd 	bne.w	8002888 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 80026ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a9f      	ldr	r2, [pc, #636]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80026da:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4a9c      	ldr	r2, [pc, #624]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80026e6:	4b9a      	ldr	r3, [pc, #616]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4a99      	ldr	r2, [pc, #612]	@ (8002950 <PWM_Move_Steps+0x544>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 80026f2:	4b98      	ldr	r3, [pc, #608]	@ (8002954 <PWM_Move_Steps+0x548>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a97      	ldr	r2, [pc, #604]	@ (8002954 <PWM_Move_Steps+0x548>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	2b03      	cmp	r3, #3
 800270e:	f200 82af 	bhi.w	8002c70 <PWM_Move_Steps+0x864>
 8002712:	a201      	add	r2, pc, #4	@ (adr r2, 8002718 <PWM_Move_Steps+0x30c>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002729 	.word	0x08002729
 800271c:	08002781 	.word	0x08002781
 8002720:	080027d9 	.word	0x080027d9
 8002724:	08002831 	.word	0x08002831
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002728:	4b8b      	ldr	r3, [pc, #556]	@ (8002958 <PWM_Move_Steps+0x54c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	63bb      	str	r3, [r7, #56]	@ 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800272e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002732:	4619      	mov	r1, r3
 8002734:	4889      	ldr	r0, [pc, #548]	@ (800295c <PWM_Move_Steps+0x550>)
 8002736:	f7fe ffb9 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f043 0208 	orr.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800275e:	78bb      	ldrb	r3, [r7, #2]
 8002760:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	4a7e      	ldr	r2, [pc, #504]	@ (8002960 <PWM_Move_Steps+0x554>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095a      	lsrs	r2, r3, #5
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f043 0203 	orr.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60da      	str	r2, [r3, #12]
			break;
 800277e:	e277      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002780:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <PWM_Move_Steps+0x558>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002786:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800278a:	4619      	mov	r1, r3
 800278c:	4873      	ldr	r0, [pc, #460]	@ (800295c <PWM_Move_Steps+0x550>)
 800278e:	f7fe ff8d 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f043 0210 	orr.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	4a68      	ldr	r2, [pc, #416]	@ (8002960 <PWM_Move_Steps+0x554>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	095a      	lsrs	r2, r3, #5
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b101 << 0);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f043 0205 	orr.w	r2, r3, #5
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60da      	str	r2, [r3, #12]
			break;
 80027d6:	e24b      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80027d8:	4b63      	ldr	r3, [pc, #396]	@ (8002968 <PWM_Move_Steps+0x55c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	633b      	str	r3, [r7, #48]	@ 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80027de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e2:	4619      	mov	r1, r3
 80027e4:	485d      	ldr	r0, [pc, #372]	@ (800295c <PWM_Move_Steps+0x550>)
 80027e6:	f7fe ff61 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f043 0208 	orr.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800280e:	78bb      	ldrb	r3, [r7, #2]
 8002810:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	4a52      	ldr	r2, [pc, #328]	@ (8002960 <PWM_Move_Steps+0x554>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095a      	lsrs	r2, r3, #5
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f043 0209 	orr.w	r2, r3, #9
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60da      	str	r2, [r3, #12]
			break;
 800282e:	e21f      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002830:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <PWM_Move_Steps+0x560>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800283a:	4619      	mov	r1, r3
 800283c:	4847      	ldr	r0, [pc, #284]	@ (800295c <PWM_Move_Steps+0x550>)
 800283e:	f7fe ff35 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002866:	78bb      	ldrb	r3, [r7, #2]
 8002868:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	4a3c      	ldr	r2, [pc, #240]	@ (8002960 <PWM_Move_Steps+0x554>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	095a      	lsrs	r2, r3, #5
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b10001 << 0);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f043 0211 	orr.w	r2, r3, #17
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]
			break;
 8002886:	e1f3      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a39      	ldr	r2, [pc, #228]	@ (8002970 <PWM_Move_Steps+0x564>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 80f7 	bne.w	8002a80 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <PWM_Move_Steps+0x544>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a2e      	ldr	r2, [pc, #184]	@ (8002950 <PWM_Move_Steps+0x544>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 800289e:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 80028aa:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4a28      	ldr	r2, [pc, #160]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	4a25      	ldr	r2, [pc, #148]	@ (8002950 <PWM_Move_Steps+0x544>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <PWM_Move_Steps+0x548>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <PWM_Move_Steps+0x548>)
 80028c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028cc:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0201 	bic.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	f200 81c7 	bhi.w	8002c70 <PWM_Move_Steps+0x864>
 80028e2:	a201      	add	r2, pc, #4	@ (adr r2, 80028e8 <PWM_Move_Steps+0x4dc>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	08002979 	.word	0x08002979
 80028f0:	080029d1 	.word	0x080029d1
 80028f4:	08002a29 	.word	0x08002a29
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80028f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <PWM_Move_Steps+0x568>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80028fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002902:	4619      	mov	r1, r3
 8002904:	4815      	ldr	r0, [pc, #84]	@ (800295c <PWM_Move_Steps+0x550>)
 8002906:	f7fe fed1 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800292e:	78bb      	ldrb	r3, [r7, #2]
 8002930:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <PWM_Move_Steps+0x554>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095a      	lsrs	r2, r3, #5
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f043 0203 	orr.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]
			break;
 800294e:	e18f      	b.n	8002c70 <PWM_Move_Steps+0x864>
 8002950:	40021000 	.word	0x40021000
 8002954:	e000e100 	.word	0xe000e100
 8002958:	08003834 	.word	0x08003834
 800295c:	40010800 	.word	0x40010800
 8002960:	51eb851f 	.word	0x51eb851f
 8002964:	08003838 	.word	0x08003838
 8002968:	0800383c 	.word	0x0800383c
 800296c:	08003840 	.word	0x08003840
 8002970:	40000400 	.word	0x40000400
 8002974:	08003844 	.word	0x08003844
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002978:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <PWM_Move_Steps+0x7e0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800297e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002982:	4619      	mov	r1, r3
 8002984:	489a      	ldr	r0, [pc, #616]	@ (8002bf0 <PWM_Move_Steps+0x7e4>)
 8002986:	f7fe fe91 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f043 0210 	orr.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80029ae:	78bb      	ldrb	r3, [r7, #2]
 80029b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a8f      	ldr	r2, [pc, #572]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	095a      	lsrs	r2, r3, #5
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b101 << 0);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f043 0205 	orr.w	r2, r3, #5
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
			break;
 80029ce:	e14f      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80029d0:	4b89      	ldr	r3, [pc, #548]	@ (8002bf8 <PWM_Move_Steps+0x7ec>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	4619      	mov	r1, r3
 80029dc:	4887      	ldr	r0, [pc, #540]	@ (8002bfc <PWM_Move_Steps+0x7f0>)
 80029de:	f7fe fe65 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f043 0208 	orr.w	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002a06:	78bb      	ldrb	r3, [r7, #2]
 8002a08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a79      	ldr	r2, [pc, #484]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	095a      	lsrs	r2, r3, #5
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
			break;
 8002a26:	e123      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002a28:	4b75      	ldr	r3, [pc, #468]	@ (8002c00 <PWM_Move_Steps+0x7f4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	4871      	ldr	r0, [pc, #452]	@ (8002bfc <PWM_Move_Steps+0x7f0>)
 8002a36:	f7fe fe39 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002a5e:	78bb      	ldrb	r3, [r7, #2]
 8002a60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a63      	ldr	r2, [pc, #396]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	095a      	lsrs	r2, r3, #5
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60da      	str	r2, [r3, #12]
			break;
 8002a7e:	e0f7      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a60      	ldr	r2, [pc, #384]	@ (8002c04 <PWM_Move_Steps+0x7f8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 80f3 	bne.w	8002c70 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8002a96:	4b5c      	ldr	r3, [pc, #368]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002aa2:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <PWM_Move_Steps+0x7fc>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 8002aae:	4b57      	ldr	r3, [pc, #348]	@ (8002c0c <PWM_Move_Steps+0x800>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <PWM_Move_Steps+0x800>)
 8002ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ab8:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	f200 80d1 	bhi.w	8002c70 <PWM_Move_Steps+0x864>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <PWM_Move_Steps+0x6c8>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002b95 	.word	0x08002b95
 8002ae0:	08002c19 	.word	0x08002c19
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <PWM_Move_Steps+0x804>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002aea:	f107 0318 	add.w	r3, r7, #24
 8002aee:	4619      	mov	r1, r3
 8002af0:	4842      	ldr	r0, [pc, #264]	@ (8002bfc <PWM_Move_Steps+0x7f0>)
 8002af2:	f7fe fddb 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f043 0208 	orr.w	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002b1a:	78bb      	ldrb	r3, [r7, #2]
 8002b1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095a      	lsrs	r2, r3, #5
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f043 0203 	orr.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60da      	str	r2, [r3, #12]
			break;
 8002b3a:	e099      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <PWM_Move_Steps+0x7e0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	482c      	ldr	r0, [pc, #176]	@ (8002bfc <PWM_Move_Steps+0x7f0>)
 8002b4a:	f7fe fdaf 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002b72:	78bb      	ldrb	r3, [r7, #2]
 8002b74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095a      	lsrs	r2, r3, #5
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
			TIMERx->DIER |= (0b001 << 0);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
			break;
 8002b92:	e06d      	b.n	8002c70 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b94:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <PWM_Move_Steps+0x808>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4816      	ldr	r0, [pc, #88]	@ (8002bfc <PWM_Move_Steps+0x7f0>)
 8002ba2:	f7fe fd83 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f043 0208 	orr.w	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002bca:	78bb      	ldrb	r3, [r7, #2]
 8002bcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <PWM_Move_Steps+0x7e8>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095a      	lsrs	r2, r3, #5
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]
			break;
 8002bea:	e041      	b.n	8002c70 <PWM_Move_Steps+0x864>
 8002bec:	08003848 	.word	0x08003848
 8002bf0:	40010800 	.word	0x40010800
 8002bf4:	51eb851f 	.word	0x51eb851f
 8002bf8:	08003834 	.word	0x08003834
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	08003838 	.word	0x08003838
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	08003844 	.word	0x08003844
 8002c14:	08003824 	.word	0x08003824
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <PWM_Move_Steps+0x8ac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4619      	mov	r1, r3
 8002c24:	4825      	ldr	r0, [pc, #148]	@ (8002cbc <PWM_Move_Steps+0x8b0>)
 8002c26:	f7fe fd41 	bl	80016ac <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002c4e:	78bb      	ldrb	r3, [r7, #2]
 8002c50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <PWM_Move_Steps+0x8b4>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	095a      	lsrs	r2, r3, #5
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
			break;
 8002c6e:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c80:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8002c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28


	TIMERx->DIER |=(0b1<<0);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]





}
 8002cae:	bf00      	nop
 8002cb0:	3758      	adds	r7, #88	@ 0x58
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08003828 	.word	0x08003828
 8002cbc:	40010c00 	.word	0x40010c00
 8002cc0:	51eb851f 	.word	0x51eb851f

08002cc4 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8002cc8:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <TIM2_IRQHandler+0x68>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d128      	bne.n	8002d22 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8002cd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8002ce0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cea:	f023 0302 	bic.w	r3, r3, #2
 8002cee:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <TIM2_IRQHandler+0x6c>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <TIM2_IRQHandler+0x6c>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <TIM2_IRQHandler+0x6c>)
 8002d02:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8002d04:	e00d      	b.n	8002d22 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <TIM2_IRQHandler+0x68>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8002d0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <TIM2_IRQHandler+0x70>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	200000e9 	.word	0x200000e9
 8002d30:	200000ea 	.word	0x200000ea
 8002d34:	200000e8 	.word	0x200000e8

08002d38 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8002d3c:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <TIM3_IRQHandler+0x5c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d122      	bne.n	8002d8a <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8002d44:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4a13      	ldr	r2, [pc, #76]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d56:	f023 0302 	bic.w	r3, r3, #2
 8002d5a:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <TIM3_IRQHandler+0x64>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <TIM3_IRQHandler+0x64>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <TIM3_IRQHandler+0x64>)
 8002d6e:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8002d70:	e00b      	b.n	8002d8a <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <TIM3_IRQHandler+0x5c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8002d78:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a06      	ldr	r2, [pc, #24]	@ (8002d98 <TIM3_IRQHandler+0x60>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <TIM3_IRQHandler+0x68>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200000e9 	.word	0x200000e9
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	200000ea 	.word	0x200000ea
 8002da0:	200000e8 	.word	0x200000e8

08002da4 <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8002da8:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <TIM4_IRQHandler+0x5c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d122      	bne.n	8002df6 <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 8002db0:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8002dbc:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4a10      	ldr	r2, [pc, #64]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002dc2:	f023 0302 	bic.w	r3, r3, #2
 8002dc6:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <TIM4_IRQHandler+0x64>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <TIM4_IRQHandler+0x64>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <TIM4_IRQHandler+0x64>)
 8002dda:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8002ddc:	e00b      	b.n	8002df6 <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <TIM4_IRQHandler+0x5c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 8002de4:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a06      	ldr	r2, [pc, #24]	@ (8002e04 <TIM4_IRQHandler+0x60>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <TIM4_IRQHandler+0x68>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	200000e9 	.word	0x200000e9
 8002e04:	40000800 	.word	0x40000800
 8002e08:	200000ea 	.word	0x200000ea
 8002e0c:	200000e8 	.word	0x200000e8

08002e10 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e48 <which_UART+0x38>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <which_UART+0x14>
		return 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e00c      	b.n	8002e3e <which_UART+0x2e>
	else if(USARTx == USART2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <which_UART+0x3c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <which_UART+0x20>
		return 1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e006      	b.n	8002e3e <which_UART+0x2e>
	else if(USARTx == USART3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a07      	ldr	r2, [pc, #28]	@ (8002e50 <which_UART+0x40>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <which_UART+0x2c>
		return 2;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e000      	b.n	8002e3e <which_UART+0x2e>
	return 3;
 8002e3c:	2303      	movs	r3, #3
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40004400 	.word	0x40004400
 8002e50:	40004800 	.word	0x40004800

08002e54 <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8002e54:	b4b0      	push	{r4, r5, r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <MCAL_UART_Init+0x184>)
 8002e60:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a5d      	ldr	r2, [pc, #372]	@ (8002fdc <MCAL_UART_Init+0x188>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10e      	bne.n	8002e88 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8002e6a:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe0 <MCAL_UART_Init+0x18c>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4614      	mov	r4, r2
 8002e70:	461d      	mov	r5, r3
 8002e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8002e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4a59      	ldr	r2, [pc, #356]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e84:	6193      	str	r3, [r2, #24]
 8002e86:	e026      	b.n	8002ed6 <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a57      	ldr	r2, [pc, #348]	@ (8002fe8 <MCAL_UART_Init+0x194>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10f      	bne.n	8002eb0 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 8002e90:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <MCAL_UART_Init+0x18c>)
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	f103 0414 	add.w	r4, r3, #20
 8002e98:	4615      	mov	r5, r2
 8002e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 8002ea2:	4b50      	ldr	r3, [pc, #320]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	e012      	b.n	8002ed6 <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8002fec <MCAL_UART_Init+0x198>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10e      	bne.n	8002ed6 <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 8002eb8:	4b49      	ldr	r3, [pc, #292]	@ (8002fe0 <MCAL_UART_Init+0x18c>)
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8002ec0:	4615      	mov	r5, r2
 8002ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8002eca:	4b46      	ldr	r3, [pc, #280]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <MCAL_UART_Init+0x190>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed4:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	7a12      	ldrb	r2, [r2, #8]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	7a52      	ldrb	r2, [r2, #9]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	7a92      	ldrb	r2, [r2, #10]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	7ad2      	ldrb	r2, [r2, #11]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	0119      	lsls	r1, r3, #4
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f58:	2064      	movs	r0, #100	@ 0x64
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	4a23      	ldr	r2, [pc, #140]	@ (8002ff0 <MCAL_UART_Init+0x19c>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	7b1b      	ldrb	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d026      	beq.n	8002fce <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	7b12      	ldrb	r2, [r2, #12]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <MCAL_UART_Init+0x188>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d106      	bne.n	8002fa4 <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 8002f96:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 8002fa2:	e014      	b.n	8002fce <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <MCAL_UART_Init+0x194>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d106      	bne.n	8002fba <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	e009      	b.n	8002fce <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002fec <MCAL_UART_Init+0x198>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d105      	bne.n	8002fce <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <MCAL_UART_Init+0x1a0>)
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bcb0      	pop	{r4, r5, r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	02255100 	.word	0x02255100
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	200000ec 	.word	0x200000ec
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40004800 	.word	0x40004800
 8002ff0:	51eb851f 	.word	0x51eb851f
 8002ff4:	e000e104 	.word	0xe000e104

08002ff8 <USART_Disable_IRQ>:
void USART_Disable_IRQ()
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(1<<5);
 8002ffc:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <USART_Disable_IRQ+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a03      	ldr	r2, [pc, #12]	@ (8003010 <USART_Disable_IRQ+0x18>)
 8003002:	f023 0320 	bic.w	r3, r3, #32
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	40004400 	.word	0x40004400

08003014 <USART_Enable_IRQ>:


void USART_Enable_IRQ()
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
	USART2->CR1 |= (1<<5);
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <USART_Enable_IRQ+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a03      	ldr	r2, [pc, #12]	@ (800302c <USART_Enable_IRQ+0x18>)
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40004400 	.word	0x40004400

08003030 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8003044:	bf00      	nop
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f9      	beq.n	8003046 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fedc 	bl	8002e10 <which_UART>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
	}
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8003084:	bf00      	nop
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f9      	beq.n	8003086 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff febc 	bl	8002e10 <which_UART>
 8003098:	4603      	mov	r3, r0
 800309a:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 800309c:	7dfa      	ldrb	r2, [r7, #23]
 800309e:	490f      	ldr	r1, [pc, #60]	@ (80030dc <MCAL_UART_ReceiveData+0x6c>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3309      	adds	r3, #9
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	801a      	strh	r2, [r3, #0]
		}


	}

}
 80030c0:	e007      	b.n	80030d2 <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	801a      	strh	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200000ec 	.word	0x200000ec

080030e0 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003198 <MCAL_UART_GPIO_SetPins+0xb8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d118      	bne.n	8003122 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80030f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030f4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80030f6:	2306      	movs	r3, #6
 80030f8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	4619      	mov	r1, r3
 8003104:	4825      	ldr	r0, [pc, #148]	@ (800319c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003106:	f7fe fad1 	bl	80016ac <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800310a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800310e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003110:	2308      	movs	r3, #8
 8003112:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	4619      	mov	r1, r3
 800311a:	4820      	ldr	r0, [pc, #128]	@ (800319c <MCAL_UART_GPIO_SetPins+0xbc>)
 800311c:	f7fe fac6 	bl	80016ac <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8003120:	e036      	b.n	8003190 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d116      	bne.n	8003158 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800312a:	2304      	movs	r3, #4
 800312c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 800312e:	2306      	movs	r3, #6
 8003130:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	4619      	mov	r1, r3
 800313c:	4817      	ldr	r0, [pc, #92]	@ (800319c <MCAL_UART_GPIO_SetPins+0xbc>)
 800313e:	f7fe fab5 	bl	80016ac <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8003142:	2308      	movs	r3, #8
 8003144:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003146:	2308      	movs	r3, #8
 8003148:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4619      	mov	r1, r3
 8003150:	4812      	ldr	r0, [pc, #72]	@ (800319c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003152:	f7fe faab 	bl	80016ac <MCAL_GPIO_Init>
}
 8003156:	e01b      	b.n	8003190 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <MCAL_UART_GPIO_SetPins+0xc4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d117      	bne.n	8003190 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003164:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8003166:	2306      	movs	r3, #6
 8003168:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	4619      	mov	r1, r3
 8003174:	480c      	ldr	r0, [pc, #48]	@ (80031a8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003176:	f7fe fa99 	bl	80016ac <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800317a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800317e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003180:	2308      	movs	r3, #8
 8003182:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	4619      	mov	r1, r3
 800318a:	4807      	ldr	r0, [pc, #28]	@ (80031a8 <MCAL_UART_GPIO_SetPins+0xc8>)
 800318c:	f7fe fa8e 	bl	80016ac <MCAL_GPIO_Init>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	40010800 	.word	0x40010800
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	40010c00 	.word	0x40010c00

080031ac <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 80031b0:	4b02      	ldr	r3, [pc, #8]	@ (80031bc <USART1_IRQHandler+0x10>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4798      	blx	r3
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200000ec 	.word	0x200000ec

080031c0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 80031c4:	4b02      	ldr	r3, [pc, #8]	@ (80031d0 <USART2_IRQHandler+0x10>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	4798      	blx	r3
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200000ec 	.word	0x200000ec

080031d4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 80031d8:	4b02      	ldr	r3, [pc, #8]	@ (80031e4 <USART3_IRQHandler+0x10>)
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	4798      	blx	r3
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200000ec 	.word	0x200000ec

080031e8 <UART_Receiver_Callback>:
float error_previous = 0;
int correction_steps = 0;

// Test succedded ----------------------------------------------------
void UART_Receiver_Callback(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0

	MCAL_UART_ReceiveData(USART2, &initialSeverResponse, Disable);
 80031ec:	2200      	movs	r2, #0
 80031ee:	4914      	ldr	r1, [pc, #80]	@ (8003240 <UART_Receiver_Callback+0x58>)
 80031f0:	4814      	ldr	r0, [pc, #80]	@ (8003244 <UART_Receiver_Callback+0x5c>)
 80031f2:	f7ff ff3d 	bl	8003070 <MCAL_UART_ReceiveData>
	if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST){
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <UART_Receiver_Callback+0x58>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b45      	cmp	r3, #69	@ 0x45
 80031fe:	d004      	beq.n	800320a <UART_Receiver_Callback+0x22>
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <UART_Receiver_Callback+0x58>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b4c      	cmp	r3, #76	@ 0x4c
 8003208:	d113      	bne.n	8003232 <UART_Receiver_Callback+0x4a>
		newMessageArrived = 1;
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <UART_Receiver_Callback+0x60>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
		if(initialSeverResponse == PARKING_REQUEST)
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <UART_Receiver_Callback+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b45      	cmp	r3, #69	@ 0x45
 8003218:	d103      	bne.n	8003222 <UART_Receiver_Callback+0x3a>
			isAParking = 1;
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <UART_Receiver_Callback+0x64>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e007      	b.n	8003232 <UART_Receiver_Callback+0x4a>
		else if(initialSeverResponse == RETRIEVAL_REQUEST)
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <UART_Receiver_Callback+0x58>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b4c      	cmp	r3, #76	@ 0x4c
 800322a:	d102      	bne.n	8003232 <UART_Receiver_Callback+0x4a>
			isRetrieving = 1;
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <UART_Receiver_Callback+0x68>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
	}
	MCAL_UART_SendData(USART2, &Buffer, Enable);
 8003232:	2201      	movs	r2, #1
 8003234:	4907      	ldr	r1, [pc, #28]	@ (8003254 <UART_Receiver_Callback+0x6c>)
 8003236:	4803      	ldr	r0, [pc, #12]	@ (8003244 <UART_Receiver_Callback+0x5c>)
 8003238:	f7ff fefa 	bl	8003030 <MCAL_UART_SendData>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000130 	.word	0x20000130
 8003244:	40004400 	.word	0x40004400
 8003248:	2000012f 	.word	0x2000012f
 800324c:	2000012b 	.word	0x2000012b
 8003250:	2000012a 	.word	0x2000012a
 8003254:	20000034 	.word	0x20000034

08003258 <main>:




int main(void) {
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b094      	sub	sp, #80	@ 0x50
 800325c:	af02      	add	r7, sp, #8

	RCC_GPIOB_CLK_EN();
 800325e:	4ba4      	ldr	r3, [pc, #656]	@ (80034f0 <main+0x298>)
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	4aa3      	ldr	r2, [pc, #652]	@ (80034f0 <main+0x298>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 800326a:	4ba1      	ldr	r3, [pc, #644]	@ (80034f0 <main+0x298>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4aa0      	ldr	r2, [pc, #640]	@ (80034f0 <main+0x298>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8003276:	4b9e      	ldr	r3, [pc, #632]	@ (80034f0 <main+0x298>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4a9d      	ldr	r2, [pc, #628]	@ (80034f0 <main+0x298>)
 800327c:	f043 0310 	orr.w	r3, r3, #16
 8003280:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8003282:	4b9b      	ldr	r3, [pc, #620]	@ (80034f0 <main+0x298>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	4a9a      	ldr	r2, [pc, #616]	@ (80034f0 <main+0x298>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6193      	str	r3, [r2, #24]
	RCC_TIMER1_CLK_EN();
 800328e:	4b98      	ldr	r3, [pc, #608]	@ (80034f0 <main+0x298>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4a97      	ldr	r2, [pc, #604]	@ (80034f0 <main+0x298>)
 8003294:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003298:	6193      	str	r3, [r2, #24]
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 800329a:	2148      	movs	r1, #72	@ 0x48
 800329c:	2001      	movs	r0, #1
 800329e:	f7fe fbad 	bl	80019fc <MCAL_RCC_CLK_Init>

	RCC_USART2_CLK_EN();
 80032a2:	4b93      	ldr	r3, [pc, #588]	@ (80034f0 <main+0x298>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a92      	ldr	r2, [pc, #584]	@ (80034f0 <main+0x298>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ac:	61d3      	str	r3, [r2, #28]
	TIMER1_Init(RCC_CLK_36M);
 80032ae:	2024      	movs	r0, #36	@ 0x24
 80032b0:	f7fe fc88 	bl	8001bc4 <TIMER1_Init>
	Motor_Config_t DC_Motor1 =
 80032b4:	4b8f      	ldr	r3, [pc, #572]	@ (80034f4 <main+0x29c>)
 80032b6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80032ba:	461d      	mov	r5, r3
 80032bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3,
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 80032c4:	4b8c      	ldr	r3, [pc, #560]	@ (80034f8 <main+0x2a0>)
 80032c6:	f107 0420 	add.w	r4, r7, #32
 80032ca:	461d      	mov	r5, r3
 80032cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3,
			.PWM_Channel = TIMER_CH4
	};


	GPIO_PinConfig_t StepperDirPin = {
 80032d4:	4b89      	ldr	r3, [pc, #548]	@ (80034fc <main+0x2a4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61fb      	str	r3, [r7, #28]
			.GPIO_PinNumber = GPIO_PIN_8,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t LedPin = {
 80032da:	4b89      	ldr	r3, [pc, #548]	@ (8003500 <main+0x2a8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	61bb      	str	r3, [r7, #24]
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(GPIOC, &LedPin);
 80032e0:	f107 0318 	add.w	r3, r7, #24
 80032e4:	4619      	mov	r1, r3
 80032e6:	4887      	ldr	r0, [pc, #540]	@ (8003504 <main+0x2ac>)
 80032e8:	f7fe f9e0 	bl	80016ac <MCAL_GPIO_Init>


	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_115200;
 80032ec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80032f0:	60bb      	str	r3, [r7, #8]
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 80032f6:	2320      	movs	r3, #32
 80032f8:	743b      	strb	r3, [r7, #16]
	UART_Cfg.P_IRQ_CallBack = UART_Receiver_Callback;
 80032fa:	4b83      	ldr	r3, [pc, #524]	@ (8003508 <main+0x2b0>)
 80032fc:	617b      	str	r3, [r7, #20]
	UART_Cfg.Parity = UART_Parity_NONE;
 80032fe:	2300      	movs	r3, #0
 8003300:	737b      	strb	r3, [r7, #13]
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 8003302:	2300      	movs	r3, #0
 8003304:	733b      	strb	r3, [r7, #12]
	UART_Cfg.StopBits = UART_StopBits_1;
 8003306:	2300      	movs	r3, #0
 8003308:	73bb      	strb	r3, [r7, #14]
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 800330a:	230c      	movs	r3, #12
 800330c:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART2, &UART_Cfg);
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	4619      	mov	r1, r3
 8003312:	487e      	ldr	r0, [pc, #504]	@ (800350c <main+0x2b4>)
 8003314:	f7ff fd9e 	bl	8002e54 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART2);
 8003318:	487c      	ldr	r0, [pc, #496]	@ (800350c <main+0x2b4>)
 800331a:	f7ff fee1 	bl	80030e0 <MCAL_UART_GPIO_SetPins>


	Motor_intialize(&DC_Motor1);
 800331e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fb12 	bl	800094c <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fb0d 	bl	800094c <Motor_intialize>

	LCD_enuInit(&LCD_Configs);
 8003332:	4877      	ldr	r0, [pc, #476]	@ (8003510 <main+0x2b8>)
 8003334:	f7fd fba2 	bl	8000a7c <LCD_enuInit>

	HC_SR04_Init(UltraSonic_Configs);
 8003338:	4876      	ldr	r0, [pc, #472]	@ (8003514 <main+0x2bc>)
 800333a:	f7fd fefb 	bl	8001134 <HC_SR04_Init>
	Stepper_Init(&StepperDirPin);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe9c 	bl	8001080 <Stepper_Init>



	/* Loop forever */
	while (1) {
		switch(MyCurrentState)
 8003348:	4b73      	ldr	r3, [pc, #460]	@ (8003518 <main+0x2c0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b07      	cmp	r3, #7
 800334e:	d8fb      	bhi.n	8003348 <main+0xf0>
 8003350:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <main+0x100>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003379 	.word	0x08003379
 800335c:	0800342f 	.word	0x0800342f
 8003360:	080034c3 	.word	0x080034c3
 8003364:	08003545 	.word	0x08003545
 8003368:	0800361f 	.word	0x0800361f
 800336c:	08003695 	.word	0x08003695
 8003370:	080036cb 	.word	0x080036cb
 8003374:	08003349 	.word	0x08003349
		{
		case Idle:
		{

			if(initialSeverResponse == PARKING_REQUEST || initialSeverResponse == RETRIEVAL_REQUEST || PreviousReceived == PARKING_REQUEST || PreviousReceived == RETRIEVAL_REQUEST ){
 8003378:	4b68      	ldr	r3, [pc, #416]	@ (800351c <main+0x2c4>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b45      	cmp	r3, #69	@ 0x45
 8003380:	d00d      	beq.n	800339e <main+0x146>
 8003382:	4b66      	ldr	r3, [pc, #408]	@ (800351c <main+0x2c4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b4c      	cmp	r3, #76	@ 0x4c
 800338a:	d008      	beq.n	800339e <main+0x146>
 800338c:	4b64      	ldr	r3, [pc, #400]	@ (8003520 <main+0x2c8>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b45      	cmp	r3, #69	@ 0x45
 8003392:	d004      	beq.n	800339e <main+0x146>
 8003394:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <main+0x2c8>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b4c      	cmp	r3, #76	@ 0x4c
 800339a:	f040 81be 	bne.w	800371a <main+0x4c2>
				PreviousReceived = initialSeverResponse;
 800339e:	4b5f      	ldr	r3, [pc, #380]	@ (800351c <main+0x2c4>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003520 <main+0x2c8>)
 80033a6:	701a      	strb	r2, [r3, #0]


				USART_Disable_IRQ();
 80033a8:	f7ff fe26 	bl	8002ff8 <USART_Disable_IRQ>


				mySendChar = RECEIVED_OK;
 80033ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003524 <main+0x2cc>)
 80033ae:	2244      	movs	r2, #68	@ 0x44
 80033b0:	801a      	strh	r2, [r3, #0]

				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80033b2:	2201      	movs	r2, #1
 80033b4:	495b      	ldr	r1, [pc, #364]	@ (8003524 <main+0x2cc>)
 80033b6:	4855      	ldr	r0, [pc, #340]	@ (800350c <main+0x2b4>)
 80033b8:	f7ff fe3a 	bl	8003030 <MCAL_UART_SendData>


				if(!Done_Stepper_Up)
 80033bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003528 <main+0x2d0>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d112      	bne.n	80033ea <main+0x192>
				{
					Stepper_Move_Steps(TIMER4, TIMER_CH4, STEPPER_STEPS, 50, 700, Stepper_UP);  // B9 --> Step
 80033c4:	2301      	movs	r3, #1
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2332      	movs	r3, #50	@ 0x32
 80033d0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80033d4:	2103      	movs	r1, #3
 80033d6:	4855      	ldr	r0, [pc, #340]	@ (800352c <main+0x2d4>)
 80033d8:	f7fd fe76 	bl	80010c8 <Stepper_Move_Steps>
					Delay_Timer1_ms(4000);
 80033dc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80033e0:	f7fe fc30 	bl	8001c44 <Delay_Timer1_ms>

					Done_Stepper_Up = 1;
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <main+0x2d0>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
				}


				do{
					HC_SR04_ReadDistance(0, &Ultra1Distance);
 80033ea:	4951      	ldr	r1, [pc, #324]	@ (8003530 <main+0x2d8>)
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd ff27 	bl	8001240 <HC_SR04_ReadDistance>
					Delay_Timer1_ms(80);
 80033f2:	2050      	movs	r0, #80	@ 0x50
 80033f4:	f7fe fc26 	bl	8001c44 <Delay_Timer1_ms>

				}while(Ultra1Distance > 20);
 80033f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003530 <main+0x2d8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b14      	cmp	r3, #20
 80033fe:	d8f4      	bhi.n	80033ea <main+0x192>

				mySendChar = CAR_ARRIVED;
 8003400:	4b48      	ldr	r3, [pc, #288]	@ (8003524 <main+0x2cc>)
 8003402:	2250      	movs	r2, #80	@ 0x50
 8003404:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003406:	2201      	movs	r2, #1
 8003408:	4946      	ldr	r1, [pc, #280]	@ (8003524 <main+0x2cc>)
 800340a:	4840      	ldr	r0, [pc, #256]	@ (800350c <main+0x2b4>)
 800340c:	f7ff fe10 	bl	8003030 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003410:	2201      	movs	r2, #1
 8003412:	4948      	ldr	r1, [pc, #288]	@ (8003534 <main+0x2dc>)
 8003414:	483d      	ldr	r0, [pc, #244]	@ (800350c <main+0x2b4>)
 8003416:	f7ff fe2b 	bl	8003070 <MCAL_UART_ReceiveData>

				if(RecievedFromServer == ACK_CAR_ARRIVED)
 800341a:	4b46      	ldr	r3, [pc, #280]	@ (8003534 <main+0x2dc>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b53      	cmp	r3, #83	@ 0x53
 8003422:	f040 817a 	bne.w	800371a <main+0x4c2>
				{
					MyCurrentState = Wait_Car_Ack;
 8003426:	4b3c      	ldr	r3, [pc, #240]	@ (8003518 <main+0x2c0>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
				}

			}
		}
		break;
 800342c:	e175      	b.n	800371a <main+0x4c2>


		case Wait_Car_Ack:
		{
			// Move to the Elevator, then send a "FIRST_REKEB"
			LCD_enuJumpCursorTo(1, 0);
 800342e:	2100      	movs	r1, #0
 8003430:	2001      	movs	r0, #1
 8003432:	f7fd fdd7 	bl	8000fe4 <LCD_enuJumpCursorTo>
			LCD_enuSendString("GOING_ToElevator");
 8003436:	4840      	ldr	r0, [pc, #256]	@ (8003538 <main+0x2e0>)
 8003438:	f7fd fdb0 	bl	8000f9c <LCD_enuSendString>

			if(!UltraMove)
 800343c:	4b3f      	ldr	r3, [pc, #252]	@ (800353c <main+0x2e4>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d120      	bne.n	8003486 <main+0x22e>
			{
				Motor_Move_ForWard(&DC_Motor1, MOTOR_SPEED);
 8003444:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003448:	2128      	movs	r1, #40	@ 0x28
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd facc 	bl	80009e8 <Motor_Move_ForWard>
				Motor_Move_ForWard(&DC_Motor2, MOTOR_SPEED);
 8003450:	f107 0320 	add.w	r3, r7, #32
 8003454:	2128      	movs	r1, #40	@ 0x28
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fac6 	bl	80009e8 <Motor_Move_ForWard>
				Delay_Timer1_ms(DELAY_HOME_ELEVATOR);
 800345c:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8003460:	f7fe fbf0 	bl	8001c44 <Delay_Timer1_ms>
				Motor_TurnOff(&DC_Motor1);
 8003464:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd fa95 	bl	8000998 <Motor_TurnOff>
				Motor_TurnOff(&DC_Motor2);
 800346e:	f107 0320 	add.w	r3, r7, #32
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fa90 	bl	8000998 <Motor_TurnOff>

				Delay_Timer1_ms(2000);
 8003478:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800347c:	f7fe fbe2 	bl	8001c44 <Delay_Timer1_ms>

				UltraMove = 1;
 8003480:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <main+0x2e4>)
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
			}



			LCD_enuJumpCursorTo(1, 0);
 8003486:	2100      	movs	r1, #0
 8003488:	2001      	movs	r0, #1
 800348a:	f7fd fdab 	bl	8000fe4 <LCD_enuJumpCursorTo>
			LCD_enuSendString("AT Elevator");
 800348e:	482c      	ldr	r0, [pc, #176]	@ (8003540 <main+0x2e8>)
 8003490:	f7fd fd84 	bl	8000f9c <LCD_enuSendString>
			mySendChar = FIRST_REKEB;
 8003494:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <main+0x2cc>)
 8003496:	2246      	movs	r2, #70	@ 0x46
 8003498:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 800349a:	2201      	movs	r2, #1
 800349c:	4921      	ldr	r1, [pc, #132]	@ (8003524 <main+0x2cc>)
 800349e:	481b      	ldr	r0, [pc, #108]	@ (800350c <main+0x2b4>)
 80034a0:	f7ff fdc6 	bl	8003030 <MCAL_UART_SendData>
			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80034a4:	2201      	movs	r2, #1
 80034a6:	4923      	ldr	r1, [pc, #140]	@ (8003534 <main+0x2dc>)
 80034a8:	4818      	ldr	r0, [pc, #96]	@ (800350c <main+0x2b4>)
 80034aa:	f7ff fde1 	bl	8003070 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == START_PARKING)
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <main+0x2dc>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b42      	cmp	r3, #66	@ 0x42
 80034b6:	f040 8132 	bne.w	800371e <main+0x4c6>
			{
				MyCurrentState = Wait_Start_Parking;
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <main+0x2c0>)
 80034bc:	2202      	movs	r2, #2
 80034be:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80034c0:	e12d      	b.n	800371e <main+0x4c6>


		case Wait_Start_Parking:
		{

			mySendChar = ACK_STARTING;
 80034c2:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <main+0x2cc>)
 80034c4:	2251      	movs	r2, #81	@ 0x51
 80034c6:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80034c8:	2201      	movs	r2, #1
 80034ca:	4916      	ldr	r1, [pc, #88]	@ (8003524 <main+0x2cc>)
 80034cc:	480f      	ldr	r0, [pc, #60]	@ (800350c <main+0x2b4>)
 80034ce:	f7ff fdaf 	bl	8003030 <MCAL_UART_SendData>

			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80034d2:	2201      	movs	r2, #1
 80034d4:	4917      	ldr	r1, [pc, #92]	@ (8003534 <main+0x2dc>)
 80034d6:	480d      	ldr	r0, [pc, #52]	@ (800350c <main+0x2b4>)
 80034d8:	f7ff fdca 	bl	8003070 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == ARRIVED_INFRONTOF_SLOT)
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <main+0x2dc>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b48      	cmp	r3, #72	@ 0x48
 80034e4:	f040 811d 	bne.w	8003722 <main+0x4ca>
			{
				MyCurrentState = Wait_In_Front_Of_Slot;
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <main+0x2c0>)
 80034ea:	2203      	movs	r2, #3
 80034ec:	701a      	strb	r2, [r3, #0]
			}

		}

		break;
 80034ee:	e118      	b.n	8003722 <main+0x4ca>
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08003874 	.word	0x08003874
 80034f8:	08003888 	.word	0x08003888
 80034fc:	0800389c 	.word	0x0800389c
 8003500:	080038a0 	.word	0x080038a0
 8003504:	40011000 	.word	0x40011000
 8003508:	080031e9 	.word	0x080031e9
 800350c:	40004400 	.word	0x40004400
 8003510:	20000000 	.word	0x20000000
 8003514:	2000001c 	.word	0x2000001c
 8003518:	2000012e 	.word	0x2000012e
 800351c:	20000130 	.word	0x20000130
 8003520:	20000129 	.word	0x20000129
 8003524:	2000012c 	.word	0x2000012c
 8003528:	20000134 	.word	0x20000134
 800352c:	40000800 	.word	0x40000800
 8003530:	20000038 	.word	0x20000038
 8003534:	20000128 	.word	0x20000128
 8003538:	0800384c 	.word	0x0800384c
 800353c:	20000133 	.word	0x20000133
 8003540:	08003860 	.word	0x08003860



		case Wait_In_Front_Of_Slot:
		{
			if(!ProceedParking)
 8003544:	4b7b      	ldr	r3, [pc, #492]	@ (8003734 <main+0x4dc>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d151      	bne.n	80035f0 <main+0x398>
			{
				Motor_Move_ForWard(&DC_Motor1, MOTOR_SPEED);
 800354c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003550:	2128      	movs	r1, #40	@ 0x28
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fa48 	bl	80009e8 <Motor_Move_ForWard>
				Motor_Move_ForWard(&DC_Motor2, MOTOR_SPEED);
 8003558:	f107 0320 	add.w	r3, r7, #32
 800355c:	2128      	movs	r1, #40	@ 0x28
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fa42 	bl	80009e8 <Motor_Move_ForWard>
				Delay_Timer1_ms(DELAY_ELEVATOR_PARKING);
 8003564:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003568:	f7fe fb6c 	bl	8001c44 <Delay_Timer1_ms>
				Motor_TurnOff(&DC_Motor1);
 800356c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fa11 	bl	8000998 <Motor_TurnOff>
				Motor_TurnOff(&DC_Motor2);
 8003576:	f107 0320 	add.w	r3, r7, #32
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fa0c 	bl	8000998 <Motor_TurnOff>


				if(!Done_Stepper_Down)
 8003580:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <main+0x4e0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d112      	bne.n	80035ae <main+0x356>
				{
					Stepper_Move_Steps(TIMER4, TIMER_CH4, STEPPER_STEPS, 50, 700, Stepper_Down);  // B9 --> Step
 8003588:	2300      	movs	r3, #0
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2332      	movs	r3, #50	@ 0x32
 8003594:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003598:	2103      	movs	r1, #3
 800359a:	4868      	ldr	r0, [pc, #416]	@ (800373c <main+0x4e4>)
 800359c:	f7fd fd94 	bl	80010c8 <Stepper_Move_Steps>
					Delay_Timer1_ms(4000);
 80035a0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80035a4:	f7fe fb4e 	bl	8001c44 <Delay_Timer1_ms>

					Done_Stepper_Down = 1;
 80035a8:	4b63      	ldr	r3, [pc, #396]	@ (8003738 <main+0x4e0>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]





				Motor_Move_BackWard(&DC_Motor1, 60);
 80035ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035b2:	213c      	movs	r1, #60	@ 0x3c
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fa3c 	bl	8000a32 <Motor_Move_BackWard>
				Motor_Move_BackWard(&DC_Motor2, 60);
 80035ba:	f107 0320 	add.w	r3, r7, #32
 80035be:	213c      	movs	r1, #60	@ 0x3c
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fa36 	bl	8000a32 <Motor_Move_BackWard>
				Delay_Timer1_ms(2000);
 80035c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80035ca:	f7fe fb3b 	bl	8001c44 <Delay_Timer1_ms>
				Motor_TurnOff(&DC_Motor1);
 80035ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd f9e0 	bl	8000998 <Motor_TurnOff>
				Motor_TurnOff(&DC_Motor2);
 80035d8:	f107 0320 	add.w	r3, r7, #32
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd f9db 	bl	8000998 <Motor_TurnOff>

				Delay_Timer1_ms(4000);
 80035e2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80035e6:	f7fe fb2d 	bl	8001c44 <Delay_Timer1_ms>

				ProceedParking = 1;
 80035ea:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <main+0x4dc>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
			}


			mySendChar = DONE_PARKING;
 80035f0:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <main+0x4e8>)
 80035f2:	224a      	movs	r2, #74	@ 0x4a
 80035f4:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80035f6:	2201      	movs	r2, #1
 80035f8:	4951      	ldr	r1, [pc, #324]	@ (8003740 <main+0x4e8>)
 80035fa:	4852      	ldr	r0, [pc, #328]	@ (8003744 <main+0x4ec>)
 80035fc:	f7ff fd18 	bl	8003030 <MCAL_UART_SendData>
			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003600:	2201      	movs	r2, #1
 8003602:	4951      	ldr	r1, [pc, #324]	@ (8003748 <main+0x4f0>)
 8003604:	484f      	ldr	r0, [pc, #316]	@ (8003744 <main+0x4ec>)
 8003606:	f7ff fd33 	bl	8003070 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == ARRIVED_AT_ENTRY)
 800360a:	4b4f      	ldr	r3, [pc, #316]	@ (8003748 <main+0x4f0>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b49      	cmp	r3, #73	@ 0x49
 8003612:	f040 8088 	bne.w	8003726 <main+0x4ce>
			{
				MyCurrentState = Wait_Arriving_At_Entry;
 8003616:	4b4d      	ldr	r3, [pc, #308]	@ (800374c <main+0x4f4>)
 8003618:	2204      	movs	r2, #4
 800361a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800361c:	e083      	b.n	8003726 <main+0x4ce>

		case Wait_Arriving_At_Entry:
		{


			if(!DoneHome)
 800361e:	4b4c      	ldr	r3, [pc, #304]	@ (8003750 <main+0x4f8>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d120      	bne.n	8003668 <main+0x410>
			{
				Motor_Move_BackWard(&DC_Motor1, 60);
 8003626:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800362a:	213c      	movs	r1, #60	@ 0x3c
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fa00 	bl	8000a32 <Motor_Move_BackWard>
				Motor_Move_BackWard(&DC_Motor2, 60);
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	213c      	movs	r1, #60	@ 0x3c
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd f9fa 	bl	8000a32 <Motor_Move_BackWard>
				Delay_Timer1_ms(1600);
 800363e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8003642:	f7fe faff 	bl	8001c44 <Delay_Timer1_ms>
				Motor_TurnOff(&DC_Motor1);
 8003646:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd f9a4 	bl	8000998 <Motor_TurnOff>
				Motor_TurnOff(&DC_Motor2);
 8003650:	f107 0320 	add.w	r3, r7, #32
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd f99f 	bl	8000998 <Motor_TurnOff>

				Delay_Timer1_ms(4000);
 800365a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800365e:	f7fe faf1 	bl	8001c44 <Delay_Timer1_ms>

				DoneHome = 1;
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <main+0x4f8>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]





			mySendChar = FIRST_HOME;
 8003668:	4b35      	ldr	r3, [pc, #212]	@ (8003740 <main+0x4e8>)
 800366a:	2247      	movs	r2, #71	@ 0x47
 800366c:	801a      	strh	r2, [r3, #0]
			MCAL_UART_SendData(USART2, &mySendChar, Enable);
 800366e:	2201      	movs	r2, #1
 8003670:	4933      	ldr	r1, [pc, #204]	@ (8003740 <main+0x4e8>)
 8003672:	4834      	ldr	r0, [pc, #208]	@ (8003744 <main+0x4ec>)
 8003674:	f7ff fcdc 	bl	8003030 <MCAL_UART_SendData>
			MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003678:	2201      	movs	r2, #1
 800367a:	4933      	ldr	r1, [pc, #204]	@ (8003748 <main+0x4f0>)
 800367c:	4831      	ldr	r0, [pc, #196]	@ (8003744 <main+0x4ec>)
 800367e:	f7ff fcf7 	bl	8003070 <MCAL_UART_ReceiveData>

			if(RecievedFromServer == FINISH_PARKING)
 8003682:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <main+0x4f0>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b43      	cmp	r3, #67	@ 0x43
 800368a:	d14e      	bne.n	800372a <main+0x4d2>
			{
				MyCurrentState = Wait_Finish_Parking;
 800368c:	4b2f      	ldr	r3, [pc, #188]	@ (800374c <main+0x4f4>)
 800368e:	2205      	movs	r2, #5
 8003690:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 8003692:	e04a      	b.n	800372a <main+0x4d2>


		case Wait_Finish_Parking:
		{
			if(RecievedFromServer == FINISH_PARKING )
 8003694:	4b2c      	ldr	r3, [pc, #176]	@ (8003748 <main+0x4f0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b43      	cmp	r3, #67	@ 0x43
 800369c:	d147      	bne.n	800372e <main+0x4d6>
			{
				mySendChar = IM_DONE;
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <main+0x4e8>)
 80036a0:	224b      	movs	r2, #75	@ 0x4b
 80036a2:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80036a4:	2201      	movs	r2, #1
 80036a6:	4926      	ldr	r1, [pc, #152]	@ (8003740 <main+0x4e8>)
 80036a8:	4826      	ldr	r0, [pc, #152]	@ (8003744 <main+0x4ec>)
 80036aa:	f7ff fcc1 	bl	8003030 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80036ae:	2201      	movs	r2, #1
 80036b0:	4925      	ldr	r1, [pc, #148]	@ (8003748 <main+0x4f0>)
 80036b2:	4824      	ldr	r0, [pc, #144]	@ (8003744 <main+0x4ec>)
 80036b4:	f7ff fcdc 	bl	8003070 <MCAL_UART_ReceiveData>

				if(RecievedFromServer == ACK_DONE)
 80036b8:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <main+0x4f0>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b52      	cmp	r3, #82	@ 0x52
 80036c0:	d135      	bne.n	800372e <main+0x4d6>
				{
					MyCurrentState = Wait_ACK_Done;
 80036c2:	4b22      	ldr	r3, [pc, #136]	@ (800374c <main+0x4f4>)
 80036c4:	2206      	movs	r2, #6
 80036c6:	701a      	strb	r2, [r3, #0]



			}
		}
		break;
 80036c8:	e031      	b.n	800372e <main+0x4d6>


		case Wait_ACK_Done:
		{
			LCD_enuJumpCursorTo(1, 0);
 80036ca:	2100      	movs	r1, #0
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7fd fc89 	bl	8000fe4 <LCD_enuJumpCursorTo>
			LCD_enuSendString("AT HOME");
 80036d2:	4820      	ldr	r0, [pc, #128]	@ (8003754 <main+0x4fc>)
 80036d4:	f7fd fc62 	bl	8000f9c <LCD_enuSendString>

			isAParking = 0;
 80036d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <main+0x500>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
			isRetrieving = 0;
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <main+0x504>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
			MyCurrentState = Idle;
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <main+0x4f4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
			initialSeverResponse = 0;
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <main+0x508>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
			PreviousReceived = 0;
 80036f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <main+0x50c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
			ProceedParking = 0;
 80036f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <main+0x4dc>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
			DoneHome = 0;
 80036fc:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <main+0x4f8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
			UltraMove = 0;
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <main+0x510>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
			Done_Stepper_Down = 0;
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <main+0x4e0>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
			Done_Stepper_Up = 0;
 800370e:	4b17      	ldr	r3, [pc, #92]	@ (800376c <main+0x514>)
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]


			USART_Enable_IRQ();
 8003714:	f7ff fc7e 	bl	8003014 <USART_Enable_IRQ>



		}

		break;
 8003718:	e00b      	b.n	8003732 <main+0x4da>
		break;
 800371a:	bf00      	nop
 800371c:	e614      	b.n	8003348 <main+0xf0>
		break;
 800371e:	bf00      	nop
 8003720:	e612      	b.n	8003348 <main+0xf0>
		break;
 8003722:	bf00      	nop
 8003724:	e610      	b.n	8003348 <main+0xf0>
		break;
 8003726:	bf00      	nop
 8003728:	e60e      	b.n	8003348 <main+0xf0>
		break;
 800372a:	bf00      	nop
 800372c:	e60c      	b.n	8003348 <main+0xf0>
		break;
 800372e:	bf00      	nop
 8003730:	e60a      	b.n	8003348 <main+0xf0>
		switch(MyCurrentState)
 8003732:	e609      	b.n	8003348 <main+0xf0>
 8003734:	20000131 	.word	0x20000131
 8003738:	20000135 	.word	0x20000135
 800373c:	40000800 	.word	0x40000800
 8003740:	2000012c 	.word	0x2000012c
 8003744:	40004400 	.word	0x40004400
 8003748:	20000128 	.word	0x20000128
 800374c:	2000012e 	.word	0x2000012e
 8003750:	20000132 	.word	0x20000132
 8003754:	0800386c 	.word	0x0800386c
 8003758:	2000012b 	.word	0x2000012b
 800375c:	2000012a 	.word	0x2000012a
 8003760:	20000130 	.word	0x20000130
 8003764:	20000129 	.word	0x20000129
 8003768:	20000133 	.word	0x20000133
 800376c:	20000134 	.word	0x20000134

08003770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003770:	480d      	ldr	r0, [pc, #52]	@ (80037a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003772:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003774:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003778:	480c      	ldr	r0, [pc, #48]	@ (80037ac <LoopForever+0x6>)
  ldr r1, =_edata
 800377a:	490d      	ldr	r1, [pc, #52]	@ (80037b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <LoopForever+0xe>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003780:	e002      	b.n	8003788 <LoopCopyDataInit>

08003782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003786:	3304      	adds	r3, #4

08003788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800378c:	d3f9      	bcc.n	8003782 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003790:	4c0a      	ldr	r4, [pc, #40]	@ (80037bc <LoopForever+0x16>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003794:	e001      	b.n	800379a <LoopFillZerobss>

08003796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003798:	3204      	adds	r2, #4

0800379a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800379c:	d3fb      	bcc.n	8003796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800379e:	f000 f811 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037a2:	f7ff fd59 	bl	8003258 <main>

080037a6 <LoopForever>:

LoopForever:
  b LoopForever
 80037a6:	e7fe      	b.n	80037a6 <LoopForever>
  ldr   r0, =_estack
 80037a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80037ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80037b4:	080038d8 	.word	0x080038d8
  ldr r2, =_sbss
 80037b8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80037bc:	20000138 	.word	0x20000138

080037c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037c0:	e7fe      	b.n	80037c0 <ADC1_2_IRQHandler>
	...

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	@ (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	@ (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	f000 f81a 	bl	800380c <_init>
 80037d8:	2600      	movs	r6, #0
 80037da:	4d0a      	ldr	r5, [pc, #40]	@ (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	080038d0 	.word	0x080038d0
 8003800:	080038d0 	.word	0x080038d0
 8003804:	080038d0 	.word	0x080038d0
 8003808:	080038d4 	.word	0x080038d4

0800380c <_init>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr

08003818 <_fini>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr
