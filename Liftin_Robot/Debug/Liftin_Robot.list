
Liftin_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08004138  08004138  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004138  08004138  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000048  08004188  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004188  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004a7a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000143a  00000000  00000000  00024b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  00025f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000340  00000000  00000000  00026410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a52  00000000  00000000  00026750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007406  00000000  00000000  0002a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d229  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001210  00000000  00000000  0003e7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0003f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	08004074 	.word	0x08004074

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	08004074 	.word	0x08004074

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 8000f4c:	81bb      	strh	r3, [r7, #12]
 8000f4e:	2304      	movs	r3, #4
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	2302      	movs	r3, #2
 8000f54:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 ff1f 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 8000f6a:	813b      	strh	r3, [r7, #8]
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	72bb      	strb	r3, [r7, #10]
 8000f70:	2302      	movs	r3, #2
 8000f72:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 ff10 	bl	8001da4 <MCAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6858      	ldr	r0, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f000 ff96 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6898      	ldr	r0, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	885b      	ldrh	r3, [r3, #2]
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f000 ff8e 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <Motor_TurnOff+0x48>)
 8000fba:	f000 ff89 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_LOW);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <Motor_TurnOff+0x4c>)
 8000fc4:	f000 ff84 	bl	8001ed0 <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 8000fc8:	f001 fd8e 	bl	8002ae8 <TIMER3_Stop>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	40010800 	.word	0x40010800

08000fdc <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68d8      	ldr	r0, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7c19      	ldrb	r1, [r3, #16]
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	2324      	movs	r3, #36	; 0x24
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	f001 f9b7 	bl	800236c <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	f000 ff61 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6898      	ldr	r0, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	885b      	ldrh	r3, [r3, #2]
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	f000 ff59 	bl	8001ed0 <MCAL_GPIO_WritePin>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <Motor_Move_BackWard>:





void Motor_Move_BackWard(Motor_Config_t *Motor, uint8_t speed){
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af02      	add	r7, sp, #8
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68d8      	ldr	r0, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7c19      	ldrb	r1, [r3, #16]
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	2324      	movs	r3, #36	; 0x24
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	f001 f992 	bl	800236c <PWM>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_LOW);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6858      	ldr	r0, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	f000 ff3c 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_HIGH);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6898      	ldr	r0, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	885b      	ldrh	r3, [r3, #2]
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f000 ff34 	bl	8001ed0 <MCAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 8001078:	2301      	movs	r3, #1
 800107a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 800107e:	4a79      	ldr	r2, [pc, #484]	; (8001264 <LCD_enuInit+0x1f4>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RS = {
 8001088:	863b      	strh	r3, [r7, #48]	; 0x30
 800108a:	2304      	movs	r3, #4
 800108c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001090:	2302      	movs	r3, #2
 8001092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &RS);
 8001096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109a:	4619      	mov	r1, r3
 800109c:	4872      	ldr	r0, [pc, #456]	; (8001268 <LCD_enuInit+0x1f8>)
 800109e:	f000 fe81 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t RW = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RW = {
 80010a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010a8:	2304      	movs	r3, #4
 80010aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010ae:	2302      	movs	r3, #2
 80010b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &RW);
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	4619      	mov	r1, r3
 80010ba:	486b      	ldr	r0, [pc, #428]	; (8001268 <LCD_enuInit+0x1f8>)
 80010bc:	f000 fe72 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig_t EN = {
 80010c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80010c6:	2304      	movs	r3, #4
 80010c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80010cc:	2302      	movs	r3, #2
 80010ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &EN);
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4863      	ldr	r0, [pc, #396]	; (8001268 <LCD_enuInit+0x1f8>)
 80010da:	f000 fe63 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	895b      	ldrh	r3, [r3, #10]
	GPIO_PinConfig_t D7 = {
 80010e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010e4:	2304      	movs	r3, #4
 80010e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010ea:	2302      	movs	r3, #2
 80010ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D7);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	485d      	ldr	r0, [pc, #372]	; (800126c <LCD_enuInit+0x1fc>)
 80010f8:	f000 fe54 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	899b      	ldrh	r3, [r3, #12]
	GPIO_PinConfig_t D6 = {
 8001100:	843b      	strh	r3, [r7, #32]
 8001102:	2304      	movs	r3, #4
 8001104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001108:	2302      	movs	r3, #2
 800110a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D6);
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4619      	mov	r1, r3
 8001114:	4855      	ldr	r0, [pc, #340]	; (800126c <LCD_enuInit+0x1fc>)
 8001116:	f000 fe45 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	89db      	ldrh	r3, [r3, #14]
	GPIO_PinConfig_t D5 = {
 800111e:	83bb      	strh	r3, [r7, #28]
 8001120:	2304      	movs	r3, #4
 8001122:	77bb      	strb	r3, [r7, #30]
 8001124:	2302      	movs	r3, #2
 8001126:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D5);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	484f      	ldr	r0, [pc, #316]	; (800126c <LCD_enuInit+0x1fc>)
 8001130:	f000 fe38 	bl	8001da4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	8a1b      	ldrh	r3, [r3, #16]
	GPIO_PinConfig_t D4 = {
 8001138:	833b      	strh	r3, [r7, #24]
 800113a:	2304      	movs	r3, #4
 800113c:	76bb      	strb	r3, [r7, #26]
 800113e:	2302      	movs	r3, #2
 8001140:	76fb      	strb	r3, [r7, #27]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &D4);
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4619      	mov	r1, r3
 8001148:	4847      	ldr	r0, [pc, #284]	; (8001268 <LCD_enuInit+0x1f8>)
 800114a:	f000 fe2b 	bl	8001da4 <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(GPIOA, Copy_pstrConfigs->RW_Pin, GPIO_PIN_LOW);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	88db      	ldrh	r3, [r3, #6]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	4844      	ldr	r0, [pc, #272]	; (8001268 <LCD_enuInit+0x1f8>)
 8001158:	f000 feba 	bl	8001ed0 <MCAL_GPIO_WritePin>

	TIMER1_Init(RCC_CLK_8M);
 800115c:	2008      	movs	r0, #8
 800115e:	f001 f8ad 	bl	80022bc <TIMER1_Init>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
	Delay_Timer1_ms(35); //power on
 8001162:	2023      	movs	r0, #35	; 0x23
 8001164:	f001 f8ea 	bl	800233c <Delay_Timer1_ms>
	//MCAL_GPIO_WritePin(GPIsOA, GPIO_PIN_5, GPIO_PIN_LOW);

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d10a      	bne.n	8001186 <LCD_enuInit+0x116>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	483c      	ldr	r0, [pc, #240]	; (800126c <LCD_enuInit+0x1fc>)
 800117a:	f000 fea9 	bl	8001ed0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f000 f876 	bl	8001270 <LCD_enuWriteAndLatch>
 8001184:	e041      	b.n	800120a <LCD_enuInit+0x19a>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d13d      	bne.n	800120a <LCD_enuInit+0x19a>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	889b      	ldrh	r3, [r3, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4835      	ldr	r0, [pc, #212]	; (800126c <LCD_enuInit+0x1fc>)
 8001198:	f000 fe9a 	bl	8001ed0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 800119c:	2038      	movs	r0, #56	; 0x38
 800119e:	f000 f867 	bl	8001270 <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8a5b      	ldrh	r3, [r3, #18]
		GPIO_PinConfig_t D3 = {
 80011a6:	82bb      	strh	r3, [r7, #20]
 80011a8:	2304      	movs	r3, #4
 80011aa:	75bb      	strb	r3, [r7, #22]
 80011ac:	2302      	movs	r3, #2
 80011ae:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D3);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	482d      	ldr	r0, [pc, #180]	; (800126c <LCD_enuInit+0x1fc>)
 80011b8:	f000 fdf4 	bl	8001da4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8a9b      	ldrh	r3, [r3, #20]
		GPIO_PinConfig_t D2 = {
 80011c0:	823b      	strh	r3, [r7, #16]
 80011c2:	2304      	movs	r3, #4
 80011c4:	74bb      	strb	r3, [r7, #18]
 80011c6:	2302      	movs	r3, #2
 80011c8:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D2);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	4826      	ldr	r0, [pc, #152]	; (800126c <LCD_enuInit+0x1fc>)
 80011d2:	f000 fde7 	bl	8001da4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	8adb      	ldrh	r3, [r3, #22]
		GPIO_PinConfig_t D1 = {
 80011da:	81bb      	strh	r3, [r7, #12]
 80011dc:	2304      	movs	r3, #4
 80011de:	73bb      	strb	r3, [r7, #14]
 80011e0:	2302      	movs	r3, #2
 80011e2:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D1);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	4820      	ldr	r0, [pc, #128]	; (800126c <LCD_enuInit+0x1fc>)
 80011ec:	f000 fdda 	bl	8001da4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	8b1b      	ldrh	r3, [r3, #24]
		GPIO_PinConfig_t D0 = {
 80011f4:	813b      	strh	r3, [r7, #8]
 80011f6:	2304      	movs	r3, #4
 80011f8:	72bb      	strb	r3, [r7, #10]
 80011fa:	2302      	movs	r3, #2
 80011fc:	72fb      	strb	r3, [r7, #11]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D0);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <LCD_enuInit+0x1fc>)
 8001206:	f000 fdcd 	bl	8001da4 <MCAL_GPIO_Init>
	}


	Delay_Timer1_ms(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f001 f896 	bl	800233c <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	889b      	ldrh	r3, [r3, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4814      	ldr	r0, [pc, #80]	; (800126c <LCD_enuInit+0x1fc>)
 800121a:	f000 fe59 	bl	8001ed0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 800121e:	200c      	movs	r0, #12
 8001220:	f000 f826 	bl	8001270 <LCD_enuWriteAndLatch>

	Delay_Timer1_ms(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f001 f889 	bl	800233c <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <LCD_enuInit+0x1fc>)
 8001234:	f000 fe4c 	bl	8001ed0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f819 	bl	8001270 <LCD_enuWriteAndLatch>

	Delay_Timer1_ms(3);
 800123e:	2003      	movs	r0, #3
 8001240:	f001 f87c 	bl	800233c <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <LCD_enuInit+0x1fc>)
 800124e:	f000 fe3f 	bl	8001ed0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 8001252:	2006      	movs	r0, #6
 8001254:	f000 f80c 	bl	8001270 <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 8001258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800125c:	4618      	mov	r0, r3
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000064 	.word	0x20000064
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00

08001270 <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 800127e:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	88db      	ldrh	r3, [r3, #6]
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	487c      	ldr	r0, [pc, #496]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800128a:	f000 fe21 	bl	8001ed0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	891b      	ldrh	r3, [r3, #8]
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4878      	ldr	r0, [pc, #480]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800129a:	f000 fe19 	bl	8001ed0 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b28      	cmp	r3, #40	; 0x28
 80012a2:	d152      	bne.n	800134a <LCD_enuWriteAndLatch+0xda>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 80012a4:	4b74      	ldr	r3, [pc, #464]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4873      	ldr	r0, [pc, #460]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80012ae:	f000 fdf8 	bl	8001ea2 <MCAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d146      	bne.n	800134a <LCD_enuWriteAndLatch+0xda>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80012bc:	4b6e      	ldr	r3, [pc, #440]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	8959      	ldrh	r1, [r3, #10]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	09db      	lsrs	r3, r3, #7
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	486c      	ldr	r0, [pc, #432]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80012cc:	f000 fe00 	bl	8001ed0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	8999      	ldrh	r1, [r3, #12]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4865      	ldr	r0, [pc, #404]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80012e6:	f000 fdf3 	bl	8001ed0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	89d9      	ldrh	r1, [r3, #14]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	485f      	ldr	r0, [pc, #380]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001300:	f000 fde6 	bl	8001ed0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8001304:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	8a19      	ldrh	r1, [r3, #16]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4858      	ldr	r0, [pc, #352]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800131a:	f000 fdd9 	bl	8001ed0 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	891b      	ldrh	r3, [r3, #8]
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4854      	ldr	r0, [pc, #336]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800132a:	f000 fdd1 	bl	8001ed0 <MCAL_GPIO_WritePin>
			Delay_Timer1_ms(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f001 f804 	bl	800233c <Delay_Timer1_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	891b      	ldrh	r3, [r3, #8]
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	484f      	ldr	r0, [pc, #316]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001340:	f000 fdc6 	bl	8001ed0 <MCAL_GPIO_WritePin>
			Delay_Timer1_ms(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 fff9 	bl	800233c <Delay_Timer1_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b04      	cmp	r3, #4
 8001352:	f040 8095 	bne.w	8001480 <LCD_enuWriteAndLatch+0x210>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	8959      	ldrh	r1, [r3, #10]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	09db      	lsrs	r3, r3, #7
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	4845      	ldr	r0, [pc, #276]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001366:	f000 fdb3 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	8999      	ldrh	r1, [r3, #12]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	099b      	lsrs	r3, r3, #6
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	483f      	ldr	r0, [pc, #252]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001380:	f000 fda6 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	89d9      	ldrh	r1, [r3, #14]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4838      	ldr	r0, [pc, #224]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800139a:	f000 fd99 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	8a19      	ldrh	r1, [r3, #16]
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4832      	ldr	r0, [pc, #200]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80013b4:	f000 fd8c 	bl	8001ed0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	891b      	ldrh	r3, [r3, #8]
 80013be:	2201      	movs	r2, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	482e      	ldr	r0, [pc, #184]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80013c4:	f000 fd84 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f000 ffb7 	bl	800233c <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	891b      	ldrh	r3, [r3, #8]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4828      	ldr	r0, [pc, #160]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80013da:	f000 fd79 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 ffac 	bl	800233c <Delay_Timer1_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	8959      	ldrh	r1, [r3, #10]
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4820      	ldr	r0, [pc, #128]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 80013fa:	f000 fd69 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	8999      	ldrh	r1, [r3, #12]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	481a      	ldr	r0, [pc, #104]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001414:	f000 fd5c 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	89d9      	ldrh	r1, [r3, #14]
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800142e:	f000 fd4f 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	8a19      	ldrh	r1, [r3, #16]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001444:	f000 fd44 	bl	8001ed0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	891b      	ldrh	r3, [r3, #8]
 800144e:	2201      	movs	r2, #1
 8001450:	4619      	mov	r1, r3
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 8001454:	f000 fd3c 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f000 ff6f 	bl	800233c <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <LCD_enuWriteAndLatch+0x208>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	891b      	ldrh	r3, [r3, #8]
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <LCD_enuWriteAndLatch+0x20c>)
 800146a:	f000 fd31 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 ff64 	bl	800233c <Delay_Timer1_ms>
 8001474:	e082      	b.n	800157c <LCD_enuWriteAndLatch+0x30c>
 8001476:	bf00      	nop
 8001478:	20000064 	.word	0x20000064
 800147c:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 8001480:	4b41      	ldr	r3, [pc, #260]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d178      	bne.n	800157c <LCD_enuWriteAndLatch+0x30c>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	8959      	ldrh	r1, [r3, #10]
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	09db      	lsrs	r3, r3, #7
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	483c      	ldr	r0, [pc, #240]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 800149a:	f000 fd19 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	8999      	ldrh	r1, [r3, #12]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	099b      	lsrs	r3, r3, #6
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4836      	ldr	r0, [pc, #216]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 80014b4:	f000 fd0c 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 80014b8:	4b33      	ldr	r3, [pc, #204]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	89d9      	ldrh	r1, [r3, #14]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	482f      	ldr	r0, [pc, #188]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 80014ce:	f000 fcff 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	8a19      	ldrh	r1, [r3, #16]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4829      	ldr	r0, [pc, #164]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 80014e8:	f000 fcf2 	bl	8001ed0 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	8a59      	ldrh	r1, [r3, #18]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4822      	ldr	r0, [pc, #136]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 8001502:	f000 fce5 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	8a99      	ldrh	r1, [r3, #20]
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	481c      	ldr	r0, [pc, #112]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 800151c:	f000 fcd8 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	8ad9      	ldrh	r1, [r3, #22]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 8001536:	f000 fccb 	bl	8001ed0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	8b19      	ldrh	r1, [r3, #24]
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 800154c:	f000 fcc0 	bl	8001ed0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	891b      	ldrh	r3, [r3, #8]
 8001556:	2201      	movs	r2, #1
 8001558:	4619      	mov	r1, r3
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 800155c:	f000 fcb8 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f000 feeb 	bl	800233c <Delay_Timer1_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <LCD_enuWriteAndLatch+0x318>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	891b      	ldrh	r3, [r3, #8]
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	4806      	ldr	r0, [pc, #24]	; (800158c <LCD_enuWriteAndLatch+0x31c>)
 8001572:	f000 fcad 	bl	8001ed0 <MCAL_GPIO_WritePin>
		Delay_Timer1_ms(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fee0 	bl	800233c <Delay_Timer1_ms>
	}

	return Local_ErrorState;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000064 	.word	0x20000064
 800158c:	40010c00 	.word	0x40010c00

08001590 <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 800159c:	e00e      	b.n	80015bc <LCD_enuSendString+0x2c>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LCD_enuSendString+0x40>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <LCD_enuSendString+0x44>)
 80015aa:	f000 fc91 	bl	8001ed0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fe5a 	bl	8001270 <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ec      	bne.n	800159e <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000064 	.word	0x20000064
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <LCD_enuJumpCursorTo+0x94>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	481e      	ldr	r0, [pc, #120]	; (8001670 <LCD_enuJumpCursorTo+0x98>)
 80015f8:	f000 fc6a 	bl	8001ed0 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d108      	bne.n	8001614 <LCD_enuJumpCursorTo+0x3c>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	3b80      	subs	r3, #128	; 0x80
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe31 	bl	8001270 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e025      	b.n	8001660 <LCD_enuJumpCursorTo+0x88>
	}

	else if (Copy_u8StartX_Position == 2) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d108      	bne.n	800162c <LCD_enuJumpCursorTo+0x54>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	3b40      	subs	r3, #64	; 0x40
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe25 	bl	8001270 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e019      	b.n	8001660 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 3) {
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d108      	bne.n	8001644 <LCD_enuJumpCursorTo+0x6c>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	3b6c      	subs	r3, #108	; 0x6c
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe19 	bl	8001270 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e00d      	b.n	8001660 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 4) {
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b04      	cmp	r3, #4
 8001648:	d108      	bne.n	800165c <LCD_enuJumpCursorTo+0x84>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	3b2c      	subs	r3, #44	; 0x2c
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fe0d 	bl	8001270 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e001      	b.n	8001660 <LCD_enuJumpCursorTo+0x88>
	} else {
		Local_ErrorState = ES_NOT_OK;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000064 	.word	0x20000064
 8001670:	40010c00 	.word	0x40010c00

08001674 <LCD_enuDisplayIntNum>:
//
//
//	return Local_ErrorState;
//}

ES_t LCD_enuDisplayIntNum(int Copy_s32IntNumber) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 800167c:	2301      	movs	r3, #1
 800167e:	74bb      	strb	r3, [r7, #18]

	uint32_t Local_u32Remainder;
	uint32_t Local_u32ReverseNum = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
	uint8_t Local_u8DigitsNum = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	74fb      	strb	r3, [r7, #19]
	/******** number given will be displayed reversely cause of LCD prints each number of the whole number individually ******/
	/*********  so we will reverse the whole number just to be displayed correctly at the end of function **********/
	if (Copy_s32IntNumber < 0) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	da0d      	bge.n	80016aa <LCD_enuDisplayIntNum+0x36>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   //high for data
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <LCD_enuDisplayIntNum+0xf4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	889b      	ldrh	r3, [r3, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	4619      	mov	r1, r3
 8001698:	4834      	ldr	r0, [pc, #208]	; (800176c <LCD_enuDisplayIntNum+0xf8>)
 800169a:	f000 fc19 	bl	8001ed0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch('-');
 800169e:	202d      	movs	r0, #45	; 0x2d
 80016a0:	f7ff fde6 	bl	8001270 <LCD_enuWriteAndLatch>

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	425b      	negs	r3, r3
 80016a8:	607b      	str	r3, [r7, #4]
	}
	if(Copy_s32IntNumber == 0){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d12c      	bne.n	800170a <LCD_enuDisplayIntNum+0x96>
    	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   // High for Data
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <LCD_enuDisplayIntNum+0xf4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4619      	mov	r1, r3
 80016ba:	482c      	ldr	r0, [pc, #176]	; (800176c <LCD_enuDisplayIntNum+0xf8>)
 80016bc:	f000 fc08 	bl	8001ed0 <MCAL_GPIO_WritePin>
    	LCD_enuWriteAndLatch('0');
 80016c0:	2030      	movs	r0, #48	; 0x30
 80016c2:	f7ff fdd5 	bl	8001270 <LCD_enuWriteAndLatch>
	}
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 80016c6:	e020      	b.n	800170a <LCD_enuDisplayIntNum+0x96>
			{
		Local_u32Remainder = Copy_s32IntNumber % 10;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <LCD_enuDisplayIntNum+0xfc>)
 80016cc:	fb83 2301 	smull	r2, r3, r3, r1
 80016d0:	109a      	asrs	r2, r3, #2
 80016d2:	17cb      	asrs	r3, r1, #31
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	1aca      	subs	r2, r1, r3
 80016e0:	60fa      	str	r2, [r7, #12]
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
		Local_u8DigitsNum++; //counting number of digits for the original number
 80016f4:	7cfb      	ldrb	r3, [r7, #19]
 80016f6:	3301      	adds	r3, #1
 80016f8:	74fb      	strb	r3, [r7, #19]
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <LCD_enuDisplayIntNum+0xfc>)
 80016fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001702:	1092      	asrs	r2, r2, #2
 8001704:	17db      	asrs	r3, r3, #31
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dcdb      	bgt.n	80016c8 <LCD_enuDisplayIntNum+0x54>
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 8001710:	e022      	b.n	8001758 <LCD_enuDisplayIntNum+0xe4>
			{ // for number of cycles equal to Local_u8DigitsNum , print digits

		uint8_t Local_u8NumToPrint = Local_u32ReverseNum % 10;
 8001712:	6979      	ldr	r1, [r7, #20]
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <LCD_enuDisplayIntNum+0x100>)
 8001716:	fba3 2301 	umull	r2, r3, r3, r1
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	1aca      	subs	r2, r1, r3
 8001726:	4613      	mov	r3, r2
 8001728:	747b      	strb	r3, [r7, #17]
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH); //high for data
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <LCD_enuDisplayIntNum+0xf4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	4619      	mov	r1, r3
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LCD_enuDisplayIntNum+0xf8>)
 8001736:	f000 fbcb 	bl	8001ed0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
 800173a:	7c7b      	ldrb	r3, [r7, #17]
 800173c:	3330      	adds	r3, #48	; 0x30
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fd95 	bl	8001270 <LCD_enuWriteAndLatch>
		Local_u8DigitsNum--;
 8001746:	7cfb      	ldrb	r3, [r7, #19]
 8001748:	3b01      	subs	r3, #1
 800174a:	74fb      	strb	r3, [r7, #19]
	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <LCD_enuDisplayIntNum+0x100>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1d9      	bne.n	8001712 <LCD_enuDisplayIntNum+0x9e>
	}

	return Local_ErrorState;
 800175e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000064 	.word	0x20000064
 800176c:	40010c00 	.word	0x40010c00
 8001770:	66666667 	.word	0x66666667
 8001774:	cccccccd 	.word	0xcccccccd

08001778 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 8001784:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 800178a:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 8001790:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	881a      	ldrh	r2, [r3, #0]
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <Stepper_Init+0x40>)
 8001798:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <Stepper_Init+0x44>)
 80017a2:	f000 faff 	bl	8001da4 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2102      	movs	r1, #2
 80017aa:	4804      	ldr	r0, [pc, #16]	; (80017bc <Stepper_Init+0x44>)
 80017ac:	f000 fb90 	bl	8001ed0 <MCAL_GPIO_WritePin>

}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000068 	.word	0x20000068
 80017bc:	40010c00 	.word	0x40010c00

080017c0 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	70fb      	strb	r3, [r7, #3]
 80017d2:	460b      	mov	r3, r1
 80017d4:	803b      	strh	r3, [r7, #0]
 80017d6:	4613      	mov	r3, r2
 80017d8:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 80017da:	7d3b      	ldrb	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <Stepper_Move_Steps+0x26>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d008      	beq.n	80017f6 <Stepper_Move_Steps+0x36>
 80017e4:	e00f      	b.n	8001806 <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <Stepper_Move_Steps+0x64>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <Stepper_Move_Steps+0x68>)
 80017f0:	f000 fb6e 	bl	8001ed0 <MCAL_GPIO_WritePin>
		break;
 80017f4:	e007      	b.n	8001806 <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <Stepper_Move_Steps+0x64>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4619      	mov	r1, r3
 80017fe:	480a      	ldr	r0, [pc, #40]	; (8001828 <Stepper_Move_Steps+0x68>)
 8001800:	f000 fb66 	bl	8001ed0 <MCAL_GPIO_WritePin>
		break;
 8001804:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 8001806:	78b8      	ldrb	r0, [r7, #2]
 8001808:	883a      	ldrh	r2, [r7, #0]
 800180a:	78f9      	ldrb	r1, [r7, #3]
 800180c:	2324      	movs	r3, #36	; 0x24
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f001 f974 	bl	8002b04 <PWM_Move_Steps>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000068 	.word	0x20000068
 8001828:	40010c00 	.word	0x40010c00

0800182c <HC_SR04_Init>:
/********************************************************************/

#include "UltraSonic_Private.h"


ES_t HC_SR04_Init(HC_SR04_Config_t* Copy_pArrUltrasonicConfigs) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	TIMER1_Init(RCC_CLK_36M);
 8001834:	2024      	movs	r0, #36	; 0x24
 8001836:	f000 fd41 	bl	80022bc <TIMER1_Init>

	uint8_t Local_Iterator = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
 8001842:	e03c      	b.n	80018be <HC_SR04_Init+0x92>

		GPIO_PinConfig_t Trigger = {
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].triggerPin,
 8001844:	7dfa      	ldrb	r2, [r7, #23]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	891b      	ldrh	r3, [r3, #8]
		GPIO_PinConfig_t Trigger = {
 8001856:	823b      	strh	r3, [r7, #16]
 8001858:	2304      	movs	r3, #4
 800185a:	74bb      	strb	r3, [r7, #18]
 800185c:	2302      	movs	r3, #2
 800185e:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(Copy_pArrUltrasonicConfigs[Local_Iterator].trigPort, &Trigger);
 8001860:	7dfa      	ldrb	r2, [r7, #23]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f107 0210 	add.w	r2, r7, #16
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fa93 	bl	8001da4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t Echo = {
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].echoPin,
 8001882:	7dfa      	ldrb	r2, [r7, #23]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	895b      	ldrh	r3, [r3, #10]
		GPIO_PinConfig_t Echo = {
 8001894:	81bb      	strh	r3, [r7, #12]
 8001896:	2301      	movs	r3, #1
 8001898:	73bb      	strb	r3, [r7, #14]
				.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
		};

		MCAL_GPIO_Init(Copy_pArrUltrasonicConfigs[Local_Iterator].echoPort, &Echo);
 800189a:	7dfa      	ldrb	r2, [r7, #23]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f107 020c 	add.w	r2, r7, #12
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fa76 	bl	8001da4 <MCAL_GPIO_Init>
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	3301      	adds	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HC_SR04_Init+0xac>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	7dfa      	ldrb	r2, [r7, #23]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3bd      	bcc.n	8001844 <HC_SR04_Init+0x18>
	}


	Private_pConfigs = Copy_pArrUltrasonicConfigs;
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HC_SR04_Init+0xb0>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]

    return ES_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000001a 	.word	0x2000001a
 80018dc:	2000006c 	.word	0x2000006c

080018e0 <HC_SR04_Trigger>:

void HC_SR04_Trigger(uint8_t Sensor_Num) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
    // Send a 10us pulse on the trigger pin to initiate measurement
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_HIGH);
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HC_SR04_Trigger+0x50>)
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	891b      	ldrh	r3, [r3, #8]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <HC_SR04_Trigger+0x54>)
 8001902:	f000 fae5 	bl	8001ed0 <MCAL_GPIO_WritePin>
    Delay_Timer1_ms(10); // Delay for 10us
 8001906:	200a      	movs	r0, #10
 8001908:	f000 fd18 	bl	800233c <Delay_Timer1_ms>
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_LOW);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HC_SR04_Trigger+0x50>)
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	891b      	ldrh	r3, [r3, #8]
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <HC_SR04_Trigger+0x54>)
 8001924:	f000 fad4 	bl	8001ed0 <MCAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000006c 	.word	0x2000006c
 8001934:	40010800 	.word	0x40010800

08001938 <HC_SR04_ReadDistance>:

ES_t HC_SR04_ReadDistance(uint8_t Sensor_Num,uint32_t* distance_cm) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
    // Send trigger signal to start measurement
    HC_SR04_Trigger(Sensor_Num);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffca 	bl	80018e0 <HC_SR04_Trigger>

    uint8_t echoValue;
    // Wait for the rising edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].echoPort,Private_pConfigs[Sensor_Num].echoPin);
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HC_SR04_ReadDistance+0xd8>)
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	6858      	ldr	r0, [r3, #4]
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HC_SR04_ReadDistance+0xd8>)
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	895b      	ldrh	r3, [r3, #10]
 8001970:	4619      	mov	r1, r3
 8001972:	f000 fa96 	bl	8001ea2 <MCAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	75fb      	strb	r3, [r7, #23]
    }
    while ( echoValue == GPIO_PIN_LOW);
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0e5      	beq.n	800194c <HC_SR04_ReadDistance+0x14>

    uint32_t startTime = Get_TIMER1_Counter();
 8001980:	f001 f8a8 	bl	8002ad4 <Get_TIMER1_Counter>
 8001984:	6138      	str	r0, [r7, #16]
//    STK_enuGetElapsedTimeUs(&startTime);

    // Wait for the falling edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].echoPort,Private_pConfigs[Sensor_Num].echoPin);
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HC_SR04_ReadDistance+0xd8>)
 8001988:	6819      	ldr	r1, [r3, #0]
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	6858      	ldr	r0, [r3, #4]
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HC_SR04_ReadDistance+0xd8>)
 800199a:	6819      	ldr	r1, [r3, #0]
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	895b      	ldrh	r3, [r3, #10]
 80019aa:	4619      	mov	r1, r3
 80019ac:	f000 fa79 	bl	8001ea2 <MCAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]
    }
    while (echoValue == GPIO_PIN_HIGH);
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d0e5      	beq.n	8001986 <HC_SR04_ReadDistance+0x4e>

    uint32_t endTime = Get_TIMER1_Counter();
 80019ba:	f001 f88b 	bl	8002ad4 <Get_TIMER1_Counter>
 80019be:	60f8      	str	r0, [r7, #12]
//    STK_enuGetElapsedTimeUs(&endTime);

    // Calculate distance in centimeters
    uint32_t pulseDuration = endTime - startTime;
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	60bb      	str	r3, [r7, #8]
    *distance_cm = (pulseDuration * 0.0343) / 2; // Speed of sound is approximately 343 m/s
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f7fe fd13 	bl	80003f4 <__aeabi_ui2d>
 80019ce:	a30e      	add	r3, pc, #56	; (adr r3, 8001a08 <HC_SR04_ReadDistance+0xd0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fd88 	bl	80004e8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e8:	f7fe fea8 	bl	800073c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7fe ff8a 	bl	800090c <__aeabi_d2uiz>
 80019f8:	4602      	mov	r2, r0
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]

    return ES_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	04816f00 	.word	0x04816f00
 8001a0c:	3fa18fc5 	.word	0x3fa18fc5
 8001a10:	2000006c 	.word	0x2000006c

08001a14 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <EXTI0_IRQHandler+0x1c>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <EXTI0_IRQHandler+0x1c>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <EXTI0_IRQHandler+0x20>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4798      	blx	r3

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010400 	.word	0x40010400
 8001a34:	20000070 	.word	0x20000070

08001a38 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <EXTI1_IRQHandler+0x1c>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <EXTI1_IRQHandler+0x1c>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <EXTI1_IRQHandler+0x20>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4798      	blx	r3
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40010400 	.word	0x40010400
 8001a58:	20000070 	.word	0x20000070

08001a5c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <EXTI2_IRQHandler+0x1c>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <EXTI2_IRQHandler+0x1c>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <EXTI2_IRQHandler+0x20>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4798      	blx	r3
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40010400 	.word	0x40010400
 8001a7c:	20000070 	.word	0x20000070

08001a80 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <EXTI3_IRQHandler+0x1c>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <EXTI3_IRQHandler+0x1c>)
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <EXTI3_IRQHandler+0x20>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4798      	blx	r3
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40010400 	.word	0x40010400
 8001aa0:	20000070 	.word	0x20000070

08001aa4 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <EXTI4_IRQHandler+0x1c>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <EXTI4_IRQHandler+0x1c>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <EXTI4_IRQHandler+0x20>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4798      	blx	r3
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40010400 	.word	0x40010400
 8001ac4:	20000070 	.word	0x20000070

08001ac8 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <EXTI9_5_IRQHandler+0x22>
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001ade:	f043 0320 	orr.w	r3, r3, #32
 8001ae2:	6153      	str	r3, [r2, #20]
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <EXTI9_5_IRQHandler+0xa4>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <EXTI9_5_IRQHandler+0x40>
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <EXTI9_5_IRQHandler+0xa4>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <EXTI9_5_IRQHandler+0x5e>
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	6153      	str	r3, [r2, #20]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <EXTI9_5_IRQHandler+0xa4>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <EXTI9_5_IRQHandler+0x7c>
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <EXTI9_5_IRQHandler+0xa4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <EXTI9_5_IRQHandler+0x9a>
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <EXTI9_5_IRQHandler+0xa0>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	6153      	str	r3, [r2, #20]
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <EXTI9_5_IRQHandler+0xa4>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	4798      	blx	r3
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40010400 	.word	0x40010400
 8001b6c:	20000070 	.word	0x20000070

08001b70 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <EXTI15_10_IRQHandler+0x22>
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6153      	str	r3, [r2, #20]
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <EXTI15_10_IRQHandler+0x40>
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <EXTI15_10_IRQHandler+0x5e>
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc6:	6153      	str	r3, [r2, #20]
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <EXTI15_10_IRQHandler+0x7c>
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be4:	6153      	str	r3, [r2, #20]
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <EXTI15_10_IRQHandler+0x9a>
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c02:	6153      	str	r3, [r2, #20]
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <EXTI15_10_IRQHandler+0xb8>
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <EXTI15_10_IRQHandler+0xbc>)
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	6153      	str	r3, [r2, #20]
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <EXTI15_10_IRQHandler+0xc0>)
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	4798      	blx	r3
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010400 	.word	0x40010400
 8001c30:	20000070 	.word	0x20000070

08001c34 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c44:	f000 80a5 	beq.w	8001d92 <Get_CRLH_Position+0x15e>
 8001c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4c:	f300 80a3 	bgt.w	8001d96 <Get_CRLH_Position+0x162>
 8001c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c54:	f000 809b 	beq.w	8001d8e <Get_CRLH_Position+0x15a>
 8001c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5c:	f300 809b 	bgt.w	8001d96 <Get_CRLH_Position+0x162>
 8001c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c64:	f000 8091 	beq.w	8001d8a <Get_CRLH_Position+0x156>
 8001c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6c:	f300 8093 	bgt.w	8001d96 <Get_CRLH_Position+0x162>
 8001c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c74:	f000 8087 	beq.w	8001d86 <Get_CRLH_Position+0x152>
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	f300 808b 	bgt.w	8001d96 <Get_CRLH_Position+0x162>
 8001c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c84:	d07d      	beq.n	8001d82 <Get_CRLH_Position+0x14e>
 8001c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8a:	f300 8084 	bgt.w	8001d96 <Get_CRLH_Position+0x162>
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c92:	d074      	beq.n	8001d7e <Get_CRLH_Position+0x14a>
 8001c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c98:	dc7d      	bgt.n	8001d96 <Get_CRLH_Position+0x162>
 8001c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9e:	d06c      	beq.n	8001d7a <Get_CRLH_Position+0x146>
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	dc77      	bgt.n	8001d96 <Get_CRLH_Position+0x162>
 8001ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001caa:	d064      	beq.n	8001d76 <Get_CRLH_Position+0x142>
 8001cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb0:	dc71      	bgt.n	8001d96 <Get_CRLH_Position+0x162>
 8001cb2:	2b80      	cmp	r3, #128	; 0x80
 8001cb4:	d05d      	beq.n	8001d72 <Get_CRLH_Position+0x13e>
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	dc6d      	bgt.n	8001d96 <Get_CRLH_Position+0x162>
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	dc48      	bgt.n	8001d50 <Get_CRLH_Position+0x11c>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	dd69      	ble.n	8001d96 <Get_CRLH_Position+0x162>
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	2b1f      	cmp	r3, #31
 8001cc6:	d866      	bhi.n	8001d96 <Get_CRLH_Position+0x162>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <Get_CRLH_Position+0x9c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d57 	.word	0x08001d57
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d97 	.word	0x08001d97
 8001cdc:	08001d5f 	.word	0x08001d5f
 8001ce0:	08001d97 	.word	0x08001d97
 8001ce4:	08001d97 	.word	0x08001d97
 8001ce8:	08001d97 	.word	0x08001d97
 8001cec:	08001d63 	.word	0x08001d63
 8001cf0:	08001d97 	.word	0x08001d97
 8001cf4:	08001d97 	.word	0x08001d97
 8001cf8:	08001d97 	.word	0x08001d97
 8001cfc:	08001d97 	.word	0x08001d97
 8001d00:	08001d97 	.word	0x08001d97
 8001d04:	08001d97 	.word	0x08001d97
 8001d08:	08001d97 	.word	0x08001d97
 8001d0c:	08001d67 	.word	0x08001d67
 8001d10:	08001d97 	.word	0x08001d97
 8001d14:	08001d97 	.word	0x08001d97
 8001d18:	08001d97 	.word	0x08001d97
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d97 	.word	0x08001d97
 8001d24:	08001d97 	.word	0x08001d97
 8001d28:	08001d97 	.word	0x08001d97
 8001d2c:	08001d97 	.word	0x08001d97
 8001d30:	08001d97 	.word	0x08001d97
 8001d34:	08001d97 	.word	0x08001d97
 8001d38:	08001d97 	.word	0x08001d97
 8001d3c:	08001d97 	.word	0x08001d97
 8001d40:	08001d97 	.word	0x08001d97
 8001d44:	08001d97 	.word	0x08001d97
 8001d48:	08001d97 	.word	0x08001d97
 8001d4c:	08001d6b 	.word	0x08001d6b
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d00c      	beq.n	8001d6e <Get_CRLH_Position+0x13a>
 8001d54:	e01f      	b.n	8001d96 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e01e      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e01c      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001d5e:	2308      	movs	r3, #8
 8001d60:	e01a      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001d62:	230c      	movs	r3, #12
 8001d64:	e018      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001d66:	2310      	movs	r3, #16
 8001d68:	e016      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001d6a:	2314      	movs	r3, #20
 8001d6c:	e014      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001d6e:	2318      	movs	r3, #24
 8001d70:	e012      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001d72:	231c      	movs	r3, #28
 8001d74:	e010      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e00e      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e00c      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00a      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001d82:	230c      	movs	r3, #12
 8001d84:	e008      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001d86:	2310      	movs	r3, #16
 8001d88:	e006      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001d8a:	2314      	movs	r3, #20
 8001d8c:	e004      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001d8e:	2318      	movs	r3, #24
 8001d90:	e002      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001d92:	231c      	movs	r3, #28
 8001d94:	e000      	b.n	8001d98 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop

08001da4 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <MCAL_GPIO_Init+0x1e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <MCAL_GPIO_Init+0x22>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <Get_CRLH_Position>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	401a      	ands	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	d00b      	beq.n	8001e06 <MCAL_GPIO_Init+0x62>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d007      	beq.n	8001e06 <MCAL_GPIO_Init+0x62>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	789b      	ldrb	r3, [r3, #2]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d003      	beq.n	8001e06 <MCAL_GPIO_Init+0x62>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	789b      	ldrb	r3, [r3, #2]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d10e      	bne.n	8001e24 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	789b      	ldrb	r3, [r3, #2]
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	b25a      	sxtb	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	78db      	ldrb	r3, [r3, #3]
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e02c      	b.n	8001e7e <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	789b      	ldrb	r3, [r3, #2]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d003      	beq.n	8001e34 <MCAL_GPIO_Init+0x90>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	789b      	ldrb	r3, [r3, #2]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e01c      	b.n	8001e7e <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	789b      	ldrb	r3, [r3, #2]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d102      	bne.n	8001e52 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e015      	b.n	8001e7e <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001e52:	2308      	movs	r3, #8
 8001e54:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	789b      	ldrb	r3, [r3, #2]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	8812      	ldrh	r2, [r2, #0]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	e007      	b.n	8001e7e <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	8812      	ldrh	r2, [r2, #0]
 8001e76:	43d2      	mvns	r2, r2
 8001e78:	401a      	ands	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001e7e:	7bfc      	ldrb	r4, [r7, #15]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fed5 	bl	8001c34 <Get_CRLH_Position>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	fa04 f203 	lsl.w	r2, r4, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	601a      	str	r2, [r3, #0]


}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}

08001ea2 <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e001      	b.n	8001ec4 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8001eec:	e002      	b.n	8001ef4 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	615a      	str	r2, [r3, #20]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8001f0a:	4b38      	ldr	r3, [pc, #224]	; (8001fec <I2C1_EV_IRQHandler+0xec>)
 8001f0c:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f16:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <I2C1_EV_IRQHandler+0x48>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8001f40:	2100      	movs	r1, #0
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f000 f866 	bl	8002014 <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <I2C1_EV_IRQHandler+0x82>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d011      	beq.n	8001f82 <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	6978      	ldr	r0, [r7, #20]
 8001f7e:	f000 f849 	bl	8002014 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00f      	beq.n	8001fb2 <I2C1_EV_IRQHandler+0xb2>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <I2C1_EV_IRQHandler+0xb2>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001faa:	2103      	movs	r1, #3
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f000 f831 	bl	8002014 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00f      	beq.n	8001fe2 <I2C1_EV_IRQHandler+0xe2>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00c      	beq.n	8001fe2 <I2C1_EV_IRQHandler+0xe2>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001fda:	2104      	movs	r1, #4
 8001fdc:	6978      	ldr	r0, [r7, #20]
 8001fde:	f000 f819 	bl	8002014 <Slave_States>

		}
	}

}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40005400 	.word	0x40005400

08001ff0 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a32      	ldr	r2, [pc, #200]	; (80020ec <Slave_States+0xd8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d856      	bhi.n	80020e4 <Slave_States+0xd0>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <Slave_States+0x28>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	08002057 	.word	0x08002057
 8002040:	08002051 	.word	0x08002051
 8002044:	0800207b 	.word	0x0800207b
 8002048:	08002093 	.word	0x08002093
 800204c:	080020b7 	.word	0x080020b7
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8002054:	e046      	b.n	80020e4 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03b      	beq.n	80020da <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <Slave_States+0xdc>)
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3320      	adds	r3, #32
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2000      	movs	r0, #0
 8002076:	4798      	blx	r3
		}

		break ;
 8002078:	e02f      	b.n	80020da <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	491c      	ldr	r1, [pc, #112]	; (80020f0 <Slave_States+0xdc>)
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3320      	adds	r3, #32
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2002      	movs	r0, #2
 800208e:	4798      	blx	r3

		break ;
 8002090:	e028      	b.n	80020e4 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01f      	beq.n	80020de <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	4913      	ldr	r1, [pc, #76]	; (80020f0 <Slave_States+0xdc>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3320      	adds	r3, #32
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2003      	movs	r0, #3
 80020b2:	4798      	blx	r3
		}

		break ;
 80020b4:	e013      	b.n	80020de <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	490a      	ldr	r1, [pc, #40]	; (80020f0 <Slave_States+0xdc>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3320      	adds	r3, #32
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2004      	movs	r0, #4
 80020d6:	4798      	blx	r3
		}

		break ;
 80020d8:	e003      	b.n	80020e2 <Slave_States+0xce>
		break ;
 80020da:	bf00      	nop
 80020dc:	e002      	b.n	80020e4 <Slave_States+0xd0>
		break ;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <Slave_States+0xd0>
		break ;
 80020e2:	bf00      	nop
	}
	}

}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40005400 	.word	0x40005400
 80020f0:	200000ac 	.word	0x200000ac

080020f4 <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	460a      	mov	r2, r1
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	4613      	mov	r3, r2
 8002102:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d049      	beq.n	80021a2 <MCAL_RCC_CLK_Init+0xae>
 800210e:	2b02      	cmp	r3, #2
 8002110:	f300 80cc 	bgt.w	80022ac <MCAL_RCC_CLK_Init+0x1b8>
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80c8 	beq.w	80022aa <MCAL_RCC_CLK_Init+0x1b6>
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 80c6 	bne.w	80022ac <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8002120:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a64      	ldr	r2, [pc, #400]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a5e      	ldr	r2, [pc, #376]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	2b48      	cmp	r3, #72	; 0x48
 8002148:	d106      	bne.n	8002158 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 800214a:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002150:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002154:	6053      	str	r3, [r2, #4]
			break;
 8002156:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 8002164:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a53      	ldr	r2, [pc, #332]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 8002170:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 800217c:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002186:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800218e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002192:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 8002194:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800219a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800219e:	6053      	str	r3, [r2, #4]




		break;
 80021a0:	e084      	b.n	80022ac <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a44      	ldr	r2, [pc, #272]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	3b10      	subs	r3, #16
 80021be:	2b14      	cmp	r3, #20
 80021c0:	d85d      	bhi.n	800227e <MCAL_RCC_CLK_Init+0x18a>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <MCAL_RCC_CLK_Init+0xd4>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	0800221d 	.word	0x0800221d
 80021cc:	0800227f 	.word	0x0800227f
 80021d0:	0800227f 	.word	0x0800227f
 80021d4:	0800227f 	.word	0x0800227f
 80021d8:	0800222b 	.word	0x0800222b
 80021dc:	0800227f 	.word	0x0800227f
 80021e0:	0800227f 	.word	0x0800227f
 80021e4:	0800227f 	.word	0x0800227f
 80021e8:	08002239 	.word	0x08002239
 80021ec:	0800227f 	.word	0x0800227f
 80021f0:	08002247 	.word	0x08002247
 80021f4:	0800227f 	.word	0x0800227f
 80021f8:	08002255 	.word	0x08002255
 80021fc:	0800227f 	.word	0x0800227f
 8002200:	0800227f 	.word	0x0800227f
 8002204:	0800227f 	.word	0x0800227f
 8002208:	08002263 	.word	0x08002263
 800220c:	0800227f 	.word	0x0800227f
 8002210:	0800227f 	.word	0x0800227f
 8002214:	0800227f 	.word	0x0800227f
 8002218:	08002271 	.word	0x08002271
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002226:	6053      	str	r3, [r2, #4]
			break;
 8002228:	e029      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002230:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002234:	6053      	str	r3, [r2, #4]
			break;
 8002236:	e022      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	6053      	str	r3, [r2, #4]
			break;
 8002244:	e01b      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800224c:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 8002250:	6053      	str	r3, [r2, #4]
			break;
 8002252:	e014      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800225a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800225e:	6053      	str	r3, [r2, #4]
			break;
 8002260:	e00d      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002268:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800226c:	6053      	str	r3, [r2, #4]
			break;
 800226e:	e006      	b.n	800227e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002276:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800227a:	6053      	str	r3, [r2, #4]
			break;
 800227c:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 8002284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002288:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 800228a:	bf00      	nop
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f9      	beq.n	800228c <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <MCAL_RCC_CLK_Init+0x1c4>)
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]



		break;
 80022a8:	e000      	b.n	80022ac <MCAL_RCC_CLK_Init+0x1b8>
		break;
 80022aa:	bf00      	nop
	}
	}
	return status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <TIMER1_Init>:

uint8_t PinStepper_flag = 0;


void TIMER1_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER1_CLK_EN();
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <TIMER1_Init+0x4c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <TIMER1_Init+0x4c>)
 80022cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d0:	6193      	str	r3, [r2, #24]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER1->PSC = (Clock_Speed_MHz - 1);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <TIMER1_Init+0x50>)
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER1->ARR = 0xC350;  // 25000*2us = 0.05s
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <TIMER1_Init+0x50>)
 80022dc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER1->CR1 |= (1<<0);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <TIMER1_Init+0x50>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <TIMER1_Init+0x50>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER1->SR) & (1<<0)));
 80022ee:	bf00      	nop
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <TIMER1_Init+0x50>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f9      	beq.n	80022f0 <TIMER1_Init+0x34>
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	40012c00 	.word	0x40012c00

08002310 <Delay_Timer1_us>:
	}
}


void Delay_Timer1_us(int us)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	TIMER1->CNT = 0;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <Delay_Timer1_us+0x28>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER1->CNT) < us);
 800231e:	bf00      	nop
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <Delay_Timer1_us+0x28>)
 8002322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3fa      	bcc.n	8002320 <Delay_Timer1_us+0x10>
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00

0800233c <Delay_Timer1_ms>:


void Delay_Timer1_ms(int ms)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e006      	b.n	8002358 <Delay_Timer1_ms+0x1c>
	{
		Delay_Timer1_us(1000);
 800234a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234e:	f7ff ffdf 	bl	8002310 <Delay_Timer1_us>
	for(i=0;i<ms;i++)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf4      	blt.n	800234a <Delay_Timer1_ms+0xe>
	}
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b098      	sub	sp, #96	; 0x60
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	72fb      	strb	r3, [r7, #11]
 800237a:	4613      	mov	r3, r2
 800237c:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002384:	2300      	movs	r3, #0
 8002386:	65bb      	str	r3, [r7, #88]	; 0x58
 8002388:	2301      	movs	r3, #1
 800238a:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 800238c:	e017      	b.n	80023be <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 800238e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002392:	4a91      	ldr	r2, [pc, #580]	; (80025d8 <PWM+0x26c>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	4619      	mov	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a6:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 80023a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023aa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80023ae:	d303      	bcc.n	80023b8 <PWM+0x4c>
			Prescalar_Value += 2;
 80023b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b2:	3302      	adds	r3, #2
 80023b4:	657b      	str	r3, [r7, #84]	; 0x54
 80023b6:	e002      	b.n	80023be <PWM+0x52>
		}else{
			loop_flag = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 80023be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d0e3      	beq.n	800238e <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a84      	ldr	r2, [pc, #528]	; (80025dc <PWM+0x270>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 80d8 	bne.w	8002580 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 80023d0:	4b83      	ldr	r3, [pc, #524]	; (80025e0 <PWM+0x274>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a82      	ldr	r2, [pc, #520]	; (80025e0 <PWM+0x274>)
 80023d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023da:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 80023dc:	4b80      	ldr	r3, [pc, #512]	; (80025e0 <PWM+0x274>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <PWM+0x274>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <PWM+0x274>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a7c      	ldr	r2, [pc, #496]	; (80025e0 <PWM+0x274>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0201 	bic.w	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	2b03      	cmp	r3, #3
 8002404:	f200 8336 	bhi.w	8002a74 <PWM+0x708>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <PWM+0xa4>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002421 	.word	0x08002421
 8002414:	08002479 	.word	0x08002479
 8002418:	080024d1 	.word	0x080024d1
 800241c:	08002529 	.word	0x08002529
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <PWM+0x278>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800242a:	4619      	mov	r1, r3
 800242c:	486e      	ldr	r0, [pc, #440]	; (80025e8 <PWM+0x27c>)
 800242e:	f7ff fcb9 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f043 0208 	orr.w	r2, r3, #8
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002456:	7abb      	ldrb	r3, [r7, #10]
 8002458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a63      	ldr	r2, [pc, #396]	; (80025ec <PWM+0x280>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	095a      	lsrs	r2, r3, #5
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8002476:	e2fd      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002478:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <PWM+0x284>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800247e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002482:	4619      	mov	r1, r3
 8002484:	4858      	ldr	r0, [pc, #352]	; (80025e8 <PWM+0x27c>)
 8002486:	f7ff fc8d 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80024ae:	7abb      	ldrb	r3, [r7, #10]
 80024b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <PWM+0x280>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	095a      	lsrs	r2, r3, #5
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80024ce:	e2d1      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <PWM+0x288>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80024d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024da:	4619      	mov	r1, r3
 80024dc:	4842      	ldr	r0, [pc, #264]	; (80025e8 <PWM+0x27c>)
 80024de:	f7ff fc61 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f043 0208 	orr.w	r2, r3, #8
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002506:	7abb      	ldrb	r3, [r7, #10]
 8002508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a37      	ldr	r2, [pc, #220]	; (80025ec <PWM+0x280>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	095a      	lsrs	r2, r3, #5
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002526:	e2a5      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <PWM+0x28c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800252e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002532:	4619      	mov	r1, r3
 8002534:	482c      	ldr	r0, [pc, #176]	; (80025e8 <PWM+0x27c>)
 8002536:	f7ff fc35 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800255e:	7abb      	ldrb	r3, [r7, #10]
 8002560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <PWM+0x280>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	095a      	lsrs	r2, r3, #5
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 800257e:	e279      	b.n	8002a74 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	f040 80d1 	bne.w	800272c <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <PWM+0x274>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <PWM+0x274>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <PWM+0x274>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <PWM+0x274>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <PWM+0x274>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <PWM+0x274>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0201 	bic.w	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	f200 8259 	bhi.w	8002a74 <PWM+0x708>
 80025c2:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <PWM+0x25c>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025fd 	.word	0x080025fd
 80025cc:	08002649 	.word	0x08002649
 80025d0:	08002695 	.word	0x08002695
 80025d4:	080026e1 	.word	0x080026e1
 80025d8:	000f4240 	.word	0x000f4240
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	0800408c 	.word	0x0800408c
 80025e8:	40010800 	.word	0x40010800
 80025ec:	51eb851f 	.word	0x51eb851f
 80025f0:	08004090 	.word	0x08004090
 80025f4:	08004094 	.word	0x08004094
 80025f8:	08004098 	.word	0x08004098
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80025fc:	4b9d      	ldr	r3, [pc, #628]	; (8002874 <PWM+0x508>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002606:	4619      	mov	r1, r3
 8002608:	489b      	ldr	r0, [pc, #620]	; (8002878 <PWM+0x50c>)
 800260a:	f7ff fbcb 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f043 0208 	orr.w	r2, r3, #8
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002632:	7abb      	ldrb	r3, [r7, #10]
 8002634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4a90      	ldr	r2, [pc, #576]	; (800287c <PWM+0x510>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095a      	lsrs	r2, r3, #5
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002646:	e215      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002648:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <PWM+0x514>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800264e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002652:	4619      	mov	r1, r3
 8002654:	4888      	ldr	r0, [pc, #544]	; (8002878 <PWM+0x50c>)
 8002656:	f7ff fba5 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800267e:	7abb      	ldrb	r3, [r7, #10]
 8002680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a7d      	ldr	r2, [pc, #500]	; (800287c <PWM+0x510>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	095a      	lsrs	r2, r3, #5
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002692:	e1ef      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002694:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <PWM+0x518>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800269a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800269e:	4619      	mov	r1, r3
 80026a0:	4875      	ldr	r0, [pc, #468]	; (8002878 <PWM+0x50c>)
 80026a2:	f7ff fb7f 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f043 0208 	orr.w	r2, r3, #8
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80026ca:	7abb      	ldrb	r3, [r7, #10]
 80026cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	4a6a      	ldr	r2, [pc, #424]	; (800287c <PWM+0x510>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095a      	lsrs	r2, r3, #5
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 80026de:	e1c9      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <PWM+0x51c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80026e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026ea:	4619      	mov	r1, r3
 80026ec:	4862      	ldr	r0, [pc, #392]	; (8002878 <PWM+0x50c>)
 80026ee:	f7ff fb59 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002716:	7abb      	ldrb	r3, [r7, #10]
 8002718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a57      	ldr	r2, [pc, #348]	; (800287c <PWM+0x510>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095a      	lsrs	r2, r3, #5
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 800272a:	e1a3      	b.n	8002a74 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <PWM+0x520>)
 8002730:	4293      	cmp	r3, r2
 8002732:	f040 80db 	bne.w	80028ec <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <PWM+0x524>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a55      	ldr	r2, [pc, #340]	; (8002890 <PWM+0x524>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <PWM+0x524>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4a52      	ldr	r2, [pc, #328]	; (8002890 <PWM+0x524>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 800274e:	4b50      	ldr	r3, [pc, #320]	; (8002890 <PWM+0x524>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <PWM+0x524>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800275a:	4b4d      	ldr	r3, [pc, #308]	; (8002890 <PWM+0x524>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <PWM+0x524>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	2b03      	cmp	r3, #3
 8002776:	f200 817d 	bhi.w	8002a74 <PWM+0x708>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <PWM+0x414>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	080027dd 	.word	0x080027dd
 8002788:	08002829 	.word	0x08002829
 800278c:	080028a1 	.word	0x080028a1
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <PWM+0x528>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279a:	4619      	mov	r1, r3
 800279c:	4836      	ldr	r0, [pc, #216]	; (8002878 <PWM+0x50c>)
 800279e:	f7ff fb01 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f043 0208 	orr.w	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80027c6:	7abb      	ldrb	r3, [r7, #10]
 80027c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	4a2b      	ldr	r2, [pc, #172]	; (800287c <PWM+0x510>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095a      	lsrs	r2, r3, #5
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80027da:	e14b      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <PWM+0x52c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80027e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e6:	4619      	mov	r1, r3
 80027e8:	4823      	ldr	r0, [pc, #140]	; (8002878 <PWM+0x50c>)
 80027ea:	f7ff fadb 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002812:	7abb      	ldrb	r3, [r7, #10]
 8002814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <PWM+0x510>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095a      	lsrs	r2, r3, #5
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002826:	e125      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <PWM+0x508>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800282e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002832:	4619      	mov	r1, r3
 8002834:	4819      	ldr	r0, [pc, #100]	; (800289c <PWM+0x530>)
 8002836:	f7ff fab5 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f043 0208 	orr.w	r2, r3, #8
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800285e:	7abb      	ldrb	r3, [r7, #10]
 8002860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <PWM+0x510>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	095a      	lsrs	r2, r3, #5
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002872:	e0ff      	b.n	8002a74 <PWM+0x708>
 8002874:	0800409c 	.word	0x0800409c
 8002878:	40010800 	.word	0x40010800
 800287c:	51eb851f 	.word	0x51eb851f
 8002880:	080040a0 	.word	0x080040a0
 8002884:	080040a4 	.word	0x080040a4
 8002888:	080040a8 	.word	0x080040a8
 800288c:	40000400 	.word	0x40000400
 8002890:	40021000 	.word	0x40021000
 8002894:	080040ac 	.word	0x080040ac
 8002898:	080040b0 	.word	0x080040b0
 800289c:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80028a0:	4b83      	ldr	r3, [pc, #524]	; (8002ab0 <PWM+0x744>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80028a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028aa:	4619      	mov	r1, r3
 80028ac:	4881      	ldr	r0, [pc, #516]	; (8002ab4 <PWM+0x748>)
 80028ae:	f7ff fa79 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80028d6:	7abb      	ldrb	r3, [r7, #10]
 80028d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4a76      	ldr	r2, [pc, #472]	; (8002ab8 <PWM+0x74c>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095a      	lsrs	r2, r3, #5
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80028ea:	e0c3      	b.n	8002a74 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <PWM+0x750>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f040 80bf 	bne.w	8002a74 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <PWM+0x754>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a71      	ldr	r2, [pc, #452]	; (8002ac0 <PWM+0x754>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8002902:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <PWM+0x754>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <PWM+0x754>)
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800290e:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <PWM+0x754>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	4a6b      	ldr	r2, [pc, #428]	; (8002ac0 <PWM+0x754>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	2b03      	cmp	r3, #3
 800292a:	f200 80a3 	bhi.w	8002a74 <PWM+0x708>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <PWM+0x5c8>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	08002991 	.word	0x08002991
 800293c:	080029dd 	.word	0x080029dd
 8002940:	08002a29 	.word	0x08002a29
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002944:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <PWM+0x758>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800294a:	f107 0320 	add.w	r3, r7, #32
 800294e:	4619      	mov	r1, r3
 8002950:	4858      	ldr	r0, [pc, #352]	; (8002ab4 <PWM+0x748>)
 8002952:	f7ff fa27 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f043 0208 	orr.w	r2, r3, #8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800297a:	7abb      	ldrb	r3, [r7, #10]
 800297c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <PWM+0x74c>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095a      	lsrs	r2, r3, #5
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 800298e:	e071      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <PWM+0x75c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <PWM+0x748>)
 800299e:	f7ff fa01 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80029c6:	7abb      	ldrb	r3, [r7, #10]
 80029c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <PWM+0x74c>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	095a      	lsrs	r2, r3, #5
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80029da:	e04b      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80029dc:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <PWM+0x760>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4619      	mov	r1, r3
 80029e8:	4832      	ldr	r0, [pc, #200]	; (8002ab4 <PWM+0x748>)
 80029ea:	f7ff f9db 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f043 0208 	orr.w	r2, r3, #8
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002a12:	7abb      	ldrb	r3, [r7, #10]
 8002a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <PWM+0x74c>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	095a      	lsrs	r2, r3, #5
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002a26:	e025      	b.n	8002a74 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <PWM+0x764>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	481f      	ldr	r0, [pc, #124]	; (8002ab4 <PWM+0x748>)
 8002a36:	f7ff f9b5 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002a5e:	7abb      	ldrb	r3, [r7, #10]
 8002a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <PWM+0x74c>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	095a      	lsrs	r2, r3, #5
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002a72:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3760      	adds	r7, #96	; 0x60
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	080040a0 	.word	0x080040a0
 8002ab4:	40010c00 	.word	0x40010c00
 8002ab8:	51eb851f 	.word	0x51eb851f
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080040ac 	.word	0x080040ac
 8002ac8:	080040b0 	.word	0x080040b0
 8002acc:	0800408c 	.word	0x0800408c
 8002ad0:	08004090 	.word	0x08004090

08002ad4 <Get_TIMER1_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER1_Counter()
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
	return (TIMER1->CNT);
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <Get_TIMER1_Counter+0x10>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40012c00 	.word	0x40012c00

08002ae8 <TIMER3_Stop>:
	TIMER2->CNT = 0;
	TIMER2->CR1 |= (1<<0);
}

void TIMER3_Stop()
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <TIMER3_Stop+0x18>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <TIMER3_Stop+0x18>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40000400 	.word	0x40000400

08002b04 <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b096      	sub	sp, #88	; 0x58
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	70fb      	strb	r3, [r7, #3]
 8002b16:	460b      	mov	r3, r1
 8002b18:	803b      	strh	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 8002b1e:	4b9b      	ldr	r3, [pc, #620]	; (8002d8c <PWM_Move_Steps+0x288>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 8002b24:	4a9a      	ldr	r2, [pc, #616]	; (8002d90 <PWM_Move_Steps+0x28c>)
 8002b26:	883b      	ldrh	r3, [r7, #0]
 8002b28:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002b30:	2300      	movs	r3, #0
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
 8002b34:	2301      	movs	r3, #1
 8002b36:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(loop_flag == 1)
 8002b38:	e017      	b.n	8002b6a <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8002b3a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002b3e:	4a95      	ldr	r2, [pc, #596]	; (8002d94 <PWM_Move_Steps+0x290>)
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	4619      	mov	r1, r3
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002b5a:	d303      	bcc.n	8002b64 <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5e:	3302      	adds	r3, #2
 8002b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b62:	e002      	b.n	8002b6a <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(loop_flag == 1)
 8002b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d0e3      	beq.n	8002b3a <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a88      	ldr	r2, [pc, #544]	; (8002d98 <PWM_Move_Steps+0x294>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	f040 8120 	bne.w	8002dbc <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 8002b7c:	4b87      	ldr	r3, [pc, #540]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4a86      	ldr	r2, [pc, #536]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b86:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002b88:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a80      	ldr	r2, [pc, #512]	; (8002d9c <PWM_Move_Steps+0x298>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 8002ba0:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7e      	ldr	r2, [pc, #504]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 8002bac:	4b7c      	ldr	r3, [pc, #496]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7b      	ldr	r2, [pc, #492]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bc2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 8002bc4:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a75      	ldr	r2, [pc, #468]	; (8002da0 <PWM_Move_Steps+0x29c>)
 8002bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bce:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 0201 	bic.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	f200 83c2 	bhi.w	8003368 <PWM_Move_Steps+0x864>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <PWM_Move_Steps+0xe8>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c61 	.word	0x08002c61
 8002bf4:	08002cc5 	.word	0x08002cc5
 8002bf8:	08002d29 	.word	0x08002d29
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002bfc:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <PWM_Move_Steps+0x2a0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c06:	4619      	mov	r1, r3
 8002c08:	4867      	ldr	r0, [pc, #412]	; (8002da8 <PWM_Move_Steps+0x2a4>)
 8002c0a:	f7ff f8cb 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f043 0208 	orr.w	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002c32:	78bb      	ldrb	r3, [r7, #2]
 8002c34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	; (8002dac <PWM_Move_Steps+0x2a8>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095a      	lsrs	r2, r3, #5
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f043 0203 	orr.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
			break;
 8002c5e:	e383      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <PWM_Move_Steps+0x2ac>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	484e      	ldr	r0, [pc, #312]	; (8002da8 <PWM_Move_Steps+0x2a4>)
 8002c6e:	f7ff f899 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002c96:	78bb      	ldrb	r3, [r7, #2]
 8002c98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	4a43      	ldr	r2, [pc, #268]	; (8002dac <PWM_Move_Steps+0x2a8>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	095a      	lsrs	r2, r3, #5
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b101 << 0);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f043 0205 	orr.w	r2, r3, #5
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60da      	str	r2, [r3, #12]
			break;
 8002cc2:	e351      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <PWM_Move_Steps+0x2b0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4835      	ldr	r0, [pc, #212]	; (8002da8 <PWM_Move_Steps+0x2a4>)
 8002cd2:	f7ff f867 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f043 0208 	orr.w	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002cfa:	78bb      	ldrb	r3, [r7, #2]
 8002cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <PWM_Move_Steps+0x2a8>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095a      	lsrs	r2, r3, #5
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f043 0209 	orr.w	r2, r3, #9
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]
			break;
 8002d26:	e31f      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <PWM_Move_Steps+0x2b4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d32:	4619      	mov	r1, r3
 8002d34:	481c      	ldr	r0, [pc, #112]	; (8002da8 <PWM_Move_Steps+0x2a4>)
 8002d36:	f7ff f835 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002d5e:	78bb      	ldrb	r3, [r7, #2]
 8002d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <PWM_Move_Steps+0x2a8>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095a      	lsrs	r2, r3, #5
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b10001 << 0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f043 0211 	orr.w	r2, r3, #17
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60da      	str	r2, [r3, #12]
			break;
 8002d8a:	e2ed      	b.n	8003368 <PWM_Move_Steps+0x864>
 8002d8c:	200000f5 	.word	0x200000f5
 8002d90:	200000f6 	.word	0x200000f6
 8002d94:	000f4240 	.word	0x000f4240
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	0800408c 	.word	0x0800408c
 8002da8:	40010800 	.word	0x40010800
 8002dac:	51eb851f 	.word	0x51eb851f
 8002db0:	08004090 	.word	0x08004090
 8002db4:	08004094 	.word	0x08004094
 8002db8:	08004098 	.word	0x08004098
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	f040 80dd 	bne.w	8002f80 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 8002dc6:	4ba0      	ldr	r3, [pc, #640]	; (8003048 <PWM_Move_Steps+0x544>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a9f      	ldr	r2, [pc, #636]	; (8003048 <PWM_Move_Steps+0x544>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002dd2:	4b9d      	ldr	r3, [pc, #628]	; (8003048 <PWM_Move_Steps+0x544>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4a9c      	ldr	r2, [pc, #624]	; (8003048 <PWM_Move_Steps+0x544>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002dde:	4b9a      	ldr	r3, [pc, #616]	; (8003048 <PWM_Move_Steps+0x544>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	4a99      	ldr	r2, [pc, #612]	; (8003048 <PWM_Move_Steps+0x544>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 8002dea:	4b98      	ldr	r3, [pc, #608]	; (800304c <PWM_Move_Steps+0x548>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a97      	ldr	r2, [pc, #604]	; (800304c <PWM_Move_Steps+0x548>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	f200 82af 	bhi.w	8003368 <PWM_Move_Steps+0x864>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <PWM_Move_Steps+0x30c>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e79 	.word	0x08002e79
 8002e18:	08002ed1 	.word	0x08002ed1
 8002e1c:	08002f29 	.word	0x08002f29
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e20:	4b8b      	ldr	r3, [pc, #556]	; (8003050 <PWM_Move_Steps+0x54c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002e26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4889      	ldr	r0, [pc, #548]	; (8003054 <PWM_Move_Steps+0x550>)
 8002e2e:	f7fe ffb9 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f043 0208 	orr.w	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002e56:	78bb      	ldrb	r3, [r7, #2]
 8002e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	; (8003058 <PWM_Move_Steps+0x554>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095a      	lsrs	r2, r3, #5
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f043 0203 	orr.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
			break;
 8002e76:	e277      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e78:	4b78      	ldr	r3, [pc, #480]	; (800305c <PWM_Move_Steps+0x558>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002e7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e82:	4619      	mov	r1, r3
 8002e84:	4873      	ldr	r0, [pc, #460]	; (8003054 <PWM_Move_Steps+0x550>)
 8002e86:	f7fe ff8d 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002eae:	78bb      	ldrb	r3, [r7, #2]
 8002eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	4a68      	ldr	r2, [pc, #416]	; (8003058 <PWM_Move_Steps+0x554>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095a      	lsrs	r2, r3, #5
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f043 0205 	orr.w	r2, r3, #5
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]
			break;
 8002ece:	e24b      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <PWM_Move_Steps+0x55c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eda:	4619      	mov	r1, r3
 8002edc:	485d      	ldr	r0, [pc, #372]	; (8003054 <PWM_Move_Steps+0x550>)
 8002ede:	f7fe ff61 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002f06:	78bb      	ldrb	r3, [r7, #2]
 8002f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a52      	ldr	r2, [pc, #328]	; (8003058 <PWM_Move_Steps+0x554>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	095a      	lsrs	r2, r3, #5
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f043 0209 	orr.w	r2, r3, #9
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60da      	str	r2, [r3, #12]
			break;
 8002f26:	e21f      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002f28:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <PWM_Move_Steps+0x560>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f32:	4619      	mov	r1, r3
 8002f34:	4847      	ldr	r0, [pc, #284]	; (8003054 <PWM_Move_Steps+0x550>)
 8002f36:	f7fe ff35 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002f5e:	78bb      	ldrb	r3, [r7, #2]
 8002f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <PWM_Move_Steps+0x554>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	095a      	lsrs	r2, r3, #5
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f043 0211 	orr.w	r2, r3, #17
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60da      	str	r2, [r3, #12]
			break;
 8002f7e:	e1f3      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <PWM_Move_Steps+0x564>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f040 80f7 	bne.w	8003178 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <PWM_Move_Steps+0x544>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <PWM_Move_Steps+0x544>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <PWM_Move_Steps+0x544>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <PWM_Move_Steps+0x544>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <PWM_Move_Steps+0x544>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4a28      	ldr	r2, [pc, #160]	; (8003048 <PWM_Move_Steps+0x544>)
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <PWM_Move_Steps+0x544>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4a25      	ldr	r2, [pc, #148]	; (8003048 <PWM_Move_Steps+0x544>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <PWM_Move_Steps+0x548>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <PWM_Move_Steps+0x548>)
 8002fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fc4:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	f200 81c7 	bhi.w	8003368 <PWM_Move_Steps+0x864>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <PWM_Move_Steps+0x4dc>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08003071 	.word	0x08003071
 8002fe8:	080030c9 	.word	0x080030c9
 8002fec:	08003121 	.word	0x08003121
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <PWM_Move_Steps+0x568>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4815      	ldr	r0, [pc, #84]	; (8003054 <PWM_Move_Steps+0x550>)
 8002ffe:	f7fe fed1 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f043 0208 	orr.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8003026:	78bb      	ldrb	r3, [r7, #2]
 8003028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <PWM_Move_Steps+0x554>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	095a      	lsrs	r2, r3, #5
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f043 0203 	orr.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
			break;
 8003046:	e18f      	b.n	8003368 <PWM_Move_Steps+0x864>
 8003048:	40021000 	.word	0x40021000
 800304c:	e000e100 	.word	0xe000e100
 8003050:	0800409c 	.word	0x0800409c
 8003054:	40010800 	.word	0x40010800
 8003058:	51eb851f 	.word	0x51eb851f
 800305c:	080040a0 	.word	0x080040a0
 8003060:	080040a4 	.word	0x080040a4
 8003064:	080040a8 	.word	0x080040a8
 8003068:	40000400 	.word	0x40000400
 800306c:	080040ac 	.word	0x080040ac
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003070:	4b9c      	ldr	r3, [pc, #624]	; (80032e4 <PWM_Move_Steps+0x7e0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8003076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307a:	4619      	mov	r1, r3
 800307c:	489a      	ldr	r0, [pc, #616]	; (80032e8 <PWM_Move_Steps+0x7e4>)
 800307e:	f7fe fe91 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a8f      	ldr	r2, [pc, #572]	; (80032ec <PWM_Move_Steps+0x7e8>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095a      	lsrs	r2, r3, #5
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f043 0205 	orr.w	r2, r3, #5
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
			break;
 80030c6:	e14f      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80030c8:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <PWM_Move_Steps+0x7ec>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80030ce:	f107 0320 	add.w	r3, r7, #32
 80030d2:	4619      	mov	r1, r3
 80030d4:	4887      	ldr	r0, [pc, #540]	; (80032f4 <PWM_Move_Steps+0x7f0>)
 80030d6:	f7fe fe65 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f043 0208 	orr.w	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80030fe:	78bb      	ldrb	r3, [r7, #2]
 8003100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	4a79      	ldr	r2, [pc, #484]	; (80032ec <PWM_Move_Steps+0x7e8>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	095a      	lsrs	r2, r3, #5
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60da      	str	r2, [r3, #12]
			break;
 800311e:	e123      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <PWM_Move_Steps+0x7f4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	4619      	mov	r1, r3
 800312c:	4871      	ldr	r0, [pc, #452]	; (80032f4 <PWM_Move_Steps+0x7f0>)
 800312e:	f7fe fe39 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8003156:	78bb      	ldrb	r3, [r7, #2]
 8003158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a63      	ldr	r2, [pc, #396]	; (80032ec <PWM_Move_Steps+0x7e8>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	095a      	lsrs	r2, r3, #5
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60da      	str	r2, [r3, #12]
			break;
 8003176:	e0f7      	b.n	8003368 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a60      	ldr	r2, [pc, #384]	; (80032fc <PWM_Move_Steps+0x7f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f040 80f3 	bne.w	8003368 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <PWM_Move_Steps+0x7fc>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <PWM_Move_Steps+0x7fc>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 800318e:	4b5c      	ldr	r3, [pc, #368]	; (8003300 <PWM_Move_Steps+0x7fc>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4a5b      	ldr	r2, [pc, #364]	; (8003300 <PWM_Move_Steps+0x7fc>)
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800319a:	4b59      	ldr	r3, [pc, #356]	; (8003300 <PWM_Move_Steps+0x7fc>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	4a58      	ldr	r2, [pc, #352]	; (8003300 <PWM_Move_Steps+0x7fc>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <PWM_Move_Steps+0x800>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a56      	ldr	r2, [pc, #344]	; (8003304 <PWM_Move_Steps+0x800>)
 80031ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031b0:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0201 	bic.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	f200 80d1 	bhi.w	8003368 <PWM_Move_Steps+0x864>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <PWM_Move_Steps+0x6c8>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	08003235 	.word	0x08003235
 80031d4:	0800328d 	.word	0x0800328d
 80031d8:	08003311 	.word	0x08003311
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <PWM_Move_Steps+0x804>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80031e2:	f107 0318 	add.w	r3, r7, #24
 80031e6:	4619      	mov	r1, r3
 80031e8:	4842      	ldr	r0, [pc, #264]	; (80032f4 <PWM_Move_Steps+0x7f0>)
 80031ea:	f7fe fddb 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f043 0208 	orr.w	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8003212:	78bb      	ldrb	r3, [r7, #2]
 8003214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <PWM_Move_Steps+0x7e8>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095a      	lsrs	r2, r3, #5
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f043 0203 	orr.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]
			break;
 8003232:	e099      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <PWM_Move_Steps+0x7e0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	4619      	mov	r1, r3
 8003240:	482c      	ldr	r0, [pc, #176]	; (80032f4 <PWM_Move_Steps+0x7f0>)
 8003242:	f7fe fdaf 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800326a:	78bb      	ldrb	r3, [r7, #2]
 800326c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <PWM_Move_Steps+0x7e8>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095a      	lsrs	r2, r3, #5
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b001 << 0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
			break;
 800328a:	e06d      	b.n	8003368 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800328c:	4b1f      	ldr	r3, [pc, #124]	; (800330c <PWM_Move_Steps+0x808>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	4619      	mov	r1, r3
 8003298:	4816      	ldr	r0, [pc, #88]	; (80032f4 <PWM_Move_Steps+0x7f0>)
 800329a:	f7fe fd83 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <PWM_Move_Steps+0x7e8>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095a      	lsrs	r2, r3, #5
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60da      	str	r2, [r3, #12]
			break;
 80032e2:	e041      	b.n	8003368 <PWM_Move_Steps+0x864>
 80032e4:	080040b0 	.word	0x080040b0
 80032e8:	40010800 	.word	0x40010800
 80032ec:	51eb851f 	.word	0x51eb851f
 80032f0:	0800409c 	.word	0x0800409c
 80032f4:	40010c00 	.word	0x40010c00
 80032f8:	080040a0 	.word	0x080040a0
 80032fc:	40000800 	.word	0x40000800
 8003300:	40021000 	.word	0x40021000
 8003304:	e000e100 	.word	0xe000e100
 8003308:	080040ac 	.word	0x080040ac
 800330c:	0800408c 	.word	0x0800408c
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <PWM_Move_Steps+0x8ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4619      	mov	r1, r3
 800331c:	4825      	ldr	r0, [pc, #148]	; (80033b4 <PWM_Move_Steps+0x8b0>)
 800331e:	f7fe fd41 	bl	8001da4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8003346:	78bb      	ldrb	r3, [r7, #2]
 8003348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <PWM_Move_Steps+0x8b4>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	095a      	lsrs	r2, r3, #5
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]
			break;
 8003366:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 800337a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28


	TIMERx->DIER |=(0b1<<0);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]





}
 80033a6:	bf00      	nop
 80033a8:	3758      	adds	r7, #88	; 0x58
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08004090 	.word	0x08004090
 80033b4:	40010c00 	.word	0x40010c00
 80033b8:	51eb851f 	.word	0x51eb851f

080033bc <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <TIM2_IRQHandler+0x68>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d128      	bne.n	800341a <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 80033c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80033d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e2:	f023 0302 	bic.w	r3, r3, #2
 80033e6:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <TIM2_IRQHandler+0x6c>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <TIM2_IRQHandler+0x6c>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <TIM2_IRQHandler+0x6c>)
 80033fa:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 80033fc:	e00d      	b.n	800341a <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <TIM2_IRQHandler+0x68>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8003404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <TIM2_IRQHandler+0x70>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	200000f5 	.word	0x200000f5
 8003428:	200000f6 	.word	0x200000f6
 800342c:	200000f4 	.word	0x200000f4

08003430 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <TIM3_IRQHandler+0x5c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d122      	bne.n	8003482 <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <TIM3_IRQHandler+0x60>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <TIM3_IRQHandler+0x60>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <TIM3_IRQHandler+0x60>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4a10      	ldr	r2, [pc, #64]	; (8003490 <TIM3_IRQHandler+0x60>)
 800344e:	f023 0302 	bic.w	r3, r3, #2
 8003452:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <TIM3_IRQHandler+0x64>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <TIM3_IRQHandler+0x64>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <TIM3_IRQHandler+0x64>)
 8003466:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003468:	e00b      	b.n	8003482 <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <TIM3_IRQHandler+0x5c>)
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <TIM3_IRQHandler+0x60>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a06      	ldr	r2, [pc, #24]	; (8003490 <TIM3_IRQHandler+0x60>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <TIM3_IRQHandler+0x68>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	200000f5 	.word	0x200000f5
 8003490:	40000400 	.word	0x40000400
 8003494:	200000f6 	.word	0x200000f6
 8003498:	200000f4 	.word	0x200000f4

0800349c <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <TIM4_IRQHandler+0x5c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d122      	bne.n	80034ee <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034ba:	f023 0302 	bic.w	r3, r3, #2
 80034be:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <TIM4_IRQHandler+0x64>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <TIM4_IRQHandler+0x64>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <TIM4_IRQHandler+0x64>)
 80034d2:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 80034d4:	e00b      	b.n	80034ee <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <TIM4_IRQHandler+0x5c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a06      	ldr	r2, [pc, #24]	; (80034fc <TIM4_IRQHandler+0x60>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <TIM4_IRQHandler+0x68>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	200000f5 	.word	0x200000f5
 80034fc:	40000800 	.word	0x40000800
 8003500:	200000f6 	.word	0x200000f6
 8003504:	200000f4 	.word	0x200000f4

08003508 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <which_UART+0x38>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <which_UART+0x14>
		return 0;
 8003518:	2300      	movs	r3, #0
 800351a:	e00c      	b.n	8003536 <which_UART+0x2e>
	else if(USARTx == USART2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <which_UART+0x3c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <which_UART+0x20>
		return 1;
 8003524:	2301      	movs	r3, #1
 8003526:	e006      	b.n	8003536 <which_UART+0x2e>
	else if(USARTx == USART3)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a07      	ldr	r2, [pc, #28]	; (8003548 <which_UART+0x40>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <which_UART+0x2c>
		return 2;
 8003530:	2302      	movs	r3, #2
 8003532:	e000      	b.n	8003536 <which_UART+0x2e>
	return 3;
 8003534:	2303      	movs	r3, #3
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40013800 	.word	0x40013800
 8003544:	40004400 	.word	0x40004400
 8003548:	40004800 	.word	0x40004800

0800354c <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 800354c:	b4b0      	push	{r4, r5, r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8003556:	4b5e      	ldr	r3, [pc, #376]	; (80036d0 <MCAL_UART_Init+0x184>)
 8003558:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <MCAL_UART_Init+0x188>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10e      	bne.n	8003580 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8003562:	4a5d      	ldr	r2, [pc, #372]	; (80036d8 <MCAL_UART_Init+0x18c>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4614      	mov	r4, r2
 8003568:	461d      	mov	r5, r3
 800356a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8003572:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <MCAL_UART_Init+0x190>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4a59      	ldr	r2, [pc, #356]	; (80036dc <MCAL_UART_Init+0x190>)
 8003578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800357c:	6193      	str	r3, [r2, #24]
 800357e:	e026      	b.n	80035ce <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <MCAL_UART_Init+0x194>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10f      	bne.n	80035a8 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <MCAL_UART_Init+0x18c>)
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	f103 0414 	add.w	r4, r3, #20
 8003590:	4615      	mov	r5, r2
 8003592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 800359a:	4b50      	ldr	r3, [pc, #320]	; (80036dc <MCAL_UART_Init+0x190>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <MCAL_UART_Init+0x190>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	61d3      	str	r3, [r2, #28]
 80035a6:	e012      	b.n	80035ce <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <MCAL_UART_Init+0x198>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10e      	bne.n	80035ce <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 80035b0:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <MCAL_UART_Init+0x18c>)
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80035b8:	4615      	mov	r5, r2
 80035ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 80035c2:	4b46      	ldr	r3, [pc, #280]	; (80036dc <MCAL_UART_Init+0x190>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4a45      	ldr	r2, [pc, #276]	; (80036dc <MCAL_UART_Init+0x190>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	7a12      	ldrb	r2, [r2, #8]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	7a52      	ldrb	r2, [r2, #9]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	7a92      	ldrb	r2, [r2, #10]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	7ad2      	ldrb	r2, [r2, #11]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	0119      	lsls	r1, r3, #4
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fbb2 f2f3 	udiv	r2, r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	fb00 f303 	mul.w	r3, r0, r3
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <MCAL_UART_Init+0x19c>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	430b      	orrs	r3, r1
 8003668:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	7b1b      	ldrb	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d026      	beq.n	80036c6 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	7b12      	ldrb	r2, [r2, #12]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <MCAL_UART_Init+0x188>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d106      	bne.n	800369c <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <MCAL_UART_Init+0x1a0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <MCAL_UART_Init+0x1a0>)
 8003694:	f043 0320 	orr.w	r3, r3, #32
 8003698:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 800369a:	e014      	b.n	80036c6 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <MCAL_UART_Init+0x194>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d106      	bne.n	80036b2 <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <MCAL_UART_Init+0x1a0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <MCAL_UART_Init+0x1a0>)
 80036aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	e009      	b.n	80036c6 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <MCAL_UART_Init+0x198>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d105      	bne.n	80036c6 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <MCAL_UART_Init+0x1a0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <MCAL_UART_Init+0x1a0>)
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	6013      	str	r3, [r2, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bcb0      	pop	{r4, r5, r7}
 80036ce:	4770      	bx	lr
 80036d0:	02255100 	.word	0x02255100
 80036d4:	40013800 	.word	0x40013800
 80036d8:	200000f8 	.word	0x200000f8
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40004400 	.word	0x40004400
 80036e4:	40004800 	.word	0x40004800
 80036e8:	51eb851f 	.word	0x51eb851f
 80036ec:	e000e104 	.word	0xe000e104

080036f0 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8003704:	bf00      	nop
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f9      	beq.n	8003706 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fef8 	bl	8003508 <which_UART>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
	}
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8003744:	bf00      	nop
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f9      	beq.n	8003746 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fed8 	bl	8003508 <which_UART>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 800375c:	7dfa      	ldrb	r2, [r7, #23]
 800375e:	490f      	ldr	r1, [pc, #60]	; (800379c <MCAL_UART_ReceiveData+0x6c>)
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3309      	adds	r3, #9
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b29b      	uxth	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b29a      	uxth	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8003780:	e007      	b.n	8003792 <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378c:	b29a      	uxth	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	801a      	strh	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200000f8 	.word	0x200000f8

080037a0 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <MCAL_UART_GPIO_SetPins+0xb8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d118      	bne.n	80037e2 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80037b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80037b6:	2306      	movs	r3, #6
 80037b8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80037be:	f107 030c 	add.w	r3, r7, #12
 80037c2:	4619      	mov	r1, r3
 80037c4:	4825      	ldr	r0, [pc, #148]	; (800385c <MCAL_UART_GPIO_SetPins+0xbc>)
 80037c6:	f7fe faed 	bl	8001da4 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80037ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80037d0:	2308      	movs	r3, #8
 80037d2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4619      	mov	r1, r3
 80037da:	4820      	ldr	r0, [pc, #128]	; (800385c <MCAL_UART_GPIO_SetPins+0xbc>)
 80037dc:	f7fe fae2 	bl	8001da4 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 80037e0:	e036      	b.n	8003850 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <MCAL_UART_GPIO_SetPins+0xc0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d116      	bne.n	8003818 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80037ea:	2304      	movs	r3, #4
 80037ec:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80037ee:	2306      	movs	r3, #6
 80037f0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	4619      	mov	r1, r3
 80037fc:	4817      	ldr	r0, [pc, #92]	; (800385c <MCAL_UART_GPIO_SetPins+0xbc>)
 80037fe:	f7fe fad1 	bl	8001da4 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8003802:	2308      	movs	r3, #8
 8003804:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003806:	2308      	movs	r3, #8
 8003808:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800380a:	f107 030c 	add.w	r3, r7, #12
 800380e:	4619      	mov	r1, r3
 8003810:	4812      	ldr	r0, [pc, #72]	; (800385c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003812:	f7fe fac7 	bl	8001da4 <MCAL_GPIO_Init>
}
 8003816:	e01b      	b.n	8003850 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MCAL_UART_GPIO_SetPins+0xc4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d117      	bne.n	8003850 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003824:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8003826:	2306      	movs	r3, #6
 8003828:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4619      	mov	r1, r3
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003836:	f7fe fab5 	bl	8001da4 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800383a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800383e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003840:	2308      	movs	r3, #8
 8003842:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	4619      	mov	r1, r3
 800384a:	4807      	ldr	r0, [pc, #28]	; (8003868 <MCAL_UART_GPIO_SetPins+0xc8>)
 800384c:	f7fe faaa 	bl	8001da4 <MCAL_GPIO_Init>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013800 	.word	0x40013800
 800385c:	40010800 	.word	0x40010800
 8003860:	40004400 	.word	0x40004400
 8003864:	40004800 	.word	0x40004800
 8003868:	40010c00 	.word	0x40010c00

0800386c <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <USART1_IRQHandler+0x10>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4798      	blx	r3
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200000f8 	.word	0x200000f8

08003880 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8003884:	4b02      	ldr	r3, [pc, #8]	; (8003890 <USART2_IRQHandler+0x10>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	4798      	blx	r3
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200000f8 	.word	0x200000f8

08003894 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <USART3_IRQHandler+0x10>)
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	4798      	blx	r3
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200000f8 	.word	0x200000f8

080038a8 <UART_Test_Callback>:
float error_previous = 0;
int correction_steps = 0;

// Test succedded ----------------------------------------------------
void UART_Test_Callback(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80038ac:	2201      	movs	r2, #1
 80038ae:	490c      	ldr	r1, [pc, #48]	; (80038e0 <UART_Test_Callback+0x38>)
 80038b0:	480c      	ldr	r0, [pc, #48]	; (80038e4 <UART_Test_Callback+0x3c>)
 80038b2:	f7ff ff3d 	bl	8003730 <MCAL_UART_ReceiveData>
	if(RecievedFromServer == PARKING_REQUEST || RecievedFromServer == RETRIEVAL_REQUEST)
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <UART_Test_Callback+0x38>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b42      	cmp	r3, #66	; 0x42
 80038be:	d004      	beq.n	80038ca <UART_Test_Callback+0x22>
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <UART_Test_Callback+0x38>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b45      	cmp	r3, #69	; 0x45
 80038c8:	d102      	bne.n	80038d0 <UART_Test_Callback+0x28>
		newMessageArrived = 1;
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <UART_Test_Callback+0x40>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]

	MCAL_UART_SendData(USART2, &Buffer, Enable);
 80038d0:	2201      	movs	r2, #1
 80038d2:	4906      	ldr	r1, [pc, #24]	; (80038ec <UART_Test_Callback+0x44>)
 80038d4:	4803      	ldr	r0, [pc, #12]	; (80038e4 <UART_Test_Callback+0x3c>)
 80038d6:	f7ff ff0b 	bl	80036f0 <MCAL_UART_SendData>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000134 	.word	0x20000134
 80038e4:	40004400 	.word	0x40004400
 80038e8:	20000138 	.word	0x20000138
 80038ec:	20000034 	.word	0x20000034

080038f0 <main>:





int main(void) {
 80038f0:	b5b0      	push	{r4, r5, r7, lr}
 80038f2:	b096      	sub	sp, #88	; 0x58
 80038f4:	af00      	add	r7, sp, #0

	RCC_GPIOB_CLK_EN();
 80038f6:	4ba4      	ldr	r3, [pc, #656]	; (8003b88 <main+0x298>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4aa3      	ldr	r2, [pc, #652]	; (8003b88 <main+0x298>)
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8003902:	4ba1      	ldr	r3, [pc, #644]	; (8003b88 <main+0x298>)
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	4aa0      	ldr	r2, [pc, #640]	; (8003b88 <main+0x298>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 800390e:	4b9e      	ldr	r3, [pc, #632]	; (8003b88 <main+0x298>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	4a9d      	ldr	r2, [pc, #628]	; (8003b88 <main+0x298>)
 8003914:	f043 0310 	orr.w	r3, r3, #16
 8003918:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800391a:	4b9b      	ldr	r3, [pc, #620]	; (8003b88 <main+0x298>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4a9a      	ldr	r2, [pc, #616]	; (8003b88 <main+0x298>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6193      	str	r3, [r2, #24]
	RCC_TIMER1_CLK_EN();
 8003926:	4b98      	ldr	r3, [pc, #608]	; (8003b88 <main+0x298>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	4a97      	ldr	r2, [pc, #604]	; (8003b88 <main+0x298>)
 800392c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003930:	6193      	str	r3, [r2, #24]
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 8003932:	2148      	movs	r1, #72	; 0x48
 8003934:	2001      	movs	r0, #1
 8003936:	f7fe fbdd 	bl	80020f4 <MCAL_RCC_CLK_Init>

	RCC_USART2_CLK_EN();
 800393a:	4b93      	ldr	r3, [pc, #588]	; (8003b88 <main+0x298>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4a92      	ldr	r2, [pc, #584]	; (8003b88 <main+0x298>)
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	61d3      	str	r3, [r2, #28]
	TIMER1_Init(RCC_CLK_36M);
 8003946:	2024      	movs	r0, #36	; 0x24
 8003948:	f7fe fcb8 	bl	80022bc <TIMER1_Init>
	Motor_Config_t DC_Motor1 =
 800394c:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <main+0x29c>)
 800394e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003952:	461d      	mov	r5, r3
 8003954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3,
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 800395c:	4b8c      	ldr	r3, [pc, #560]	; (8003b90 <main+0x2a0>)
 800395e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003962:	461d      	mov	r5, r3
 8003964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3,
			.PWM_Channel = TIMER_CH4
	};


	GPIO_PinConfig_t StepperDirPin = {
 800396c:	4b89      	ldr	r3, [pc, #548]	; (8003b94 <main+0x2a4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
			.GPIO_PinNumber = GPIO_PIN_8,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t LedPin = {
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <main+0x2a8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(GPIOC, &LedPin);
 8003978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397c:	4619      	mov	r1, r3
 800397e:	4887      	ldr	r0, [pc, #540]	; (8003b9c <main+0x2ac>)
 8003980:	f7fe fa10 	bl	8001da4 <MCAL_GPIO_Init>


	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_115200;
 8003984:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003988:	61bb      	str	r3, [r7, #24]
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 800398a:	2300      	movs	r3, #0
 800398c:	77fb      	strb	r3, [r7, #31]
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 800398e:	2320      	movs	r3, #32
 8003990:	f887 3020 	strb.w	r3, [r7, #32]
	UART_Cfg.P_IRQ_CallBack = UART_Test_Callback;
 8003994:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <main+0x2b0>)
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
	UART_Cfg.Parity = UART_Parity_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	777b      	strb	r3, [r7, #29]
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 800399c:	2300      	movs	r3, #0
 800399e:	773b      	strb	r3, [r7, #28]
	UART_Cfg.StopBits = UART_StopBits_1;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77bb      	strb	r3, [r7, #30]
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 80039a4:	230c      	movs	r3, #12
 80039a6:	753b      	strb	r3, [r7, #20]
	MCAL_UART_Init(USART2, &UART_Cfg);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4619      	mov	r1, r3
 80039ae:	487d      	ldr	r0, [pc, #500]	; (8003ba4 <main+0x2b4>)
 80039b0:	f7ff fdcc 	bl	800354c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART2);
 80039b4:	487b      	ldr	r0, [pc, #492]	; (8003ba4 <main+0x2b4>)
 80039b6:	f7ff fef3 	bl	80037a0 <MCAL_UART_GPIO_SetPins>





	Motor_intialize(&DC_Motor1);
 80039ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fabe 	bl	8000f40 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 80039c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fab9 	bl	8000f40 <Motor_intialize>

	LCD_enuInit(&LCD_Configs);
 80039ce:	4876      	ldr	r0, [pc, #472]	; (8003ba8 <main+0x2b8>)
 80039d0:	f7fd fb4e 	bl	8001070 <LCD_enuInit>

	HC_SR04_Init(UltraSonic_Configs);
 80039d4:	4875      	ldr	r0, [pc, #468]	; (8003bac <main+0x2bc>)
 80039d6:	f7fd ff29 	bl	800182c <HC_SR04_Init>
	Stepper_Init(&StepperDirPin);
 80039da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd feca 	bl	8001778 <Stepper_Init>
////		Stepper_Move_Steps(TIMER4, TIMER_CH4, 8000, 50, 500, Stepper_UP);
//		Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_UP);  // B9 --> Step
//		Delay_Timer1_ms(500);


		if(newMessageArrived)
 80039e4:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <main+0x2c0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0fa      	beq.n	80039e4 <main+0xf4>
		{

			newMessageArrived = 0;
 80039ee:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <main+0x2c0>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]


			if (RecievedFromServer == PARKING_REQUEST || RecievedFromServer == RETRIEVAL_REQUEST)
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <main+0x2c4>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b42      	cmp	r3, #66	; 0x42
 80039fc:	d004      	beq.n	8003a08 <main+0x118>
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <main+0x2c4>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b45      	cmp	r3, #69	; 0x45
 8003a06:	d11f      	bne.n	8003a48 <main+0x158>
			{
				mySendChar = RECEIVED_OK;
 8003a08:	4b6b      	ldr	r3, [pc, #428]	; (8003bb8 <main+0x2c8>)
 8003a0a:	2243      	movs	r2, #67	; 0x43
 8003a0c:	801a      	strh	r2, [r3, #0]

				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4969      	ldr	r1, [pc, #420]	; (8003bb8 <main+0x2c8>)
 8003a12:	4864      	ldr	r0, [pc, #400]	; (8003ba4 <main+0x2b4>)
 8003a14:	f7ff fe6c 	bl	80036f0 <MCAL_UART_SendData>


				//				Ultra1Distance = 0;

				do{
					HC_SR04_ReadDistance(0, &Ultra1Distance);
 8003a18:	4968      	ldr	r1, [pc, #416]	; (8003bbc <main+0x2cc>)
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7fd ff8c 	bl	8001938 <HC_SR04_ReadDistance>
					Delay_Timer1_ms(80);
 8003a20:	2050      	movs	r0, #80	; 0x50
 8003a22:	f7fe fc8b 	bl	800233c <Delay_Timer1_ms>

				}while(Ultra1Distance > 20);
 8003a26:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <main+0x2cc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b14      	cmp	r3, #20
 8003a2c:	d8f4      	bhi.n	8003a18 <main+0x128>

				mySendChar = CAR_ARRIVED;
 8003a2e:	4b62      	ldr	r3, [pc, #392]	; (8003bb8 <main+0x2c8>)
 8003a30:	224f      	movs	r2, #79	; 0x4f
 8003a32:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003a34:	2201      	movs	r2, #1
 8003a36:	4960      	ldr	r1, [pc, #384]	; (8003bb8 <main+0x2c8>)
 8003a38:	485a      	ldr	r0, [pc, #360]	; (8003ba4 <main+0x2b4>)
 8003a3a:	f7ff fe59 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	495c      	ldr	r1, [pc, #368]	; (8003bb4 <main+0x2c4>)
 8003a42:	4858      	ldr	r0, [pc, #352]	; (8003ba4 <main+0x2b4>)
 8003a44:	f7ff fe74 	bl	8003730 <MCAL_UART_ReceiveData>

			}
			if(RecievedFromServer == ACK_CAR_ARRIVED)
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <main+0x2c4>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b52      	cmp	r3, #82	; 0x52
 8003a50:	d139      	bne.n	8003ac6 <main+0x1d6>
			{
				// Move to the Elevator, then send a "FIRST_REKEB"
				LCD_enuJumpCursorTo(1, 0);
 8003a52:	2100      	movs	r1, #0
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7fd fdbf 	bl	80015d8 <LCD_enuJumpCursorTo>
				LCD_enuSendString("GOING_ToElevator");
 8003a5a:	4859      	ldr	r0, [pc, #356]	; (8003bc0 <main+0x2d0>)
 8003a5c:	f7fd fd98 	bl	8001590 <LCD_enuSendString>
				Motor_Move_ForWard(&DC_Motor1, 100);
 8003a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a64:	2164      	movs	r1, #100	; 0x64
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fab8 	bl	8000fdc <Motor_Move_ForWard>
				Motor_Move_ForWard(&DC_Motor2, 100);
 8003a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a70:	2164      	movs	r1, #100	; 0x64
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fab2 	bl	8000fdc <Motor_Move_ForWard>

				Delay_Timer1_ms(2000);
 8003a78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a7c:	f7fe fc5e 	bl	800233c <Delay_Timer1_ms>

				Motor_TurnOff(&DC_Motor1);
 8003a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fa81 	bl	8000f8c <Motor_TurnOff>
				Motor_TurnOff(&DC_Motor2);
 8003a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd fa7c 	bl	8000f8c <Motor_TurnOff>

				Delay_Timer1_ms(3000);
 8003a94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a98:	f7fe fc50 	bl	800233c <Delay_Timer1_ms>
				LCD_enuJumpCursorTo(1, 0);
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7fd fd9a 	bl	80015d8 <LCD_enuJumpCursorTo>
				LCD_enuSendString("AT Elevator");
 8003aa4:	4847      	ldr	r0, [pc, #284]	; (8003bc4 <main+0x2d4>)
 8003aa6:	f7fd fd73 	bl	8001590 <LCD_enuSendString>
				mySendChar = FIRST_REKEB;
 8003aaa:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <main+0x2c8>)
 8003aac:	2246      	movs	r2, #70	; 0x46
 8003aae:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4941      	ldr	r1, [pc, #260]	; (8003bb8 <main+0x2c8>)
 8003ab4:	483b      	ldr	r0, [pc, #236]	; (8003ba4 <main+0x2b4>)
 8003ab6:	f7ff fe1b 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003aba:	2201      	movs	r2, #1
 8003abc:	493d      	ldr	r1, [pc, #244]	; (8003bb4 <main+0x2c4>)
 8003abe:	4839      	ldr	r0, [pc, #228]	; (8003ba4 <main+0x2b4>)
 8003ac0:	f7ff fe36 	bl	8003730 <MCAL_UART_ReceiveData>
 8003ac4:	e024      	b.n	8003b10 <main+0x220>
			}else{
				mySendChar = RECEIVED_OK;
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <main+0x2c8>)
 8003ac8:	2243      	movs	r2, #67	; 0x43
 8003aca:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003acc:	2201      	movs	r2, #1
 8003ace:	493a      	ldr	r1, [pc, #232]	; (8003bb8 <main+0x2c8>)
 8003ad0:	4834      	ldr	r0, [pc, #208]	; (8003ba4 <main+0x2b4>)
 8003ad2:	f7ff fe0d 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4936      	ldr	r1, [pc, #216]	; (8003bb4 <main+0x2c4>)
 8003ada:	4832      	ldr	r0, [pc, #200]	; (8003ba4 <main+0x2b4>)
 8003adc:	f7ff fe28 	bl	8003730 <MCAL_UART_ReceiveData>

				do{
					HC_SR04_ReadDistance(0, &Ultra1Distance);
 8003ae0:	4936      	ldr	r1, [pc, #216]	; (8003bbc <main+0x2cc>)
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fd ff28 	bl	8001938 <HC_SR04_ReadDistance>
					Delay_Timer1_ms(80);
 8003ae8:	2050      	movs	r0, #80	; 0x50
 8003aea:	f7fe fc27 	bl	800233c <Delay_Timer1_ms>

				}while(Ultra1Distance > 20);
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <main+0x2cc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b14      	cmp	r3, #20
 8003af4:	d8f4      	bhi.n	8003ae0 <main+0x1f0>

				mySendChar = CAR_ARRIVED;
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <main+0x2c8>)
 8003af8:	224f      	movs	r2, #79	; 0x4f
 8003afa:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003afc:	2201      	movs	r2, #1
 8003afe:	492e      	ldr	r1, [pc, #184]	; (8003bb8 <main+0x2c8>)
 8003b00:	4828      	ldr	r0, [pc, #160]	; (8003ba4 <main+0x2b4>)
 8003b02:	f7ff fdf5 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003b06:	2201      	movs	r2, #1
 8003b08:	492a      	ldr	r1, [pc, #168]	; (8003bb4 <main+0x2c4>)
 8003b0a:	4826      	ldr	r0, [pc, #152]	; (8003ba4 <main+0x2b4>)
 8003b0c:	f7ff fe10 	bl	8003730 <MCAL_UART_ReceiveData>

			}


			if (RecievedFromServer == START_PARKING)
 8003b10:	4b28      	ldr	r3, [pc, #160]	; (8003bb4 <main+0x2c4>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b55      	cmp	r3, #85	; 0x55
 8003b18:	d10d      	bne.n	8003b36 <main+0x246>
			{
				// Meaning that the 2d received a "FIRST_REKEB", and start Moving Procedures

				// Waiting for "ARRIVED_INFRONTOF_SLOT"

				mySendChar = ACK_STARTING;
 8003b1a:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <main+0x2c8>)
 8003b1c:	2250      	movs	r2, #80	; 0x50
 8003b1e:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003b20:	2201      	movs	r2, #1
 8003b22:	4925      	ldr	r1, [pc, #148]	; (8003bb8 <main+0x2c8>)
 8003b24:	481f      	ldr	r0, [pc, #124]	; (8003ba4 <main+0x2b4>)
 8003b26:	f7ff fde3 	bl	80036f0 <MCAL_UART_SendData>

				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4921      	ldr	r1, [pc, #132]	; (8003bb4 <main+0x2c4>)
 8003b2e:	481d      	ldr	r0, [pc, #116]	; (8003ba4 <main+0x2b4>)
 8003b30:	f7ff fdfe 	bl	8003730 <MCAL_UART_ReceiveData>
 8003b34:	e00c      	b.n	8003b50 <main+0x260>

				// Potentially not working

			}else{
				// Meaning that the 2nd didn't receive a "FIRST_REKEB"
				mySendChar = FIRST_REKEB;
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <main+0x2c8>)
 8003b38:	2246      	movs	r2, #70	; 0x46
 8003b3a:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	491e      	ldr	r1, [pc, #120]	; (8003bb8 <main+0x2c8>)
 8003b40:	4818      	ldr	r0, [pc, #96]	; (8003ba4 <main+0x2b4>)
 8003b42:	f7ff fdd5 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003b46:	2201      	movs	r2, #1
 8003b48:	491a      	ldr	r1, [pc, #104]	; (8003bb4 <main+0x2c4>)
 8003b4a:	4816      	ldr	r0, [pc, #88]	; (8003ba4 <main+0x2b4>)
 8003b4c:	f7ff fdf0 	bl	8003730 <MCAL_UART_ReceiveData>
			}

			if(RecievedFromServer == ARRIVED_INFRONTOF_SLOT)
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <main+0x2c4>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b48      	cmp	r3, #72	; 0x48
 8003b58:	d136      	bne.n	8003bc8 <main+0x2d8>
			{
				// Proceed with Parking procedures

				Proceed_Parking(&DC_Motor1, &DC_Motor2);
 8003b5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f8a9 	bl	8003cbc <Proceed_Parking>
				mySendChar = DONE_PARKING;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <main+0x2c8>)
 8003b6c:	224a      	movs	r2, #74	; 0x4a
 8003b6e:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003b70:	2201      	movs	r2, #1
 8003b72:	4911      	ldr	r1, [pc, #68]	; (8003bb8 <main+0x2c8>)
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <main+0x2b4>)
 8003b76:	f7ff fdbb 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <main+0x2c4>)
 8003b7e:	4809      	ldr	r0, [pc, #36]	; (8003ba4 <main+0x2b4>)
 8003b80:	f7ff fdd6 	bl	8003730 <MCAL_UART_ReceiveData>
 8003b84:	e02d      	b.n	8003be2 <main+0x2f2>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	080040dc 	.word	0x080040dc
 8003b90:	080040f0 	.word	0x080040f0
 8003b94:	08004104 	.word	0x08004104
 8003b98:	08004108 	.word	0x08004108
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	080038a9 	.word	0x080038a9
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	2000001c 	.word	0x2000001c
 8003bb0:	20000138 	.word	0x20000138
 8003bb4:	20000134 	.word	0x20000134
 8003bb8:	20000136 	.word	0x20000136
 8003bbc:	20000044 	.word	0x20000044
 8003bc0:	080040b4 	.word	0x080040b4
 8003bc4:	080040c8 	.word	0x080040c8


			}else{
				mySendChar = ACK_STARTING;
 8003bc8:	4b38      	ldr	r3, [pc, #224]	; (8003cac <main+0x3bc>)
 8003bca:	2250      	movs	r2, #80	; 0x50
 8003bcc:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4936      	ldr	r1, [pc, #216]	; (8003cac <main+0x3bc>)
 8003bd2:	4837      	ldr	r0, [pc, #220]	; (8003cb0 <main+0x3c0>)
 8003bd4:	f7ff fd8c 	bl	80036f0 <MCAL_UART_SendData>

				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <main+0x3c4>)
 8003bdc:	4834      	ldr	r0, [pc, #208]	; (8003cb0 <main+0x3c0>)
 8003bde:	f7ff fda7 	bl	8003730 <MCAL_UART_ReceiveData>
			}

			if(RecievedFromServer == ARRIVED_AT_ENTRY)
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <main+0x3c4>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b49      	cmp	r3, #73	; 0x49
 8003bea:	d119      	bne.n	8003c20 <main+0x330>
			{
				Delay_Timer1_ms(1000);
 8003bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf0:	f7fe fba4 	bl	800233c <Delay_Timer1_ms>
				Proceed_BackToHome(&DC_Motor1, &DC_Motor2);
 8003bf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003bf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f9ca 	bl	8003f98 <Proceed_BackToHome>
				mySendChar = FIRST_HOME;
 8003c04:	4b29      	ldr	r3, [pc, #164]	; (8003cac <main+0x3bc>)
 8003c06:	2247      	movs	r2, #71	; 0x47
 8003c08:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4927      	ldr	r1, [pc, #156]	; (8003cac <main+0x3bc>)
 8003c0e:	4828      	ldr	r0, [pc, #160]	; (8003cb0 <main+0x3c0>)
 8003c10:	f7ff fd6e 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003c14:	2201      	movs	r2, #1
 8003c16:	4927      	ldr	r1, [pc, #156]	; (8003cb4 <main+0x3c4>)
 8003c18:	4825      	ldr	r0, [pc, #148]	; (8003cb0 <main+0x3c0>)
 8003c1a:	f7ff fd89 	bl	8003730 <MCAL_UART_ReceiveData>
 8003c1e:	e00c      	b.n	8003c3a <main+0x34a>

			}else{
				mySendChar = DONE_PARKING;
 8003c20:	4b22      	ldr	r3, [pc, #136]	; (8003cac <main+0x3bc>)
 8003c22:	224a      	movs	r2, #74	; 0x4a
 8003c24:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003c26:	2201      	movs	r2, #1
 8003c28:	4920      	ldr	r1, [pc, #128]	; (8003cac <main+0x3bc>)
 8003c2a:	4821      	ldr	r0, [pc, #132]	; (8003cb0 <main+0x3c0>)
 8003c2c:	f7ff fd60 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003c30:	2201      	movs	r2, #1
 8003c32:	4920      	ldr	r1, [pc, #128]	; (8003cb4 <main+0x3c4>)
 8003c34:	481e      	ldr	r0, [pc, #120]	; (8003cb0 <main+0x3c0>)
 8003c36:	f7ff fd7b 	bl	8003730 <MCAL_UART_ReceiveData>

			}


			if(RecievedFromServer == FINISH_PARKING )
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <main+0x3c4>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b58      	cmp	r3, #88	; 0x58
 8003c42:	d10d      	bne.n	8003c60 <main+0x370>
			{
				mySendChar = IM_DONE;
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <main+0x3bc>)
 8003c46:	224b      	movs	r2, #75	; 0x4b
 8003c48:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4917      	ldr	r1, [pc, #92]	; (8003cac <main+0x3bc>)
 8003c4e:	4818      	ldr	r0, [pc, #96]	; (8003cb0 <main+0x3c0>)
 8003c50:	f7ff fd4e 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003c54:	2201      	movs	r2, #1
 8003c56:	4917      	ldr	r1, [pc, #92]	; (8003cb4 <main+0x3c4>)
 8003c58:	4815      	ldr	r0, [pc, #84]	; (8003cb0 <main+0x3c0>)
 8003c5a:	f7ff fd69 	bl	8003730 <MCAL_UART_ReceiveData>
 8003c5e:	e00c      	b.n	8003c7a <main+0x38a>

			}else{
				mySendChar = FIRST_HOME;
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <main+0x3bc>)
 8003c62:	2247      	movs	r2, #71	; 0x47
 8003c64:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003c66:	2201      	movs	r2, #1
 8003c68:	4910      	ldr	r1, [pc, #64]	; (8003cac <main+0x3bc>)
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <main+0x3c0>)
 8003c6c:	f7ff fd40 	bl	80036f0 <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8003c70:	2201      	movs	r2, #1
 8003c72:	4910      	ldr	r1, [pc, #64]	; (8003cb4 <main+0x3c4>)
 8003c74:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <main+0x3c0>)
 8003c76:	f7ff fd5b 	bl	8003730 <MCAL_UART_ReceiveData>
			}



			if(RecievedFromServer == ACK_DONE)
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <main+0x3c4>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b51      	cmp	r3, #81	; 0x51
 8003c82:	d10a      	bne.n	8003c9a <main+0x3aa>
			{
				LCD_enuJumpCursorTo(1, 0);
 8003c84:	2100      	movs	r1, #0
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fd fca6 	bl	80015d8 <LCD_enuJumpCursorTo>
				LCD_enuSendString("AT HOME");
 8003c8c:	480a      	ldr	r0, [pc, #40]	; (8003cb8 <main+0x3c8>)
 8003c8e:	f7fd fc7f 	bl	8001590 <LCD_enuSendString>
				RecievedFromServer = 0;
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <main+0x3c4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e6a4      	b.n	80039e4 <main+0xf4>

			}else{
				mySendChar = IM_DONE;
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <main+0x3bc>)
 8003c9c:	224b      	movs	r2, #75	; 0x4b
 8003c9e:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4902      	ldr	r1, [pc, #8]	; (8003cac <main+0x3bc>)
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <main+0x3c0>)
 8003ca6:	f7ff fd23 	bl	80036f0 <MCAL_UART_SendData>
		if(newMessageArrived)
 8003caa:	e69b      	b.n	80039e4 <main+0xf4>
 8003cac:	20000136 	.word	0x20000136
 8003cb0:	40004400 	.word	0x40004400
 8003cb4:	20000134 	.word	0x20000134
 8003cb8:	080040d4 	.word	0x080040d4

08003cbc <Proceed_Parking>:




void Proceed_Parking(Motor_Config_t *Motor1, Motor_Config_t *Motor2)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	LCD_enuJumpCursorTo(1, 0);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fd fc85 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuSendString("START");
 8003cce:	48a1      	ldr	r0, [pc, #644]	; (8003f54 <Proceed_Parking+0x298>)
 8003cd0:	f7fd fc5e 	bl	8001590 <LCD_enuSendString>

	//HC_SR04_ReadDistance(0,&Ultra1Distance);
	//HC_SR04_ReadDistance(1,&Ultra2Distance);

	LCD_enuJumpCursorTo(1, 0);
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fd fc7e 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuSendString("Reading ");
 8003cdc:	489e      	ldr	r0, [pc, #632]	; (8003f58 <Proceed_Parking+0x29c>)
 8003cde:	f7fd fc57 	bl	8001590 <LCD_enuSendString>

	LCD_enuJumpCursorTo(2, 0);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f7fd fc77 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuSendString("1st:    ");
 8003cea:	489c      	ldr	r0, [pc, #624]	; (8003f5c <Proceed_Parking+0x2a0>)
 8003cec:	f7fd fc50 	bl	8001590 <LCD_enuSendString>
	LCD_enuJumpCursorTo(2, 5);
 8003cf0:	2105      	movs	r1, #5
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f7fd fc70 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuDisplayIntNum(Ultra1Distance);
 8003cf8:	4b99      	ldr	r3, [pc, #612]	; (8003f60 <Proceed_Parking+0x2a4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fd fcb9 	bl	8001674 <LCD_enuDisplayIntNum>

	LCD_enuJumpCursorTo(2, 9);
 8003d02:	2109      	movs	r1, #9
 8003d04:	2002      	movs	r0, #2
 8003d06:	f7fd fc67 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuSendString("2nd:    ");
 8003d0a:	4896      	ldr	r0, [pc, #600]	; (8003f64 <Proceed_Parking+0x2a8>)
 8003d0c:	f7fd fc40 	bl	8001590 <LCD_enuSendString>
	LCD_enuJumpCursorTo(2, 13);
 8003d10:	210d      	movs	r1, #13
 8003d12:	2002      	movs	r0, #2
 8003d14:	f7fd fc60 	bl	80015d8 <LCD_enuJumpCursorTo>
	LCD_enuDisplayIntNum(Ultra2Distance);
 8003d18:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd fca9 	bl	8001674 <LCD_enuDisplayIntNum>

	Motor_Move_ForWard(Motor1, 100);
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fd f959 	bl	8000fdc <Motor_Move_ForWard>
	Motor_Move_ForWard(Motor2, 100);
 8003d2a:	2164      	movs	r1, #100	; 0x64
 8003d2c:	6838      	ldr	r0, [r7, #0]
 8003d2e:	f7fd f955 	bl	8000fdc <Motor_Move_ForWard>

	Delay_Timer1_ms(1000);
 8003d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d36:	f7fe fb01 	bl	800233c <Delay_Timer1_ms>

	Motor_TurnOff(Motor1);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd f926 	bl	8000f8c <Motor_TurnOff>
	Motor_TurnOff(Motor2);
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f7fd f923 	bl	8000f8c <Motor_TurnOff>

	Delay_Timer1_ms(500);
 8003d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d4a:	f7fe faf7 	bl	800233c <Delay_Timer1_ms>

	if(Ultra2Distance<=2){
 8003d4e:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d80c      	bhi.n	8003d70 <Proceed_Parking+0xb4>
		// 8000 =~ 2cm
		// Move stepper up
				Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_UP);  // B9 --> Step
 8003d56:	2301      	movs	r3, #1
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2332      	movs	r3, #50	; 0x32
 8003d62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d66:	2103      	movs	r1, #3
 8003d68:	4880      	ldr	r0, [pc, #512]	; (8003f6c <Proceed_Parking+0x2b0>)
 8003d6a:	f7fd fd29 	bl	80017c0 <Stepper_Move_Steps>
 8003d6e:	e0d7      	b.n	8003f20 <Proceed_Parking+0x264>

	}else if(Ultra2Distance>=4){ // 5
 8003d70:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d90c      	bls.n	8003d92 <Proceed_Parking+0xd6>
		// Move stepper down
				Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_Down);  // B9 --> Step
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2332      	movs	r3, #50	; 0x32
 8003d84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d88:	2103      	movs	r1, #3
 8003d8a:	4878      	ldr	r0, [pc, #480]	; (8003f6c <Proceed_Parking+0x2b0>)
 8003d8c:	f7fd fd18 	bl	80017c0 <Stepper_Move_Steps>
 8003d90:	e0c6      	b.n	8003f20 <Proceed_Parking+0x264>
//
	} // 3
	else{

		// Calculate error
		error = TARGET_DISTANCE_MAX - Ultra2Distance;
 8003d92:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1c3 0304 	rsb	r3, r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fe8c 	bl	8000ab8 <__aeabi_ui2f>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4a73      	ldr	r2, [pc, #460]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003da4:	6013      	str	r3, [r2, #0]

		do{
			// Proportional term
			float P = Kp * error;
 8003da6:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <Proceed_Parking+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a71      	ldr	r2, [pc, #452]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc fed9 	bl	8000b68 <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	617b      	str	r3, [r7, #20]

			// Integral term
			if (Ki != 0) {
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <Proceed_Parking+0x2bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f864 	bl	8000e90 <__aeabi_fcmpeq>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d125      	bne.n	8003e1a <Proceed_Parking+0x15e>
				integral += error;
 8003dce:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fdbd 	bl	8000958 <__addsf3>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003de4:	601a      	str	r2, [r3, #0]
				if (integral > 100)
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4965      	ldr	r1, [pc, #404]	; (8003f80 <Proceed_Parking+0x2c4>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f877 	bl	8000ee0 <__aeabi_fcmpgt>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <Proceed_Parking+0x144>
					integral = 100;
 8003df8:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003dfa:	4a61      	ldr	r2, [pc, #388]	; (8003f80 <Proceed_Parking+0x2c4>)
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e010      	b.n	8003e22 <Proceed_Parking+0x166>
				else if (integral < -100)
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	495f      	ldr	r1, [pc, #380]	; (8003f84 <Proceed_Parking+0x2c8>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd f84c 	bl	8000ea4 <__aeabi_fcmplt>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <Proceed_Parking+0x166>
					integral = -100;
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003e14:	4a5b      	ldr	r2, [pc, #364]	; (8003f84 <Proceed_Parking+0x2c8>)
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e003      	b.n	8003e22 <Proceed_Parking+0x166>
			} else {
				integral = 0;
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
			}
			float I = Ki * integral;
 8003e22:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <Proceed_Parking+0x2bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <Proceed_Parking+0x2c0>)
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fe9b 	bl	8000b68 <__aeabi_fmul>
 8003e32:	4603      	mov	r3, r0
 8003e34:	613b      	str	r3, [r7, #16]

			// Derivative term
			derivative = error - error_previous;
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a53      	ldr	r2, [pc, #332]	; (8003f88 <Proceed_Parking+0x2cc>)
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fd87 	bl	8000954 <__aeabi_fsub>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <Proceed_Parking+0x2d0>)
 8003e4c:	601a      	str	r2, [r3, #0]
			float D = Kd * derivative;
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <Proceed_Parking+0x2d4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4e      	ldr	r2, [pc, #312]	; (8003f8c <Proceed_Parking+0x2d0>)
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fe85 	bl	8000b68 <__aeabi_fmul>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	60fb      	str	r3, [r7, #12]

			// Calculate PID output
			correction_steps = P + I + D;
 8003e62:	6939      	ldr	r1, [r7, #16]
 8003e64:	6978      	ldr	r0, [r7, #20]
 8003e66:	f7fc fd77 	bl	8000958 <__addsf3>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	68f9      	ldr	r1, [r7, #12]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fd72 	bl	8000958 <__addsf3>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd f83c 	bl	8000ef4 <__aeabi_f2iz>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a45      	ldr	r2, [pc, #276]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003e80:	6013      	str	r3, [r2, #0]

			// Limit correction steps to avoid excessive adjustments
			if (correction_steps > 100) {
 8003e82:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	dd03      	ble.n	8003e92 <Proceed_Parking+0x1d6>
				correction_steps = 100;
 8003e8a:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003e8c:	2264      	movs	r2, #100	; 0x64
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e008      	b.n	8003ea4 <Proceed_Parking+0x1e8>
			} else if (correction_steps < -100) {
 8003e92:	4b40      	ldr	r3, [pc, #256]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003e9a:	da03      	bge.n	8003ea4 <Proceed_Parking+0x1e8>
				correction_steps = -100;
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003e9e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003ea2:	601a      	str	r2, [r3, #0]
			}
			Stepper_Move_Steps(TIMER2, TIMER_CH1,(uint16_t)(1500 + correction_steps), 50, 500, Stepper_UP);
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <Proceed_Parking+0x2d8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2332      	movs	r3, #50	; 0x32
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ec2:	f7fd fc7d 	bl	80017c0 <Stepper_Move_Steps>
			// Update previous error for next iteration
			error_previous = error;
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <Proceed_Parking+0x2cc>)
 8003ecc:	6013      	str	r3, [r2, #0]

			//					Delay_Timer1_ms(1000);

			// re-read the distance
			HC_SR04_ReadDistance(1,&Ultra2Distance);
 8003ece:	4926      	ldr	r1, [pc, #152]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7fd fd31 	bl	8001938 <HC_SR04_ReadDistance>
			LCD_enuJumpCursorTo(2, 9);
 8003ed6:	2109      	movs	r1, #9
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7fd fb7d 	bl	80015d8 <LCD_enuJumpCursorTo>
			LCD_enuSendString("2nd:    ");
 8003ede:	4821      	ldr	r0, [pc, #132]	; (8003f64 <Proceed_Parking+0x2a8>)
 8003ee0:	f7fd fb56 	bl	8001590 <LCD_enuSendString>
			LCD_enuJumpCursorTo(2, 13);
 8003ee4:	210d      	movs	r1, #13
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f7fd fb76 	bl	80015d8 <LCD_enuJumpCursorTo>
			LCD_enuDisplayIntNum(Ultra2Distance);
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fd fbbf 	bl	8001674 <LCD_enuDisplayIntNum>

			// re-Calculate error
			error = TARGET_DISTANCE_MAX - Ultra2Distance;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <Proceed_Parking+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1c3 0304 	rsb	r3, r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc fdda 	bl	8000ab8 <__aeabi_ui2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003f08:	6013      	str	r3, [r2, #0]

		}while(error);// control
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Proceed_Parking+0x2b4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc ffbc 	bl	8000e90 <__aeabi_fcmpeq>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f43f af43 	beq.w	8003da6 <Proceed_Parking+0xea>

	}

	Motor_Move_BackWard(Motor1, 100);
 8003f20:	2164      	movs	r1, #100	; 0x64
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd f87f 	bl	8001026 <Motor_Move_BackWard>
	Motor_Move_BackWard(Motor2, 100);
 8003f28:	2164      	movs	r1, #100	; 0x64
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f7fd f87b 	bl	8001026 <Motor_Move_BackWard>

	Delay_Timer1_ms(1000);
 8003f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f34:	f7fe fa02 	bl	800233c <Delay_Timer1_ms>

	Motor_TurnOff(Motor1);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fd f827 	bl	8000f8c <Motor_TurnOff>
	Motor_TurnOff(Motor2);
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f7fd f824 	bl	8000f8c <Motor_TurnOff>

	Delay_Timer1_ms(500);
 8003f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f48:	f7fe f9f8 	bl	800233c <Delay_Timer1_ms>


}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	0800410c 	.word	0x0800410c
 8003f58:	08004114 	.word	0x08004114
 8003f5c:	08004120 	.word	0x08004120
 8003f60:	20000044 	.word	0x20000044
 8003f64:	0800412c 	.word	0x0800412c
 8003f68:	2000013c 	.word	0x2000013c
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	20000148 	.word	0x20000148
 8003f74:	20000038 	.word	0x20000038
 8003f78:	2000003c 	.word	0x2000003c
 8003f7c:	20000140 	.word	0x20000140
 8003f80:	42c80000 	.word	0x42c80000
 8003f84:	c2c80000 	.word	0xc2c80000
 8003f88:	2000014c 	.word	0x2000014c
 8003f8c:	20000144 	.word	0x20000144
 8003f90:	20000040 	.word	0x20000040
 8003f94:	20000150 	.word	0x20000150

08003f98 <Proceed_BackToHome>:



void Proceed_BackToHome(Motor_Config_t *Motor1, Motor_Config_t *Motor2)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	Motor_Move_ForWard(Motor1, 100);
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd f819 	bl	8000fdc <Motor_Move_ForWard>
	Motor_Move_ForWard(Motor2, 100);
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	6838      	ldr	r0, [r7, #0]
 8003fae:	f7fd f815 	bl	8000fdc <Motor_Move_ForWard>

	Delay_Timer1_ms(1000);
 8003fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fb6:	f7fe f9c1 	bl	800233c <Delay_Timer1_ms>

	Motor_TurnOff(Motor1);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc ffe6 	bl	8000f8c <Motor_TurnOff>
	Motor_TurnOff(Motor2);
 8003fc0:	6838      	ldr	r0, [r7, #0]
 8003fc2:	f7fc ffe3 	bl	8000f8c <Motor_TurnOff>

	Delay_Timer1_ms(1000);
 8003fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fca:	f7fe f9b7 	bl	800233c <Delay_Timer1_ms>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fd8:	480d      	ldr	r0, [pc, #52]	; (8004010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <LoopForever+0xe>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <LoopForever+0x16>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004006:	f000 f811 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800400a:	f7ff fc71 	bl	80038f0 <main>

0800400e <LoopForever>:

LoopForever:
  b LoopForever
 800400e:	e7fe      	b.n	800400e <LoopForever>
  ldr   r0, =_estack
 8004010:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004018:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800401c:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 8004020:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8004024:	20000154 	.word	0x20000154

08004028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC1_2_IRQHandler>
	...

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	2600      	movs	r6, #0
 8004030:	4d0c      	ldr	r5, [pc, #48]	; (8004064 <__libc_init_array+0x38>)
 8004032:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	f000 f81a 	bl	8004074 <_init>
 8004040:	2600      	movs	r6, #0
 8004042:	4d0a      	ldr	r5, [pc, #40]	; (800406c <__libc_init_array+0x40>)
 8004044:	4c0a      	ldr	r4, [pc, #40]	; (8004070 <__libc_init_array+0x44>)
 8004046:	1b64      	subs	r4, r4, r5
 8004048:	10a4      	asrs	r4, r4, #2
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	08004138 	.word	0x08004138
 8004068:	08004138 	.word	0x08004138
 800406c:	08004138 	.word	0x08004138
 8004070:	0800413c 	.word	0x0800413c

08004074 <_init>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr

08004080 <_fini>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr
