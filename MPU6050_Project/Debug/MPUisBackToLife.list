
MPUisBackToLife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ac  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080049e0  080049e0  000149e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa0  08004aa0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa0  08004aa0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004aa8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08004b10  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004b10  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003902  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f09  00000000  00000000  000239d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000016a0  00000000  00000000  000248df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000368  00000000  00000000  00025f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002d0  00000000  00000000  000262e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001760  00000000  00000000  000265b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005455  00000000  00000000  00027d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000d4a4  00000000  00000000  0002d16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001684  00000000  00000000  0003a614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	080049c4 	.word	0x080049c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	080049c4 	.word	0x080049c4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_frsub>:
 8000b38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	e002      	b.n	8000b44 <__addsf3>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fsub>:
 8000b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b44 <__addsf3>:
 8000b44:	0042      	lsls	r2, r0, #1
 8000b46:	bf1f      	itttt	ne
 8000b48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b4c:	ea92 0f03 	teqne	r2, r3
 8000b50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b58:	d06a      	beq.n	8000c30 <__addsf3+0xec>
 8000b5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b62:	bfc1      	itttt	gt
 8000b64:	18d2      	addgt	r2, r2, r3
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	4048      	eorgt	r0, r1
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	bfb8      	it	lt
 8000b6e:	425b      	neglt	r3, r3
 8000b70:	2b19      	cmp	r3, #25
 8000b72:	bf88      	it	hi
 8000b74:	4770      	bxhi	lr
 8000b76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4249      	negne	r1, r1
 8000b96:	ea92 0f03 	teq	r2, r3
 8000b9a:	d03f      	beq.n	8000c1c <__addsf3+0xd8>
 8000b9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba4:	eb10 000c 	adds.w	r0, r0, ip
 8000ba8:	f1c3 0320 	rsb	r3, r3, #32
 8000bac:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__addsf3+0x78>
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc0:	d313      	bcc.n	8000bea <__addsf3+0xa6>
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d306      	bcc.n	8000bd6 <__addsf3+0x92>
 8000bc8:	0840      	lsrs	r0, r0, #1
 8000bca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bce:	f102 0201 	add.w	r2, r2, #1
 8000bd2:	2afe      	cmp	r2, #254	; 0xfe
 8000bd4:	d251      	bcs.n	8000c7a <__addsf3+0x136>
 8000bd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bde:	bf08      	it	eq
 8000be0:	f020 0001 	biceq.w	r0, r0, #1
 8000be4:	ea40 0003 	orr.w	r0, r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	0049      	lsls	r1, r1, #1
 8000bec:	eb40 0000 	adc.w	r0, r0, r0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf8:	d2ed      	bcs.n	8000bd6 <__addsf3+0x92>
 8000bfa:	fab0 fc80 	clz	ip, r0
 8000bfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c02:	ebb2 020c 	subs.w	r2, r2, ip
 8000c06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0a:	bfaa      	itet	ge
 8000c0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c10:	4252      	neglt	r2, r2
 8000c12:	4318      	orrge	r0, r3
 8000c14:	bfbc      	itt	lt
 8000c16:	40d0      	lsrlt	r0, r2
 8000c18:	4318      	orrlt	r0, r3
 8000c1a:	4770      	bx	lr
 8000c1c:	f092 0f00 	teq	r2, #0
 8000c20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c24:	bf06      	itte	eq
 8000c26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2a:	3201      	addeq	r2, #1
 8000c2c:	3b01      	subne	r3, #1
 8000c2e:	e7b5      	b.n	8000b9c <__addsf3+0x58>
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d021      	beq.n	8000c84 <__addsf3+0x140>
 8000c40:	ea92 0f03 	teq	r2, r3
 8000c44:	d004      	beq.n	8000c50 <__addsf3+0x10c>
 8000c46:	f092 0f00 	teq	r2, #0
 8000c4a:	bf08      	it	eq
 8000c4c:	4608      	moveq	r0, r1
 8000c4e:	4770      	bx	lr
 8000c50:	ea90 0f01 	teq	r0, r1
 8000c54:	bf1c      	itt	ne
 8000c56:	2000      	movne	r0, #0
 8000c58:	4770      	bxne	lr
 8000c5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5e:	d104      	bne.n	8000c6a <__addsf3+0x126>
 8000c60:	0040      	lsls	r0, r0, #1
 8000c62:	bf28      	it	cs
 8000c64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6e:	bf3c      	itt	cc
 8000c70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bxcc	lr
 8000c76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	4770      	bx	lr
 8000c84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c88:	bf16      	itet	ne
 8000c8a:	4608      	movne	r0, r1
 8000c8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c90:	4601      	movne	r1, r0
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	bf06      	itte	eq
 8000c96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9a:	ea90 0f01 	teqeq	r0, r1
 8000c9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_ui2f>:
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e004      	b.n	8000cb4 <__aeabi_i2f+0x8>
 8000caa:	bf00      	nop

08000cac <__aeabi_i2f>:
 8000cac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb0:	bf48      	it	mi
 8000cb2:	4240      	negmi	r0, r0
 8000cb4:	ea5f 0c00 	movs.w	ip, r0
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	e01c      	b.n	8000d02 <__aeabi_l2f+0x2a>

08000cc8 <__aeabi_ul2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e00a      	b.n	8000cec <__aeabi_l2f+0x14>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_l2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_l2f+0x14>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	ea5f 0c01 	movs.w	ip, r1
 8000cf0:	bf02      	ittt	eq
 8000cf2:	4684      	moveq	ip, r0
 8000cf4:	4601      	moveq	r1, r0
 8000cf6:	2000      	moveq	r0, #0
 8000cf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cfc:	bf08      	it	eq
 8000cfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d06:	fabc f28c 	clz	r2, ip
 8000d0a:	3a08      	subs	r2, #8
 8000d0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d10:	db10      	blt.n	8000d34 <__aeabi_l2f+0x5c>
 8000d12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d16:	4463      	add	r3, ip
 8000d18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d24:	fa20 f202 	lsr.w	r2, r0, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	f020 0001 	biceq.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	f102 0220 	add.w	r2, r2, #32
 8000d38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d44:	fa21 f202 	lsr.w	r2, r1, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_fmul>:
 8000d54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d62:	ea92 0f0c 	teqne	r2, ip
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d06f      	beq.n	8000e4c <__aeabi_fmul+0xf8>
 8000d6c:	441a      	add	r2, r3
 8000d6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d72:	0240      	lsls	r0, r0, #9
 8000d74:	bf18      	it	ne
 8000d76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7a:	d01e      	beq.n	8000dba <__aeabi_fmul+0x66>
 8000d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d88:	fba0 3101 	umull	r3, r1, r0, r1
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d94:	bf3e      	ittt	cc
 8000d96:	0049      	lslcc	r1, r1, #1
 8000d98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	ea40 0001 	orr.w	r0, r0, r1
 8000da2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da6:	2afd      	cmp	r2, #253	; 0xfd
 8000da8:	d81d      	bhi.n	8000de6 <__aeabi_fmul+0x92>
 8000daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db2:	bf08      	it	eq
 8000db4:	f020 0001 	biceq.w	r0, r0, #1
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	0249      	lsleq	r1, r1, #9
 8000dc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dce:	3a7f      	subs	r2, #127	; 0x7f
 8000dd0:	bfc2      	ittt	gt
 8000dd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dda:	4770      	bxgt	lr
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	3a01      	subs	r2, #1
 8000de6:	dc5d      	bgt.n	8000ea4 <__aeabi_fmul+0x150>
 8000de8:	f112 0f19 	cmn.w	r2, #25
 8000dec:	bfdc      	itt	le
 8000dee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	4770      	bxle	lr
 8000df4:	f1c2 0200 	rsb	r2, r2, #0
 8000df8:	0041      	lsls	r1, r0, #1
 8000dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfe:	f1c2 0220 	rsb	r2, r2, #32
 8000e02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0a:	f140 0000 	adc.w	r0, r0, #0
 8000e0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e12:	bf08      	it	eq
 8000e14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e18:	4770      	bx	lr
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xce>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xe6>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e78f      	b.n	8000d6c <__aeabi_fmul+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	bf18      	it	ne
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d00a      	beq.n	8000e72 <__aeabi_fmul+0x11e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1d8      	bne.n	8000e1a <__aeabi_fmul+0xc6>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	bf17      	itett	ne
 8000e78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	f091 0f00 	teqne	r1, #0
 8000e82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e86:	d014      	beq.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_fmul+0x13e>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d10f      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e92:	ea93 0f0c 	teq	r3, ip
 8000e96:	d103      	bne.n	8000ea0 <__aeabi_fmul+0x14c>
 8000e98:	024b      	lsls	r3, r1, #9
 8000e9a:	bf18      	it	ne
 8000e9c:	4608      	movne	r0, r1
 8000e9e:	d108      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ea0:	ea80 0001 	eor.w	r0, r0, r1
 8000ea4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	4770      	bx	lr
 8000eb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_fdiv>:
 8000ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec4:	bf1e      	ittt	ne
 8000ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eca:	ea92 0f0c 	teqne	r2, ip
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d069      	beq.n	8000fa8 <__aeabi_fdiv+0xec>
 8000ed4:	eba2 0203 	sub.w	r2, r2, r3
 8000ed8:	ea80 0c01 	eor.w	ip, r0, r1
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee2:	d037      	beq.n	8000f54 <__aeabi_fdiv+0x98>
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	bf38      	it	cc
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f02:	428b      	cmp	r3, r1
 8000f04:	bf24      	itt	cs
 8000f06:	1a5b      	subcs	r3, r3, r1
 8000f08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1e:	bf24      	itt	cs
 8000f20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f2c:	bf24      	itt	cs
 8000f2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	bf18      	it	ne
 8000f3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3e:	d1e0      	bne.n	8000f02 <__aeabi_fdiv+0x46>
 8000f40:	2afd      	cmp	r2, #253	; 0xfd
 8000f42:	f63f af50 	bhi.w	8000de6 <__aeabi_fmul+0x92>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f4c:	bf08      	it	eq
 8000f4e:	f020 0001 	biceq.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5c:	327f      	adds	r2, #127	; 0x7f
 8000f5e:	bfc2      	ittt	gt
 8000f60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f68:	4770      	bxgt	lr
 8000f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	3a01      	subs	r2, #1
 8000f74:	e737      	b.n	8000de6 <__aeabi_fmul+0x92>
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xc2>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xda>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e795      	b.n	8000ed4 <__aeabi_fdiv+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d108      	bne.n	8000fc4 <__aeabi_fdiv+0x108>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	f47f af7d 	bne.w	8000eb2 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	f47f af70 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e776      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_fdiv+0x118>
 8000fca:	024b      	lsls	r3, r1, #9
 8000fcc:	f43f af4c 	beq.w	8000e68 <__aeabi_fmul+0x114>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e76e      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd8:	bf18      	it	ne
 8000fda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fde:	d1ca      	bne.n	8000f76 <__aeabi_fdiv+0xba>
 8000fe0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe4:	f47f af5c 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fe8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fec:	f47f af3c 	bne.w	8000e68 <__aeabi_fmul+0x114>
 8000ff0:	e75f      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_f2iz>:
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30f      	bcc.n	800101e <__aeabi_f2iz+0x2a>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d90d      	bls.n	8001024 <__aeabi_f2iz+0x30>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001014:	fa23 f002 	lsr.w	r0, r3, r2
 8001018:	bf18      	it	ne
 800101a:	4240      	negne	r0, r0
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr
 8001024:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001028:	d101      	bne.n	800102e <__aeabi_f2iz+0x3a>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	d105      	bne.n	800103a <__aeabi_f2iz+0x46>
 800102e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001032:	bf08      	it	eq
 8001034:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001038:	4770      	bx	lr
 800103a:	f04f 0000 	mov.w	r0, #0
 800103e:	4770      	bx	lr

08001040 <MPU6050_Init>:
 * @retval 				- MPU6050_Status: Configuration Status (Succeeded or not)
 * Note					- Data written in ACCEL and GYRO register should be changed to be suitable for your application
 */

MPU6050_Status MPU6050_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0
	MPU6050_Status Status = ERROR_CONFIG;
 8001046:	2302      	movs	r3, #2
 8001048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	// PB7: I2C1_SDA

	I2C_Config_t I2C_Cfg;

	// I2C Controller act as a master
	I2C_Cfg.General_Call_Address_Detection = I2C_ENGC_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Cfg.ACK_Control = I2C_ACK_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
	I2C_Cfg.I2C_Clock_Speed = I2C_SCLK_SM_100K;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MPU6050_Init+0xa4>)
 8001056:	60bb      	str	r3, [r7, #8]
	I2C_Cfg.I2C_Mode = I2C_MODE_I2C;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
	I2C_Cfg.P_Slave_Event_CallBack = NULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_Cfg.Stretch_Mode = I2C_CLK_Stretch_Enable;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <MPU6050_Init+0xa8>)
 8001066:	f000 fd47 	bl	8001af8 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Cfg);
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	481d      	ldr	r0, [pc, #116]	; (80010e8 <MPU6050_Init+0xa8>)
 8001072:	f000 fcb9 	bl	80019e8 <MCAL_I2C_Init>

	// ===================================================== //


	uint8_t DataCheck = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	71bb      	strb	r3, [r7, #6]

	// Read the MPU6050 address from WHO_AM_I register and make sure that it is 0x68
	MPU6050_Read(MPU6050_WHO_AM_I, &DataCheck, 1);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	2075      	movs	r0, #117	; 0x75
 8001086:	f000 f86b 	bl	8001160 <MPU6050_Read>

	if(DataCheck != (0x68))
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b68      	cmp	r3, #104	; 0x68
 800108e:	d000      	beq.n	8001092 <MPU6050_Init+0x52>
	{
		while(1);
 8001090:	e7fe      	b.n	8001090 <MPU6050_Init+0x50>
	}else{
		// Start Initialization of the MPU6050
		// where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz
		// when the DLPF is enabled (see Register 26)
		Data = 0x05;
 8001092:	2305      	movs	r3, #5
 8001094:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(CONFIG, &Data, 1);
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	201a      	movs	r0, #26
 800109e:	f000 f825 	bl	80010ec <MPU6050_Write>


		// Set gyroscope Configuration
		// (FS_SEL = 1) (± 500 °/s )suitable for applications that involve faster and more dynamic rotational movements
		Data = 0x08;
 80010a2:	2308      	movs	r3, #8
 80010a4:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(GYRO_CONFIG, &Data, 1);
 80010a6:	1dbb      	adds	r3, r7, #6
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	201b      	movs	r0, #27
 80010ae:	f000 f81d 	bl	80010ec <MPU6050_Write>


		// Set accelerometer configuration
		// (AF_SEL = 2) (± 8g)suitable for applications that require measuring very high levels of acceleration
		Data = 0x10;
 80010b2:	2310      	movs	r3, #16
 80010b4:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(ACCEL_CONFIG, &Data, 1);
 80010b6:	1dbb      	adds	r3, r7, #6
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	201c      	movs	r0, #28
 80010be:	f000 f815 	bl	80010ec <MPU6050_Write>


		// Wake up the MPU6050
		// On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz
		// 0x00 Internal 8MHz oscillator
		Data = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(PWR_MGMT_1, &Data, 1);
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	206b      	movs	r0, #107	; 0x6b
 80010ce:	f000 f80d 	bl	80010ec <MPU6050_Write>

	}
	Status = SUCCESS_CONFIG;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return Status;
 80010d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3730      	adds	r7, #48	; 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	000186a0 	.word	0x000186a0
 80010e8:	40005400 	.word	0x40005400

080010ec <MPU6050_Write>:
 * Note					- The write sequence is specified in MPU6050 Datasheet
 */


MPU6050_Status MPU6050_Write(uint8_t Register_Address, uint8_t *Data_To_Write, uint8_t dataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	MPU6050_Status Status = Data_Sent_Error;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]

	// Write Sequence: Master (S / AD+W / RA / DATA / DATA / P)
	// Slave sends ACK after each byte

	uint8_t ByteCounter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

	// Maximum Bytes to write is (2 Bytes (Register Address + DataToBeWritten in the Register))
	uint8_t Buffer[3];

	Buffer[0] = (uint8_t)Register_Address;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	723b      	strb	r3, [r7, #8]

	for(ByteCounter=1; ByteCounter<(dataLength+1);ByteCounter++)
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e00c      	b.n	8001128 <MPU6050_Write+0x3c>
	{
		Buffer[ByteCounter] = Data_To_Write[ByteCounter-1];
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	3b01      	subs	r3, #1
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	441a      	add	r2, r3
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	3310      	adds	r3, #16
 800111c:	443b      	add	r3, r7
 800111e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(ByteCounter=1; ByteCounter<(dataLength+1);ByteCounter++)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3301      	adds	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	429a      	cmp	r2, r3
 800112e:	d2ee      	bcs.n	800110e <MPU6050_Write+0x22>
	}

	// dataLength+1 to include the Register address to write on
	MCAL_I2C_Master_Transmit(I2C1, MPU6050_Address, Buffer, dataLength+1, With_Stop, Start);
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	3301      	adds	r3, #1
 8001134:	4619      	mov	r1, r3
 8001136:	f107 0208 	add.w	r2, r7, #8
 800113a:	2300      	movs	r3, #0
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	460b      	mov	r3, r1
 8001144:	2168      	movs	r1, #104	; 0x68
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MPU6050_Write+0x70>)
 8001148:	f000 fd20 	bl	8001b8c <MCAL_I2C_Master_Transmit>


	Status = Data_Sent_Successfully;
 800114c:	2301      	movs	r3, #1
 800114e:	73bb      	strb	r3, [r7, #14]

	return Status;
 8001150:	7bbb      	ldrb	r3, [r7, #14]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400

08001160 <MPU6050_Read>:
 * @retval 				- MPU6050_Status: Data Read status (If succeeded or not)
 * Note					- This function supports multibytes read from registers in MPU6050 by moving among registers
 */

MPU6050_Status MPU6050_Read(uint16_t Register_Address, uint8_t *Data_To_Read, uint8_t dataLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	4613      	mov	r3, r2
 800116e:	717b      	strb	r3, [r7, #5]
	MPU6050_Status Status = Data_Read_Error;
 8001170:	2304      	movs	r3, #4
 8001172:	73fb      	strb	r3, [r7, #15]

	// Read Sequence: Master (S / AD+W / RA / S / AD+R      / ACK      / NACK / P)
	// 				  Slave (		  ACK  ACK        ACK DATA    DATA           )

	uint8_t Buffer[2];
	Buffer[0] = (uint8_t)Register_Address;
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	733b      	strb	r3, [r7, #12]

	// Sends the Register address to read from
	MCAL_I2C_Master_Transmit(I2C1, MPU6050_Address, Buffer, 1, Without_Stop, Start);
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	2300      	movs	r3, #0
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	2301      	movs	r3, #1
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	2168      	movs	r1, #104	; 0x68
 800118a:	480a      	ldr	r0, [pc, #40]	; (80011b4 <MPU6050_Read+0x54>)
 800118c:	f000 fcfe 	bl	8001b8c <MCAL_I2C_Master_Transmit>
	// Receives MultiByte data from this register
	MCAL_I2C_Master_Receive(I2C1, MPU6050_Address, Data_To_Read, dataLength, With_Stop, RepeatedStart);
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	2201      	movs	r2, #1
 8001194:	9201      	str	r2, [sp, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	9200      	str	r2, [sp, #0]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2168      	movs	r1, #104	; 0x68
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MPU6050_Read+0x54>)
 80011a0:	f000 fd4a 	bl	8001c38 <MCAL_I2C_Master_Receive>

	Status = Data_Read_Successfully;
 80011a4:	2305      	movs	r3, #5
 80011a6:	73fb      	strb	r3, [r7, #15]


	return Status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40005400 	.word	0x40005400

080011b8 <MPU6050_CalculateError>:
 * Note					- This function reads 200 readings first to specify the error in readings and this value
 * 							can be offset to the actual readings in the main application
 */

void MPU6050_CalculateError(void)
{
 80011b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011bc:	af00      	add	r7, sp, #0
	while(counterReadings < 200)
 80011be:	e106      	b.n	80013ce <MPU6050_CalculateError+0x216>
	{
		MPU6050_Read(ACCEL_XOUT_H, dataFromMPU6050X, 6);
 80011c0:	2206      	movs	r2, #6
 80011c2:	4993      	ldr	r1, [pc, #588]	; (8001410 <MPU6050_CalculateError+0x258>)
 80011c4:	203b      	movs	r0, #59	; 0x3b
 80011c6:	f7ff ffcb 	bl	8001160 <MPU6050_Read>
		AccX = ((dataFromMPU6050X[0] << 8) | (dataFromMPU6050X[1])) / 4096.0;
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <MPU6050_CalculateError+0x258>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	4a8f      	ldr	r2, [pc, #572]	; (8001410 <MPU6050_CalculateError+0x258>)
 80011d2:	7852      	ldrb	r2, [r2, #1]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f91c 	bl	8000414 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <MPU6050_CalculateError+0x25c>)
 80011e2:	f7ff faab 	bl	800073c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc53 	bl	8000a98 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a88      	ldr	r2, [pc, #544]	; (8001418 <MPU6050_CalculateError+0x260>)
 80011f6:	6013      	str	r3, [r2, #0]
		AccY = ((dataFromMPU6050X[2] << 8) | (dataFromMPU6050X[3])) / 4096.0;
 80011f8:	4b85      	ldr	r3, [pc, #532]	; (8001410 <MPU6050_CalculateError+0x258>)
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4a84      	ldr	r2, [pc, #528]	; (8001410 <MPU6050_CalculateError+0x258>)
 8001200:	78d2      	ldrb	r2, [r2, #3]
 8001202:	4313      	orrs	r3, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f905 	bl	8000414 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <MPU6050_CalculateError+0x25c>)
 8001210:	f7ff fa94 	bl	800073c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc3c 	bl	8000a98 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4a7e      	ldr	r2, [pc, #504]	; (800141c <MPU6050_CalculateError+0x264>)
 8001224:	6013      	str	r3, [r2, #0]
		AccZ = ((dataFromMPU6050X[4] << 8) | (dataFromMPU6050X[5])) / 4096.0;
 8001226:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <MPU6050_CalculateError+0x258>)
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	4a78      	ldr	r2, [pc, #480]	; (8001410 <MPU6050_CalculateError+0x258>)
 800122e:	7952      	ldrb	r2, [r2, #5]
 8001230:	4313      	orrs	r3, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8ee 	bl	8000414 <__aeabi_i2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b75      	ldr	r3, [pc, #468]	; (8001414 <MPU6050_CalculateError+0x25c>)
 800123e:	f7ff fa7d 	bl	800073c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc25 	bl	8000a98 <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4a73      	ldr	r2, [pc, #460]	; (8001420 <MPU6050_CalculateError+0x268>)
 8001252:	6013      	str	r3, [r2, #0]
		// These calculations are part of a sensor fusion algorithm to estimate the orientation of the sensor with respect to the gravitational field.
		AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / 3.14));
 8001254:	4b73      	ldr	r3, [pc, #460]	; (8001424 <MPU6050_CalculateError+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f8ed 	bl	8000438 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	4b6e      	ldr	r3, [pc, #440]	; (800141c <MPU6050_CalculateError+0x264>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8e6 	bl	8000438 <__aeabi_f2d>
 800126c:	4680      	mov	r8, r0
 800126e:	4689      	mov	r9, r1
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <MPU6050_CalculateError+0x260>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8df 	bl	8000438 <__aeabi_f2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001282:	f002 fae7 	bl	8003854 <pow>
 8001286:	4682      	mov	sl, r0
 8001288:	468b      	mov	fp, r1
 800128a:	4b65      	ldr	r3, [pc, #404]	; (8001420 <MPU6050_CalculateError+0x268>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8d2 	bl	8000438 <__aeabi_f2d>
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129c:	f002 fada 	bl	8003854 <pow>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4650      	mov	r0, sl
 80012a6:	4659      	mov	r1, fp
 80012a8:	f7fe ff68 	bl	800017c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f002 fb36 	bl	8003924 <sqrt>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4640      	mov	r0, r8
 80012be:	4649      	mov	r1, r9
 80012c0:	f7ff fa3c 	bl	800073c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f002 fb50 	bl	8003970 <atan>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b54      	ldr	r3, [pc, #336]	; (8001428 <MPU6050_CalculateError+0x270>)
 80012d6:	f7ff f907 	bl	80004e8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a349      	add	r3, pc, #292	; (adr r3, 8001408 <MPU6050_CalculateError+0x250>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa28 	bl	800073c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7fe ff42 	bl	800017c <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbca 	bl	8000a98 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <MPU6050_CalculateError+0x26c>)
 8001308:	6013      	str	r3, [r2, #0]
		AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / 3.14));
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <MPU6050_CalculateError+0x274>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f892 	bl	8000438 <__aeabi_f2d>
 8001314:	4604      	mov	r4, r0
 8001316:	460d      	mov	r5, r1
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <MPU6050_CalculateError+0x260>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f889 	bl	8000438 <__aeabi_f2d>
 8001326:	4680      	mov	r8, r0
 8001328:	4689      	mov	r9, r1
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MPU6050_CalculateError+0x264>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f882 	bl	8000438 <__aeabi_f2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f002 fa8a 	bl	8003854 <pow>
 8001340:	4682      	mov	sl, r0
 8001342:	468b      	mov	fp, r1
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MPU6050_CalculateError+0x268>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f875 	bl	8000438 <__aeabi_f2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001356:	f002 fa7d 	bl	8003854 <pow>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4650      	mov	r0, sl
 8001360:	4659      	mov	r1, fp
 8001362:	f7fe ff0b 	bl	800017c <__adddf3>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f002 fad9 	bl	8003924 <sqrt>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f9df 	bl	800073c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f002 faf3 	bl	8003970 <atan>
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MPU6050_CalculateError+0x270>)
 8001390:	f7ff f8aa 	bl	80004e8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	a31a      	add	r3, pc, #104	; (adr r3, 8001408 <MPU6050_CalculateError+0x250>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f9cb 	bl	800073c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7fe fee5 	bl	800017c <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb6d 	bl	8000a98 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <MPU6050_CalculateError+0x274>)
 80013c2:	6013      	str	r3, [r2, #0]
		counterReadings++;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MPU6050_CalculateError+0x278>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <MPU6050_CalculateError+0x278>)
 80013cc:	6013      	str	r3, [r2, #0]
	while(counterReadings < 200)
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MPU6050_CalculateError+0x278>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2bc7      	cmp	r3, #199	; 0xc7
 80013d4:	f77f aef4 	ble.w	80011c0 <MPU6050_CalculateError+0x8>
	}
	//Divide the sum by 200 to get the error value
	AccErrorX = AccErrorX / 200;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MPU6050_CalculateError+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4915      	ldr	r1, [pc, #84]	; (8001434 <MPU6050_CalculateError+0x27c>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fd6c 	bl	8000ebc <__aeabi_fdiv>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MPU6050_CalculateError+0x26c>)
 80013ea:	601a      	str	r2, [r3, #0]
	AccErrorY = AccErrorY / 200;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MPU6050_CalculateError+0x274>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4910      	ldr	r1, [pc, #64]	; (8001434 <MPU6050_CalculateError+0x27c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd62 	bl	8000ebc <__aeabi_fdiv>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MPU6050_CalculateError+0x274>)
 80013fe:	601a      	str	r2, [r3, #0]
	counterReadings = 0;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MPU6050_CalculateError+0x278>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

	while(counterReadings < 200)
 8001406:	e06f      	b.n	80014e8 <MPU6050_CalculateError+0x330>
 8001408:	51eb851f 	.word	0x51eb851f
 800140c:	40091eb8 	.word	0x40091eb8
 8001410:	200000a8 	.word	0x200000a8
 8001414:	40b00000 	.word	0x40b00000
 8001418:	2000009c 	.word	0x2000009c
 800141c:	200000a0 	.word	0x200000a0
 8001420:	200000a4 	.word	0x200000a4
 8001424:	20000088 	.word	0x20000088
 8001428:	40668000 	.word	0x40668000
 800142c:	2000008c 	.word	0x2000008c
 8001430:	20000084 	.word	0x20000084
 8001434:	43480000 	.word	0x43480000
	{
		// ± 500 °/s 65.5 LSB/°/s
		MPU6050_Read(GYRO_XOUT_H, dataFromMPU6050X, 6);
 8001438:	2206      	movs	r2, #6
 800143a:	4941      	ldr	r1, [pc, #260]	; (8001540 <MPU6050_CalculateError+0x388>)
 800143c:	2043      	movs	r0, #67	; 0x43
 800143e:	f7ff fe8f 	bl	8001160 <MPU6050_Read>
		GyroErrorX = ((int16_t)(dataFromMPU6050X[0] << 8 | dataFromMPU6050X [1])) / 65.5;
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <MPU6050_CalculateError+0x388>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MPU6050_CalculateError+0x388>)
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffdd 	bl	8000414 <__aeabi_i2d>
 800145a:	a337      	add	r3, pc, #220	; (adr r3, 8001538 <MPU6050_CalculateError+0x380>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f96c 	bl	800073c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff faec 	bl	8000a48 <__aeabi_d2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <MPU6050_CalculateError+0x38c>)
 8001474:	6013      	str	r3, [r2, #0]
		GyroErrorY = ((int16_t)(dataFromMPU6050X[2] << 8 | dataFromMPU6050X [3])) / 65.5;
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <MPU6050_CalculateError+0x388>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MPU6050_CalculateError+0x388>)
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21b      	sxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ffc3 	bl	8000414 <__aeabi_i2d>
 800148e:	a32a      	add	r3, pc, #168	; (adr r3, 8001538 <MPU6050_CalculateError+0x380>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f952 	bl	800073c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fad2 	bl	8000a48 <__aeabi_d2iz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <MPU6050_CalculateError+0x390>)
 80014a8:	6013      	str	r3, [r2, #0]
		GyroErrorZ = ((int16_t)(dataFromMPU6050X[4] << 8 | dataFromMPU6050X [5])) / 65.5;
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MPU6050_CalculateError+0x388>)
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <MPU6050_CalculateError+0x388>)
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffa9 	bl	8000414 <__aeabi_i2d>
 80014c2:	a31d      	add	r3, pc, #116	; (adr r3, 8001538 <MPU6050_CalculateError+0x380>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f938 	bl	800073c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fab8 	bl	8000a48 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MPU6050_CalculateError+0x394>)
 80014dc:	6013      	str	r3, [r2, #0]
		counterReadings++;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MPU6050_CalculateError+0x398>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <MPU6050_CalculateError+0x398>)
 80014e6:	6013      	str	r3, [r2, #0]
	while(counterReadings < 200)
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MPU6050_CalculateError+0x398>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2bc7      	cmp	r3, #199	; 0xc7
 80014ee:	dda3      	ble.n	8001438 <MPU6050_CalculateError+0x280>
	}
	GyroErrorX = GyroErrorX / 200;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MPU6050_CalculateError+0x38c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <MPU6050_CalculateError+0x39c>)
 80014f6:	fb82 1203 	smull	r1, r2, r2, r3
 80014fa:	1192      	asrs	r2, r2, #6
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <MPU6050_CalculateError+0x38c>)
 8001502:	6013      	str	r3, [r2, #0]
	GyroErrorY = GyroErrorY / 200;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MPU6050_CalculateError+0x390>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MPU6050_CalculateError+0x39c>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1192      	asrs	r2, r2, #6
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <MPU6050_CalculateError+0x390>)
 8001516:	6013      	str	r3, [r2, #0]
	GyroErrorZ = GyroErrorY / 200;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MPU6050_CalculateError+0x390>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <MPU6050_CalculateError+0x39c>)
 800151e:	fb82 1203 	smull	r1, r2, r2, r3
 8001522:	1192      	asrs	r2, r2, #6
 8001524:	17db      	asrs	r3, r3, #31
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <MPU6050_CalculateError+0x394>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	00000000 	.word	0x00000000
 800153c:	40506000 	.word	0x40506000
 8001540:	200000a8 	.word	0x200000a8
 8001544:	20000090 	.word	0x20000090
 8001548:	20000094 	.word	0x20000094
 800154c:	20000098 	.word	0x20000098
 8001550:	20000084 	.word	0x20000084
 8001554:	51eb851f 	.word	0x51eb851f

08001558 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <EXTI0_IRQHandler+0x1c>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <EXTI0_IRQHandler+0x1c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <EXTI0_IRQHandler+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4798      	blx	r3

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40010400 	.word	0x40010400
 8001578:	200000b0 	.word	0x200000b0

0800157c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <EXTI1_IRQHandler+0x1c>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <EXTI1_IRQHandler+0x1c>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <EXTI1_IRQHandler+0x20>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4798      	blx	r3
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010400 	.word	0x40010400
 800159c:	200000b0 	.word	0x200000b0

080015a0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <EXTI2_IRQHandler+0x1c>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <EXTI2_IRQHandler+0x1c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <EXTI2_IRQHandler+0x20>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4798      	blx	r3
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40010400 	.word	0x40010400
 80015c0:	200000b0 	.word	0x200000b0

080015c4 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <EXTI3_IRQHandler+0x1c>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <EXTI3_IRQHandler+0x1c>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <EXTI3_IRQHandler+0x20>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4798      	blx	r3
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010400 	.word	0x40010400
 80015e4:	200000b0 	.word	0x200000b0

080015e8 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <EXTI4_IRQHandler+0x1c>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <EXTI4_IRQHandler+0x1c>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <EXTI4_IRQHandler+0x20>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4798      	blx	r3
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010400 	.word	0x40010400
 8001608:	200000b0 	.word	0x200000b0

0800160c <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8001610:	4b26      	ldr	r3, [pc, #152]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <EXTI9_5_IRQHandler+0x22>
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4a22      	ldr	r2, [pc, #136]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	6153      	str	r3, [r2, #20]
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <EXTI9_5_IRQHandler+0xa4>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <EXTI9_5_IRQHandler+0x40>
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6153      	str	r3, [r2, #20]
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <EXTI9_5_IRQHandler+0xa4>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <EXTI9_5_IRQHandler+0x5e>
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001662:	6153      	str	r3, [r2, #20]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <EXTI9_5_IRQHandler+0xa4>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <EXTI9_5_IRQHandler+0x7c>
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <EXTI9_5_IRQHandler+0xa4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <EXTI9_5_IRQHandler+0x9a>
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <EXTI9_5_IRQHandler+0xa0>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6153      	str	r3, [r2, #20]
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <EXTI9_5_IRQHandler+0xa4>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	4798      	blx	r3
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010400 	.word	0x40010400
 80016b0:	200000b0 	.word	0x200000b0

080016b4 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <EXTI15_10_IRQHandler+0x22>
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a29      	ldr	r2, [pc, #164]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6153      	str	r3, [r2, #20]
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <EXTI15_10_IRQHandler+0x40>
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <EXTI15_10_IRQHandler+0x5e>
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170a:	6153      	str	r3, [r2, #20]
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <EXTI15_10_IRQHandler+0x7c>
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <EXTI15_10_IRQHandler+0x9a>
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	6153      	str	r3, [r2, #20]
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <EXTI15_10_IRQHandler+0xb8>
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <EXTI15_10_IRQHandler+0xbc>)
 8001760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b03      	ldr	r3, [pc, #12]	; (8001774 <EXTI15_10_IRQHandler+0xc0>)
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176a:	4798      	blx	r3
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010400 	.word	0x40010400
 8001774:	200000b0 	.word	0x200000b0

08001778 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001788:	f000 80a5 	beq.w	80018d6 <Get_CRLH_Position+0x15e>
 800178c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001790:	f300 80a3 	bgt.w	80018da <Get_CRLH_Position+0x162>
 8001794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001798:	f000 809b 	beq.w	80018d2 <Get_CRLH_Position+0x15a>
 800179c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017a0:	f300 809b 	bgt.w	80018da <Get_CRLH_Position+0x162>
 80017a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a8:	f000 8091 	beq.w	80018ce <Get_CRLH_Position+0x156>
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b0:	f300 8093 	bgt.w	80018da <Get_CRLH_Position+0x162>
 80017b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b8:	f000 8087 	beq.w	80018ca <Get_CRLH_Position+0x152>
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	f300 808b 	bgt.w	80018da <Get_CRLH_Position+0x162>
 80017c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c8:	d07d      	beq.n	80018c6 <Get_CRLH_Position+0x14e>
 80017ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ce:	f300 8084 	bgt.w	80018da <Get_CRLH_Position+0x162>
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	d074      	beq.n	80018c2 <Get_CRLH_Position+0x14a>
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017dc:	dc7d      	bgt.n	80018da <Get_CRLH_Position+0x162>
 80017de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e2:	d06c      	beq.n	80018be <Get_CRLH_Position+0x146>
 80017e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e8:	dc77      	bgt.n	80018da <Get_CRLH_Position+0x162>
 80017ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ee:	d064      	beq.n	80018ba <Get_CRLH_Position+0x142>
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	dc71      	bgt.n	80018da <Get_CRLH_Position+0x162>
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	d05d      	beq.n	80018b6 <Get_CRLH_Position+0x13e>
 80017fa:	2b80      	cmp	r3, #128	; 0x80
 80017fc:	dc6d      	bgt.n	80018da <Get_CRLH_Position+0x162>
 80017fe:	2b20      	cmp	r3, #32
 8001800:	dc48      	bgt.n	8001894 <Get_CRLH_Position+0x11c>
 8001802:	2b00      	cmp	r3, #0
 8001804:	dd69      	ble.n	80018da <Get_CRLH_Position+0x162>
 8001806:	3b01      	subs	r3, #1
 8001808:	2b1f      	cmp	r3, #31
 800180a:	d866      	bhi.n	80018da <Get_CRLH_Position+0x162>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <Get_CRLH_Position+0x9c>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	0800189b 	.word	0x0800189b
 8001818:	0800189f 	.word	0x0800189f
 800181c:	080018db 	.word	0x080018db
 8001820:	080018a3 	.word	0x080018a3
 8001824:	080018db 	.word	0x080018db
 8001828:	080018db 	.word	0x080018db
 800182c:	080018db 	.word	0x080018db
 8001830:	080018a7 	.word	0x080018a7
 8001834:	080018db 	.word	0x080018db
 8001838:	080018db 	.word	0x080018db
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018ab 	.word	0x080018ab
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	080018db 	.word	0x080018db
 8001874:	080018db 	.word	0x080018db
 8001878:	080018db 	.word	0x080018db
 800187c:	080018db 	.word	0x080018db
 8001880:	080018db 	.word	0x080018db
 8001884:	080018db 	.word	0x080018db
 8001888:	080018db 	.word	0x080018db
 800188c:	080018db 	.word	0x080018db
 8001890:	080018af 	.word	0x080018af
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d00c      	beq.n	80018b2 <Get_CRLH_Position+0x13a>
 8001898:	e01f      	b.n	80018da <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800189a:	2300      	movs	r3, #0
 800189c:	e01e      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800189e:	2304      	movs	r3, #4
 80018a0:	e01c      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80018a2:	2308      	movs	r3, #8
 80018a4:	e01a      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80018a6:	230c      	movs	r3, #12
 80018a8:	e018      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80018aa:	2310      	movs	r3, #16
 80018ac:	e016      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80018ae:	2314      	movs	r3, #20
 80018b0:	e014      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80018b2:	2318      	movs	r3, #24
 80018b4:	e012      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80018b6:	231c      	movs	r3, #28
 80018b8:	e010      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00e      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80018be:	2304      	movs	r3, #4
 80018c0:	e00c      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80018c2:	2308      	movs	r3, #8
 80018c4:	e00a      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80018c6:	230c      	movs	r3, #12
 80018c8:	e008      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80018ca:	2310      	movs	r3, #16
 80018cc:	e006      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80018ce:	2314      	movs	r3, #20
 80018d0:	e004      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80018d2:	2318      	movs	r3, #24
 80018d4:	e002      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80018d6:	231c      	movs	r3, #28
 80018d8:	e000      	b.n	80018dc <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d801      	bhi.n	8001906 <MCAL_GPIO_Init+0x1e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e001      	b.n	800190a <MCAL_GPIO_Init+0x22>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff31 	bl	8001778 <Get_CRLH_Position>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	230f      	movs	r3, #15
 800191c:	4093      	lsls	r3, r2
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	401a      	ands	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d00b      	beq.n	800194a <MCAL_GPIO_Init+0x62>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d007      	beq.n	800194a <MCAL_GPIO_Init+0x62>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d003      	beq.n	800194a <MCAL_GPIO_Init+0x62>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	789b      	ldrb	r3, [r3, #2]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d10e      	bne.n	8001968 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	3b04      	subs	r3, #4
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	b25a      	sxtb	r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b25b      	sxtb	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e02c      	b.n	80019c2 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d003      	beq.n	8001978 <MCAL_GPIO_Init+0x90>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	789b      	ldrb	r3, [r3, #2]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e01c      	b.n	80019c2 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d102      	bne.n	8001996 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001990:	2304      	movs	r3, #4
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e015      	b.n	80019c2 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001996:	2308      	movs	r3, #8
 8001998:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	789b      	ldrb	r3, [r3, #2]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	8812      	ldrh	r2, [r2, #0]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	e007      	b.n	80019c2 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	43d2      	mvns	r2, r2
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80019c2:	7bfc      	ldrb	r4, [r7, #15]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fed5 	bl	8001778 <Get_CRLH_Position>
 80019ce:	4603      	mov	r3, r0
 80019d0:	fa04 f203 	lsl.w	r2, r4, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	431a      	orrs	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	601a      	str	r2, [r3, #0]


}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd90      	pop	{r4, r7, pc}
	...

080019e8 <MCAL_I2C_Init>:
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_Typedef* I2Cx, I2C_Config_t *I2C_Cfg)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

	uint16_t tmpreg = 0, freqrange=0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	82fb      	strh	r3, [r7, #22]
 80019f6:	2300      	movs	r3, #0
 80019f8:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 36000000;
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <MCAL_I2C_Init+0xf8>)
 80019fc:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	81fb      	strh	r3, [r7, #14]


	// Enable RCC clock
	if(I2Cx == I2C1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a37      	ldr	r2, [pc, #220]	; (8001ae4 <MCAL_I2C_Init+0xfc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d110      	bne.n	8001a2c <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Cfg;
 8001a0a:	4a37      	ldr	r2, [pc, #220]	; (8001ae8 <MCAL_I2C_Init+0x100>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4614      	mov	r4, r2
 8001a10:	461d      	mov	r5, r3
 8001a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <MCAL_I2C_Init+0x104>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a32      	ldr	r2, [pc, #200]	; (8001aec <MCAL_I2C_Init+0x104>)
 8001a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	e010      	b.n	8001a4e <MCAL_I2C_Init+0x66>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Cfg;
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <MCAL_I2C_Init+0x100>)
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001a34:	4615      	mov	r5, r2
 8001a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <MCAL_I2C_Init+0x104>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a29      	ldr	r2, [pc, #164]	; (8001aec <MCAL_I2C_Init+0x104>)
 8001a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a4c:	61d3      	str	r3, [r2, #28]
	}


	I2Cx->CR1&=~(1<<0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0201 	bic.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
	//• Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	I2Cx->CR2 &=~(0b111111<<0);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |=((pclk1/1000000)<<0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <MCAL_I2C_Init+0x108>)
 8001a6e:	fba1 1303 	umull	r1, r3, r1, r3
 8001a72:	0c9b      	lsrs	r3, r3, #18
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	605a      	str	r2, [r3, #4]
	//Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
	//• Configure the clock control registers
	I2Cx->CCR &=~(0b11111111111<<0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	61d3      	str	r3, [r2, #28]
	I2Cx->CCR |=((pclk1/1000)/(2*100));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	4918      	ldr	r1, [pc, #96]	; (8001af4 <MCAL_I2C_Init+0x10c>)
 8001a94:	fba1 1303 	umull	r1, r3, r1, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	61da      	str	r2, [r3, #28]
	//• Configure the rise time register
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->TRISE &=(0b111111<<0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	621a      	str	r2, [r3, #32]
	I2Cx->TRISE |=(((pclk1/1000000))+1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	490f      	ldr	r1, [pc, #60]	; (8001af0 <MCAL_I2C_Init+0x108>)
 8001ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ab8:	0c9b      	lsrs	r3, r3, #18
 8001aba:	3301      	adds	r3, #1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	621a      	str	r2, [r3, #32]




	// Enable the selected I2C peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fa26 	bl	8001f22 <I2C_AcknowledgeConfig>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	02255100 	.word	0x02255100
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	200000ec 	.word	0x200000ec
 8001aec:	40021000 	.word	0x40021000
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	053e2d63 	.word	0x053e2d63

08001af8 <MCAL_I2C_GPIO_Set_Pins>:
 *
 */


void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef* I2Cx)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(I2Cx == I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d118      	bne.n	8001b3a <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL --> Open drain
		// PB7: I2C1_SDA --> Open drain

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481a      	ldr	r0, [pc, #104]	; (8001b84 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8001b1c:	f7ff fee4 	bl	80018e8 <MCAL_GPIO_Init>


		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8001b24:	2307      	movs	r3, #7
 8001b26:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	4814      	ldr	r0, [pc, #80]	; (8001b84 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8001b34:	f7ff fed8 	bl	80018e8 <MCAL_GPIO_Init>
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

	}

}
 8001b38:	e01d      	b.n	8001b76 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d119      	bne.n	8001b76 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480b      	ldr	r0, [pc, #44]	; (8001b84 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8001b58:	f7ff fec6 	bl	80018e8 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b60:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8001b62:	2307      	movs	r3, #7
 8001b64:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8001b72:	f7ff feb9 	bl	80018e8 <MCAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40005800 	.word	0x40005800

08001b8c <MCAL_I2C_Master_Transmit>:
 *
 */


void MCAL_I2C_Master_Transmit(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
	// Support timeout (Configure timer working for specific duration, raise interrupt
	// timer_isr(){flag = 1}
	// So any code exist in while (check flag || Any polling condition)

	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8001ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f8b9 	bl	8001d20 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8001bae:	bf00      	nop
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f8e8 	bl	8001d88 <I2C_GetFlagStatus>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f8      	beq.n	8001bb0 <MCAL_I2C_Master_Transmit+0x24>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Transmitter);
 8001bbe:	897b      	ldrh	r3, [r7, #10]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f967 	bl	8001e98 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8001bca:	bf00      	nop
 8001bcc:	2102      	movs	r1, #2
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f8da 	bl	8001d88 <I2C_GetFlagStatus>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f8      	beq.n	8001bcc <MCAL_I2C_Master_Transmit+0x40>


	// 4- Check : TRA, BUSY, MSL, TXE Flags
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8001bda:	bf00      	nop
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <MCAL_I2C_Master_Transmit+0xa8>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f8d2 	bl	8001d88 <I2C_GetFlagStatus>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f8      	beq.n	8001bdc <MCAL_I2C_Master_Transmit+0x50>

	// 5- Send Data
	for(i=0;i<dataLen;i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e011      	b.n	8001c14 <MCAL_I2C_Master_Transmit+0x88>
	{
		// Write in the DR register the data to be sent
		I2Cx->DR = dataOut[i];
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	611a      	str	r2, [r3, #16]

		// Wait EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8001bfe:	bf00      	nop
 8001c00:	2103      	movs	r1, #3
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f8c0 	bl	8001d88 <I2C_GetFlagStatus>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f8      	beq.n	8001c00 <MCAL_I2C_Master_Transmit+0x74>
	for(i=0;i<dataLen;i++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8e9      	bhi.n	8001bf0 <MCAL_I2C_Master_Transmit+0x64>
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));


	// 6- Stop Condition
	if(Stop == With_Stop)
 8001c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <MCAL_I2C_Master_Transmit+0xa0>
	{
		I2C_Generate_STOP(I2Cx,ENABLE);
 8001c24:	2101      	movs	r1, #1
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f960 	bl	8001eec <I2C_Generate_STOP>
	}

}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	00070080 	.word	0x00070080

08001c38 <MCAL_I2C_Master_Receive>:




void MCAL_I2C_Master_Receive(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	460b      	mov	r3, r1
 8001c46:	817b      	strh	r3, [r7, #10]
	int i=0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <MCAL_I2C_Master_Receive+0xe4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	74fb      	strb	r3, [r7, #19]
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f95f 	bl	8001f22 <I2C_AcknowledgeConfig>


	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8001c64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f857 	bl	8001d20 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8001c72:	bf00      	nop
 8001c74:	2101      	movs	r1, #1
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f886 	bl	8001d88 <I2C_GetFlagStatus>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f8      	beq.n	8001c74 <MCAL_I2C_Master_Receive+0x3c>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Reciever);
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f905 	bl	8001e98 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8001c8e:	bf00      	nop
 8001c90:	2102      	movs	r1, #2
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f878 	bl	8001d88 <I2C_GetFlagStatus>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f8      	beq.n	8001c90 <MCAL_I2C_Master_Receive+0x58>


	// Enabling Acknowledge
	if(dataLen<=1){
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d804      	bhi.n	8001cae <MCAL_I2C_Master_Receive+0x76>
		I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f93b 	bl	8001f22 <I2C_AcknowledgeConfig>
 8001cac:	e003      	b.n	8001cb6 <MCAL_I2C_Master_Receive+0x7e>
	}
	else{
		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f936 	bl	8001f22 <I2C_AcknowledgeConfig>
	}


	if(dataLen)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01f      	beq.n	8001cfc <MCAL_I2C_Master_Receive+0xc4>
	{
		for(i=dataLen;i>=1;i--)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e019      	b.n	8001cf6 <MCAL_I2C_Master_Receive+0xbe>
		{
			// Wait for EV7: RXNE=1, Cleared by reading DR
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8001cc2:	bf00      	nop
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f85e 	bl	8001d88 <I2C_GetFlagStatus>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f8      	beq.n	8001cc4 <MCAL_I2C_Master_Receive+0x8c>
			// Read data from register
			*dataOut = I2Cx->DR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	701a      	strb	r2, [r3, #0]
			dataOut++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
			if(i==2)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d103      	bne.n	8001cf0 <MCAL_I2C_Master_Receive+0xb8>
			{
				// Once receiving the last byte, we want to send NACK
				I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f919 	bl	8001f22 <I2C_AcknowledgeConfig>
		for(i=dataLen;i>=1;i--)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dce2      	bgt.n	8001cc2 <MCAL_I2C_Master_Receive+0x8a>
			}
		}

	}

	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f90f 	bl	8001f22 <I2C_AcknowledgeConfig>

	// Generate Stop Condition
	if(Stop == With_Stop)
 8001d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <MCAL_I2C_Master_Receive+0xdc>
	{
		I2C_Generate_STOP(I2Cx, ENABLE);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f8ec 	bl	8001eec <I2C_Generate_STOP>
	}



}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40005400 	.word	0x40005400

08001d20 <I2C_Generate_START>:
 *
 */


void I2C_Generate_START(I2C_Typedef *I2Cx, FunctionalState NewState,Repeated_Start Start)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	70bb      	strb	r3, [r7, #2]
	// Check if start or repeated start
	if(Start != RepeatedStart)
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d007      	beq.n	8001d46 <I2C_Generate_START+0x26>
	{
		// Check if bus is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8001d36:	bf00      	nop
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f824 	bl	8001d88 <I2C_GetFlagStatus>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f8      	bne.n	8001d38 <I2C_Generate_START+0x18>
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	// Enable start condition
	if(NewState != DISABLE)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <I2C_Generate_START+0x52>
	{
		// Disable POS
		I2Cx->CR1 &= ~(1<<11);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	601a      	str	r2, [r3, #0]
		// Enable ACK
		I2Cx->CR1 |= (1<<10);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= I2C_CR1_START;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
		// Disable Start condition
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}


}
 8001d70:	e005      	b.n	8001d7e <I2C_Generate_START+0x5e>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <I2C_GetFlagStatus>:
 *
 */


Flag_Status I2C_GetFlagStatus(I2C_Typedef* I2Cx, Status flag)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;   // To read from
	uint32_t flag1=0,flag2=0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
	uint32_t lastEvent = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
	Flag_Status BitStatus = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	77fb      	strb	r3, [r7, #31]
	switch(flag)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d811      	bhi.n	8001dcc <I2C_GetFlagStatus+0x44>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d86b      	bhi.n	8001e86 <I2C_GetFlagStatus+0xfe>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <I2C_GetFlagStatus+0x2c>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dd7 	.word	0x08001dd7
 8001db8:	08001def 	.word	0x08001def
 8001dbc:	08001e07 	.word	0x08001e07
 8001dc0:	08001e57 	.word	0x08001e57
 8001dc4:	08001e57 	.word	0x08001e57
 8001dc8:	08001e6f 	.word	0x08001e6f
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <I2C_GetFlagStatus+0x10c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d027      	beq.n	8001e24 <I2C_GetFlagStatus+0x9c>
 8001dd4:	e057      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if(I2Cx->SR2 & (I2C_SR2_BUSY))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <I2C_GetFlagStatus+0x60>
			BitStatus = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 8001de6:	e04e      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	77fb      	strb	r3, [r7, #31]
		break;
 8001dec:	e04b      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if(I2Cx->SR1 & (I2C_SR1_SB))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <I2C_GetFlagStatus+0x78>
			BitStatus = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 8001dfe:	e042      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
		break;
 8001e04:	e03f      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
	case EV6:
	{
		//		Address sent (Master)
		//		0: No end of address transmission
		//		1: End of address transmission
		if(I2Cx->SR1 & (I2C_SR1_ADDR))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <I2C_GetFlagStatus+0x90>
			BitStatus = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
 8001e16:	e001      	b.n	8001e1c <I2C_GetFlagStatus+0x94>
		else
			BitStatus = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
		//		//		ADDR=1, cleared by reading SR1 register followed by reading SR2
		dummyRead = I2Cx->SR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	60fb      	str	r3, [r7, #12]
		break;
 8001e22:	e030      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		flag1 = I2Cx->SR1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	041b      	lsls	r3, r3, #16
 8001e34:	617b      	str	r3, [r7, #20]
		// Concatenate the two registers
		lastEvent = (flag1 | flag2) & ((uint32_t)(0xffffffff));
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
		if((lastEvent & flag) == flag)
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4013      	ands	r3, r2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d102      	bne.n	8001e50 <I2C_GetFlagStatus+0xc8>
		{
			BitStatus = SET;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 8001e4e:	e01a      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	77fb      	strb	r3, [r7, #31]
		break;
 8001e54:	e017      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
	case EV8_1:
	case EV8:
	{
		//		EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		//		EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		if((I2Cx->SR1)& (I2C_SR1_TXE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <I2C_GetFlagStatus+0xe0>
		{
			BitStatus = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 8001e66:	e00e      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
		break;
 8001e6c:	e00b      	b.n	8001e86 <I2C_GetFlagStatus+0xfe>
	case EV7:
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if((I2Cx->SR1)& (I2C_SR1_RXNE))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <I2C_GetFlagStatus+0xf8>
		{
			BitStatus = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}


		break;
 8001e7e:	e001      	b.n	8001e84 <I2C_GetFlagStatus+0xfc>
			BitStatus = RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	77fb      	strb	r3, [r7, #31]
		break;
 8001e84:	bf00      	nop
	}
	}


	return BitStatus;
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	00070080 	.word	0x00070080

08001e98 <I2C_SendAddress>:
 *
 */


void I2C_SendAddress(I2C_Typedef* I2Cx, uint16_t Address, I2C_Direction direction)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <I2C_SendAddress+0x50>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	73fb      	strb	r3, [r7, #15]


	// Check if 7-bit address or 10-bit address
	Address = (Address << 1);
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	807b      	strh	r3, [r7, #2]


	if(direction != I2C_Direction_Transmitter)
 8001ebe:	787b      	ldrb	r3, [r7, #1]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <I2C_SendAddress+0x36>
	{
		Address |= 1<<0;
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	e003      	b.n	8001ed6 <I2C_SendAddress+0x3e>
	}else
	{
		// Reset address bit0 to write
		Address &= ~(1<<0);
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	807b      	strh	r3, [r7, #2]
	}

	// Send address
	I2Cx->DR = Address;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]


}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40005400 	.word	0x40005400

08001eec <I2C_Generate_STOP>:
 *
 */


void I2C_Generate_STOP(I2C_Typedef *I2Cx, FunctionalState NewState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	// STOP: 9 in CR1

	if(NewState != DISABLE)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <I2C_Generate_STOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8001f0a:	e005      	b.n	8001f18 <I2C_Generate_STOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <I2C_AcknowledgeConfig>:
 *
 */


void I2C_AcknowledgeConfig(I2C_Typedef* I2Cx, FunctionalState NewState)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]

	if (NewState != DISABLE)
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8001f40:	e005      	b.n	8001f4e <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <I2C1_EV_IRQHandler+0xec>)
 8001f64:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <I2C1_EV_IRQHandler+0x48>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f000 f866 	bl	800206c <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <I2C1_EV_IRQHandler+0x82>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d011      	beq.n	8001fda <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f000 f849 	bl	800206c <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <I2C1_EV_IRQHandler+0xb2>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <I2C1_EV_IRQHandler+0xb2>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8002002:	2103      	movs	r1, #3
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f000 f831 	bl	800206c <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00f      	beq.n	800203a <I2C1_EV_IRQHandler+0xe2>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <I2C1_EV_IRQHandler+0xe2>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8002032:	2104      	movs	r1, #4
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f000 f819 	bl	800206c <Slave_States>

		}
	}

}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40005400 	.word	0x40005400

08002048 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <Slave_States+0xd8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	2b04      	cmp	r3, #4
 800208c:	d856      	bhi.n	800213c <Slave_States+0xd0>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <Slave_States+0x28>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020af 	.word	0x080020af
 8002098:	080020a9 	.word	0x080020a9
 800209c:	080020d3 	.word	0x080020d3
 80020a0:	080020eb 	.word	0x080020eb
 80020a4:	0800210f 	.word	0x0800210f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80020ac:	e046      	b.n	800213c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d03b      	beq.n	8002132 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	4922      	ldr	r1, [pc, #136]	; (8002148 <Slave_States+0xdc>)
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3320      	adds	r3, #32
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2000      	movs	r0, #0
 80020ce:	4798      	blx	r3
		}

		break ;
 80020d0:	e02f      	b.n	8002132 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	491c      	ldr	r1, [pc, #112]	; (8002148 <Slave_States+0xdc>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3320      	adds	r3, #32
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2002      	movs	r0, #2
 80020e6:	4798      	blx	r3

		break ;
 80020e8:	e028      	b.n	800213c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01f      	beq.n	8002136 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	4913      	ldr	r1, [pc, #76]	; (8002148 <Slave_States+0xdc>)
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3320      	adds	r3, #32
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2003      	movs	r0, #3
 800210a:	4798      	blx	r3
		}

		break ;
 800210c:	e013      	b.n	8002136 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	490a      	ldr	r1, [pc, #40]	; (8002148 <Slave_States+0xdc>)
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3320      	adds	r3, #32
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2004      	movs	r0, #4
 800212e:	4798      	blx	r3
		}

		break ;
 8002130:	e003      	b.n	800213a <Slave_States+0xce>
		break ;
 8002132:	bf00      	nop
 8002134:	e002      	b.n	800213c <Slave_States+0xd0>
		break ;
 8002136:	bf00      	nop
 8002138:	e000      	b.n	800213c <Slave_States+0xd0>
		break ;
 800213a:	bf00      	nop
	}
	}

}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40005400 	.word	0x40005400
 8002148:	200000ec 	.word	0x200000ec

0800214c <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4613      	mov	r3, r2
 800215a:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d049      	beq.n	80021fa <MCAL_RCC_CLK_Init+0xae>
 8002166:	2b02      	cmp	r3, #2
 8002168:	f300 80cc 	bgt.w	8002304 <MCAL_RCC_CLK_Init+0x1b8>
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80c8 	beq.w	8002302 <MCAL_RCC_CLK_Init+0x1b6>
 8002172:	2b01      	cmp	r3, #1
 8002174:	f040 80c6 	bne.w	8002304 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8002178:	4b65      	ldr	r3, [pc, #404]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a64      	ldr	r2, [pc, #400]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a61      	ldr	r2, [pc, #388]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	2b48      	cmp	r3, #72	; 0x48
 80021a0:	d106      	bne.n	80021b0 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 80021a2:	4b5b      	ldr	r3, [pc, #364]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021a8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80021ac:	6053      	str	r3, [r2, #4]
			break;
 80021ae:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a56      	ldr	r2, [pc, #344]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 80021bc:	4b54      	ldr	r3, [pc, #336]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a53      	ldr	r2, [pc, #332]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 80021c8:	4b51      	ldr	r3, [pc, #324]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 80021d4:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021e6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a47      	ldr	r2, [pc, #284]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f6:	6053      	str	r3, [r2, #4]




		break;
 80021f8:	e084      	b.n	8002304 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a44      	ldr	r2, [pc, #272]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a41      	ldr	r2, [pc, #260]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 800220c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002210:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	3b10      	subs	r3, #16
 8002216:	2b14      	cmp	r3, #20
 8002218:	d85d      	bhi.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <MCAL_RCC_CLK_Init+0xd4>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002275 	.word	0x08002275
 8002224:	080022d7 	.word	0x080022d7
 8002228:	080022d7 	.word	0x080022d7
 800222c:	080022d7 	.word	0x080022d7
 8002230:	08002283 	.word	0x08002283
 8002234:	080022d7 	.word	0x080022d7
 8002238:	080022d7 	.word	0x080022d7
 800223c:	080022d7 	.word	0x080022d7
 8002240:	08002291 	.word	0x08002291
 8002244:	080022d7 	.word	0x080022d7
 8002248:	0800229f 	.word	0x0800229f
 800224c:	080022d7 	.word	0x080022d7
 8002250:	080022ad 	.word	0x080022ad
 8002254:	080022d7 	.word	0x080022d7
 8002258:	080022d7 	.word	0x080022d7
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022bb 	.word	0x080022bb
 8002264:	080022d7 	.word	0x080022d7
 8002268:	080022d7 	.word	0x080022d7
 800226c:	080022d7 	.word	0x080022d7
 8002270:	080022c9 	.word	0x080022c9
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 800227a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800227e:	6053      	str	r3, [r2, #4]
			break;
 8002280:	e029      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a22      	ldr	r2, [pc, #136]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002288:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800228c:	6053      	str	r3, [r2, #4]
			break;
 800228e:	e022      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229a:	6053      	str	r3, [r2, #4]
			break;
 800229c:	e01b      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022a4:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 80022a8:	6053      	str	r3, [r2, #4]
			break;
 80022aa:	e014      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022b2:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80022b6:	6053      	str	r3, [r2, #4]
			break;
 80022b8:	e00d      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022c0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80022c4:	6053      	str	r3, [r2, #4]
			break;
 80022c6:	e006      	b.n	80022d6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022ce:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80022d2:	6053      	str	r3, [r2, #4]
			break;
 80022d4:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e0:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 80022e2:	bf00      	nop
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f9      	beq.n	80022e4 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <MCAL_RCC_CLK_Init+0x1c4>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]



		break;
 8002300:	e000      	b.n	8002304 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8002302:	bf00      	nop
	}
	}
	return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000

08002314 <TIMER3_Init>:




void TIMER3_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER3_CLK_EN();
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <TIMER3_Init+0x4c>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <TIMER3_Init+0x4c>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER3->PSC = (Clock_Speed_MHz - 1);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <TIMER3_Init+0x50>)
 8002330:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER3->ARR = 0xC350;  // 50000*1us = 0.05s
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <TIMER3_Init+0x50>)
 8002334:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER3->CR1 |= (1<<0);
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <TIMER3_Init+0x50>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <TIMER3_Init+0x50>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER3->SR) & (1<<0)));
 8002346:	bf00      	nop
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <TIMER3_Init+0x50>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f9      	beq.n	8002348 <TIMER3_Init+0x34>
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000
 8002364:	40000400 	.word	0x40000400

08002368 <Get_TIMER3_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER3_Counter()
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	return (TIMER3->CNT);
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <Get_TIMER3_Counter+0x10>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40000400 	.word	0x40000400

0800237c <TIMER3_Stop>:
	TIMER2->CR1 &= ~(1<<0);
}


void TIMER3_Stop()
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <TIMER3_Stop+0x18>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <TIMER3_Stop+0x18>)
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40000400 	.word	0x40000400

08002398 <TIMER3_Start>:
void TIMER3_Start()
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 |= (1<<0);
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <TIMER3_Start+0x18>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <TIMER3_Start+0x18>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40000400 	.word	0x40000400

080023b4 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <TIM2_IRQHandler+0x68>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d128      	bne.n	8002412 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 80023c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80023d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023da:	f023 0302 	bic.w	r3, r3, #2
 80023de:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <TIM2_IRQHandler+0x6c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <TIM2_IRQHandler+0x6c>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <TIM2_IRQHandler+0x6c>)
 80023f2:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 80023f4:	e00d      	b.n	8002412 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <TIM2_IRQHandler+0x68>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 80023fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <TIM2_IRQHandler+0x70>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000135 	.word	0x20000135
 8002420:	20000136 	.word	0x20000136
 8002424:	20000134 	.word	0x20000134

08002428 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <which_UART+0x38>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <which_UART+0x14>
		return 0;
 8002438:	2300      	movs	r3, #0
 800243a:	e00c      	b.n	8002456 <which_UART+0x2e>
	else if(USARTx == USART2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <which_UART+0x3c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <which_UART+0x20>
		return 1;
 8002444:	2301      	movs	r3, #1
 8002446:	e006      	b.n	8002456 <which_UART+0x2e>
	else if(USARTx == USART3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <which_UART+0x40>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <which_UART+0x2c>
		return 2;
 8002450:	2302      	movs	r3, #2
 8002452:	e000      	b.n	8002456 <which_UART+0x2e>
	return 3;
 8002454:	2303      	movs	r3, #3
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40013800 	.word	0x40013800
 8002464:	40004400 	.word	0x40004400
 8002468:	40004800 	.word	0x40004800

0800246c <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 800246c:	b4b0      	push	{r4, r5, r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8002476:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <MCAL_UART_Init+0x184>)
 8002478:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <MCAL_UART_Init+0x188>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10e      	bne.n	80024a0 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <MCAL_UART_Init+0x18c>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4614      	mov	r4, r2
 8002488:	461d      	mov	r5, r3
 800248a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248e:	682b      	ldr	r3, [r5, #0]
 8002490:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8002492:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <MCAL_UART_Init+0x190>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a59      	ldr	r2, [pc, #356]	; (80025fc <MCAL_UART_Init+0x190>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	e026      	b.n	80024ee <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a57      	ldr	r2, [pc, #348]	; (8002600 <MCAL_UART_Init+0x194>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10f      	bne.n	80024c8 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <MCAL_UART_Init+0x18c>)
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	f103 0414 	add.w	r4, r3, #20
 80024b0:	4615      	mov	r5, r2
 80024b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <MCAL_UART_Init+0x190>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a4f      	ldr	r2, [pc, #316]	; (80025fc <MCAL_UART_Init+0x190>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	e012      	b.n	80024ee <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <MCAL_UART_Init+0x198>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10e      	bne.n	80024ee <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 80024d0:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <MCAL_UART_Init+0x18c>)
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80024d8:	4615      	mov	r5, r2
 80024da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024de:	682b      	ldr	r3, [r5, #0]
 80024e0:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <MCAL_UART_Init+0x190>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a45      	ldr	r2, [pc, #276]	; (80025fc <MCAL_UART_Init+0x190>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	7a12      	ldrb	r2, [r2, #8]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	7a52      	ldrb	r2, [r2, #9]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	7a92      	ldrb	r2, [r2, #10]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	7ad2      	ldrb	r2, [r2, #11]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	0119      	lsls	r1, r3, #4
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb2 f2f3 	udiv	r2, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002570:	2064      	movs	r0, #100	; 0x64
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <MCAL_UART_Init+0x19c>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	430b      	orrs	r3, r1
 8002588:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d026      	beq.n	80025e6 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	7b12      	ldrb	r2, [r2, #12]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <MCAL_UART_Init+0x188>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d106      	bne.n	80025bc <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 80025ba:	e014      	b.n	80025e6 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <MCAL_UART_Init+0x194>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d106      	bne.n	80025d2 <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	e009      	b.n	80025e6 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <MCAL_UART_Init+0x198>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d105      	bne.n	80025e6 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <MCAL_UART_Init+0x1a0>)
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bcb0      	pop	{r4, r5, r7}
 80025ee:	4770      	bx	lr
 80025f0:	02255100 	.word	0x02255100
 80025f4:	40013800 	.word	0x40013800
 80025f8:	20000138 	.word	0x20000138
 80025fc:	40021000 	.word	0x40021000
 8002600:	40004400 	.word	0x40004400
 8002604:	40004800 	.word	0x40004800
 8002608:	51eb851f 	.word	0x51eb851f
 800260c:	e000e104 	.word	0xe000e104

08002610 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8002624:	bf00      	nop
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f9      	beq.n	8002626 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff fef8 	bl	8002428 <which_UART>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
	}
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <MCAL_UART_SendString>:




void MCAL_UART_SendString(USART_Typedef * USARTx, uint8_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	71fb      	strb	r3, [r7, #7]
    uint16_t DefaultStop = '\r';
 800265c:	230d      	movs	r3, #13
 800265e:	82bb      	strh	r3, [r7, #20]

    uint8_t i = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8002664:	e00a      	b.n	800267c <MCAL_UART_SendString+0x2e>
    {
        MCAL_UART_SendData(USARTx, &(pTxBuffer[i]), PollingEn);
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff ffcd 	bl	8002610 <MCAL_UART_SendData>
        i++;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	3301      	adds	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <MCAL_UART_SendString+0x18>
    }
    MCAL_UART_SendData(USARTx, &DefaultStop, PollingEn);
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ffbd 	bl	8002610 <MCAL_UART_SendData>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <MCAL_UART_GPIO_SetPins+0xb8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d118      	bne.n	80026e2 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80026b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80026b6:	2306      	movs	r3, #6
 80026b8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4619      	mov	r1, r3
 80026c4:	4825      	ldr	r0, [pc, #148]	; (800275c <MCAL_UART_GPIO_SetPins+0xbc>)
 80026c6:	f7ff f90f 	bl	80018e8 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80026ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ce:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80026d0:	2308      	movs	r3, #8
 80026d2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4619      	mov	r1, r3
 80026da:	4820      	ldr	r0, [pc, #128]	; (800275c <MCAL_UART_GPIO_SetPins+0xbc>)
 80026dc:	f7ff f904 	bl	80018e8 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 80026e0:	e036      	b.n	8002750 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <MCAL_UART_GPIO_SetPins+0xc0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d116      	bne.n	8002718 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80026ea:	2304      	movs	r3, #4
 80026ec:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80026ee:	2306      	movs	r3, #6
 80026f0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4619      	mov	r1, r3
 80026fc:	4817      	ldr	r0, [pc, #92]	; (800275c <MCAL_UART_GPIO_SetPins+0xbc>)
 80026fe:	f7ff f8f3 	bl	80018e8 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8002702:	2308      	movs	r3, #8
 8002704:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002706:	2308      	movs	r3, #8
 8002708:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	4619      	mov	r1, r3
 8002710:	4812      	ldr	r0, [pc, #72]	; (800275c <MCAL_UART_GPIO_SetPins+0xbc>)
 8002712:	f7ff f8e9 	bl	80018e8 <MCAL_GPIO_Init>
}
 8002716:	e01b      	b.n	8002750 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <MCAL_UART_GPIO_SetPins+0xc4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d117      	bne.n	8002750 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8002720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002724:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002726:	2306      	movs	r3, #6
 8002728:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4619      	mov	r1, r3
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <MCAL_UART_GPIO_SetPins+0xc8>)
 8002736:	f7ff f8d7 	bl	80018e8 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800273a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800273e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002740:	2308      	movs	r3, #8
 8002742:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	4619      	mov	r1, r3
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <MCAL_UART_GPIO_SetPins+0xc8>)
 800274c:	f7ff f8cc 	bl	80018e8 <MCAL_GPIO_Init>
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40013800 	.word	0x40013800
 800275c:	40010800 	.word	0x40010800
 8002760:	40004400 	.word	0x40004400
 8002764:	40004800 	.word	0x40004800
 8002768:	40010c00 	.word	0x40010c00

0800276c <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <USART1_IRQHandler+0x10>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4798      	blx	r3
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000138 	.word	0x20000138

08002780 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <USART2_IRQHandler+0x10>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	4798      	blx	r3
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000138 	.word	0x20000138

08002794 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <USART3_IRQHandler+0x10>)
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	4798      	blx	r3
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000138 	.word	0x20000138

080027a8 <main>:
float Kp = 0.5; 	// Proportional gain
float Ki = 0.001; 	// Integral gain
float Kd = 0.05; 	// Derivative gain


int main(void) {
 80027a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);
 80027b0:	2148      	movs	r1, #72	; 0x48
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7ff fcca 	bl	800214c <MCAL_RCC_CLK_Init>

	RCC_GPIOC_CLK_EN();
 80027b8:	4bc3      	ldr	r3, [pc, #780]	; (8002ac8 <main+0x320>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4ac2      	ldr	r2, [pc, #776]	; (8002ac8 <main+0x320>)
 80027be:	f043 0310 	orr.w	r3, r3, #16
 80027c2:	6193      	str	r3, [r2, #24]
	RCC_USART1_CLK_EN();
 80027c4:	4bc0      	ldr	r3, [pc, #768]	; (8002ac8 <main+0x320>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4abf      	ldr	r2, [pc, #764]	; (8002ac8 <main+0x320>)
 80027ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ce:	6193      	str	r3, [r2, #24]

	RCC_GPIOB_CLK_EN();
 80027d0:	4bbd      	ldr	r3, [pc, #756]	; (8002ac8 <main+0x320>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4abc      	ldr	r2, [pc, #752]	; (8002ac8 <main+0x320>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80027dc:	4bba      	ldr	r3, [pc, #744]	; (8002ac8 <main+0x320>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4ab9      	ldr	r2, [pc, #740]	; (8002ac8 <main+0x320>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80027e8:	4bb7      	ldr	r3, [pc, #732]	; (8002ac8 <main+0x320>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4ab6      	ldr	r2, [pc, #728]	; (8002ac8 <main+0x320>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6193      	str	r3, [r2, #24]
	RCC_TIMER3_CLK_EN();
 80027f4:	4bb4      	ldr	r3, [pc, #720]	; (8002ac8 <main+0x320>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4ab3      	ldr	r2, [pc, #716]	; (8002ac8 <main+0x320>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	61d3      	str	r3, [r2, #28]
	RCC_I2C1_CLK_EN();
 8002800:	4bb1      	ldr	r3, [pc, #708]	; (8002ac8 <main+0x320>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4ab0      	ldr	r2, [pc, #704]	; (8002ac8 <main+0x320>)
 8002806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800280a:	61d3      	str	r3, [r2, #28]




	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_9600;
 800280c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002810:	60bb      	str	r3, [r7, #8]
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_NONE;
 8002816:	2300      	movs	r3, #0
 8002818:	743b      	strb	r3, [r7, #16]
	UART_Cfg.P_IRQ_CallBack = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
	UART_Cfg.Parity = UART_Parity_NONE;
 800281e:	2300      	movs	r3, #0
 8002820:	737b      	strb	r3, [r7, #13]
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 8002822:	2300      	movs	r3, #0
 8002824:	733b      	strb	r3, [r7, #12]
	UART_Cfg.StopBits = UART_StopBits_1;
 8002826:	2300      	movs	r3, #0
 8002828:	73bb      	strb	r3, [r7, #14]
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 800282a:	230c      	movs	r3, #12
 800282c:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &UART_Cfg);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	48a6      	ldr	r0, [pc, #664]	; (8002acc <main+0x324>)
 8002834:	f7ff fe1a 	bl	800246c <MCAL_UART_Init>
	// PA9 --> Tx
	// PA10 --> Rx
	MCAL_UART_GPIO_SetPins(USART1);
 8002838:	48a4      	ldr	r0, [pc, #656]	; (8002acc <main+0x324>)
 800283a:	f7ff ff31 	bl	80026a0 <MCAL_UART_GPIO_SetPins>

	TIMER3_Init(RCC_CLK_36M);
 800283e:	2024      	movs	r0, #36	; 0x24
 8002840:	f7ff fd68 	bl	8002314 <TIMER3_Init>


	MPU6050_Init();
 8002844:	f7fe fbfc 	bl	8001040 <MPU6050_Init>
	MPU6050_CalculateError();
 8002848:	f7fe fcb6 	bl	80011b8 <MPU6050_CalculateError>


	while (1) {

		// Init Acceleration
		Data = 0x00;
 800284c:	4ba0      	ldr	r3, [pc, #640]	; (8002ad0 <main+0x328>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		MPU6050_Write(PWR_MGMT_1, &Data, 1);
 8002852:	2201      	movs	r2, #1
 8002854:	499e      	ldr	r1, [pc, #632]	; (8002ad0 <main+0x328>)
 8002856:	206b      	movs	r0, #107	; 0x6b
 8002858:	f7fe fc48 	bl	80010ec <MPU6050_Write>

		Data = 0x05;
 800285c:	4b9c      	ldr	r3, [pc, #624]	; (8002ad0 <main+0x328>)
 800285e:	2205      	movs	r2, #5
 8002860:	701a      	strb	r2, [r3, #0]
		MPU6050_Write(CONFIG, &Data, 1);
 8002862:	2201      	movs	r2, #1
 8002864:	499a      	ldr	r1, [pc, #616]	; (8002ad0 <main+0x328>)
 8002866:	201a      	movs	r0, #26
 8002868:	f7fe fc40 	bl	80010ec <MPU6050_Write>

		Data = 0x10;
 800286c:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <main+0x328>)
 800286e:	2210      	movs	r2, #16
 8002870:	701a      	strb	r2, [r3, #0]
		MPU6050_Write(ACCEL_CONFIG, &Data, 1);
 8002872:	2201      	movs	r2, #1
 8002874:	4996      	ldr	r1, [pc, #600]	; (8002ad0 <main+0x328>)
 8002876:	201c      	movs	r0, #28
 8002878:	f7fe fc38 	bl	80010ec <MPU6050_Write>


		// Acceleration Measurements
		// 2 ±8g 4096 LSB/g
		// Read 6 Registers from ACCEL_XOUT_H till ACCEL_ZOUT_L
		MPU6050_Read(ACCEL_XOUT_H, dataFromMPU6050, 6);
 800287c:	2206      	movs	r2, #6
 800287e:	4995      	ldr	r1, [pc, #596]	; (8002ad4 <main+0x32c>)
 8002880:	203b      	movs	r0, #59	; 0x3b
 8002882:	f7fe fc6d 	bl	8001160 <MPU6050_Read>
		Accel_X_RAW = ((int16_t)((dataFromMPU6050[0] << 8) | (dataFromMPU6050[1]))) / 4096.0;
 8002886:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <main+0x32c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b91      	ldr	r3, [pc, #580]	; (8002ad4 <main+0x32c>)
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fdbb 	bl	8000414 <__aeabi_i2d>
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <main+0x330>)
 80028a4:	f7fd ff4a 	bl	800073c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f8f2 	bl	8000a98 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4a89      	ldr	r2, [pc, #548]	; (8002adc <main+0x334>)
 80028b8:	6013      	str	r3, [r2, #0]
		Accel_Y_RAW = ((int16_t)((dataFromMPU6050[2] << 8) | (dataFromMPU6050[3]))) / 4096.0;
 80028ba:	4b86      	ldr	r3, [pc, #536]	; (8002ad4 <main+0x32c>)
 80028bc:	789b      	ldrb	r3, [r3, #2]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <main+0x32c>)
 80028c4:	78db      	ldrb	r3, [r3, #3]
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fda1 	bl	8000414 <__aeabi_i2d>
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	4b80      	ldr	r3, [pc, #512]	; (8002ad8 <main+0x330>)
 80028d8:	f7fd ff30 	bl	800073c <__aeabi_ddiv>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe f8d8 	bl	8000a98 <__aeabi_d2f>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a7d      	ldr	r2, [pc, #500]	; (8002ae0 <main+0x338>)
 80028ec:	6013      	str	r3, [r2, #0]
		Accel_Z_RAW = ((int16_t)((dataFromMPU6050[4] << 8) | (dataFromMPU6050[5]))) / 4096.0;
 80028ee:	4b79      	ldr	r3, [pc, #484]	; (8002ad4 <main+0x32c>)
 80028f0:	791b      	ldrb	r3, [r3, #4]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <main+0x32c>)
 80028f8:	795b      	ldrb	r3, [r3, #5]
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b21b      	sxth	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fd87 	bl	8000414 <__aeabi_i2d>
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <main+0x330>)
 800290c:	f7fd ff16 	bl	800073c <__aeabi_ddiv>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f8be 	bl	8000a98 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <main+0x33c>)
 8002920:	6013      	str	r3, [r2, #0]

		accAngleX = (atan(Accel_Y_RAW / sqrt(pow(Accel_X_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) - 0.58; // AccErrorX ~(0.58)
 8002922:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <main+0x338>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fd86 	bl	8000438 <__aeabi_f2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <main+0x334>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fd7f 	bl	8000438 <__aeabi_f2d>
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002942:	f000 ff87 	bl	8003854 <pow>
 8002946:	4680      	mov	r8, r0
 8002948:	4689      	mov	r9, r1
 800294a:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <main+0x33c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd72 	bl	8000438 <__aeabi_f2d>
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800295c:	f000 ff7a 	bl	8003854 <pow>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4640      	mov	r0, r8
 8002966:	4649      	mov	r1, r9
 8002968:	f7fd fc08 	bl	800017c <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f000 ffd6 	bl	8003924 <sqrt>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fedc 	bl	800073c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f000 fff0 	bl	8003970 <atan>
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <main+0x340>)
 8002996:	f7fd fda7 	bl	80004e8 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	a343      	add	r3, pc, #268	; (adr r3, 8002ab0 <main+0x308>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fec8 	bl	800073c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	a340      	add	r3, pc, #256	; (adr r3, 8002ab8 <main+0x310>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f7fd fbdd 	bl	8000178 <__aeabi_dsub>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fe f867 	bl	8000a98 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <main+0x344>)
 80029ce:	6013      	str	r3, [r2, #0]
		accAngleY = (atan(-1 * Accel_X_RAW / sqrt(pow(Accel_Y_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) + 1.58; // AccErrorY ~(-1.58)
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <main+0x334>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fd2d 	bl	8000438 <__aeabi_f2d>
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <main+0x338>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd26 	bl	8000438 <__aeabi_f2d>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f4:	f000 ff2e 	bl	8003854 <pow>
 80029f8:	4680      	mov	r8, r0
 80029fa:	4689      	mov	r9, r1
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <main+0x33c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd19 	bl	8000438 <__aeabi_f2d>
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a0e:	f000 ff21 	bl	8003854 <pow>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4640      	mov	r0, r8
 8002a18:	4649      	mov	r1, r9
 8002a1a:	f7fd fbaf 	bl	800017c <__adddf3>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f000 ff7d 	bl	8003924 <sqrt>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fd fe83 	bl	800073c <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f000 ff97 	bl	8003970 <atan>
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <main+0x340>)
 8002a48:	f7fd fd4e 	bl	80004e8 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	a316      	add	r3, pc, #88	; (adr r3, 8002ab0 <main+0x308>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fe6f 	bl	800073c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	a316      	add	r3, pc, #88	; (adr r3, 8002ac0 <main+0x318>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fb86 	bl	800017c <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f7fe f80e 	bl	8000a98 <__aeabi_d2f>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <main+0x348>)
 8002a80:	6013      	str	r3, [r2, #0]

		// Init Gyroscope
		Data = 0x08;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <main+0x328>)
 8002a84:	2208      	movs	r2, #8
 8002a86:	701a      	strb	r2, [r3, #0]
		MPU6050_Write(GYRO_CONFIG, &Data, 1);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4911      	ldr	r1, [pc, #68]	; (8002ad0 <main+0x328>)
 8002a8c:	201b      	movs	r0, #27
 8002a8e:	f7fe fb2d 	bl	80010ec <MPU6050_Write>


		// Gyroscope Measurements
		MPU6050_Read(GYRO_XOUT_H, dataFromMPU6050, 6);
 8002a92:	2206      	movs	r2, #6
 8002a94:	490f      	ldr	r1, [pc, #60]	; (8002ad4 <main+0x32c>)
 8002a96:	2043      	movs	r0, #67	; 0x43
 8002a98:	f7fe fb62 	bl	8001160 <MPU6050_Read>
		Gyro_X_RAW = (int16_t)(dataFromMPU6050[0] << 8 | dataFromMPU6050 [1]);
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <main+0x32c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <main+0x32c>)
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	e021      	b.n	8002af4 <main+0x34c>
 8002ab0:	51eb851f 	.word	0x51eb851f
 8002ab4:	40091eb8 	.word	0x40091eb8
 8002ab8:	28f5c28f 	.word	0x28f5c28f
 8002abc:	3fe28f5c 	.word	0x3fe28f5c
 8002ac0:	147ae148 	.word	0x147ae148
 8002ac4:	3ff947ae 	.word	0x3ff947ae
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	200001b8 	.word	0x200001b8
 8002ad4:	20000174 	.word	0x20000174
 8002ad8:	40b00000 	.word	0x40b00000
 8002adc:	2000017c 	.word	0x2000017c
 8002ae0:	20000180 	.word	0x20000180
 8002ae4:	20000184 	.word	0x20000184
 8002ae8:	40668000 	.word	0x40668000
 8002aec:	2000019c 	.word	0x2000019c
 8002af0:	200001a0 	.word	0x200001a0
 8002af4:	4bb2      	ldr	r3, [pc, #712]	; (8002dc0 <main+0x618>)
 8002af6:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(dataFromMPU6050[2] << 8 | dataFromMPU6050 [3]);
 8002af8:	4bb2      	ldr	r3, [pc, #712]	; (8002dc4 <main+0x61c>)
 8002afa:	789b      	ldrb	r3, [r3, #2]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b21a      	sxth	r2, r3
 8002b00:	4bb0      	ldr	r3, [pc, #704]	; (8002dc4 <main+0x61c>)
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	4baf      	ldr	r3, [pc, #700]	; (8002dc8 <main+0x620>)
 8002b0c:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(dataFromMPU6050[4] << 8 | dataFromMPU6050 [5]);
 8002b0e:	4bad      	ldr	r3, [pc, #692]	; (8002dc4 <main+0x61c>)
 8002b10:	791b      	ldrb	r3, [r3, #4]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <main+0x61c>)
 8002b18:	795b      	ldrb	r3, [r3, #5]
 8002b1a:	b21b      	sxth	r3, r3
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	4baa      	ldr	r3, [pc, #680]	; (8002dcc <main+0x624>)
 8002b22:	801a      	strh	r2, [r3, #0]
		// Correct the outputs with the calculated error values
		GyroX = (Gyro_X_RAW / 65.5) - GyroErrorX; // GyroErrorX ~(-0.56)
 8002b24:	4ba6      	ldr	r3, [pc, #664]	; (8002dc0 <main+0x618>)
 8002b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fc72 	bl	8000414 <__aeabi_i2d>
 8002b30:	a39d      	add	r3, pc, #628	; (adr r3, 8002da8 <main+0x600>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fe01 	bl	800073c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461d      	mov	r5, r3
 8002b42:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <main+0x628>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc64 	bl	8000414 <__aeabi_i2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fb10 	bl	8000178 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fd ff9a 	bl	8000a98 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a9b      	ldr	r2, [pc, #620]	; (8002dd4 <main+0x62c>)
 8002b68:	6013      	str	r3, [r2, #0]
		GyroY = (Gyro_Y_RAW / 65.5) - GyroErrorY; // GyroErrorY ~(2)
 8002b6a:	4b97      	ldr	r3, [pc, #604]	; (8002dc8 <main+0x620>)
 8002b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc4f 	bl	8000414 <__aeabi_i2d>
 8002b76:	a38c      	add	r3, pc, #560	; (adr r3, 8002da8 <main+0x600>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fdde 	bl	800073c <__aeabi_ddiv>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <main+0x630>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fc41 	bl	8000414 <__aeabi_i2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd faed 	bl	8000178 <__aeabi_dsub>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ff77 	bl	8000a98 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a8b      	ldr	r2, [pc, #556]	; (8002ddc <main+0x634>)
 8002bae:	6013      	str	r3, [r2, #0]
		GyroZ = (Gyro_Z_RAW / 65.5) - GyroErrorZ; // GyroErrorZ ~ (-0.8)
 8002bb0:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <main+0x624>)
 8002bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fc2c 	bl	8000414 <__aeabi_i2d>
 8002bbc:	a37a      	add	r3, pc, #488	; (adr r3, 8002da8 <main+0x600>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fdbb 	bl	800073c <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4614      	mov	r4, r2
 8002bcc:	461d      	mov	r5, r3
 8002bce:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <main+0x638>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc1e 	bl	8000414 <__aeabi_i2d>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd faca 	bl	8000178 <__aeabi_dsub>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd ff54 	bl	8000a98 <__aeabi_d2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <main+0x63c>)
 8002bf4:	6013      	str	r3, [r2, #0]

		// Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by seconds (s) to get the angle in degrees
		// Calculate elapsed time with seconds
		elapsedTime = Get_TIMER3_Counter();
 8002bf6:	f7ff fbb7 	bl	8002368 <Get_TIMER3_Counter>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f851 	bl	8000ca4 <__aeabi_ui2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4a78      	ldr	r2, [pc, #480]	; (8002de8 <main+0x640>)
 8002c06:	6013      	str	r3, [r2, #0]
		elapsedTime /= 1000000;
 8002c08:	4b77      	ldr	r3, [pc, #476]	; (8002de8 <main+0x640>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4977      	ldr	r1, [pc, #476]	; (8002dec <main+0x644>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f954 	bl	8000ebc <__aeabi_fdiv>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <main+0x640>)
 8002c1a:	601a      	str	r2, [r3, #0]

		TIMER3_Stop();
 8002c1c:	f7ff fbae 	bl	800237c <TIMER3_Stop>

		gyroAngleX = gyroAngleX + (GyroX * elapsedTime);
 8002c20:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <main+0x62c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a70      	ldr	r2, [pc, #448]	; (8002de8 <main+0x640>)
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f892 	bl	8000d54 <__aeabi_fmul>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <main+0x648>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7fd ff82 	bl	8000b44 <__addsf3>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <main+0x648>)
 8002c46:	601a      	str	r2, [r3, #0]
		gyroAngleY = gyroAngleY + (GyroY * elapsedTime);
 8002c48:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <main+0x634>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a66      	ldr	r2, [pc, #408]	; (8002de8 <main+0x640>)
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f87e 	bl	8000d54 <__aeabi_fmul>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <main+0x64c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7fd ff6e 	bl	8000b44 <__addsf3>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <main+0x64c>)
 8002c6e:	601a      	str	r2, [r3, #0]
		yaw = yaw + (GyroZ * elapsedTime);
 8002c70:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <main+0x63c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <main+0x640>)
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f86a 	bl	8000d54 <__aeabi_fmul>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <main+0x650>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7fd ff5a 	bl	8000b44 <__addsf3>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <main+0x650>)
 8002c96:	601a      	str	r2, [r3, #0]


		TIMER3_Start();
 8002c98:	f7ff fb7e 	bl	8002398 <TIMER3_Start>


		roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <main+0x648>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fbc9 	bl	8000438 <__aeabi_f2d>
 8002ca6:	a342      	add	r3, pc, #264	; (adr r3, 8002db0 <main+0x608>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fc1c 	bl	80004e8 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <main+0x654>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbbb 	bl	8000438 <__aeabi_f2d>
 8002cc2:	a33d      	add	r3, pc, #244	; (adr r3, 8002db8 <main+0x610>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fc0e 	bl	80004e8 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fa52 	bl	800017c <__adddf3>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd feda 	bl	8000a98 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <main+0x658>)
 8002ce8:	6013      	str	r3, [r2, #0]
		pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <main+0x64c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fba2 	bl	8000438 <__aeabi_f2d>
 8002cf4:	a32e      	add	r3, pc, #184	; (adr r3, 8002db0 <main+0x608>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd fbf5 	bl	80004e8 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4614      	mov	r4, r2
 8002d04:	461d      	mov	r5, r3
 8002d06:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <main+0x65c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fb94 	bl	8000438 <__aeabi_f2d>
 8002d10:	a329      	add	r3, pc, #164	; (adr r3, 8002db8 <main+0x610>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fbe7 	bl	80004e8 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fa2b 	bl	800017c <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd feb3 	bl	8000a98 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <main+0x660>)
 8002d36:	6013      	str	r3, [r2, #0]


		MCAL_UART_SendString(USART1, "Roll: ", Enable);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4934      	ldr	r1, [pc, #208]	; (8002e0c <main+0x664>)
 8002d3c:	4834      	ldr	r0, [pc, #208]	; (8002e10 <main+0x668>)
 8002d3e:	f7ff fc86 	bl	800264e <MCAL_UART_SendString>
		sprintf(buffer, "%d\n", (int)roll);
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <main+0x658>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f954 	bl	8000ff4 <__aeabi_f2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4930      	ldr	r1, [pc, #192]	; (8002e14 <main+0x66c>)
 8002d52:	4831      	ldr	r0, [pc, #196]	; (8002e18 <main+0x670>)
 8002d54:	f000 f8d4 	bl	8002f00 <siprintf>
		MCAL_UART_SendString(USART1, buffer, Enable);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	492f      	ldr	r1, [pc, #188]	; (8002e18 <main+0x670>)
 8002d5c:	482c      	ldr	r0, [pc, #176]	; (8002e10 <main+0x668>)
 8002d5e:	f7ff fc76 	bl	800264e <MCAL_UART_SendString>

		MCAL_UART_SendString(USART1, "Pitch: ", Enable);
 8002d62:	2201      	movs	r2, #1
 8002d64:	492d      	ldr	r1, [pc, #180]	; (8002e1c <main+0x674>)
 8002d66:	482a      	ldr	r0, [pc, #168]	; (8002e10 <main+0x668>)
 8002d68:	f7ff fc71 	bl	800264e <MCAL_UART_SendString>
		sprintf(buffer, "%d\n", (int)pitch);
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <main+0x660>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f93f 	bl	8000ff4 <__aeabi_f2iz>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4926      	ldr	r1, [pc, #152]	; (8002e14 <main+0x66c>)
 8002d7c:	4826      	ldr	r0, [pc, #152]	; (8002e18 <main+0x670>)
 8002d7e:	f000 f8bf 	bl	8002f00 <siprintf>
		MCAL_UART_SendString(USART1, buffer, Enable);
 8002d82:	2201      	movs	r2, #1
 8002d84:	4924      	ldr	r1, [pc, #144]	; (8002e18 <main+0x670>)
 8002d86:	4822      	ldr	r0, [pc, #136]	; (8002e10 <main+0x668>)
 8002d88:	f7ff fc61 	bl	800264e <MCAL_UART_SendString>

		MCAL_UART_SendString(USART1, "Yaw: ", Enable);
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4924      	ldr	r1, [pc, #144]	; (8002e20 <main+0x678>)
 8002d90:	481f      	ldr	r0, [pc, #124]	; (8002e10 <main+0x668>)
 8002d92:	f7ff fc5c 	bl	800264e <MCAL_UART_SendString>
		sprintf(buffer, "%d\n", (int)roll);
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <main+0x658>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f92a 	bl	8000ff4 <__aeabi_f2iz>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	491b      	ldr	r1, [pc, #108]	; (8002e14 <main+0x66c>)
 8002da6:	e03d      	b.n	8002e24 <main+0x67c>
 8002da8:	00000000 	.word	0x00000000
 8002dac:	40506000 	.word	0x40506000
 8002db0:	eb851eb8 	.word	0xeb851eb8
 8002db4:	3feeb851 	.word	0x3feeb851
 8002db8:	47ae147b 	.word	0x47ae147b
 8002dbc:	3fa47ae1 	.word	0x3fa47ae1
 8002dc0:	20000188 	.word	0x20000188
 8002dc4:	20000174 	.word	0x20000174
 8002dc8:	2000018a 	.word	0x2000018a
 8002dcc:	2000018c 	.word	0x2000018c
 8002dd0:	20000090 	.word	0x20000090
 8002dd4:	20000190 	.word	0x20000190
 8002dd8:	20000094 	.word	0x20000094
 8002ddc:	20000194 	.word	0x20000194
 8002de0:	20000098 	.word	0x20000098
 8002de4:	20000198 	.word	0x20000198
 8002de8:	20000000 	.word	0x20000000
 8002dec:	49742400 	.word	0x49742400
 8002df0:	200001a4 	.word	0x200001a4
 8002df4:	200001a8 	.word	0x200001a8
 8002df8:	200001ac 	.word	0x200001ac
 8002dfc:	2000019c 	.word	0x2000019c
 8002e00:	200001b0 	.word	0x200001b0
 8002e04:	200001a0 	.word	0x200001a0
 8002e08:	200001b4 	.word	0x200001b4
 8002e0c:	080049e0 	.word	0x080049e0
 8002e10:	40013800 	.word	0x40013800
 8002e14:	080049e8 	.word	0x080049e8
 8002e18:	200001bc 	.word	0x200001bc
 8002e1c:	080049ec 	.word	0x080049ec
 8002e20:	080049f4 	.word	0x080049f4
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <main+0x690>)
 8002e26:	f000 f86b 	bl	8002f00 <siprintf>
		MCAL_UART_SendString(USART1, buffer, Enable);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4902      	ldr	r1, [pc, #8]	; (8002e38 <main+0x690>)
 8002e2e:	4803      	ldr	r0, [pc, #12]	; (8002e3c <main+0x694>)
 8002e30:	f7ff fc0d 	bl	800264e <MCAL_UART_SendString>
	while (1) {
 8002e34:	e50a      	b.n	800284c <main+0xa4>
 8002e36:	bf00      	nop
 8002e38:	200001bc 	.word	0x200001bc
 8002e3c:	40013800 	.word	0x40013800

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f000 f866 	bl	8002f40 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20005000 	.word	0x20005000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	200001c4 	.word	0x200001c4
 8002ea8:	20000310 	.word	0x20000310

08002eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <LoopForever+0xe>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <LoopForever+0x16>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eda:	f000 f837 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ede:	f7ff fc63 	bl	80027a8 <main>

08002ee2 <LoopForever>:

LoopForever:
  b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   r0, =_estack
 8002ee4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002ef0:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 8002ef4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002ef8:	20000310 	.word	0x20000310

08002efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>
	...

08002f00 <siprintf>:
 8002f00:	b40e      	push	{r1, r2, r3}
 8002f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f06:	b500      	push	{lr}
 8002f08:	b09c      	sub	sp, #112	; 0x70
 8002f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f0c:	9002      	str	r0, [sp, #8]
 8002f0e:	9006      	str	r0, [sp, #24]
 8002f10:	9107      	str	r1, [sp, #28]
 8002f12:	9104      	str	r1, [sp, #16]
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <siprintf+0x38>)
 8002f16:	4909      	ldr	r1, [pc, #36]	; (8002f3c <siprintf+0x3c>)
 8002f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f1c:	9105      	str	r1, [sp, #20]
 8002f1e:	6800      	ldr	r0, [r0, #0]
 8002f20:	a902      	add	r1, sp, #8
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	f000 f986 	bl	8003234 <_svfiprintf_r>
 8002f28:	2200      	movs	r2, #0
 8002f2a:	9b02      	ldr	r3, [sp, #8]
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	b01c      	add	sp, #112	; 0x70
 8002f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f34:	b003      	add	sp, #12
 8002f36:	4770      	bx	lr
 8002f38:	20000050 	.word	0x20000050
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <__errno>:
 8002f40:	4b01      	ldr	r3, [pc, #4]	; (8002f48 <__errno+0x8>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000050 	.word	0x20000050

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	2600      	movs	r6, #0
 8002f50:	4d0c      	ldr	r5, [pc, #48]	; (8002f84 <__libc_init_array+0x38>)
 8002f52:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	f001 fd32 	bl	80049c4 <_init>
 8002f60:	2600      	movs	r6, #0
 8002f62:	4d0a      	ldr	r5, [pc, #40]	; (8002f8c <__libc_init_array+0x40>)
 8002f64:	4c0a      	ldr	r4, [pc, #40]	; (8002f90 <__libc_init_array+0x44>)
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	08004aa0 	.word	0x08004aa0
 8002f88:	08004aa0 	.word	0x08004aa0
 8002f8c:	08004aa0 	.word	0x08004aa0
 8002f90:	08004aa4 	.word	0x08004aa4

08002f94 <__retarget_lock_acquire_recursive>:
 8002f94:	4770      	bx	lr

08002f96 <__retarget_lock_release_recursive>:
 8002f96:	4770      	bx	lr

08002f98 <_free_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	2900      	cmp	r1, #0
 8002f9e:	d040      	beq.n	8003022 <_free_r+0x8a>
 8002fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa4:	1f0c      	subs	r4, r1, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfb8      	it	lt
 8002faa:	18e4      	addlt	r4, r4, r3
 8002fac:	f000 f8dc 	bl	8003168 <__malloc_lock>
 8002fb0:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <_free_r+0x8c>)
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	b933      	cbnz	r3, 8002fc4 <_free_r+0x2c>
 8002fb6:	6063      	str	r3, [r4, #4]
 8002fb8:	6014      	str	r4, [r2, #0]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc0:	f000 b8d8 	b.w	8003174 <__malloc_unlock>
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d908      	bls.n	8002fda <_free_r+0x42>
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	1821      	adds	r1, r4, r0
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	bf01      	itttt	eq
 8002fd0:	6819      	ldreq	r1, [r3, #0]
 8002fd2:	685b      	ldreq	r3, [r3, #4]
 8002fd4:	1809      	addeq	r1, r1, r0
 8002fd6:	6021      	streq	r1, [r4, #0]
 8002fd8:	e7ed      	b.n	8002fb6 <_free_r+0x1e>
 8002fda:	461a      	mov	r2, r3
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b10b      	cbz	r3, 8002fe4 <_free_r+0x4c>
 8002fe0:	42a3      	cmp	r3, r4
 8002fe2:	d9fa      	bls.n	8002fda <_free_r+0x42>
 8002fe4:	6811      	ldr	r1, [r2, #0]
 8002fe6:	1850      	adds	r0, r2, r1
 8002fe8:	42a0      	cmp	r0, r4
 8002fea:	d10b      	bne.n	8003004 <_free_r+0x6c>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	4401      	add	r1, r0
 8002ff0:	1850      	adds	r0, r2, r1
 8002ff2:	4283      	cmp	r3, r0
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	d1e0      	bne.n	8002fba <_free_r+0x22>
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4408      	add	r0, r1
 8002ffe:	6010      	str	r0, [r2, #0]
 8003000:	6053      	str	r3, [r2, #4]
 8003002:	e7da      	b.n	8002fba <_free_r+0x22>
 8003004:	d902      	bls.n	800300c <_free_r+0x74>
 8003006:	230c      	movs	r3, #12
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	e7d6      	b.n	8002fba <_free_r+0x22>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	1821      	adds	r1, r4, r0
 8003010:	428b      	cmp	r3, r1
 8003012:	bf01      	itttt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	1809      	addeq	r1, r1, r0
 800301a:	6021      	streq	r1, [r4, #0]
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	6054      	str	r4, [r2, #4]
 8003020:	e7cb      	b.n	8002fba <_free_r+0x22>
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000308 	.word	0x20000308

08003028 <sbrk_aligned>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4e0e      	ldr	r6, [pc, #56]	; (8003064 <sbrk_aligned+0x3c>)
 800302c:	460c      	mov	r4, r1
 800302e:	6831      	ldr	r1, [r6, #0]
 8003030:	4605      	mov	r5, r0
 8003032:	b911      	cbnz	r1, 800303a <sbrk_aligned+0x12>
 8003034:	f000 fbaa 	bl	800378c <_sbrk_r>
 8003038:	6030      	str	r0, [r6, #0]
 800303a:	4621      	mov	r1, r4
 800303c:	4628      	mov	r0, r5
 800303e:	f000 fba5 	bl	800378c <_sbrk_r>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	d00a      	beq.n	800305c <sbrk_aligned+0x34>
 8003046:	1cc4      	adds	r4, r0, #3
 8003048:	f024 0403 	bic.w	r4, r4, #3
 800304c:	42a0      	cmp	r0, r4
 800304e:	d007      	beq.n	8003060 <sbrk_aligned+0x38>
 8003050:	1a21      	subs	r1, r4, r0
 8003052:	4628      	mov	r0, r5
 8003054:	f000 fb9a 	bl	800378c <_sbrk_r>
 8003058:	3001      	adds	r0, #1
 800305a:	d101      	bne.n	8003060 <sbrk_aligned+0x38>
 800305c:	f04f 34ff 	mov.w	r4, #4294967295
 8003060:	4620      	mov	r0, r4
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	2000030c 	.word	0x2000030c

08003068 <_malloc_r>:
 8003068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800306c:	1ccd      	adds	r5, r1, #3
 800306e:	f025 0503 	bic.w	r5, r5, #3
 8003072:	3508      	adds	r5, #8
 8003074:	2d0c      	cmp	r5, #12
 8003076:	bf38      	it	cc
 8003078:	250c      	movcc	r5, #12
 800307a:	2d00      	cmp	r5, #0
 800307c:	4607      	mov	r7, r0
 800307e:	db01      	blt.n	8003084 <_malloc_r+0x1c>
 8003080:	42a9      	cmp	r1, r5
 8003082:	d905      	bls.n	8003090 <_malloc_r+0x28>
 8003084:	230c      	movs	r3, #12
 8003086:	2600      	movs	r6, #0
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4630      	mov	r0, r6
 800308c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003164 <_malloc_r+0xfc>
 8003094:	f000 f868 	bl	8003168 <__malloc_lock>
 8003098:	f8d8 3000 	ldr.w	r3, [r8]
 800309c:	461c      	mov	r4, r3
 800309e:	bb5c      	cbnz	r4, 80030f8 <_malloc_r+0x90>
 80030a0:	4629      	mov	r1, r5
 80030a2:	4638      	mov	r0, r7
 80030a4:	f7ff ffc0 	bl	8003028 <sbrk_aligned>
 80030a8:	1c43      	adds	r3, r0, #1
 80030aa:	4604      	mov	r4, r0
 80030ac:	d155      	bne.n	800315a <_malloc_r+0xf2>
 80030ae:	f8d8 4000 	ldr.w	r4, [r8]
 80030b2:	4626      	mov	r6, r4
 80030b4:	2e00      	cmp	r6, #0
 80030b6:	d145      	bne.n	8003144 <_malloc_r+0xdc>
 80030b8:	2c00      	cmp	r4, #0
 80030ba:	d048      	beq.n	800314e <_malloc_r+0xe6>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	4631      	mov	r1, r6
 80030c0:	4638      	mov	r0, r7
 80030c2:	eb04 0903 	add.w	r9, r4, r3
 80030c6:	f000 fb61 	bl	800378c <_sbrk_r>
 80030ca:	4581      	cmp	r9, r0
 80030cc:	d13f      	bne.n	800314e <_malloc_r+0xe6>
 80030ce:	6821      	ldr	r1, [r4, #0]
 80030d0:	4638      	mov	r0, r7
 80030d2:	1a6d      	subs	r5, r5, r1
 80030d4:	4629      	mov	r1, r5
 80030d6:	f7ff ffa7 	bl	8003028 <sbrk_aligned>
 80030da:	3001      	adds	r0, #1
 80030dc:	d037      	beq.n	800314e <_malloc_r+0xe6>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	442b      	add	r3, r5
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	f8d8 3000 	ldr.w	r3, [r8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d038      	beq.n	800315e <_malloc_r+0xf6>
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	42a2      	cmp	r2, r4
 80030f0:	d12b      	bne.n	800314a <_malloc_r+0xe2>
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e00f      	b.n	8003118 <_malloc_r+0xb0>
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	1b52      	subs	r2, r2, r5
 80030fc:	d41f      	bmi.n	800313e <_malloc_r+0xd6>
 80030fe:	2a0b      	cmp	r2, #11
 8003100:	d917      	bls.n	8003132 <_malloc_r+0xca>
 8003102:	1961      	adds	r1, r4, r5
 8003104:	42a3      	cmp	r3, r4
 8003106:	6025      	str	r5, [r4, #0]
 8003108:	bf18      	it	ne
 800310a:	6059      	strne	r1, [r3, #4]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	bf08      	it	eq
 8003110:	f8c8 1000 	streq.w	r1, [r8]
 8003114:	5162      	str	r2, [r4, r5]
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	4638      	mov	r0, r7
 800311a:	f104 060b 	add.w	r6, r4, #11
 800311e:	f000 f829 	bl	8003174 <__malloc_unlock>
 8003122:	f026 0607 	bic.w	r6, r6, #7
 8003126:	1d23      	adds	r3, r4, #4
 8003128:	1af2      	subs	r2, r6, r3
 800312a:	d0ae      	beq.n	800308a <_malloc_r+0x22>
 800312c:	1b9b      	subs	r3, r3, r6
 800312e:	50a3      	str	r3, [r4, r2]
 8003130:	e7ab      	b.n	800308a <_malloc_r+0x22>
 8003132:	42a3      	cmp	r3, r4
 8003134:	6862      	ldr	r2, [r4, #4]
 8003136:	d1dd      	bne.n	80030f4 <_malloc_r+0x8c>
 8003138:	f8c8 2000 	str.w	r2, [r8]
 800313c:	e7ec      	b.n	8003118 <_malloc_r+0xb0>
 800313e:	4623      	mov	r3, r4
 8003140:	6864      	ldr	r4, [r4, #4]
 8003142:	e7ac      	b.n	800309e <_malloc_r+0x36>
 8003144:	4634      	mov	r4, r6
 8003146:	6876      	ldr	r6, [r6, #4]
 8003148:	e7b4      	b.n	80030b4 <_malloc_r+0x4c>
 800314a:	4613      	mov	r3, r2
 800314c:	e7cc      	b.n	80030e8 <_malloc_r+0x80>
 800314e:	230c      	movs	r3, #12
 8003150:	4638      	mov	r0, r7
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	f000 f80e 	bl	8003174 <__malloc_unlock>
 8003158:	e797      	b.n	800308a <_malloc_r+0x22>
 800315a:	6025      	str	r5, [r4, #0]
 800315c:	e7dc      	b.n	8003118 <_malloc_r+0xb0>
 800315e:	605b      	str	r3, [r3, #4]
 8003160:	deff      	udf	#255	; 0xff
 8003162:	bf00      	nop
 8003164:	20000308 	.word	0x20000308

08003168 <__malloc_lock>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__malloc_lock+0x8>)
 800316a:	f7ff bf13 	b.w	8002f94 <__retarget_lock_acquire_recursive>
 800316e:	bf00      	nop
 8003170:	20000304 	.word	0x20000304

08003174 <__malloc_unlock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_unlock+0x8>)
 8003176:	f7ff bf0e 	b.w	8002f96 <__retarget_lock_release_recursive>
 800317a:	bf00      	nop
 800317c:	20000304 	.word	0x20000304

08003180 <__ssputs_r>:
 8003180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003184:	461f      	mov	r7, r3
 8003186:	688e      	ldr	r6, [r1, #8]
 8003188:	4682      	mov	sl, r0
 800318a:	42be      	cmp	r6, r7
 800318c:	460c      	mov	r4, r1
 800318e:	4690      	mov	r8, r2
 8003190:	680b      	ldr	r3, [r1, #0]
 8003192:	d82c      	bhi.n	80031ee <__ssputs_r+0x6e>
 8003194:	898a      	ldrh	r2, [r1, #12]
 8003196:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800319a:	d026      	beq.n	80031ea <__ssputs_r+0x6a>
 800319c:	6965      	ldr	r5, [r4, #20]
 800319e:	6909      	ldr	r1, [r1, #16]
 80031a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031a4:	eba3 0901 	sub.w	r9, r3, r1
 80031a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031ac:	1c7b      	adds	r3, r7, #1
 80031ae:	444b      	add	r3, r9
 80031b0:	106d      	asrs	r5, r5, #1
 80031b2:	429d      	cmp	r5, r3
 80031b4:	bf38      	it	cc
 80031b6:	461d      	movcc	r5, r3
 80031b8:	0553      	lsls	r3, r2, #21
 80031ba:	d527      	bpl.n	800320c <__ssputs_r+0x8c>
 80031bc:	4629      	mov	r1, r5
 80031be:	f7ff ff53 	bl	8003068 <_malloc_r>
 80031c2:	4606      	mov	r6, r0
 80031c4:	b360      	cbz	r0, 8003220 <__ssputs_r+0xa0>
 80031c6:	464a      	mov	r2, r9
 80031c8:	6921      	ldr	r1, [r4, #16]
 80031ca:	f000 fafd 	bl	80037c8 <memcpy>
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d8:	81a3      	strh	r3, [r4, #12]
 80031da:	6126      	str	r6, [r4, #16]
 80031dc:	444e      	add	r6, r9
 80031de:	6026      	str	r6, [r4, #0]
 80031e0:	463e      	mov	r6, r7
 80031e2:	6165      	str	r5, [r4, #20]
 80031e4:	eba5 0509 	sub.w	r5, r5, r9
 80031e8:	60a5      	str	r5, [r4, #8]
 80031ea:	42be      	cmp	r6, r7
 80031ec:	d900      	bls.n	80031f0 <__ssputs_r+0x70>
 80031ee:	463e      	mov	r6, r7
 80031f0:	4632      	mov	r2, r6
 80031f2:	4641      	mov	r1, r8
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	f000 faaf 	bl	8003758 <memmove>
 80031fa:	2000      	movs	r0, #0
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	1b9b      	subs	r3, r3, r6
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	4433      	add	r3, r6
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320c:	462a      	mov	r2, r5
 800320e:	f000 fae9 	bl	80037e4 <_realloc_r>
 8003212:	4606      	mov	r6, r0
 8003214:	2800      	cmp	r0, #0
 8003216:	d1e0      	bne.n	80031da <__ssputs_r+0x5a>
 8003218:	4650      	mov	r0, sl
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	f7ff febc 	bl	8002f98 <_free_r>
 8003220:	230c      	movs	r3, #12
 8003222:	f8ca 3000 	str.w	r3, [sl]
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	f04f 30ff 	mov.w	r0, #4294967295
 800322c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003230:	81a3      	strh	r3, [r4, #12]
 8003232:	e7e9      	b.n	8003208 <__ssputs_r+0x88>

08003234 <_svfiprintf_r>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	4698      	mov	r8, r3
 800323a:	898b      	ldrh	r3, [r1, #12]
 800323c:	4607      	mov	r7, r0
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	460d      	mov	r5, r1
 8003242:	4614      	mov	r4, r2
 8003244:	b09d      	sub	sp, #116	; 0x74
 8003246:	d50e      	bpl.n	8003266 <_svfiprintf_r+0x32>
 8003248:	690b      	ldr	r3, [r1, #16]
 800324a:	b963      	cbnz	r3, 8003266 <_svfiprintf_r+0x32>
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	f7ff ff0b 	bl	8003068 <_malloc_r>
 8003252:	6028      	str	r0, [r5, #0]
 8003254:	6128      	str	r0, [r5, #16]
 8003256:	b920      	cbnz	r0, 8003262 <_svfiprintf_r+0x2e>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e0d0      	b.n	8003404 <_svfiprintf_r+0x1d0>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	616b      	str	r3, [r5, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	9309      	str	r3, [sp, #36]	; 0x24
 800326a:	2320      	movs	r3, #32
 800326c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003270:	2330      	movs	r3, #48	; 0x30
 8003272:	f04f 0901 	mov.w	r9, #1
 8003276:	f8cd 800c 	str.w	r8, [sp, #12]
 800327a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800341c <_svfiprintf_r+0x1e8>
 800327e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003282:	4623      	mov	r3, r4
 8003284:	469a      	mov	sl, r3
 8003286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800328a:	b10a      	cbz	r2, 8003290 <_svfiprintf_r+0x5c>
 800328c:	2a25      	cmp	r2, #37	; 0x25
 800328e:	d1f9      	bne.n	8003284 <_svfiprintf_r+0x50>
 8003290:	ebba 0b04 	subs.w	fp, sl, r4
 8003294:	d00b      	beq.n	80032ae <_svfiprintf_r+0x7a>
 8003296:	465b      	mov	r3, fp
 8003298:	4622      	mov	r2, r4
 800329a:	4629      	mov	r1, r5
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff ff6f 	bl	8003180 <__ssputs_r>
 80032a2:	3001      	adds	r0, #1
 80032a4:	f000 80a9 	beq.w	80033fa <_svfiprintf_r+0x1c6>
 80032a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032aa:	445a      	add	r2, fp
 80032ac:	9209      	str	r2, [sp, #36]	; 0x24
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a1 	beq.w	80033fa <_svfiprintf_r+0x1c6>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c2:	f10a 0a01 	add.w	sl, sl, #1
 80032c6:	9304      	str	r3, [sp, #16]
 80032c8:	9307      	str	r3, [sp, #28]
 80032ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ce:	931a      	str	r3, [sp, #104]	; 0x68
 80032d0:	4654      	mov	r4, sl
 80032d2:	2205      	movs	r2, #5
 80032d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d8:	4850      	ldr	r0, [pc, #320]	; (800341c <_svfiprintf_r+0x1e8>)
 80032da:	f000 fa67 	bl	80037ac <memchr>
 80032de:	9a04      	ldr	r2, [sp, #16]
 80032e0:	b9d8      	cbnz	r0, 800331a <_svfiprintf_r+0xe6>
 80032e2:	06d0      	lsls	r0, r2, #27
 80032e4:	bf44      	itt	mi
 80032e6:	2320      	movmi	r3, #32
 80032e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ec:	0711      	lsls	r1, r2, #28
 80032ee:	bf44      	itt	mi
 80032f0:	232b      	movmi	r3, #43	; 0x2b
 80032f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b2a      	cmp	r3, #42	; 0x2a
 80032fc:	d015      	beq.n	800332a <_svfiprintf_r+0xf6>
 80032fe:	4654      	mov	r4, sl
 8003300:	2000      	movs	r0, #0
 8003302:	f04f 0c0a 	mov.w	ip, #10
 8003306:	9a07      	ldr	r2, [sp, #28]
 8003308:	4621      	mov	r1, r4
 800330a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330e:	3b30      	subs	r3, #48	; 0x30
 8003310:	2b09      	cmp	r3, #9
 8003312:	d94d      	bls.n	80033b0 <_svfiprintf_r+0x17c>
 8003314:	b1b0      	cbz	r0, 8003344 <_svfiprintf_r+0x110>
 8003316:	9207      	str	r2, [sp, #28]
 8003318:	e014      	b.n	8003344 <_svfiprintf_r+0x110>
 800331a:	eba0 0308 	sub.w	r3, r0, r8
 800331e:	fa09 f303 	lsl.w	r3, r9, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	46a2      	mov	sl, r4
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	e7d2      	b.n	80032d0 <_svfiprintf_r+0x9c>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	1d19      	adds	r1, r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	9103      	str	r1, [sp, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	bfbb      	ittet	lt
 8003336:	425b      	neglt	r3, r3
 8003338:	f042 0202 	orrlt.w	r2, r2, #2
 800333c:	9307      	strge	r3, [sp, #28]
 800333e:	9307      	strlt	r3, [sp, #28]
 8003340:	bfb8      	it	lt
 8003342:	9204      	strlt	r2, [sp, #16]
 8003344:	7823      	ldrb	r3, [r4, #0]
 8003346:	2b2e      	cmp	r3, #46	; 0x2e
 8003348:	d10c      	bne.n	8003364 <_svfiprintf_r+0x130>
 800334a:	7863      	ldrb	r3, [r4, #1]
 800334c:	2b2a      	cmp	r3, #42	; 0x2a
 800334e:	d134      	bne.n	80033ba <_svfiprintf_r+0x186>
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	3402      	adds	r4, #2
 8003354:	1d1a      	adds	r2, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003362:	9305      	str	r3, [sp, #20]
 8003364:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003420 <_svfiprintf_r+0x1ec>
 8003368:	2203      	movs	r2, #3
 800336a:	4650      	mov	r0, sl
 800336c:	7821      	ldrb	r1, [r4, #0]
 800336e:	f000 fa1d 	bl	80037ac <memchr>
 8003372:	b138      	cbz	r0, 8003384 <_svfiprintf_r+0x150>
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	9b04      	ldr	r3, [sp, #16]
 8003378:	eba0 000a 	sub.w	r0, r0, sl
 800337c:	4082      	lsls	r2, r0
 800337e:	4313      	orrs	r3, r2
 8003380:	3401      	adds	r4, #1
 8003382:	9304      	str	r3, [sp, #16]
 8003384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003388:	2206      	movs	r2, #6
 800338a:	4826      	ldr	r0, [pc, #152]	; (8003424 <_svfiprintf_r+0x1f0>)
 800338c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003390:	f000 fa0c 	bl	80037ac <memchr>
 8003394:	2800      	cmp	r0, #0
 8003396:	d038      	beq.n	800340a <_svfiprintf_r+0x1d6>
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <_svfiprintf_r+0x1f4>)
 800339a:	bb1b      	cbnz	r3, 80033e4 <_svfiprintf_r+0x1b0>
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	3307      	adds	r3, #7
 80033a0:	f023 0307 	bic.w	r3, r3, #7
 80033a4:	3308      	adds	r3, #8
 80033a6:	9303      	str	r3, [sp, #12]
 80033a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033aa:	4433      	add	r3, r6
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	e768      	b.n	8003282 <_svfiprintf_r+0x4e>
 80033b0:	460c      	mov	r4, r1
 80033b2:	2001      	movs	r0, #1
 80033b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80033b8:	e7a6      	b.n	8003308 <_svfiprintf_r+0xd4>
 80033ba:	2300      	movs	r3, #0
 80033bc:	f04f 0c0a 	mov.w	ip, #10
 80033c0:	4619      	mov	r1, r3
 80033c2:	3401      	adds	r4, #1
 80033c4:	9305      	str	r3, [sp, #20]
 80033c6:	4620      	mov	r0, r4
 80033c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033cc:	3a30      	subs	r2, #48	; 0x30
 80033ce:	2a09      	cmp	r2, #9
 80033d0:	d903      	bls.n	80033da <_svfiprintf_r+0x1a6>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0c6      	beq.n	8003364 <_svfiprintf_r+0x130>
 80033d6:	9105      	str	r1, [sp, #20]
 80033d8:	e7c4      	b.n	8003364 <_svfiprintf_r+0x130>
 80033da:	4604      	mov	r4, r0
 80033dc:	2301      	movs	r3, #1
 80033de:	fb0c 2101 	mla	r1, ip, r1, r2
 80033e2:	e7f0      	b.n	80033c6 <_svfiprintf_r+0x192>
 80033e4:	ab03      	add	r3, sp, #12
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	462a      	mov	r2, r5
 80033ea:	4638      	mov	r0, r7
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <_svfiprintf_r+0x1f8>)
 80033ee:	a904      	add	r1, sp, #16
 80033f0:	f3af 8000 	nop.w
 80033f4:	1c42      	adds	r2, r0, #1
 80033f6:	4606      	mov	r6, r0
 80033f8:	d1d6      	bne.n	80033a8 <_svfiprintf_r+0x174>
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	065b      	lsls	r3, r3, #25
 80033fe:	f53f af2d 	bmi.w	800325c <_svfiprintf_r+0x28>
 8003402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003404:	b01d      	add	sp, #116	; 0x74
 8003406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340a:	ab03      	add	r3, sp, #12
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	462a      	mov	r2, r5
 8003410:	4638      	mov	r0, r7
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <_svfiprintf_r+0x1f8>)
 8003414:	a904      	add	r1, sp, #16
 8003416:	f000 f87d 	bl	8003514 <_printf_i>
 800341a:	e7eb      	b.n	80033f4 <_svfiprintf_r+0x1c0>
 800341c:	080049fa 	.word	0x080049fa
 8003420:	08004a00 	.word	0x08004a00
 8003424:	08004a04 	.word	0x08004a04
 8003428:	00000000 	.word	0x00000000
 800342c:	08003181 	.word	0x08003181

08003430 <_printf_common>:
 8003430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	4616      	mov	r6, r2
 8003436:	4699      	mov	r9, r3
 8003438:	688a      	ldr	r2, [r1, #8]
 800343a:	690b      	ldr	r3, [r1, #16]
 800343c:	4607      	mov	r7, r0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfb8      	it	lt
 8003442:	4613      	movlt	r3, r2
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344a:	460c      	mov	r4, r1
 800344c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003450:	b10a      	cbz	r2, 8003456 <_printf_common+0x26>
 8003452:	3301      	adds	r3, #1
 8003454:	6033      	str	r3, [r6, #0]
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	0699      	lsls	r1, r3, #26
 800345a:	bf42      	ittt	mi
 800345c:	6833      	ldrmi	r3, [r6, #0]
 800345e:	3302      	addmi	r3, #2
 8003460:	6033      	strmi	r3, [r6, #0]
 8003462:	6825      	ldr	r5, [r4, #0]
 8003464:	f015 0506 	ands.w	r5, r5, #6
 8003468:	d106      	bne.n	8003478 <_printf_common+0x48>
 800346a:	f104 0a19 	add.w	sl, r4, #25
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	6832      	ldr	r2, [r6, #0]
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	42ab      	cmp	r3, r5
 8003476:	dc2b      	bgt.n	80034d0 <_printf_common+0xa0>
 8003478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800347c:	1e13      	subs	r3, r2, #0
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	bf18      	it	ne
 8003482:	2301      	movne	r3, #1
 8003484:	0692      	lsls	r2, r2, #26
 8003486:	d430      	bmi.n	80034ea <_printf_common+0xba>
 8003488:	4649      	mov	r1, r9
 800348a:	4638      	mov	r0, r7
 800348c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003490:	47c0      	blx	r8
 8003492:	3001      	adds	r0, #1
 8003494:	d023      	beq.n	80034de <_printf_common+0xae>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	6922      	ldr	r2, [r4, #16]
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf14      	ite	ne
 80034a2:	2500      	movne	r5, #0
 80034a4:	6833      	ldreq	r3, [r6, #0]
 80034a6:	f04f 0600 	mov.w	r6, #0
 80034aa:	bf08      	it	eq
 80034ac:	68e5      	ldreq	r5, [r4, #12]
 80034ae:	f104 041a 	add.w	r4, r4, #26
 80034b2:	bf08      	it	eq
 80034b4:	1aed      	subeq	r5, r5, r3
 80034b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034ba:	bf08      	it	eq
 80034bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bfc4      	itt	gt
 80034c4:	1a9b      	subgt	r3, r3, r2
 80034c6:	18ed      	addgt	r5, r5, r3
 80034c8:	42b5      	cmp	r5, r6
 80034ca:	d11a      	bne.n	8003502 <_printf_common+0xd2>
 80034cc:	2000      	movs	r0, #0
 80034ce:	e008      	b.n	80034e2 <_printf_common+0xb2>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4652      	mov	r2, sl
 80034d4:	4649      	mov	r1, r9
 80034d6:	4638      	mov	r0, r7
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d103      	bne.n	80034e6 <_printf_common+0xb6>
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	3501      	adds	r5, #1
 80034e8:	e7c1      	b.n	800346e <_printf_common+0x3e>
 80034ea:	2030      	movs	r0, #48	; 0x30
 80034ec:	18e1      	adds	r1, r4, r3
 80034ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f8:	4422      	add	r2, r4
 80034fa:	3302      	adds	r3, #2
 80034fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003500:	e7c2      	b.n	8003488 <_printf_common+0x58>
 8003502:	2301      	movs	r3, #1
 8003504:	4622      	mov	r2, r4
 8003506:	4649      	mov	r1, r9
 8003508:	4638      	mov	r0, r7
 800350a:	47c0      	blx	r8
 800350c:	3001      	adds	r0, #1
 800350e:	d0e6      	beq.n	80034de <_printf_common+0xae>
 8003510:	3601      	adds	r6, #1
 8003512:	e7d9      	b.n	80034c8 <_printf_common+0x98>

08003514 <_printf_i>:
 8003514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	7e0f      	ldrb	r7, [r1, #24]
 800351a:	4691      	mov	r9, r2
 800351c:	2f78      	cmp	r7, #120	; 0x78
 800351e:	4680      	mov	r8, r0
 8003520:	460c      	mov	r4, r1
 8003522:	469a      	mov	sl, r3
 8003524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800352a:	d807      	bhi.n	800353c <_printf_i+0x28>
 800352c:	2f62      	cmp	r7, #98	; 0x62
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x32>
 8003530:	2f00      	cmp	r7, #0
 8003532:	f000 80d5 	beq.w	80036e0 <_printf_i+0x1cc>
 8003536:	2f58      	cmp	r7, #88	; 0x58
 8003538:	f000 80c1 	beq.w	80036be <_printf_i+0x1aa>
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003544:	e03a      	b.n	80035bc <_printf_i+0xa8>
 8003546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800354a:	2b15      	cmp	r3, #21
 800354c:	d8f6      	bhi.n	800353c <_printf_i+0x28>
 800354e:	a101      	add	r1, pc, #4	; (adr r1, 8003554 <_printf_i+0x40>)
 8003550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035c1 	.word	0x080035c1
 800355c:	0800353d 	.word	0x0800353d
 8003560:	0800353d 	.word	0x0800353d
 8003564:	0800353d 	.word	0x0800353d
 8003568:	0800353d 	.word	0x0800353d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800353d 	.word	0x0800353d
 8003574:	0800353d 	.word	0x0800353d
 8003578:	0800353d 	.word	0x0800353d
 800357c:	0800353d 	.word	0x0800353d
 8003580:	080036c7 	.word	0x080036c7
 8003584:	080035ed 	.word	0x080035ed
 8003588:	08003681 	.word	0x08003681
 800358c:	0800353d 	.word	0x0800353d
 8003590:	0800353d 	.word	0x0800353d
 8003594:	080036e9 	.word	0x080036e9
 8003598:	0800353d 	.word	0x0800353d
 800359c:	080035ed 	.word	0x080035ed
 80035a0:	0800353d 	.word	0x0800353d
 80035a4:	0800353d 	.word	0x0800353d
 80035a8:	08003689 	.word	0x08003689
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	602a      	str	r2, [r5, #0]
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e0a0      	b.n	8003702 <_printf_i+0x1ee>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	682b      	ldr	r3, [r5, #0]
 80035c4:	0607      	lsls	r7, r0, #24
 80035c6:	f103 0104 	add.w	r1, r3, #4
 80035ca:	6029      	str	r1, [r5, #0]
 80035cc:	d501      	bpl.n	80035d2 <_printf_i+0xbe>
 80035ce:	681e      	ldr	r6, [r3, #0]
 80035d0:	e003      	b.n	80035da <_printf_i+0xc6>
 80035d2:	0646      	lsls	r6, r0, #25
 80035d4:	d5fb      	bpl.n	80035ce <_printf_i+0xba>
 80035d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035da:	2e00      	cmp	r6, #0
 80035dc:	da03      	bge.n	80035e6 <_printf_i+0xd2>
 80035de:	232d      	movs	r3, #45	; 0x2d
 80035e0:	4276      	negs	r6, r6
 80035e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e6:	230a      	movs	r3, #10
 80035e8:	4859      	ldr	r0, [pc, #356]	; (8003750 <_printf_i+0x23c>)
 80035ea:	e012      	b.n	8003612 <_printf_i+0xfe>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	1d19      	adds	r1, r3, #4
 80035f2:	6029      	str	r1, [r5, #0]
 80035f4:	0605      	lsls	r5, r0, #24
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0xe8>
 80035f8:	681e      	ldr	r6, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0xee>
 80035fc:	0641      	lsls	r1, r0, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0xe4>
 8003600:	881e      	ldrh	r6, [r3, #0]
 8003602:	2f6f      	cmp	r7, #111	; 0x6f
 8003604:	bf0c      	ite	eq
 8003606:	2308      	moveq	r3, #8
 8003608:	230a      	movne	r3, #10
 800360a:	4851      	ldr	r0, [pc, #324]	; (8003750 <_printf_i+0x23c>)
 800360c:	2100      	movs	r1, #0
 800360e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003612:	6865      	ldr	r5, [r4, #4]
 8003614:	2d00      	cmp	r5, #0
 8003616:	bfa8      	it	ge
 8003618:	6821      	ldrge	r1, [r4, #0]
 800361a:	60a5      	str	r5, [r4, #8]
 800361c:	bfa4      	itt	ge
 800361e:	f021 0104 	bicge.w	r1, r1, #4
 8003622:	6021      	strge	r1, [r4, #0]
 8003624:	b90e      	cbnz	r6, 800362a <_printf_i+0x116>
 8003626:	2d00      	cmp	r5, #0
 8003628:	d04b      	beq.n	80036c2 <_printf_i+0x1ae>
 800362a:	4615      	mov	r5, r2
 800362c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003630:	fb03 6711 	mls	r7, r3, r1, r6
 8003634:	5dc7      	ldrb	r7, [r0, r7]
 8003636:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800363a:	4637      	mov	r7, r6
 800363c:	42bb      	cmp	r3, r7
 800363e:	460e      	mov	r6, r1
 8003640:	d9f4      	bls.n	800362c <_printf_i+0x118>
 8003642:	2b08      	cmp	r3, #8
 8003644:	d10b      	bne.n	800365e <_printf_i+0x14a>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	07de      	lsls	r6, r3, #31
 800364a:	d508      	bpl.n	800365e <_printf_i+0x14a>
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	6861      	ldr	r1, [r4, #4]
 8003650:	4299      	cmp	r1, r3
 8003652:	bfde      	ittt	le
 8003654:	2330      	movle	r3, #48	; 0x30
 8003656:	f805 3c01 	strble.w	r3, [r5, #-1]
 800365a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800365e:	1b52      	subs	r2, r2, r5
 8003660:	6122      	str	r2, [r4, #16]
 8003662:	464b      	mov	r3, r9
 8003664:	4621      	mov	r1, r4
 8003666:	4640      	mov	r0, r8
 8003668:	f8cd a000 	str.w	sl, [sp]
 800366c:	aa03      	add	r2, sp, #12
 800366e:	f7ff fedf 	bl	8003430 <_printf_common>
 8003672:	3001      	adds	r0, #1
 8003674:	d14a      	bne.n	800370c <_printf_i+0x1f8>
 8003676:	f04f 30ff 	mov.w	r0, #4294967295
 800367a:	b004      	add	sp, #16
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	2778      	movs	r7, #120	; 0x78
 800368a:	4832      	ldr	r0, [pc, #200]	; (8003754 <_printf_i+0x240>)
 800368c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	6829      	ldr	r1, [r5, #0]
 8003694:	061f      	lsls	r7, r3, #24
 8003696:	f851 6b04 	ldr.w	r6, [r1], #4
 800369a:	d402      	bmi.n	80036a2 <_printf_i+0x18e>
 800369c:	065f      	lsls	r7, r3, #25
 800369e:	bf48      	it	mi
 80036a0:	b2b6      	uxthmi	r6, r6
 80036a2:	07df      	lsls	r7, r3, #31
 80036a4:	bf48      	it	mi
 80036a6:	f043 0320 	orrmi.w	r3, r3, #32
 80036aa:	6029      	str	r1, [r5, #0]
 80036ac:	bf48      	it	mi
 80036ae:	6023      	strmi	r3, [r4, #0]
 80036b0:	b91e      	cbnz	r6, 80036ba <_printf_i+0x1a6>
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	f023 0320 	bic.w	r3, r3, #32
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	2310      	movs	r3, #16
 80036bc:	e7a6      	b.n	800360c <_printf_i+0xf8>
 80036be:	4824      	ldr	r0, [pc, #144]	; (8003750 <_printf_i+0x23c>)
 80036c0:	e7e4      	b.n	800368c <_printf_i+0x178>
 80036c2:	4615      	mov	r5, r2
 80036c4:	e7bd      	b.n	8003642 <_printf_i+0x12e>
 80036c6:	682b      	ldr	r3, [r5, #0]
 80036c8:	6826      	ldr	r6, [r4, #0]
 80036ca:	1d18      	adds	r0, r3, #4
 80036cc:	6961      	ldr	r1, [r4, #20]
 80036ce:	6028      	str	r0, [r5, #0]
 80036d0:	0635      	lsls	r5, r6, #24
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	d501      	bpl.n	80036da <_printf_i+0x1c6>
 80036d6:	6019      	str	r1, [r3, #0]
 80036d8:	e002      	b.n	80036e0 <_printf_i+0x1cc>
 80036da:	0670      	lsls	r0, r6, #25
 80036dc:	d5fb      	bpl.n	80036d6 <_printf_i+0x1c2>
 80036de:	8019      	strh	r1, [r3, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	4615      	mov	r5, r2
 80036e4:	6123      	str	r3, [r4, #16]
 80036e6:	e7bc      	b.n	8003662 <_printf_i+0x14e>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	602a      	str	r2, [r5, #0]
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	6862      	ldr	r2, [r4, #4]
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 f859 	bl	80037ac <memchr>
 80036fa:	b108      	cbz	r0, 8003700 <_printf_i+0x1ec>
 80036fc:	1b40      	subs	r0, r0, r5
 80036fe:	6060      	str	r0, [r4, #4]
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	6123      	str	r3, [r4, #16]
 8003704:	2300      	movs	r3, #0
 8003706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370a:	e7aa      	b.n	8003662 <_printf_i+0x14e>
 800370c:	462a      	mov	r2, r5
 800370e:	4649      	mov	r1, r9
 8003710:	4640      	mov	r0, r8
 8003712:	6923      	ldr	r3, [r4, #16]
 8003714:	47d0      	blx	sl
 8003716:	3001      	adds	r0, #1
 8003718:	d0ad      	beq.n	8003676 <_printf_i+0x162>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	079b      	lsls	r3, r3, #30
 800371e:	d413      	bmi.n	8003748 <_printf_i+0x234>
 8003720:	68e0      	ldr	r0, [r4, #12]
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	4298      	cmp	r0, r3
 8003726:	bfb8      	it	lt
 8003728:	4618      	movlt	r0, r3
 800372a:	e7a6      	b.n	800367a <_printf_i+0x166>
 800372c:	2301      	movs	r3, #1
 800372e:	4632      	mov	r2, r6
 8003730:	4649      	mov	r1, r9
 8003732:	4640      	mov	r0, r8
 8003734:	47d0      	blx	sl
 8003736:	3001      	adds	r0, #1
 8003738:	d09d      	beq.n	8003676 <_printf_i+0x162>
 800373a:	3501      	adds	r5, #1
 800373c:	68e3      	ldr	r3, [r4, #12]
 800373e:	9903      	ldr	r1, [sp, #12]
 8003740:	1a5b      	subs	r3, r3, r1
 8003742:	42ab      	cmp	r3, r5
 8003744:	dcf2      	bgt.n	800372c <_printf_i+0x218>
 8003746:	e7eb      	b.n	8003720 <_printf_i+0x20c>
 8003748:	2500      	movs	r5, #0
 800374a:	f104 0619 	add.w	r6, r4, #25
 800374e:	e7f5      	b.n	800373c <_printf_i+0x228>
 8003750:	08004a0b 	.word	0x08004a0b
 8003754:	08004a1c 	.word	0x08004a1c

08003758 <memmove>:
 8003758:	4288      	cmp	r0, r1
 800375a:	b510      	push	{r4, lr}
 800375c:	eb01 0402 	add.w	r4, r1, r2
 8003760:	d902      	bls.n	8003768 <memmove+0x10>
 8003762:	4284      	cmp	r4, r0
 8003764:	4623      	mov	r3, r4
 8003766:	d807      	bhi.n	8003778 <memmove+0x20>
 8003768:	1e43      	subs	r3, r0, #1
 800376a:	42a1      	cmp	r1, r4
 800376c:	d008      	beq.n	8003780 <memmove+0x28>
 800376e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003776:	e7f8      	b.n	800376a <memmove+0x12>
 8003778:	4601      	mov	r1, r0
 800377a:	4402      	add	r2, r0
 800377c:	428a      	cmp	r2, r1
 800377e:	d100      	bne.n	8003782 <memmove+0x2a>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800378a:	e7f7      	b.n	800377c <memmove+0x24>

0800378c <_sbrk_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	2300      	movs	r3, #0
 8003790:	4d05      	ldr	r5, [pc, #20]	; (80037a8 <_sbrk_r+0x1c>)
 8003792:	4604      	mov	r4, r0
 8003794:	4608      	mov	r0, r1
 8003796:	602b      	str	r3, [r5, #0]
 8003798:	f7ff fb52 	bl	8002e40 <_sbrk>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <_sbrk_r+0x1a>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	b103      	cbz	r3, 80037a6 <_sbrk_r+0x1a>
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	20000300 	.word	0x20000300

080037ac <memchr>:
 80037ac:	4603      	mov	r3, r0
 80037ae:	b510      	push	{r4, lr}
 80037b0:	b2c9      	uxtb	r1, r1
 80037b2:	4402      	add	r2, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	d101      	bne.n	80037be <memchr+0x12>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e003      	b.n	80037c6 <memchr+0x1a>
 80037be:	7804      	ldrb	r4, [r0, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	428c      	cmp	r4, r1
 80037c4:	d1f6      	bne.n	80037b4 <memchr+0x8>
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <memcpy>:
 80037c8:	440a      	add	r2, r1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d0:	d100      	bne.n	80037d4 <memcpy+0xc>
 80037d2:	4770      	bx	lr
 80037d4:	b510      	push	{r4, lr}
 80037d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037da:	4291      	cmp	r1, r2
 80037dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e0:	d1f9      	bne.n	80037d6 <memcpy+0xe>
 80037e2:	bd10      	pop	{r4, pc}

080037e4 <_realloc_r>:
 80037e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	4680      	mov	r8, r0
 80037ea:	4614      	mov	r4, r2
 80037ec:	460e      	mov	r6, r1
 80037ee:	b921      	cbnz	r1, 80037fa <_realloc_r+0x16>
 80037f0:	4611      	mov	r1, r2
 80037f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037f6:	f7ff bc37 	b.w	8003068 <_malloc_r>
 80037fa:	b92a      	cbnz	r2, 8003808 <_realloc_r+0x24>
 80037fc:	f7ff fbcc 	bl	8002f98 <_free_r>
 8003800:	4625      	mov	r5, r4
 8003802:	4628      	mov	r0, r5
 8003804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003808:	f000 f81b 	bl	8003842 <_malloc_usable_size_r>
 800380c:	4284      	cmp	r4, r0
 800380e:	4607      	mov	r7, r0
 8003810:	d802      	bhi.n	8003818 <_realloc_r+0x34>
 8003812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003816:	d812      	bhi.n	800383e <_realloc_r+0x5a>
 8003818:	4621      	mov	r1, r4
 800381a:	4640      	mov	r0, r8
 800381c:	f7ff fc24 	bl	8003068 <_malloc_r>
 8003820:	4605      	mov	r5, r0
 8003822:	2800      	cmp	r0, #0
 8003824:	d0ed      	beq.n	8003802 <_realloc_r+0x1e>
 8003826:	42bc      	cmp	r4, r7
 8003828:	4622      	mov	r2, r4
 800382a:	4631      	mov	r1, r6
 800382c:	bf28      	it	cs
 800382e:	463a      	movcs	r2, r7
 8003830:	f7ff ffca 	bl	80037c8 <memcpy>
 8003834:	4631      	mov	r1, r6
 8003836:	4640      	mov	r0, r8
 8003838:	f7ff fbae 	bl	8002f98 <_free_r>
 800383c:	e7e1      	b.n	8003802 <_realloc_r+0x1e>
 800383e:	4635      	mov	r5, r6
 8003840:	e7df      	b.n	8003802 <_realloc_r+0x1e>

08003842 <_malloc_usable_size_r>:
 8003842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003846:	1f18      	subs	r0, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	bfbc      	itt	lt
 800384c:	580b      	ldrlt	r3, [r1, r0]
 800384e:	18c0      	addlt	r0, r0, r3
 8003850:	4770      	bx	lr
	...

08003854 <pow>:
 8003854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4680      	mov	r8, r0
 800385e:	4689      	mov	r9, r1
 8003860:	f000 faf2 	bl	8003e48 <__ieee754_pow>
 8003864:	4622      	mov	r2, r4
 8003866:	4606      	mov	r6, r0
 8003868:	460f      	mov	r7, r1
 800386a:	462b      	mov	r3, r5
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fd f8d4 	bl	8000a1c <__aeabi_dcmpun>
 8003874:	bbc8      	cbnz	r0, 80038ea <pow+0x96>
 8003876:	2200      	movs	r2, #0
 8003878:	2300      	movs	r3, #0
 800387a:	4640      	mov	r0, r8
 800387c:	4649      	mov	r1, r9
 800387e:	f7fd f89b 	bl	80009b8 <__aeabi_dcmpeq>
 8003882:	b1b8      	cbz	r0, 80038b4 <pow+0x60>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4620      	mov	r0, r4
 800388a:	4629      	mov	r1, r5
 800388c:	f7fd f894 	bl	80009b8 <__aeabi_dcmpeq>
 8003890:	2800      	cmp	r0, #0
 8003892:	d141      	bne.n	8003918 <pow+0xc4>
 8003894:	4620      	mov	r0, r4
 8003896:	4629      	mov	r1, r5
 8003898:	f000 f9f8 	bl	8003c8c <finite>
 800389c:	b328      	cbz	r0, 80038ea <pow+0x96>
 800389e:	2200      	movs	r2, #0
 80038a0:	2300      	movs	r3, #0
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fd f891 	bl	80009cc <__aeabi_dcmplt>
 80038aa:	b1f0      	cbz	r0, 80038ea <pow+0x96>
 80038ac:	f7ff fb48 	bl	8002f40 <__errno>
 80038b0:	2322      	movs	r3, #34	; 0x22
 80038b2:	e019      	b.n	80038e8 <pow+0x94>
 80038b4:	4630      	mov	r0, r6
 80038b6:	4639      	mov	r1, r7
 80038b8:	f000 f9e8 	bl	8003c8c <finite>
 80038bc:	b9c8      	cbnz	r0, 80038f2 <pow+0x9e>
 80038be:	4640      	mov	r0, r8
 80038c0:	4649      	mov	r1, r9
 80038c2:	f000 f9e3 	bl	8003c8c <finite>
 80038c6:	b1a0      	cbz	r0, 80038f2 <pow+0x9e>
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	f000 f9de 	bl	8003c8c <finite>
 80038d0:	b178      	cbz	r0, 80038f2 <pow+0x9e>
 80038d2:	4632      	mov	r2, r6
 80038d4:	463b      	mov	r3, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	4639      	mov	r1, r7
 80038da:	f7fd f89f 	bl	8000a1c <__aeabi_dcmpun>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d0e4      	beq.n	80038ac <pow+0x58>
 80038e2:	f7ff fb2d 	bl	8002f40 <__errno>
 80038e6:	2321      	movs	r3, #33	; 0x21
 80038e8:	6003      	str	r3, [r0, #0]
 80038ea:	4630      	mov	r0, r6
 80038ec:	4639      	mov	r1, r7
 80038ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f2:	2200      	movs	r2, #0
 80038f4:	2300      	movs	r3, #0
 80038f6:	4630      	mov	r0, r6
 80038f8:	4639      	mov	r1, r7
 80038fa:	f7fd f85d 	bl	80009b8 <__aeabi_dcmpeq>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0f3      	beq.n	80038ea <pow+0x96>
 8003902:	4640      	mov	r0, r8
 8003904:	4649      	mov	r1, r9
 8003906:	f000 f9c1 	bl	8003c8c <finite>
 800390a:	2800      	cmp	r0, #0
 800390c:	d0ed      	beq.n	80038ea <pow+0x96>
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f000 f9bb 	bl	8003c8c <finite>
 8003916:	e7c8      	b.n	80038aa <pow+0x56>
 8003918:	2600      	movs	r6, #0
 800391a:	4f01      	ldr	r7, [pc, #4]	; (8003920 <pow+0xcc>)
 800391c:	e7e5      	b.n	80038ea <pow+0x96>
 800391e:	bf00      	nop
 8003920:	3ff00000 	.word	0x3ff00000

08003924 <sqrt>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	4606      	mov	r6, r0
 8003928:	460f      	mov	r7, r1
 800392a:	f000 f9b5 	bl	8003c98 <__ieee754_sqrt>
 800392e:	4632      	mov	r2, r6
 8003930:	4604      	mov	r4, r0
 8003932:	460d      	mov	r5, r1
 8003934:	463b      	mov	r3, r7
 8003936:	4630      	mov	r0, r6
 8003938:	4639      	mov	r1, r7
 800393a:	f7fd f86f 	bl	8000a1c <__aeabi_dcmpun>
 800393e:	b990      	cbnz	r0, 8003966 <sqrt+0x42>
 8003940:	2200      	movs	r2, #0
 8003942:	2300      	movs	r3, #0
 8003944:	4630      	mov	r0, r6
 8003946:	4639      	mov	r1, r7
 8003948:	f7fd f840 	bl	80009cc <__aeabi_dcmplt>
 800394c:	b158      	cbz	r0, 8003966 <sqrt+0x42>
 800394e:	f7ff faf7 	bl	8002f40 <__errno>
 8003952:	2321      	movs	r3, #33	; 0x21
 8003954:	2200      	movs	r2, #0
 8003956:	6003      	str	r3, [r0, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f7fc feed 	bl	800073c <__aeabi_ddiv>
 8003962:	4604      	mov	r4, r0
 8003964:	460d      	mov	r5, r1
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396c:	0000      	movs	r0, r0
	...

08003970 <atan>:
 8003970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4bb6      	ldr	r3, [pc, #728]	; (8003c50 <atan+0x2e0>)
 8003976:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800397a:	429e      	cmp	r6, r3
 800397c:	4604      	mov	r4, r0
 800397e:	460d      	mov	r5, r1
 8003980:	468b      	mov	fp, r1
 8003982:	dd17      	ble.n	80039b4 <atan+0x44>
 8003984:	4bb3      	ldr	r3, [pc, #716]	; (8003c54 <atan+0x2e4>)
 8003986:	429e      	cmp	r6, r3
 8003988:	dc01      	bgt.n	800398e <atan+0x1e>
 800398a:	d109      	bne.n	80039a0 <atan+0x30>
 800398c:	b140      	cbz	r0, 80039a0 <atan+0x30>
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f7fc fbf1 	bl	800017c <__adddf3>
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	e005      	b.n	80039ac <atan+0x3c>
 80039a0:	f1bb 0f00 	cmp.w	fp, #0
 80039a4:	4cac      	ldr	r4, [pc, #688]	; (8003c58 <atan+0x2e8>)
 80039a6:	f300 8121 	bgt.w	8003bec <atan+0x27c>
 80039aa:	4dac      	ldr	r5, [pc, #688]	; (8003c5c <atan+0x2ec>)
 80039ac:	4620      	mov	r0, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b4:	4baa      	ldr	r3, [pc, #680]	; (8003c60 <atan+0x2f0>)
 80039b6:	429e      	cmp	r6, r3
 80039b8:	dc11      	bgt.n	80039de <atan+0x6e>
 80039ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80039be:	429e      	cmp	r6, r3
 80039c0:	dc0a      	bgt.n	80039d8 <atan+0x68>
 80039c2:	a38b      	add	r3, pc, #556	; (adr r3, 8003bf0 <atan+0x280>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f7fc fbd8 	bl	800017c <__adddf3>
 80039cc:	2200      	movs	r2, #0
 80039ce:	4ba5      	ldr	r3, [pc, #660]	; (8003c64 <atan+0x2f4>)
 80039d0:	f7fd f81a 	bl	8000a08 <__aeabi_dcmpgt>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d1e9      	bne.n	80039ac <atan+0x3c>
 80039d8:	f04f 3aff 	mov.w	sl, #4294967295
 80039dc:	e027      	b.n	8003a2e <atan+0xbe>
 80039de:	f000 f951 	bl	8003c84 <fabs>
 80039e2:	4ba1      	ldr	r3, [pc, #644]	; (8003c68 <atan+0x2f8>)
 80039e4:	4604      	mov	r4, r0
 80039e6:	429e      	cmp	r6, r3
 80039e8:	460d      	mov	r5, r1
 80039ea:	f300 80b8 	bgt.w	8003b5e <atan+0x1ee>
 80039ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80039f2:	429e      	cmp	r6, r3
 80039f4:	f300 809c 	bgt.w	8003b30 <atan+0x1c0>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	f7fc fbbe 	bl	800017c <__adddf3>
 8003a00:	2200      	movs	r2, #0
 8003a02:	4b98      	ldr	r3, [pc, #608]	; (8003c64 <atan+0x2f4>)
 8003a04:	f7fc fbb8 	bl	8000178 <__aeabi_dsub>
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	460f      	mov	r7, r1
 8003a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fbb1 	bl	800017c <__adddf3>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4639      	mov	r1, r7
 8003a22:	f7fc fe8b 	bl	800073c <__aeabi_ddiv>
 8003a26:	f04f 0a00 	mov.w	sl, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	460d      	mov	r5, r1
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	4620      	mov	r0, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7fc fd57 	bl	80004e8 <__aeabi_dmul>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4680      	mov	r8, r0
 8003a40:	4689      	mov	r9, r1
 8003a42:	f7fc fd51 	bl	80004e8 <__aeabi_dmul>
 8003a46:	a36c      	add	r3, pc, #432	; (adr r3, 8003bf8 <atan+0x288>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460f      	mov	r7, r1
 8003a50:	f7fc fd4a 	bl	80004e8 <__aeabi_dmul>
 8003a54:	a36a      	add	r3, pc, #424	; (adr r3, 8003c00 <atan+0x290>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fb8f 	bl	800017c <__adddf3>
 8003a5e:	4632      	mov	r2, r6
 8003a60:	463b      	mov	r3, r7
 8003a62:	f7fc fd41 	bl	80004e8 <__aeabi_dmul>
 8003a66:	a368      	add	r3, pc, #416	; (adr r3, 8003c08 <atan+0x298>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fb86 	bl	800017c <__adddf3>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fc fd38 	bl	80004e8 <__aeabi_dmul>
 8003a78:	a365      	add	r3, pc, #404	; (adr r3, 8003c10 <atan+0x2a0>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f7fc fb7d 	bl	800017c <__adddf3>
 8003a82:	4632      	mov	r2, r6
 8003a84:	463b      	mov	r3, r7
 8003a86:	f7fc fd2f 	bl	80004e8 <__aeabi_dmul>
 8003a8a:	a363      	add	r3, pc, #396	; (adr r3, 8003c18 <atan+0x2a8>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fb74 	bl	800017c <__adddf3>
 8003a94:	4632      	mov	r2, r6
 8003a96:	463b      	mov	r3, r7
 8003a98:	f7fc fd26 	bl	80004e8 <__aeabi_dmul>
 8003a9c:	a360      	add	r3, pc, #384	; (adr r3, 8003c20 <atan+0x2b0>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fb6b 	bl	800017c <__adddf3>
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	f7fc fd1d 	bl	80004e8 <__aeabi_dmul>
 8003aae:	a35e      	add	r3, pc, #376	; (adr r3, 8003c28 <atan+0x2b8>)
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	4689      	mov	r9, r1
 8003ab8:	4630      	mov	r0, r6
 8003aba:	4639      	mov	r1, r7
 8003abc:	f7fc fd14 	bl	80004e8 <__aeabi_dmul>
 8003ac0:	a35b      	add	r3, pc, #364	; (adr r3, 8003c30 <atan+0x2c0>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fb57 	bl	8000178 <__aeabi_dsub>
 8003aca:	4632      	mov	r2, r6
 8003acc:	463b      	mov	r3, r7
 8003ace:	f7fc fd0b 	bl	80004e8 <__aeabi_dmul>
 8003ad2:	a359      	add	r3, pc, #356	; (adr r3, 8003c38 <atan+0x2c8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fb4e 	bl	8000178 <__aeabi_dsub>
 8003adc:	4632      	mov	r2, r6
 8003ade:	463b      	mov	r3, r7
 8003ae0:	f7fc fd02 	bl	80004e8 <__aeabi_dmul>
 8003ae4:	a356      	add	r3, pc, #344	; (adr r3, 8003c40 <atan+0x2d0>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fb45 	bl	8000178 <__aeabi_dsub>
 8003aee:	4632      	mov	r2, r6
 8003af0:	463b      	mov	r3, r7
 8003af2:	f7fc fcf9 	bl	80004e8 <__aeabi_dmul>
 8003af6:	a354      	add	r3, pc, #336	; (adr r3, 8003c48 <atan+0x2d8>)
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f7fc fb3c 	bl	8000178 <__aeabi_dsub>
 8003b00:	4632      	mov	r2, r6
 8003b02:	463b      	mov	r3, r7
 8003b04:	f7fc fcf0 	bl	80004e8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fc fb34 	bl	800017c <__adddf3>
 8003b14:	4622      	mov	r2, r4
 8003b16:	462b      	mov	r3, r5
 8003b18:	f7fc fce6 	bl	80004e8 <__aeabi_dmul>
 8003b1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	d144      	bne.n	8003bb0 <atan+0x240>
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc fb25 	bl	8000178 <__aeabi_dsub>
 8003b2e:	e734      	b.n	800399a <atan+0x2a>
 8003b30:	2200      	movs	r2, #0
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <atan+0x2f4>)
 8003b34:	f7fc fb20 	bl	8000178 <__aeabi_dsub>
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460f      	mov	r7, r1
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	4b48      	ldr	r3, [pc, #288]	; (8003c64 <atan+0x2f4>)
 8003b44:	f7fc fb1a 	bl	800017c <__adddf3>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	4639      	mov	r1, r7
 8003b50:	f7fc fdf4 	bl	800073c <__aeabi_ddiv>
 8003b54:	f04f 0a01 	mov.w	sl, #1
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	e767      	b.n	8003a2e <atan+0xbe>
 8003b5e:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <atan+0x2fc>)
 8003b60:	429e      	cmp	r6, r3
 8003b62:	da1a      	bge.n	8003b9a <atan+0x22a>
 8003b64:	2200      	movs	r2, #0
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <atan+0x300>)
 8003b68:	f7fc fb06 	bl	8000178 <__aeabi_dsub>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4606      	mov	r6, r0
 8003b70:	460f      	mov	r7, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <atan+0x300>)
 8003b78:	f7fc fcb6 	bl	80004e8 <__aeabi_dmul>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <atan+0x2f4>)
 8003b80:	f7fc fafc 	bl	800017c <__adddf3>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc fdd6 	bl	800073c <__aeabi_ddiv>
 8003b90:	f04f 0a02 	mov.w	sl, #2
 8003b94:	4604      	mov	r4, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	e749      	b.n	8003a2e <atan+0xbe>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	4934      	ldr	r1, [pc, #208]	; (8003c74 <atan+0x304>)
 8003ba2:	f7fc fdcb 	bl	800073c <__aeabi_ddiv>
 8003ba6:	f04f 0a03 	mov.w	sl, #3
 8003baa:	4604      	mov	r4, r0
 8003bac:	460d      	mov	r5, r1
 8003bae:	e73e      	b.n	8003a2e <atan+0xbe>
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <atan+0x308>)
 8003bb2:	4e32      	ldr	r6, [pc, #200]	; (8003c7c <atan+0x30c>)
 8003bb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fadc 	bl	8000178 <__aeabi_dsub>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	f7fc fad8 	bl	8000178 <__aeabi_dsub>
 8003bc8:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003bd4:	f7fc fad0 	bl	8000178 <__aeabi_dsub>
 8003bd8:	f1bb 0f00 	cmp.w	fp, #0
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	f6bf aee4 	bge.w	80039ac <atan+0x3c>
 8003be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003be8:	461d      	mov	r5, r3
 8003bea:	e6df      	b.n	80039ac <atan+0x3c>
 8003bec:	4d24      	ldr	r5, [pc, #144]	; (8003c80 <atan+0x310>)
 8003bee:	e6dd      	b.n	80039ac <atan+0x3c>
 8003bf0:	8800759c 	.word	0x8800759c
 8003bf4:	7e37e43c 	.word	0x7e37e43c
 8003bf8:	e322da11 	.word	0xe322da11
 8003bfc:	3f90ad3a 	.word	0x3f90ad3a
 8003c00:	24760deb 	.word	0x24760deb
 8003c04:	3fa97b4b 	.word	0x3fa97b4b
 8003c08:	a0d03d51 	.word	0xa0d03d51
 8003c0c:	3fb10d66 	.word	0x3fb10d66
 8003c10:	c54c206e 	.word	0xc54c206e
 8003c14:	3fb745cd 	.word	0x3fb745cd
 8003c18:	920083ff 	.word	0x920083ff
 8003c1c:	3fc24924 	.word	0x3fc24924
 8003c20:	5555550d 	.word	0x5555550d
 8003c24:	3fd55555 	.word	0x3fd55555
 8003c28:	2c6a6c2f 	.word	0x2c6a6c2f
 8003c2c:	bfa2b444 	.word	0xbfa2b444
 8003c30:	52defd9a 	.word	0x52defd9a
 8003c34:	3fadde2d 	.word	0x3fadde2d
 8003c38:	af749a6d 	.word	0xaf749a6d
 8003c3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8003c40:	fe231671 	.word	0xfe231671
 8003c44:	3fbc71c6 	.word	0x3fbc71c6
 8003c48:	9998ebc4 	.word	0x9998ebc4
 8003c4c:	3fc99999 	.word	0x3fc99999
 8003c50:	440fffff 	.word	0x440fffff
 8003c54:	7ff00000 	.word	0x7ff00000
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	bff921fb 	.word	0xbff921fb
 8003c60:	3fdbffff 	.word	0x3fdbffff
 8003c64:	3ff00000 	.word	0x3ff00000
 8003c68:	3ff2ffff 	.word	0x3ff2ffff
 8003c6c:	40038000 	.word	0x40038000
 8003c70:	3ff80000 	.word	0x3ff80000
 8003c74:	bff00000 	.word	0xbff00000
 8003c78:	08004a50 	.word	0x08004a50
 8003c7c:	08004a30 	.word	0x08004a30
 8003c80:	3ff921fb 	.word	0x3ff921fb

08003c84 <fabs>:
 8003c84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4770      	bx	lr

08003c8c <finite>:
 8003c8c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003c90:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003c94:	0fc0      	lsrs	r0, r0, #31
 8003c96:	4770      	bx	lr

08003c98 <__ieee754_sqrt>:
 8003c98:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003e3c <__ieee754_sqrt+0x1a4>
 8003c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca0:	ea3c 0c01 	bics.w	ip, ip, r1
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	460d      	mov	r5, r1
 8003caa:	460a      	mov	r2, r1
 8003cac:	4604      	mov	r4, r0
 8003cae:	d10e      	bne.n	8003cce <__ieee754_sqrt+0x36>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	f7fc fc19 	bl	80004e8 <__aeabi_dmul>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4630      	mov	r0, r6
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fa5d 	bl	800017c <__adddf3>
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	4629      	mov	r1, r5
 8003cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	dc0d      	bgt.n	8003cee <__ieee754_sqrt+0x56>
 8003cd2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003cd6:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003cda:	d0f4      	beq.n	8003cc6 <__ieee754_sqrt+0x2e>
 8003cdc:	b139      	cbz	r1, 8003cee <__ieee754_sqrt+0x56>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	f7fc fa4a 	bl	8000178 <__aeabi_dsub>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	f7fc fd28 	bl	800073c <__aeabi_ddiv>
 8003cec:	e7e9      	b.n	8003cc2 <__ieee754_sqrt+0x2a>
 8003cee:	1512      	asrs	r2, r2, #20
 8003cf0:	f000 8089 	beq.w	8003e06 <__ieee754_sqrt+0x16e>
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d02:	07d2      	lsls	r2, r2, #31
 8003d04:	bf5c      	itt	pl
 8003d06:	005b      	lslpl	r3, r3, #1
 8003d08:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d10:	bf58      	it	pl
 8003d12:	0064      	lslpl	r4, r4, #1
 8003d14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003d18:	0062      	lsls	r2, r4, #1
 8003d1a:	2016      	movs	r0, #22
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8003d22:	1076      	asrs	r6, r6, #1
 8003d24:	190f      	adds	r7, r1, r4
 8003d26:	429f      	cmp	r7, r3
 8003d28:	bfde      	ittt	le
 8003d2a:	1bdb      	suble	r3, r3, r7
 8003d2c:	1939      	addle	r1, r7, r4
 8003d2e:	192d      	addle	r5, r5, r4
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	3801      	subs	r0, #1
 8003d34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003d38:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003d3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d40:	d1f0      	bne.n	8003d24 <__ieee754_sqrt+0x8c>
 8003d42:	4604      	mov	r4, r0
 8003d44:	2720      	movs	r7, #32
 8003d46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	eb0c 0e00 	add.w	lr, ip, r0
 8003d50:	dc02      	bgt.n	8003d58 <__ieee754_sqrt+0xc0>
 8003d52:	d113      	bne.n	8003d7c <__ieee754_sqrt+0xe4>
 8003d54:	4596      	cmp	lr, r2
 8003d56:	d811      	bhi.n	8003d7c <__ieee754_sqrt+0xe4>
 8003d58:	f1be 0f00 	cmp.w	lr, #0
 8003d5c:	eb0e 000c 	add.w	r0, lr, ip
 8003d60:	da56      	bge.n	8003e10 <__ieee754_sqrt+0x178>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	db54      	blt.n	8003e10 <__ieee754_sqrt+0x178>
 8003d66:	f101 0801 	add.w	r8, r1, #1
 8003d6a:	1a5b      	subs	r3, r3, r1
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	4596      	cmp	lr, r2
 8003d70:	bf88      	it	hi
 8003d72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003d76:	eba2 020e 	sub.w	r2, r2, lr
 8003d7a:	4464      	add	r4, ip
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	3f01      	subs	r7, #1
 8003d80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003d84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003d88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d8c:	d1dd      	bne.n	8003d4a <__ieee754_sqrt+0xb2>
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d01b      	beq.n	8003dca <__ieee754_sqrt+0x132>
 8003d92:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003e40 <__ieee754_sqrt+0x1a8>
 8003d96:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003e44 <__ieee754_sqrt+0x1ac>
 8003d9a:	e9da 0100 	ldrd	r0, r1, [sl]
 8003d9e:	e9db 2300 	ldrd	r2, r3, [fp]
 8003da2:	f7fc f9e9 	bl	8000178 <__aeabi_dsub>
 8003da6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4640      	mov	r0, r8
 8003db0:	4649      	mov	r1, r9
 8003db2:	f7fc fe15 	bl	80009e0 <__aeabi_dcmple>
 8003db6:	b140      	cbz	r0, 8003dca <__ieee754_sqrt+0x132>
 8003db8:	e9da 0100 	ldrd	r0, r1, [sl]
 8003dbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8003dc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003dc4:	d126      	bne.n	8003e14 <__ieee754_sqrt+0x17c>
 8003dc6:	463c      	mov	r4, r7
 8003dc8:	3501      	adds	r5, #1
 8003dca:	106b      	asrs	r3, r5, #1
 8003dcc:	0864      	lsrs	r4, r4, #1
 8003dce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003dd2:	07ea      	lsls	r2, r5, #31
 8003dd4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003dd8:	bf48      	it	mi
 8003dda:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8003dde:	4620      	mov	r0, r4
 8003de0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003de4:	e76d      	b.n	8003cc2 <__ieee754_sqrt+0x2a>
 8003de6:	0ae3      	lsrs	r3, r4, #11
 8003de8:	3915      	subs	r1, #21
 8003dea:	0564      	lsls	r4, r4, #21
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0fa      	beq.n	8003de6 <__ieee754_sqrt+0x14e>
 8003df0:	02d8      	lsls	r0, r3, #11
 8003df2:	d50a      	bpl.n	8003e0a <__ieee754_sqrt+0x172>
 8003df4:	f1c2 0020 	rsb	r0, r2, #32
 8003df8:	fa24 f000 	lsr.w	r0, r4, r0
 8003dfc:	1e55      	subs	r5, r2, #1
 8003dfe:	4094      	lsls	r4, r2
 8003e00:	4303      	orrs	r3, r0
 8003e02:	1b4a      	subs	r2, r1, r5
 8003e04:	e776      	b.n	8003cf4 <__ieee754_sqrt+0x5c>
 8003e06:	4611      	mov	r1, r2
 8003e08:	e7f0      	b.n	8003dec <__ieee754_sqrt+0x154>
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	3201      	adds	r2, #1
 8003e0e:	e7ef      	b.n	8003df0 <__ieee754_sqrt+0x158>
 8003e10:	4688      	mov	r8, r1
 8003e12:	e7aa      	b.n	8003d6a <__ieee754_sqrt+0xd2>
 8003e14:	f7fc f9b2 	bl	800017c <__adddf3>
 8003e18:	e9da 8900 	ldrd	r8, r9, [sl]
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4640      	mov	r0, r8
 8003e22:	4649      	mov	r1, r9
 8003e24:	f7fc fdd2 	bl	80009cc <__aeabi_dcmplt>
 8003e28:	b120      	cbz	r0, 8003e34 <__ieee754_sqrt+0x19c>
 8003e2a:	1ca1      	adds	r1, r4, #2
 8003e2c:	bf08      	it	eq
 8003e2e:	3501      	addeq	r5, #1
 8003e30:	3402      	adds	r4, #2
 8003e32:	e7ca      	b.n	8003dca <__ieee754_sqrt+0x132>
 8003e34:	3401      	adds	r4, #1
 8003e36:	f024 0401 	bic.w	r4, r4, #1
 8003e3a:	e7c6      	b.n	8003dca <__ieee754_sqrt+0x132>
 8003e3c:	7ff00000 	.word	0x7ff00000
 8003e40:	20000058 	.word	0x20000058
 8003e44:	20000060 	.word	0x20000060

08003e48 <__ieee754_pow>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	b093      	sub	sp, #76	; 0x4c
 8003e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e52:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003e56:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003e5a:	4689      	mov	r9, r1
 8003e5c:	ea56 0102 	orrs.w	r1, r6, r2
 8003e60:	4680      	mov	r8, r0
 8003e62:	d111      	bne.n	8003e88 <__ieee754_pow+0x40>
 8003e64:	1803      	adds	r3, r0, r0
 8003e66:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003e6a:	4152      	adcs	r2, r2
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <__ieee754_pow+0x230>)
 8003e70:	4193      	sbcs	r3, r2
 8003e72:	f080 84ba 	bcs.w	80047ea <__ieee754_pow+0x9a2>
 8003e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	f7fc f97d 	bl	800017c <__adddf3>
 8003e82:	4683      	mov	fp, r0
 8003e84:	468c      	mov	ip, r1
 8003e86:	e06f      	b.n	8003f68 <__ieee754_pow+0x120>
 8003e88:	4b7c      	ldr	r3, [pc, #496]	; (800407c <__ieee754_pow+0x234>)
 8003e8a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	464d      	mov	r5, r9
 8003e92:	4682      	mov	sl, r0
 8003e94:	dc06      	bgt.n	8003ea4 <__ieee754_pow+0x5c>
 8003e96:	d101      	bne.n	8003e9c <__ieee754_pow+0x54>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d1ec      	bne.n	8003e76 <__ieee754_pow+0x2e>
 8003e9c:	429e      	cmp	r6, r3
 8003e9e:	dc01      	bgt.n	8003ea4 <__ieee754_pow+0x5c>
 8003ea0:	d10f      	bne.n	8003ec2 <__ieee754_pow+0x7a>
 8003ea2:	b172      	cbz	r2, 8003ec2 <__ieee754_pow+0x7a>
 8003ea4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003ea8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003eac:	ea55 050a 	orrs.w	r5, r5, sl
 8003eb0:	d1e1      	bne.n	8003e76 <__ieee754_pow+0x2e>
 8003eb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003eb6:	18db      	adds	r3, r3, r3
 8003eb8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003ebc:	4152      	adcs	r2, r2
 8003ebe:	429d      	cmp	r5, r3
 8003ec0:	e7d5      	b.n	8003e6e <__ieee754_pow+0x26>
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	da39      	bge.n	8003f3a <__ieee754_pow+0xf2>
 8003ec6:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <__ieee754_pow+0x238>)
 8003ec8:	429e      	cmp	r6, r3
 8003eca:	dc52      	bgt.n	8003f72 <__ieee754_pow+0x12a>
 8003ecc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ed0:	429e      	cmp	r6, r3
 8003ed2:	f340 849d 	ble.w	8004810 <__ieee754_pow+0x9c8>
 8003ed6:	1533      	asrs	r3, r6, #20
 8003ed8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003edc:	2b14      	cmp	r3, #20
 8003ede:	dd0f      	ble.n	8003f00 <__ieee754_pow+0xb8>
 8003ee0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003ee4:	fa22 f103 	lsr.w	r1, r2, r3
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f040 848f 	bne.w	8004810 <__ieee754_pow+0x9c8>
 8003ef2:	f001 0101 	and.w	r1, r1, #1
 8003ef6:	f1c1 0302 	rsb	r3, r1, #2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	b182      	cbz	r2, 8003f20 <__ieee754_pow+0xd8>
 8003efe:	e05d      	b.n	8003fbc <__ieee754_pow+0x174>
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	d159      	bne.n	8003fb8 <__ieee754_pow+0x170>
 8003f04:	f1c3 0314 	rsb	r3, r3, #20
 8003f08:	fa46 f103 	asr.w	r1, r6, r3
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	42b3      	cmp	r3, r6
 8003f12:	f040 847a 	bne.w	800480a <__ieee754_pow+0x9c2>
 8003f16:	f001 0101 	and.w	r1, r1, #1
 8003f1a:	f1c1 0302 	rsb	r3, r1, #2
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4b58      	ldr	r3, [pc, #352]	; (8004084 <__ieee754_pow+0x23c>)
 8003f22:	429e      	cmp	r6, r3
 8003f24:	d132      	bne.n	8003f8c <__ieee754_pow+0x144>
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	f280 846b 	bge.w	8004802 <__ieee754_pow+0x9ba>
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	2000      	movs	r0, #0
 8003f32:	4954      	ldr	r1, [pc, #336]	; (8004084 <__ieee754_pow+0x23c>)
 8003f34:	f7fc fc02 	bl	800073c <__aeabi_ddiv>
 8003f38:	e7a3      	b.n	8003e82 <__ieee754_pow+0x3a>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	d13c      	bne.n	8003fbc <__ieee754_pow+0x174>
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <__ieee754_pow+0x234>)
 8003f44:	429e      	cmp	r6, r3
 8003f46:	d1eb      	bne.n	8003f20 <__ieee754_pow+0xd8>
 8003f48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003f4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003f50:	ea53 030a 	orrs.w	r3, r3, sl
 8003f54:	f000 8449 	beq.w	80047ea <__ieee754_pow+0x9a2>
 8003f58:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <__ieee754_pow+0x240>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	dd0b      	ble.n	8003f76 <__ieee754_pow+0x12e>
 8003f5e:	2f00      	cmp	r7, #0
 8003f60:	f2c0 8449 	blt.w	80047f6 <__ieee754_pow+0x9ae>
 8003f64:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003f68:	4658      	mov	r0, fp
 8003f6a:	4661      	mov	r1, ip
 8003f6c:	b013      	add	sp, #76	; 0x4c
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	2302      	movs	r3, #2
 8003f74:	e7e2      	b.n	8003f3c <__ieee754_pow+0xf4>
 8003f76:	2f00      	cmp	r7, #0
 8003f78:	f04f 0b00 	mov.w	fp, #0
 8003f7c:	f04f 0c00 	mov.w	ip, #0
 8003f80:	daf2      	bge.n	8003f68 <__ieee754_pow+0x120>
 8003f82:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003f86:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003f8a:	e7ed      	b.n	8003f68 <__ieee754_pow+0x120>
 8003f8c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003f90:	d106      	bne.n	8003fa0 <__ieee754_pow+0x158>
 8003f92:	4642      	mov	r2, r8
 8003f94:	464b      	mov	r3, r9
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	f7fc faa5 	bl	80004e8 <__aeabi_dmul>
 8003f9e:	e770      	b.n	8003e82 <__ieee754_pow+0x3a>
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <__ieee754_pow+0x244>)
 8003fa2:	429f      	cmp	r7, r3
 8003fa4:	d10a      	bne.n	8003fbc <__ieee754_pow+0x174>
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	db08      	blt.n	8003fbc <__ieee754_pow+0x174>
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	b013      	add	sp, #76	; 0x4c
 8003fb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	f7ff be70 	b.w	8003c98 <__ieee754_sqrt>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	f7ff fe60 	bl	8003c84 <fabs>
 8003fc4:	4683      	mov	fp, r0
 8003fc6:	468c      	mov	ip, r1
 8003fc8:	f1ba 0f00 	cmp.w	sl, #0
 8003fcc:	d128      	bne.n	8004020 <__ieee754_pow+0x1d8>
 8003fce:	b124      	cbz	r4, 8003fda <__ieee754_pow+0x192>
 8003fd0:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <__ieee754_pow+0x23c>)
 8003fd2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d122      	bne.n	8004020 <__ieee754_pow+0x1d8>
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	da07      	bge.n	8003fee <__ieee754_pow+0x1a6>
 8003fde:	465a      	mov	r2, fp
 8003fe0:	4663      	mov	r3, ip
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	4927      	ldr	r1, [pc, #156]	; (8004084 <__ieee754_pow+0x23c>)
 8003fe6:	f7fc fba9 	bl	800073c <__aeabi_ddiv>
 8003fea:	4683      	mov	fp, r0
 8003fec:	468c      	mov	ip, r1
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	daba      	bge.n	8003f68 <__ieee754_pow+0x120>
 8003ff2:	9b00      	ldr	r3, [sp, #0]
 8003ff4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ff8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ffc:	431c      	orrs	r4, r3
 8003ffe:	d108      	bne.n	8004012 <__ieee754_pow+0x1ca>
 8004000:	465a      	mov	r2, fp
 8004002:	4663      	mov	r3, ip
 8004004:	4658      	mov	r0, fp
 8004006:	4661      	mov	r1, ip
 8004008:	f7fc f8b6 	bl	8000178 <__aeabi_dsub>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	e790      	b.n	8003f34 <__ieee754_pow+0xec>
 8004012:	9b00      	ldr	r3, [sp, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d1a7      	bne.n	8003f68 <__ieee754_pow+0x120>
 8004018:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800401c:	469c      	mov	ip, r3
 800401e:	e7a3      	b.n	8003f68 <__ieee754_pow+0x120>
 8004020:	0feb      	lsrs	r3, r5, #31
 8004022:	3b01      	subs	r3, #1
 8004024:	930c      	str	r3, [sp, #48]	; 0x30
 8004026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004028:	9b00      	ldr	r3, [sp, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	d104      	bne.n	8004038 <__ieee754_pow+0x1f0>
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	4640      	mov	r0, r8
 8004034:	4649      	mov	r1, r9
 8004036:	e7e7      	b.n	8004008 <__ieee754_pow+0x1c0>
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <__ieee754_pow+0x248>)
 800403a:	429e      	cmp	r6, r3
 800403c:	f340 80f6 	ble.w	800422c <__ieee754_pow+0x3e4>
 8004040:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004044:	429e      	cmp	r6, r3
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <__ieee754_pow+0x240>)
 8004048:	dd09      	ble.n	800405e <__ieee754_pow+0x216>
 800404a:	429c      	cmp	r4, r3
 800404c:	dc0c      	bgt.n	8004068 <__ieee754_pow+0x220>
 800404e:	2f00      	cmp	r7, #0
 8004050:	da0c      	bge.n	800406c <__ieee754_pow+0x224>
 8004052:	2000      	movs	r0, #0
 8004054:	b013      	add	sp, #76	; 0x4c
 8004056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f000 bcae 	b.w	80049ba <__math_oflow>
 800405e:	429c      	cmp	r4, r3
 8004060:	dbf5      	blt.n	800404e <__ieee754_pow+0x206>
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <__ieee754_pow+0x23c>)
 8004064:	429c      	cmp	r4, r3
 8004066:	dd15      	ble.n	8004094 <__ieee754_pow+0x24c>
 8004068:	2f00      	cmp	r7, #0
 800406a:	dcf2      	bgt.n	8004052 <__ieee754_pow+0x20a>
 800406c:	2000      	movs	r0, #0
 800406e:	b013      	add	sp, #76	; 0x4c
 8004070:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	f000 bc9c 	b.w	80049b0 <__math_uflow>
 8004078:	fff00000 	.word	0xfff00000
 800407c:	7ff00000 	.word	0x7ff00000
 8004080:	433fffff 	.word	0x433fffff
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	3fefffff 	.word	0x3fefffff
 800408c:	3fe00000 	.word	0x3fe00000
 8004090:	41e00000 	.word	0x41e00000
 8004094:	4661      	mov	r1, ip
 8004096:	2200      	movs	r2, #0
 8004098:	4658      	mov	r0, fp
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <__ieee754_pow+0x3d0>)
 800409c:	f7fc f86c 	bl	8000178 <__aeabi_dsub>
 80040a0:	a355      	add	r3, pc, #340	; (adr r3, 80041f8 <__ieee754_pow+0x3b0>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
 80040aa:	f7fc fa1d 	bl	80004e8 <__aeabi_dmul>
 80040ae:	a354      	add	r3, pc, #336	; (adr r3, 8004200 <__ieee754_pow+0x3b8>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	4606      	mov	r6, r0
 80040b6:	460f      	mov	r7, r1
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f7fc fa14 	bl	80004e8 <__aeabi_dmul>
 80040c0:	2200      	movs	r2, #0
 80040c2:	4682      	mov	sl, r0
 80040c4:	468b      	mov	fp, r1
 80040c6:	4620      	mov	r0, r4
 80040c8:	4629      	mov	r1, r5
 80040ca:	4b54      	ldr	r3, [pc, #336]	; (800421c <__ieee754_pow+0x3d4>)
 80040cc:	f7fc fa0c 	bl	80004e8 <__aeabi_dmul>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	a14c      	add	r1, pc, #304	; (adr r1, 8004208 <__ieee754_pow+0x3c0>)
 80040d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040da:	f7fc f84d 	bl	8000178 <__aeabi_dsub>
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	f7fc fa01 	bl	80004e8 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	2000      	movs	r0, #0
 80040ec:	494c      	ldr	r1, [pc, #304]	; (8004220 <__ieee754_pow+0x3d8>)
 80040ee:	f7fc f843 	bl	8000178 <__aeabi_dsub>
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	4680      	mov	r8, r0
 80040f8:	4689      	mov	r9, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc f9f3 	bl	80004e8 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4640      	mov	r0, r8
 8004108:	4649      	mov	r1, r9
 800410a:	f7fc f9ed 	bl	80004e8 <__aeabi_dmul>
 800410e:	a340      	add	r3, pc, #256	; (adr r3, 8004210 <__ieee754_pow+0x3c8>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc f9e8 	bl	80004e8 <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4650      	mov	r0, sl
 800411e:	4659      	mov	r1, fp
 8004120:	f7fc f82a 	bl	8000178 <__aeabi_dsub>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4604      	mov	r4, r0
 800412a:	460d      	mov	r5, r1
 800412c:	4630      	mov	r0, r6
 800412e:	4639      	mov	r1, r7
 8004130:	f7fc f824 	bl	800017c <__adddf3>
 8004134:	2000      	movs	r0, #0
 8004136:	4632      	mov	r2, r6
 8004138:	463b      	mov	r3, r7
 800413a:	4682      	mov	sl, r0
 800413c:	468b      	mov	fp, r1
 800413e:	f7fc f81b 	bl	8000178 <__aeabi_dsub>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc f815 	bl	8000178 <__aeabi_dsub>
 800414e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004152:	9b00      	ldr	r3, [sp, #0]
 8004154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004156:	3b01      	subs	r3, #1
 8004158:	4313      	orrs	r3, r2
 800415a:	f04f 0600 	mov.w	r6, #0
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	bf0c      	ite	eq
 8004164:	4b2f      	ldreq	r3, [pc, #188]	; (8004224 <__ieee754_pow+0x3dc>)
 8004166:	4b2c      	ldrne	r3, [pc, #176]	; (8004218 <__ieee754_pow+0x3d0>)
 8004168:	4604      	mov	r4, r0
 800416a:	460d      	mov	r5, r1
 800416c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004170:	e9cd 2300 	strd	r2, r3, [sp]
 8004174:	4632      	mov	r2, r6
 8004176:	463b      	mov	r3, r7
 8004178:	f7fb fffe 	bl	8000178 <__aeabi_dsub>
 800417c:	4652      	mov	r2, sl
 800417e:	465b      	mov	r3, fp
 8004180:	f7fc f9b2 	bl	80004e8 <__aeabi_dmul>
 8004184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004188:	4680      	mov	r8, r0
 800418a:	4689      	mov	r9, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f9aa 	bl	80004e8 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fb ffee 	bl	800017c <__adddf3>
 80041a0:	4632      	mov	r2, r6
 80041a2:	463b      	mov	r3, r7
 80041a4:	4680      	mov	r8, r0
 80041a6:	4689      	mov	r9, r1
 80041a8:	4650      	mov	r0, sl
 80041aa:	4659      	mov	r1, fp
 80041ac:	f7fc f99c 	bl	80004e8 <__aeabi_dmul>
 80041b0:	4604      	mov	r4, r0
 80041b2:	460d      	mov	r5, r1
 80041b4:	460b      	mov	r3, r1
 80041b6:	4602      	mov	r2, r0
 80041b8:	4649      	mov	r1, r9
 80041ba:	4640      	mov	r0, r8
 80041bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041c0:	f7fb ffdc 	bl	800017c <__adddf3>
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <__ieee754_pow+0x3e0>)
 80041c6:	4682      	mov	sl, r0
 80041c8:	4299      	cmp	r1, r3
 80041ca:	460f      	mov	r7, r1
 80041cc:	460e      	mov	r6, r1
 80041ce:	f340 82e7 	ble.w	80047a0 <__ieee754_pow+0x958>
 80041d2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80041d6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80041da:	4303      	orrs	r3, r0
 80041dc:	f000 81e2 	beq.w	80045a4 <__ieee754_pow+0x75c>
 80041e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2300      	movs	r3, #0
 80041e8:	f7fc fbf0 	bl	80009cc <__aeabi_dcmplt>
 80041ec:	3800      	subs	r0, #0
 80041ee:	bf18      	it	ne
 80041f0:	2001      	movne	r0, #1
 80041f2:	e72f      	b.n	8004054 <__ieee754_pow+0x20c>
 80041f4:	f3af 8000 	nop.w
 80041f8:	60000000 	.word	0x60000000
 80041fc:	3ff71547 	.word	0x3ff71547
 8004200:	f85ddf44 	.word	0xf85ddf44
 8004204:	3e54ae0b 	.word	0x3e54ae0b
 8004208:	55555555 	.word	0x55555555
 800420c:	3fd55555 	.word	0x3fd55555
 8004210:	652b82fe 	.word	0x652b82fe
 8004214:	3ff71547 	.word	0x3ff71547
 8004218:	3ff00000 	.word	0x3ff00000
 800421c:	3fd00000 	.word	0x3fd00000
 8004220:	3fe00000 	.word	0x3fe00000
 8004224:	bff00000 	.word	0xbff00000
 8004228:	408fffff 	.word	0x408fffff
 800422c:	4bd4      	ldr	r3, [pc, #848]	; (8004580 <__ieee754_pow+0x738>)
 800422e:	2200      	movs	r2, #0
 8004230:	402b      	ands	r3, r5
 8004232:	b943      	cbnz	r3, 8004246 <__ieee754_pow+0x3fe>
 8004234:	4658      	mov	r0, fp
 8004236:	4661      	mov	r1, ip
 8004238:	4bd2      	ldr	r3, [pc, #840]	; (8004584 <__ieee754_pow+0x73c>)
 800423a:	f7fc f955 	bl	80004e8 <__aeabi_dmul>
 800423e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004242:	4683      	mov	fp, r0
 8004244:	460c      	mov	r4, r1
 8004246:	1523      	asrs	r3, r4, #20
 8004248:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800424c:	4413      	add	r3, r2
 800424e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004250:	4bcd      	ldr	r3, [pc, #820]	; (8004588 <__ieee754_pow+0x740>)
 8004252:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004256:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800425a:	429c      	cmp	r4, r3
 800425c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004260:	dd08      	ble.n	8004274 <__ieee754_pow+0x42c>
 8004262:	4bca      	ldr	r3, [pc, #808]	; (800458c <__ieee754_pow+0x744>)
 8004264:	429c      	cmp	r4, r3
 8004266:	f340 8164 	ble.w	8004532 <__ieee754_pow+0x6ea>
 800426a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800426c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004270:	3301      	adds	r3, #1
 8004272:	930b      	str	r3, [sp, #44]	; 0x2c
 8004274:	2600      	movs	r6, #0
 8004276:	00f3      	lsls	r3, r6, #3
 8004278:	930d      	str	r3, [sp, #52]	; 0x34
 800427a:	4bc5      	ldr	r3, [pc, #788]	; (8004590 <__ieee754_pow+0x748>)
 800427c:	4658      	mov	r0, fp
 800427e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004282:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004286:	4629      	mov	r1, r5
 8004288:	461a      	mov	r2, r3
 800428a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800428e:	4623      	mov	r3, r4
 8004290:	f7fb ff72 	bl	8000178 <__aeabi_dsub>
 8004294:	46da      	mov	sl, fp
 8004296:	462b      	mov	r3, r5
 8004298:	4652      	mov	r2, sl
 800429a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800429e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042a2:	f7fb ff6b 	bl	800017c <__adddf3>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	2000      	movs	r0, #0
 80042ac:	49b9      	ldr	r1, [pc, #740]	; (8004594 <__ieee754_pow+0x74c>)
 80042ae:	f7fc fa45 	bl	800073c <__aeabi_ddiv>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042be:	f7fc f913 	bl	80004e8 <__aeabi_dmul>
 80042c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80042ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80042ce:	2300      	movs	r3, #0
 80042d0:	2200      	movs	r2, #0
 80042d2:	46ab      	mov	fp, r5
 80042d4:	106d      	asrs	r5, r5, #1
 80042d6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80042da:	9304      	str	r3, [sp, #16]
 80042dc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80042e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80042e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80042e8:	4640      	mov	r0, r8
 80042ea:	4649      	mov	r1, r9
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	f7fc f8fa 	bl	80004e8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042fc:	f7fb ff3c 	bl	8000178 <__aeabi_dsub>
 8004300:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004304:	4606      	mov	r6, r0
 8004306:	460f      	mov	r7, r1
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fb ff34 	bl	8000178 <__aeabi_dsub>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4650      	mov	r0, sl
 8004316:	4659      	mov	r1, fp
 8004318:	f7fb ff2e 	bl	8000178 <__aeabi_dsub>
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	f7fc f8e2 	bl	80004e8 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4630      	mov	r0, r6
 800432a:	4639      	mov	r1, r7
 800432c:	f7fb ff24 	bl	8000178 <__aeabi_dsub>
 8004330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004334:	f7fc f8d8 	bl	80004e8 <__aeabi_dmul>
 8004338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800433c:	4682      	mov	sl, r0
 800433e:	468b      	mov	fp, r1
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	f7fc f8d0 	bl	80004e8 <__aeabi_dmul>
 8004348:	a37b      	add	r3, pc, #492	; (adr r3, 8004538 <__ieee754_pow+0x6f0>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	4604      	mov	r4, r0
 8004350:	460d      	mov	r5, r1
 8004352:	f7fc f8c9 	bl	80004e8 <__aeabi_dmul>
 8004356:	a37a      	add	r3, pc, #488	; (adr r3, 8004540 <__ieee754_pow+0x6f8>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fb ff0e 	bl	800017c <__adddf3>
 8004360:	4622      	mov	r2, r4
 8004362:	462b      	mov	r3, r5
 8004364:	f7fc f8c0 	bl	80004e8 <__aeabi_dmul>
 8004368:	a377      	add	r3, pc, #476	; (adr r3, 8004548 <__ieee754_pow+0x700>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fb ff05 	bl	800017c <__adddf3>
 8004372:	4622      	mov	r2, r4
 8004374:	462b      	mov	r3, r5
 8004376:	f7fc f8b7 	bl	80004e8 <__aeabi_dmul>
 800437a:	a375      	add	r3, pc, #468	; (adr r3, 8004550 <__ieee754_pow+0x708>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fb fefc 	bl	800017c <__adddf3>
 8004384:	4622      	mov	r2, r4
 8004386:	462b      	mov	r3, r5
 8004388:	f7fc f8ae 	bl	80004e8 <__aeabi_dmul>
 800438c:	a372      	add	r3, pc, #456	; (adr r3, 8004558 <__ieee754_pow+0x710>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fb fef3 	bl	800017c <__adddf3>
 8004396:	4622      	mov	r2, r4
 8004398:	462b      	mov	r3, r5
 800439a:	f7fc f8a5 	bl	80004e8 <__aeabi_dmul>
 800439e:	a370      	add	r3, pc, #448	; (adr r3, 8004560 <__ieee754_pow+0x718>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f7fb feea 	bl	800017c <__adddf3>
 80043a8:	4622      	mov	r2, r4
 80043aa:	4606      	mov	r6, r0
 80043ac:	460f      	mov	r7, r1
 80043ae:	462b      	mov	r3, r5
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fc f898 	bl	80004e8 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4630      	mov	r0, r6
 80043be:	4639      	mov	r1, r7
 80043c0:	f7fc f892 	bl	80004e8 <__aeabi_dmul>
 80043c4:	4604      	mov	r4, r0
 80043c6:	460d      	mov	r5, r1
 80043c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	f7fb fed4 	bl	800017c <__adddf3>
 80043d4:	4652      	mov	r2, sl
 80043d6:	465b      	mov	r3, fp
 80043d8:	f7fc f886 	bl	80004e8 <__aeabi_dmul>
 80043dc:	4622      	mov	r2, r4
 80043de:	462b      	mov	r3, r5
 80043e0:	f7fb fecc 	bl	800017c <__adddf3>
 80043e4:	4642      	mov	r2, r8
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	464b      	mov	r3, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	4649      	mov	r1, r9
 80043f0:	f7fc f87a 	bl	80004e8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043fc:	2200      	movs	r2, #0
 80043fe:	4b66      	ldr	r3, [pc, #408]	; (8004598 <__ieee754_pow+0x750>)
 8004400:	f7fb febc 	bl	800017c <__adddf3>
 8004404:	4632      	mov	r2, r6
 8004406:	463b      	mov	r3, r7
 8004408:	f7fb feb8 	bl	800017c <__adddf3>
 800440c:	2400      	movs	r4, #0
 800440e:	460d      	mov	r5, r1
 8004410:	4622      	mov	r2, r4
 8004412:	460b      	mov	r3, r1
 8004414:	4640      	mov	r0, r8
 8004416:	4649      	mov	r1, r9
 8004418:	f7fc f866 	bl	80004e8 <__aeabi_dmul>
 800441c:	2200      	movs	r2, #0
 800441e:	4680      	mov	r8, r0
 8004420:	4689      	mov	r9, r1
 8004422:	4620      	mov	r0, r4
 8004424:	4629      	mov	r1, r5
 8004426:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <__ieee754_pow+0x750>)
 8004428:	f7fb fea6 	bl	8000178 <__aeabi_dsub>
 800442c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004430:	f7fb fea2 	bl	8000178 <__aeabi_dsub>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4630      	mov	r0, r6
 800443a:	4639      	mov	r1, r7
 800443c:	f7fb fe9c 	bl	8000178 <__aeabi_dsub>
 8004440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004444:	f7fc f850 	bl	80004e8 <__aeabi_dmul>
 8004448:	4622      	mov	r2, r4
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	462b      	mov	r3, r5
 8004450:	4650      	mov	r0, sl
 8004452:	4659      	mov	r1, fp
 8004454:	f7fc f848 	bl	80004e8 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4630      	mov	r0, r6
 800445e:	4639      	mov	r1, r7
 8004460:	f7fb fe8c 	bl	800017c <__adddf3>
 8004464:	2400      	movs	r4, #0
 8004466:	4606      	mov	r6, r0
 8004468:	460f      	mov	r7, r1
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f7fb fe83 	bl	800017c <__adddf3>
 8004476:	a33c      	add	r3, pc, #240	; (adr r3, 8004568 <__ieee754_pow+0x720>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	4620      	mov	r0, r4
 800447e:	460d      	mov	r5, r1
 8004480:	f7fc f832 	bl	80004e8 <__aeabi_dmul>
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fb fe72 	bl	8000178 <__aeabi_dsub>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4630      	mov	r0, r6
 800449a:	4639      	mov	r1, r7
 800449c:	f7fb fe6c 	bl	8000178 <__aeabi_dsub>
 80044a0:	a333      	add	r3, pc, #204	; (adr r3, 8004570 <__ieee754_pow+0x728>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fc f81f 	bl	80004e8 <__aeabi_dmul>
 80044aa:	a333      	add	r3, pc, #204	; (adr r3, 8004578 <__ieee754_pow+0x730>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fc f816 	bl	80004e8 <__aeabi_dmul>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4630      	mov	r0, r6
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fb fe5a 	bl	800017c <__adddf3>
 80044c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <__ieee754_pow+0x754>)
 80044cc:	4413      	add	r3, r2
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f7fb fe53 	bl	800017c <__adddf3>
 80044d6:	4680      	mov	r8, r0
 80044d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80044da:	4689      	mov	r9, r1
 80044dc:	f7fb ff9a 	bl	8000414 <__aeabi_i2d>
 80044e0:	4604      	mov	r4, r0
 80044e2:	460d      	mov	r5, r1
 80044e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <__ieee754_pow+0x758>)
 80044ec:	4413      	add	r3, r2
 80044ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80044f2:	4642      	mov	r2, r8
 80044f4:	464b      	mov	r3, r9
 80044f6:	f7fb fe41 	bl	800017c <__adddf3>
 80044fa:	4632      	mov	r2, r6
 80044fc:	463b      	mov	r3, r7
 80044fe:	f7fb fe3d 	bl	800017c <__adddf3>
 8004502:	4622      	mov	r2, r4
 8004504:	462b      	mov	r3, r5
 8004506:	f7fb fe39 	bl	800017c <__adddf3>
 800450a:	2000      	movs	r0, #0
 800450c:	4622      	mov	r2, r4
 800450e:	462b      	mov	r3, r5
 8004510:	4682      	mov	sl, r0
 8004512:	468b      	mov	fp, r1
 8004514:	f7fb fe30 	bl	8000178 <__aeabi_dsub>
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	f7fb fe2c 	bl	8000178 <__aeabi_dsub>
 8004520:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004524:	f7fb fe28 	bl	8000178 <__aeabi_dsub>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4640      	mov	r0, r8
 800452e:	4649      	mov	r1, r9
 8004530:	e60b      	b.n	800414a <__ieee754_pow+0x302>
 8004532:	2601      	movs	r6, #1
 8004534:	e69f      	b.n	8004276 <__ieee754_pow+0x42e>
 8004536:	bf00      	nop
 8004538:	4a454eef 	.word	0x4a454eef
 800453c:	3fca7e28 	.word	0x3fca7e28
 8004540:	93c9db65 	.word	0x93c9db65
 8004544:	3fcd864a 	.word	0x3fcd864a
 8004548:	a91d4101 	.word	0xa91d4101
 800454c:	3fd17460 	.word	0x3fd17460
 8004550:	518f264d 	.word	0x518f264d
 8004554:	3fd55555 	.word	0x3fd55555
 8004558:	db6fabff 	.word	0xdb6fabff
 800455c:	3fdb6db6 	.word	0x3fdb6db6
 8004560:	33333303 	.word	0x33333303
 8004564:	3fe33333 	.word	0x3fe33333
 8004568:	e0000000 	.word	0xe0000000
 800456c:	3feec709 	.word	0x3feec709
 8004570:	dc3a03fd 	.word	0xdc3a03fd
 8004574:	3feec709 	.word	0x3feec709
 8004578:	145b01f5 	.word	0x145b01f5
 800457c:	be3e2fe0 	.word	0xbe3e2fe0
 8004580:	7ff00000 	.word	0x7ff00000
 8004584:	43400000 	.word	0x43400000
 8004588:	0003988e 	.word	0x0003988e
 800458c:	000bb679 	.word	0x000bb679
 8004590:	08004a70 	.word	0x08004a70
 8004594:	3ff00000 	.word	0x3ff00000
 8004598:	40080000 	.word	0x40080000
 800459c:	08004a90 	.word	0x08004a90
 80045a0:	08004a80 	.word	0x08004a80
 80045a4:	a39c      	add	r3, pc, #624	; (adr r3, 8004818 <__ieee754_pow+0x9d0>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	4640      	mov	r0, r8
 80045ac:	4649      	mov	r1, r9
 80045ae:	f7fb fde5 	bl	800017c <__adddf3>
 80045b2:	4622      	mov	r2, r4
 80045b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045b8:	462b      	mov	r3, r5
 80045ba:	4650      	mov	r0, sl
 80045bc:	4639      	mov	r1, r7
 80045be:	f7fb fddb 	bl	8000178 <__aeabi_dsub>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ca:	f7fc fa1d 	bl	8000a08 <__aeabi_dcmpgt>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f47f ae06 	bne.w	80041e0 <__ieee754_pow+0x398>
 80045d4:	4aa2      	ldr	r2, [pc, #648]	; (8004860 <__ieee754_pow+0xa18>)
 80045d6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80045da:	4293      	cmp	r3, r2
 80045dc:	f340 8100 	ble.w	80047e0 <__ieee754_pow+0x998>
 80045e0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80045e4:	151b      	asrs	r3, r3, #20
 80045e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80045ea:	fa4a fa03 	asr.w	sl, sl, r3
 80045ee:	44b2      	add	sl, r6
 80045f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80045f4:	489b      	ldr	r0, [pc, #620]	; (8004864 <__ieee754_pow+0xa1c>)
 80045f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80045fa:	4108      	asrs	r0, r1
 80045fc:	ea00 030a 	and.w	r3, r0, sl
 8004600:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004604:	f1c1 0114 	rsb	r1, r1, #20
 8004608:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800460c:	fa4a fa01 	asr.w	sl, sl, r1
 8004610:	2e00      	cmp	r6, #0
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4620      	mov	r0, r4
 8004618:	4629      	mov	r1, r5
 800461a:	bfb8      	it	lt
 800461c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004620:	f7fb fdaa 	bl	8000178 <__aeabi_dsub>
 8004624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800462c:	2400      	movs	r4, #0
 800462e:	4642      	mov	r2, r8
 8004630:	464b      	mov	r3, r9
 8004632:	f7fb fda3 	bl	800017c <__adddf3>
 8004636:	a37a      	add	r3, pc, #488	; (adr r3, 8004820 <__ieee754_pow+0x9d8>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	4620      	mov	r0, r4
 800463e:	460d      	mov	r5, r1
 8004640:	f7fb ff52 	bl	80004e8 <__aeabi_dmul>
 8004644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004648:	4606      	mov	r6, r0
 800464a:	460f      	mov	r7, r1
 800464c:	4620      	mov	r0, r4
 800464e:	4629      	mov	r1, r5
 8004650:	f7fb fd92 	bl	8000178 <__aeabi_dsub>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fb fd8c 	bl	8000178 <__aeabi_dsub>
 8004660:	a371      	add	r3, pc, #452	; (adr r3, 8004828 <__ieee754_pow+0x9e0>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fb ff3f 	bl	80004e8 <__aeabi_dmul>
 800466a:	a371      	add	r3, pc, #452	; (adr r3, 8004830 <__ieee754_pow+0x9e8>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	4680      	mov	r8, r0
 8004672:	4689      	mov	r9, r1
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb ff36 	bl	80004e8 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4640      	mov	r0, r8
 8004682:	4649      	mov	r1, r9
 8004684:	f7fb fd7a 	bl	800017c <__adddf3>
 8004688:	4604      	mov	r4, r0
 800468a:	460d      	mov	r5, r1
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4630      	mov	r0, r6
 8004692:	4639      	mov	r1, r7
 8004694:	f7fb fd72 	bl	800017c <__adddf3>
 8004698:	4632      	mov	r2, r6
 800469a:	463b      	mov	r3, r7
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	f7fb fd6a 	bl	8000178 <__aeabi_dsub>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4620      	mov	r0, r4
 80046aa:	4629      	mov	r1, r5
 80046ac:	f7fb fd64 	bl	8000178 <__aeabi_dsub>
 80046b0:	4642      	mov	r2, r8
 80046b2:	4606      	mov	r6, r0
 80046b4:	460f      	mov	r7, r1
 80046b6:	464b      	mov	r3, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	4649      	mov	r1, r9
 80046bc:	f7fb ff14 	bl	80004e8 <__aeabi_dmul>
 80046c0:	a35d      	add	r3, pc, #372	; (adr r3, 8004838 <__ieee754_pow+0x9f0>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	4604      	mov	r4, r0
 80046c8:	460d      	mov	r5, r1
 80046ca:	f7fb ff0d 	bl	80004e8 <__aeabi_dmul>
 80046ce:	a35c      	add	r3, pc, #368	; (adr r3, 8004840 <__ieee754_pow+0x9f8>)
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f7fb fd50 	bl	8000178 <__aeabi_dsub>
 80046d8:	4622      	mov	r2, r4
 80046da:	462b      	mov	r3, r5
 80046dc:	f7fb ff04 	bl	80004e8 <__aeabi_dmul>
 80046e0:	a359      	add	r3, pc, #356	; (adr r3, 8004848 <__ieee754_pow+0xa00>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fb fd49 	bl	800017c <__adddf3>
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	f7fb fefb 	bl	80004e8 <__aeabi_dmul>
 80046f2:	a357      	add	r3, pc, #348	; (adr r3, 8004850 <__ieee754_pow+0xa08>)
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f7fb fd3e 	bl	8000178 <__aeabi_dsub>
 80046fc:	4622      	mov	r2, r4
 80046fe:	462b      	mov	r3, r5
 8004700:	f7fb fef2 	bl	80004e8 <__aeabi_dmul>
 8004704:	a354      	add	r3, pc, #336	; (adr r3, 8004858 <__ieee754_pow+0xa10>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f7fb fd37 	bl	800017c <__adddf3>
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	f7fb fee9 	bl	80004e8 <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fb fd2b 	bl	8000178 <__aeabi_dsub>
 8004722:	4604      	mov	r4, r0
 8004724:	460d      	mov	r5, r1
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4640      	mov	r0, r8
 800472c:	4649      	mov	r1, r9
 800472e:	f7fb fedb 	bl	80004e8 <__aeabi_dmul>
 8004732:	2200      	movs	r2, #0
 8004734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fd1a 	bl	8000178 <__aeabi_dsub>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fb fff6 	bl	800073c <__aeabi_ddiv>
 8004750:	4632      	mov	r2, r6
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	463b      	mov	r3, r7
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb fec4 	bl	80004e8 <__aeabi_dmul>
 8004760:	4632      	mov	r2, r6
 8004762:	463b      	mov	r3, r7
 8004764:	f7fb fd0a 	bl	800017c <__adddf3>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fd02 	bl	8000178 <__aeabi_dsub>
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	f7fb fcfe 	bl	8000178 <__aeabi_dsub>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	2000      	movs	r0, #0
 8004782:	4939      	ldr	r1, [pc, #228]	; (8004868 <__ieee754_pow+0xa20>)
 8004784:	f7fb fcf8 	bl	8000178 <__aeabi_dsub>
 8004788:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800478c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004790:	da29      	bge.n	80047e6 <__ieee754_pow+0x99e>
 8004792:	4652      	mov	r2, sl
 8004794:	f000 f870 	bl	8004878 <scalbn>
 8004798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800479c:	f7ff bbfd 	b.w	8003f9a <__ieee754_pow+0x152>
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <__ieee754_pow+0xa24>)
 80047a2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80047a6:	429f      	cmp	r7, r3
 80047a8:	f77f af14 	ble.w	80045d4 <__ieee754_pow+0x78c>
 80047ac:	4b30      	ldr	r3, [pc, #192]	; (8004870 <__ieee754_pow+0xa28>)
 80047ae:	440b      	add	r3, r1
 80047b0:	4303      	orrs	r3, r0
 80047b2:	d009      	beq.n	80047c8 <__ieee754_pow+0x980>
 80047b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2300      	movs	r3, #0
 80047bc:	f7fc f906 	bl	80009cc <__aeabi_dcmplt>
 80047c0:	3800      	subs	r0, #0
 80047c2:	bf18      	it	ne
 80047c4:	2001      	movne	r0, #1
 80047c6:	e452      	b.n	800406e <__ieee754_pow+0x226>
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	f7fb fcd4 	bl	8000178 <__aeabi_dsub>
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	f7fc f90e 	bl	80009f4 <__aeabi_dcmpge>
 80047d8:	2800      	cmp	r0, #0
 80047da:	f43f aefb 	beq.w	80045d4 <__ieee754_pow+0x78c>
 80047de:	e7e9      	b.n	80047b4 <__ieee754_pow+0x96c>
 80047e0:	f04f 0a00 	mov.w	sl, #0
 80047e4:	e720      	b.n	8004628 <__ieee754_pow+0x7e0>
 80047e6:	4621      	mov	r1, r4
 80047e8:	e7d6      	b.n	8004798 <__ieee754_pow+0x950>
 80047ea:	f04f 0b00 	mov.w	fp, #0
 80047ee:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004868 <__ieee754_pow+0xa20>
 80047f2:	f7ff bbb9 	b.w	8003f68 <__ieee754_pow+0x120>
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	f04f 0c00 	mov.w	ip, #0
 80047fe:	f7ff bbb3 	b.w	8003f68 <__ieee754_pow+0x120>
 8004802:	4640      	mov	r0, r8
 8004804:	4649      	mov	r1, r9
 8004806:	f7ff bb3c 	b.w	8003e82 <__ieee754_pow+0x3a>
 800480a:	9200      	str	r2, [sp, #0]
 800480c:	f7ff bb88 	b.w	8003f20 <__ieee754_pow+0xd8>
 8004810:	2300      	movs	r3, #0
 8004812:	f7ff bb72 	b.w	8003efa <__ieee754_pow+0xb2>
 8004816:	bf00      	nop
 8004818:	652b82fe 	.word	0x652b82fe
 800481c:	3c971547 	.word	0x3c971547
 8004820:	00000000 	.word	0x00000000
 8004824:	3fe62e43 	.word	0x3fe62e43
 8004828:	fefa39ef 	.word	0xfefa39ef
 800482c:	3fe62e42 	.word	0x3fe62e42
 8004830:	0ca86c39 	.word	0x0ca86c39
 8004834:	be205c61 	.word	0xbe205c61
 8004838:	72bea4d0 	.word	0x72bea4d0
 800483c:	3e663769 	.word	0x3e663769
 8004840:	c5d26bf1 	.word	0xc5d26bf1
 8004844:	3ebbbd41 	.word	0x3ebbbd41
 8004848:	af25de2c 	.word	0xaf25de2c
 800484c:	3f11566a 	.word	0x3f11566a
 8004850:	16bebd93 	.word	0x16bebd93
 8004854:	3f66c16c 	.word	0x3f66c16c
 8004858:	5555553e 	.word	0x5555553e
 800485c:	3fc55555 	.word	0x3fc55555
 8004860:	3fe00000 	.word	0x3fe00000
 8004864:	fff00000 	.word	0xfff00000
 8004868:	3ff00000 	.word	0x3ff00000
 800486c:	4090cbff 	.word	0x4090cbff
 8004870:	3f6f3400 	.word	0x3f6f3400
 8004874:	00000000 	.word	0x00000000

08004878 <scalbn>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4616      	mov	r6, r2
 800487c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004880:	4604      	mov	r4, r0
 8004882:	460d      	mov	r5, r1
 8004884:	460b      	mov	r3, r1
 8004886:	b992      	cbnz	r2, 80048ae <scalbn+0x36>
 8004888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800488c:	4303      	orrs	r3, r0
 800488e:	d03c      	beq.n	800490a <scalbn+0x92>
 8004890:	4b31      	ldr	r3, [pc, #196]	; (8004958 <scalbn+0xe0>)
 8004892:	2200      	movs	r2, #0
 8004894:	f7fb fe28 	bl	80004e8 <__aeabi_dmul>
 8004898:	4b30      	ldr	r3, [pc, #192]	; (800495c <scalbn+0xe4>)
 800489a:	4604      	mov	r4, r0
 800489c:	429e      	cmp	r6, r3
 800489e:	460d      	mov	r5, r1
 80048a0:	da0f      	bge.n	80048c2 <scalbn+0x4a>
 80048a2:	a329      	add	r3, pc, #164	; (adr r3, 8004948 <scalbn+0xd0>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fe1e 	bl	80004e8 <__aeabi_dmul>
 80048ac:	e006      	b.n	80048bc <scalbn+0x44>
 80048ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80048b2:	42ba      	cmp	r2, r7
 80048b4:	d109      	bne.n	80048ca <scalbn+0x52>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f7fb fc60 	bl	800017c <__adddf3>
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
 80048c0:	e023      	b.n	800490a <scalbn+0x92>
 80048c2:	460b      	mov	r3, r1
 80048c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80048c8:	3a36      	subs	r2, #54	; 0x36
 80048ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80048ce:	428e      	cmp	r6, r1
 80048d0:	dd0e      	ble.n	80048f0 <scalbn+0x78>
 80048d2:	a31f      	add	r3, pc, #124	; (adr r3, 8004950 <scalbn+0xd8>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80048dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80048e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80048e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80048e8:	481d      	ldr	r0, [pc, #116]	; (8004960 <scalbn+0xe8>)
 80048ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80048ee:	e7db      	b.n	80048a8 <scalbn+0x30>
 80048f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80048f4:	4432      	add	r2, r6
 80048f6:	428a      	cmp	r2, r1
 80048f8:	dceb      	bgt.n	80048d2 <scalbn+0x5a>
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	dd08      	ble.n	8004910 <scalbn+0x98>
 80048fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004902:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004906:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004914:	da0c      	bge.n	8004930 <scalbn+0xb8>
 8004916:	a30c      	add	r3, pc, #48	; (adr r3, 8004948 <scalbn+0xd0>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004920:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004924:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004928:	480e      	ldr	r0, [pc, #56]	; (8004964 <scalbn+0xec>)
 800492a:	f041 011f 	orr.w	r1, r1, #31
 800492e:	e7bb      	b.n	80048a8 <scalbn+0x30>
 8004930:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004934:	3236      	adds	r2, #54	; 0x36
 8004936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800493a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	2200      	movs	r2, #0
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <scalbn+0xf0>)
 8004946:	e7af      	b.n	80048a8 <scalbn+0x30>
 8004948:	c2f8f359 	.word	0xc2f8f359
 800494c:	01a56e1f 	.word	0x01a56e1f
 8004950:	8800759c 	.word	0x8800759c
 8004954:	7e37e43c 	.word	0x7e37e43c
 8004958:	43500000 	.word	0x43500000
 800495c:	ffff3cb0 	.word	0xffff3cb0
 8004960:	8800759c 	.word	0x8800759c
 8004964:	c2f8f359 	.word	0xc2f8f359
 8004968:	3c900000 	.word	0x3c900000

0800496c <with_errno>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4604      	mov	r4, r0
 8004970:	460d      	mov	r5, r1
 8004972:	4616      	mov	r6, r2
 8004974:	f7fe fae4 	bl	8002f40 <__errno>
 8004978:	4629      	mov	r1, r5
 800497a:	6006      	str	r6, [r0, #0]
 800497c:	4620      	mov	r0, r4
 800497e:	bd70      	pop	{r4, r5, r6, pc}

08004980 <xflow>:
 8004980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004982:	4615      	mov	r5, r2
 8004984:	461c      	mov	r4, r3
 8004986:	b180      	cbz	r0, 80049aa <xflow+0x2a>
 8004988:	4610      	mov	r0, r2
 800498a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800498e:	e9cd 0100 	strd	r0, r1, [sp]
 8004992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004996:	4628      	mov	r0, r5
 8004998:	4621      	mov	r1, r4
 800499a:	f7fb fda5 	bl	80004e8 <__aeabi_dmul>
 800499e:	2222      	movs	r2, #34	; 0x22
 80049a0:	b003      	add	sp, #12
 80049a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049a6:	f7ff bfe1 	b.w	800496c <with_errno>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e7ee      	b.n	800498e <xflow+0xe>

080049b0 <__math_uflow>:
 80049b0:	2200      	movs	r2, #0
 80049b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049b6:	f7ff bfe3 	b.w	8004980 <xflow>

080049ba <__math_oflow>:
 80049ba:	2200      	movs	r2, #0
 80049bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80049c0:	f7ff bfde 	b.w	8004980 <xflow>

080049c4 <_init>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr

080049d0 <_fini>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr
