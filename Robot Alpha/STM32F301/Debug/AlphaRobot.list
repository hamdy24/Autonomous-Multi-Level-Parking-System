
AlphaRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001138  08001138  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001138  08001138  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001138  08001138  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800113c  0800113c  0001113c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  08001150  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08001150  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f6c  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ccb  00000000  00000000  00022fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  00023cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002815  00000000  00000000  00023ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004cdd  00000000  00000000  0002680d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c98b  00000000  00000000  0002b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000253  00000000  00000000  00037e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b34  00000000  00000000  000380c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00038bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	0800110c 	.word	0x0800110c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	0800110c 	.word	0x0800110c

08000170 <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b08e      	sub	sp, #56	; 0x38
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 8000178:	2301      	movs	r3, #1
 800017a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 800017e:	4a7c      	ldr	r2, [pc, #496]	; (8000370 <LCD_enuInit+0x200>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t RS = {
 800018a:	863b      	strh	r3, [r7, #48]	; 0x30
 800018c:	2304      	movs	r3, #4
 800018e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000192:	2302      	movs	r3, #2
 8000194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &RS);
 8000198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800019c:	4619      	mov	r1, r3
 800019e:	4875      	ldr	r0, [pc, #468]	; (8000374 <LCD_enuInit+0x204>)
 80001a0:	f000 fcd4 	bl	8000b4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	795b      	ldrb	r3, [r3, #5]
 80001a8:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t EN = {
 80001aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80001ac:	2304      	movs	r3, #4
 80001ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80001b2:	2302      	movs	r3, #2
 80001b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &EN);
 80001b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001bc:	4619      	mov	r1, r3
 80001be:	486d      	ldr	r0, [pc, #436]	; (8000374 <LCD_enuInit+0x204>)
 80001c0:	f000 fcc4 	bl	8000b4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	799b      	ldrb	r3, [r3, #6]
 80001c8:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t D7 = {
 80001ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80001cc:	2304      	movs	r3, #4
 80001ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80001d2:	2302      	movs	r3, #2
 80001d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &D7);
 80001d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001dc:	4619      	mov	r1, r3
 80001de:	4865      	ldr	r0, [pc, #404]	; (8000374 <LCD_enuInit+0x204>)
 80001e0:	f000 fcb4 	bl	8000b4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	79db      	ldrb	r3, [r3, #7]
 80001e8:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t D6 = {
 80001ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80001ec:	2304      	movs	r3, #4
 80001ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80001f2:	2302      	movs	r3, #2
 80001f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &D6);
 80001f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001fc:	4619      	mov	r1, r3
 80001fe:	485d      	ldr	r0, [pc, #372]	; (8000374 <LCD_enuInit+0x204>)
 8000200:	f000 fca4 	bl	8000b4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	7a1b      	ldrb	r3, [r3, #8]
 8000208:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t D5 = {
 800020a:	843b      	strh	r3, [r7, #32]
 800020c:	2304      	movs	r3, #4
 800020e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000212:	2302      	movs	r3, #2
 8000214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOA, &D5);
 8000218:	f107 0320 	add.w	r3, r7, #32
 800021c:	4619      	mov	r1, r3
 800021e:	4855      	ldr	r0, [pc, #340]	; (8000374 <LCD_enuInit+0x204>)
 8000220:	f000 fc94 	bl	8000b4c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7a5b      	ldrb	r3, [r3, #9]
 8000228:	b29b      	uxth	r3, r3
	GPIO_PinConfig_t D4 = {
 800022a:	83bb      	strh	r3, [r7, #28]
 800022c:	2304      	movs	r3, #4
 800022e:	77bb      	strb	r3, [r7, #30]
 8000230:	2302      	movs	r3, #2
 8000232:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &D4);
 8000234:	f107 031c 	add.w	r3, r7, #28
 8000238:	4619      	mov	r1, r3
 800023a:	484e      	ldr	r0, [pc, #312]	; (8000374 <LCD_enuInit+0x204>)
 800023c:	f000 fc86 	bl	8000b4c <MCAL_GPIO_Init>

	TIMER2_Init(RCC_CLK_8M);
 8000240:	2008      	movs	r0, #8
 8000242:	f000 fe2b 	bl	8000e9c <TIMER2_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
 8000246:	2201      	movs	r2, #1
 8000248:	2120      	movs	r1, #32
 800024a:	484a      	ldr	r0, [pc, #296]	; (8000374 <LCD_enuInit+0x204>)
 800024c:	f000 fd14 	bl	8000c78 <MCAL_GPIO_WritePin>
	Delay_ms(35); //power on
 8000250:	2023      	movs	r0, #35	; 0x23
 8000252:	f000 fe66 	bl	8000f22 <Delay_ms>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_LOW);
 8000256:	2200      	movs	r2, #0
 8000258:	2120      	movs	r1, #32
 800025a:	4846      	ldr	r0, [pc, #280]	; (8000374 <LCD_enuInit+0x204>)
 800025c:	f000 fd0c 	bl	8000c78 <MCAL_GPIO_WritePin>

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b04      	cmp	r3, #4
 8000266:	d10b      	bne.n	8000280 <LCD_enuInit+0x110>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	78db      	ldrb	r3, [r3, #3]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	4619      	mov	r1, r3
 8000272:	4841      	ldr	r0, [pc, #260]	; (8000378 <LCD_enuInit+0x208>)
 8000274:	f000 fd00 	bl	8000c78 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 8000278:	2028      	movs	r0, #40	; 0x28
 800027a:	f000 f87f 	bl	800037c <LCD_enuWriteAndLatch>
 800027e:	e046      	b.n	800030e <LCD_enuInit+0x19e>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b08      	cmp	r3, #8
 8000286:	d142      	bne.n	800030e <LCD_enuInit+0x19e>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	78db      	ldrb	r3, [r3, #3]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2200      	movs	r2, #0
 8000290:	4619      	mov	r1, r3
 8000292:	4839      	ldr	r0, [pc, #228]	; (8000378 <LCD_enuInit+0x208>)
 8000294:	f000 fcf0 	bl	8000c78 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 8000298:	2038      	movs	r0, #56	; 0x38
 800029a:	f000 f86f 	bl	800037c <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	7a9b      	ldrb	r3, [r3, #10]
 80002a2:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t D3 = {
 80002a4:	833b      	strh	r3, [r7, #24]
 80002a6:	2304      	movs	r3, #4
 80002a8:	76bb      	strb	r3, [r7, #26]
 80002aa:	2302      	movs	r3, #2
 80002ac:	76fb      	strb	r3, [r7, #27]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOA, &D3);
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4619      	mov	r1, r3
 80002b4:	482f      	ldr	r0, [pc, #188]	; (8000374 <LCD_enuInit+0x204>)
 80002b6:	f000 fc49 	bl	8000b4c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	7adb      	ldrb	r3, [r3, #11]
 80002be:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t D2 = {
 80002c0:	82bb      	strh	r3, [r7, #20]
 80002c2:	2304      	movs	r3, #4
 80002c4:	75bb      	strb	r3, [r7, #22]
 80002c6:	2302      	movs	r3, #2
 80002c8:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOA, &D2);
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	4619      	mov	r1, r3
 80002d0:	4828      	ldr	r0, [pc, #160]	; (8000374 <LCD_enuInit+0x204>)
 80002d2:	f000 fc3b 	bl	8000b4c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t D1 = {
 80002dc:	823b      	strh	r3, [r7, #16]
 80002de:	2304      	movs	r3, #4
 80002e0:	74bb      	strb	r3, [r7, #18]
 80002e2:	2302      	movs	r3, #2
 80002e4:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOA, &D1);
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	4619      	mov	r1, r3
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <LCD_enuInit+0x204>)
 80002ee:	f000 fc2d 	bl	8000b4c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	7b5b      	ldrb	r3, [r3, #13]
 80002f6:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t D0 = {
 80002f8:	81bb      	strh	r3, [r7, #12]
 80002fa:	2304      	movs	r3, #4
 80002fc:	73bb      	strb	r3, [r7, #14]
 80002fe:	2302      	movs	r3, #2
 8000300:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOA, &D0);
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	4619      	mov	r1, r3
 8000308:	481a      	ldr	r0, [pc, #104]	; (8000374 <LCD_enuInit+0x204>)
 800030a:	f000 fc1f 	bl	8000b4c <MCAL_GPIO_Init>
	}


	Delay_ms(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f000 fe07 	bl	8000f22 <Delay_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	78db      	ldrb	r3, [r3, #3]
 8000318:	b29b      	uxth	r3, r3
 800031a:	2200      	movs	r2, #0
 800031c:	4619      	mov	r1, r3
 800031e:	4816      	ldr	r0, [pc, #88]	; (8000378 <LCD_enuInit+0x208>)
 8000320:	f000 fcaa 	bl	8000c78 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 8000324:	200c      	movs	r0, #12
 8000326:	f000 f829 	bl	800037c <LCD_enuWriteAndLatch>

	Delay_ms(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fdf9 	bl	8000f22 <Delay_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	78db      	ldrb	r3, [r3, #3]
 8000334:	b29b      	uxth	r3, r3
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	480f      	ldr	r0, [pc, #60]	; (8000378 <LCD_enuInit+0x208>)
 800033c:	f000 fc9c 	bl	8000c78 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 f81b 	bl	800037c <LCD_enuWriteAndLatch>

	Delay_ms(3);
 8000346:	2003      	movs	r0, #3
 8000348:	f000 fdeb 	bl	8000f22 <Delay_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	b29b      	uxth	r3, r3
 8000352:	2200      	movs	r2, #0
 8000354:	4619      	mov	r1, r3
 8000356:	4808      	ldr	r0, [pc, #32]	; (8000378 <LCD_enuInit+0x208>)
 8000358:	f000 fc8e 	bl	8000c78 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 800035c:	2006      	movs	r0, #6
 800035e:	f000 f80d 	bl	800037c <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 8000362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000366:	4618      	mov	r0, r3
 8000368:	3738      	adds	r7, #56	; 0x38
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000002c 	.word	0x2000002c
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000386:	2301      	movs	r3, #1
 8000388:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 800038a:	4b88      	ldr	r3, [pc, #544]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	791b      	ldrb	r3, [r3, #4]
 8000390:	b29b      	uxth	r3, r3
 8000392:	2200      	movs	r2, #0
 8000394:	4619      	mov	r1, r3
 8000396:	4886      	ldr	r0, [pc, #536]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000398:	f000 fc6e 	bl	8000c78 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 800039c:	4b83      	ldr	r3, [pc, #524]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	795b      	ldrb	r3, [r3, #5]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	4881      	ldr	r0, [pc, #516]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80003aa:	f000 fc65 	bl	8000c78 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b28      	cmp	r3, #40	; 0x28
 80003b2:	d159      	bne.n	8000468 <LCD_enuWriteAndLatch+0xec>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 80003b4:	4b7d      	ldr	r3, [pc, #500]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	78db      	ldrb	r3, [r3, #3]
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	4619      	mov	r1, r3
 80003be:	487c      	ldr	r0, [pc, #496]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80003c0:	f000 fc43 	bl	8000c4a <MCAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 80003c8:	7bbb      	ldrb	r3, [r7, #14]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14c      	bne.n	8000468 <LCD_enuWriteAndLatch+0xec>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80003ce:	4b77      	ldr	r3, [pc, #476]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	799b      	ldrb	r3, [r3, #6]
 80003d4:	b299      	uxth	r1, r3
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	09db      	lsrs	r3, r3, #7
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	4874      	ldr	r0, [pc, #464]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80003e0:	f000 fc4a 	bl	8000c78 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80003e4:	4b71      	ldr	r3, [pc, #452]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	79db      	ldrb	r3, [r3, #7]
 80003ea:	b299      	uxth	r1, r3
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	099b      	lsrs	r3, r3, #6
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	486d      	ldr	r0, [pc, #436]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80003fc:	f000 fc3c 	bl	8000c78 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000400:	4b6a      	ldr	r3, [pc, #424]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	7a1b      	ldrb	r3, [r3, #8]
 8000406:	b299      	uxth	r1, r3
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	4866      	ldr	r0, [pc, #408]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000418:	f000 fc2e 	bl	8000c78 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 800041c:	4b63      	ldr	r3, [pc, #396]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	7a5b      	ldrb	r3, [r3, #9]
 8000422:	b299      	uxth	r1, r3
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	091b      	lsrs	r3, r3, #4
 8000428:	b2db      	uxtb	r3, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	485f      	ldr	r0, [pc, #380]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000434:	f000 fc20 	bl	8000c78 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000438:	4b5c      	ldr	r3, [pc, #368]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	b29b      	uxth	r3, r3
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	485a      	ldr	r0, [pc, #360]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000446:	f000 fc17 	bl	8000c78 <MCAL_GPIO_WritePin>
			Delay_ms(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f000 fd69 	bl	8000f22 <Delay_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000450:	4b56      	ldr	r3, [pc, #344]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	b29b      	uxth	r3, r3
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	4854      	ldr	r0, [pc, #336]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 800045e:	f000 fc0b 	bl	8000c78 <MCAL_GPIO_WritePin>
			Delay_ms(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 fd5d 	bl	8000f22 <Delay_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 8000468:	4b50      	ldr	r3, [pc, #320]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b04      	cmp	r3, #4
 8000470:	f040 80a0 	bne.w	80005b4 <LCD_enuWriteAndLatch+0x238>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000474:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	799b      	ldrb	r3, [r3, #6]
 800047a:	b299      	uxth	r1, r3
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	484a      	ldr	r0, [pc, #296]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000486:	f000 fbf7 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 800048a:	4b48      	ldr	r3, [pc, #288]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	79db      	ldrb	r3, [r3, #7]
 8000490:	b299      	uxth	r1, r3
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	099b      	lsrs	r3, r3, #6
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	4843      	ldr	r0, [pc, #268]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80004a2:	f000 fbe9 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 80004a6:	4b41      	ldr	r3, [pc, #260]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	7a1b      	ldrb	r3, [r3, #8]
 80004ac:	b299      	uxth	r1, r3
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	095b      	lsrs	r3, r3, #5
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	483c      	ldr	r0, [pc, #240]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80004be:	f000 fbdb 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 80004c2:	4b3a      	ldr	r3, [pc, #232]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	7a5b      	ldrb	r3, [r3, #9]
 80004c8:	b299      	uxth	r1, r3
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	4835      	ldr	r0, [pc, #212]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80004da:	f000 fbcd 	bl	8000c78 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 80004de:	4b33      	ldr	r3, [pc, #204]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	2201      	movs	r2, #1
 80004e8:	4619      	mov	r1, r3
 80004ea:	4831      	ldr	r0, [pc, #196]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80004ec:	f000 fbc4 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fd16 	bl	8000f22 <Delay_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	482b      	ldr	r0, [pc, #172]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000504:	f000 fbb8 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fd0a 	bl	8000f22 <Delay_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	799b      	ldrb	r3, [r3, #6]
 8000514:	b299      	uxth	r1, r3
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000526:	f000 fba7 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79db      	ldrb	r3, [r3, #7]
 8000530:	b299      	uxth	r1, r3
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000542:	f000 fb99 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7a1b      	ldrb	r3, [r3, #8]
 800054c:	b299      	uxth	r1, r3
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	4814      	ldr	r0, [pc, #80]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 800055e:	f000 fb8b 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	7a5b      	ldrb	r3, [r3, #9]
 8000568:	b299      	uxth	r1, r3
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000576:	f000 fb7f 	bl	8000c78 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 8000588:	f000 fb76 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fcc8 	bl	8000f22 <Delay_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LCD_enuWriteAndLatch+0x230>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <LCD_enuWriteAndLatch+0x234>)
 80005a0:	f000 fb6a 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fcbc 	bl	8000f22 <Delay_ms>
 80005aa:	e08c      	b.n	80006c6 <LCD_enuWriteAndLatch+0x34a>
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 80005b4:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b08      	cmp	r3, #8
 80005bc:	f040 8083 	bne.w	80006c6 <LCD_enuWriteAndLatch+0x34a>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80005c0:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	799b      	ldrb	r3, [r3, #6]
 80005c6:	b299      	uxth	r1, r3
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	09db      	lsrs	r3, r3, #7
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	4840      	ldr	r0, [pc, #256]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 80005d2:	f000 fb51 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80005d6:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	79db      	ldrb	r3, [r3, #7]
 80005dc:	b299      	uxth	r1, r3
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 80005ee:	f000 fb43 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7a1b      	ldrb	r3, [r3, #8]
 80005f8:	b299      	uxth	r1, r3
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	095b      	lsrs	r3, r3, #5
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	4832      	ldr	r0, [pc, #200]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 800060a:	f000 fb35 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	7a5b      	ldrb	r3, [r3, #9]
 8000614:	b299      	uxth	r1, r3
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 8000626:	f000 fb27 	bl	8000c78 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	7a9b      	ldrb	r3, [r3, #10]
 8000630:	b299      	uxth	r1, r3
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	4824      	ldr	r0, [pc, #144]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 8000642:	f000 fb19 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7adb      	ldrb	r3, [r3, #11]
 800064c:	b299      	uxth	r1, r3
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	481d      	ldr	r0, [pc, #116]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 800065e:	f000 fb0b 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7b1b      	ldrb	r3, [r3, #12]
 8000668:	b299      	uxth	r1, r3
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 800067a:	f000 fafd 	bl	8000c78 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7b5b      	ldrb	r3, [r3, #13]
 8000684:	b299      	uxth	r1, r3
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 8000692:	f000 faf1 	bl	8000c78 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	b29b      	uxth	r3, r3
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 80006a4:	f000 fae8 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fc3a 	bl	8000f22 <Delay_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LCD_enuWriteAndLatch+0x354>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <LCD_enuWriteAndLatch+0x358>)
 80006bc:	f000 fadc 	bl	8000c78 <MCAL_GPIO_WritePin>
		Delay_ms(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fc2e 	bl	8000f22 <Delay_ms>
	}

	return Local_ErrorState;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000002c 	.word	0x2000002c
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 80006e4:	e00f      	b.n	8000706 <LCD_enuSendString+0x2e>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <LCD_enuSendString+0x40>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <LCD_enuSendString+0x44>)
 80006f4:	f000 fac0 	bl	8000c78 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fe3b 	bl	800037c <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1eb      	bne.n	80006e6 <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000002c 	.word	0x2000002c
 800071c:	40010c00 	.word	0x40010c00

08000720 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <LCD_enuJumpCursorTo+0x94>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	78db      	ldrb	r3, [r3, #3]
 800073a:	b29b      	uxth	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	481d      	ldr	r0, [pc, #116]	; (80007b8 <LCD_enuJumpCursorTo+0x98>)
 8000742:	f000 fa99 	bl	8000c78 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d108      	bne.n	800075e <LCD_enuJumpCursorTo+0x3e>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	3b80      	subs	r3, #128	; 0x80
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe12 	bl	800037c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e025      	b.n	80007aa <LCD_enuJumpCursorTo+0x8a>
	}

	else if (Copy_u8StartX_Position == 2) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d108      	bne.n	8000776 <LCD_enuJumpCursorTo+0x56>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	3b40      	subs	r3, #64	; 0x40
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe06 	bl	800037c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e019      	b.n	80007aa <LCD_enuJumpCursorTo+0x8a>
	}
	else if (Copy_u8StartX_Position == 3) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d108      	bne.n	800078e <LCD_enuJumpCursorTo+0x6e>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	3b6c      	subs	r3, #108	; 0x6c
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fdfa 	bl	800037c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	e00d      	b.n	80007aa <LCD_enuJumpCursorTo+0x8a>
	}
	else if (Copy_u8StartX_Position == 4) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d108      	bne.n	80007a6 <LCD_enuJumpCursorTo+0x86>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	3b2c      	subs	r3, #44	; 0x2c
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fdee 	bl	800037c <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e001      	b.n	80007aa <LCD_enuJumpCursorTo+0x8a>
	} else {
		Local_ErrorState = ES_NOT_OK;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	40010c00 	.word	0x40010c00

080007bc <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <EXTI0_IRQHandler+0x1c>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <EXTI0_IRQHandler+0x1c>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <EXTI0_IRQHandler+0x20>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4798      	blx	r3

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010400 	.word	0x40010400
 80007dc:	20000030 	.word	0x20000030

080007e0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <EXTI1_IRQHandler+0x1c>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <EXTI1_IRQHandler+0x1c>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <EXTI1_IRQHandler+0x20>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4798      	blx	r3
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40010400 	.word	0x40010400
 8000800:	20000030 	.word	0x20000030

08000804 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <EXTI2_IRQHandler+0x1c>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <EXTI2_IRQHandler+0x1c>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <EXTI2_IRQHandler+0x20>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	4798      	blx	r3
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40010400 	.word	0x40010400
 8000824:	20000030 	.word	0x20000030

08000828 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <EXTI3_IRQHandler+0x1c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <EXTI3_IRQHandler+0x1c>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <EXTI3_IRQHandler+0x20>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010400 	.word	0x40010400
 8000848:	20000030 	.word	0x20000030

0800084c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <EXTI4_IRQHandler+0x1c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <EXTI4_IRQHandler+0x1c>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <EXTI4_IRQHandler+0x20>)
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	4798      	blx	r3
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010400 	.word	0x40010400
 800086c:	20000030 	.word	0x20000030

08000870 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <EXTI9_5_IRQHandler+0x22>
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a22      	ldr	r2, [pc, #136]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	6153      	str	r3, [r2, #20]
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <EXTI9_5_IRQHandler+0xa4>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	2b00      	cmp	r3, #0
 800089c:	d008      	beq.n	80008b0 <EXTI9_5_IRQHandler+0x40>
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <EXTI9_5_IRQHandler+0xa4>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d008      	beq.n	80008ce <EXTI9_5_IRQHandler+0x5e>
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c6:	6153      	str	r3, [r2, #20]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <EXTI9_5_IRQHandler+0xa4>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d008      	beq.n	80008ec <EXTI9_5_IRQHandler+0x7c>
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <EXTI9_5_IRQHandler+0xa4>)
 80008e8:	6a1b      	ldr	r3, [r3, #32]
 80008ea:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <EXTI9_5_IRQHandler+0x9a>
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <EXTI9_5_IRQHandler+0xa0>)
 80008fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000902:	6153      	str	r3, [r2, #20]
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <EXTI9_5_IRQHandler+0xa4>)
 8000906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000908:	4798      	blx	r3
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010400 	.word	0x40010400
 8000914:	20000030 	.word	0x20000030

08000918 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <EXTI15_10_IRQHandler+0x22>
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	6153      	str	r3, [r2, #20]
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <EXTI15_10_IRQHandler+0x40>
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800094c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI15_10_IRQHandler+0x5e>
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 800096a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800096e:	6153      	str	r3, [r2, #20]
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <EXTI15_10_IRQHandler+0x7c>
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <EXTI15_10_IRQHandler+0x9a>
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6153      	str	r3, [r2, #20]
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <EXTI15_10_IRQHandler+0xb8>
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <EXTI15_10_IRQHandler+0xbc>)
 80009c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c8:	6153      	str	r3, [r2, #20]
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <EXTI15_10_IRQHandler+0xc0>)
 80009cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ce:	4798      	blx	r3
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010400 	.word	0x40010400
 80009d8:	20000030 	.word	0x20000030

080009dc <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ec:	f000 80a5 	beq.w	8000b3a <Get_CRLH_Position+0x15e>
 80009f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009f4:	f300 80a3 	bgt.w	8000b3e <Get_CRLH_Position+0x162>
 80009f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009fc:	f000 809b 	beq.w	8000b36 <Get_CRLH_Position+0x15a>
 8000a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a04:	f300 809b 	bgt.w	8000b3e <Get_CRLH_Position+0x162>
 8000a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0c:	f000 8091 	beq.w	8000b32 <Get_CRLH_Position+0x156>
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a14:	f300 8093 	bgt.w	8000b3e <Get_CRLH_Position+0x162>
 8000a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a1c:	f000 8087 	beq.w	8000b2e <Get_CRLH_Position+0x152>
 8000a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a24:	f300 808b 	bgt.w	8000b3e <Get_CRLH_Position+0x162>
 8000a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a2c:	d07d      	beq.n	8000b2a <Get_CRLH_Position+0x14e>
 8000a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a32:	f300 8084 	bgt.w	8000b3e <Get_CRLH_Position+0x162>
 8000a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a3a:	d074      	beq.n	8000b26 <Get_CRLH_Position+0x14a>
 8000a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a40:	dc7d      	bgt.n	8000b3e <Get_CRLH_Position+0x162>
 8000a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a46:	d06c      	beq.n	8000b22 <Get_CRLH_Position+0x146>
 8000a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a4c:	dc77      	bgt.n	8000b3e <Get_CRLH_Position+0x162>
 8000a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a52:	d064      	beq.n	8000b1e <Get_CRLH_Position+0x142>
 8000a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a58:	dc71      	bgt.n	8000b3e <Get_CRLH_Position+0x162>
 8000a5a:	2b80      	cmp	r3, #128	; 0x80
 8000a5c:	d05d      	beq.n	8000b1a <Get_CRLH_Position+0x13e>
 8000a5e:	2b80      	cmp	r3, #128	; 0x80
 8000a60:	dc6d      	bgt.n	8000b3e <Get_CRLH_Position+0x162>
 8000a62:	2b20      	cmp	r3, #32
 8000a64:	dc48      	bgt.n	8000af8 <Get_CRLH_Position+0x11c>
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	dd69      	ble.n	8000b3e <Get_CRLH_Position+0x162>
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	2b1f      	cmp	r3, #31
 8000a6e:	d866      	bhi.n	8000b3e <Get_CRLH_Position+0x162>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <Get_CRLH_Position+0x9c>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000aff 	.word	0x08000aff
 8000a7c:	08000b03 	.word	0x08000b03
 8000a80:	08000b3f 	.word	0x08000b3f
 8000a84:	08000b07 	.word	0x08000b07
 8000a88:	08000b3f 	.word	0x08000b3f
 8000a8c:	08000b3f 	.word	0x08000b3f
 8000a90:	08000b3f 	.word	0x08000b3f
 8000a94:	08000b0b 	.word	0x08000b0b
 8000a98:	08000b3f 	.word	0x08000b3f
 8000a9c:	08000b3f 	.word	0x08000b3f
 8000aa0:	08000b3f 	.word	0x08000b3f
 8000aa4:	08000b3f 	.word	0x08000b3f
 8000aa8:	08000b3f 	.word	0x08000b3f
 8000aac:	08000b3f 	.word	0x08000b3f
 8000ab0:	08000b3f 	.word	0x08000b3f
 8000ab4:	08000b0f 	.word	0x08000b0f
 8000ab8:	08000b3f 	.word	0x08000b3f
 8000abc:	08000b3f 	.word	0x08000b3f
 8000ac0:	08000b3f 	.word	0x08000b3f
 8000ac4:	08000b3f 	.word	0x08000b3f
 8000ac8:	08000b3f 	.word	0x08000b3f
 8000acc:	08000b3f 	.word	0x08000b3f
 8000ad0:	08000b3f 	.word	0x08000b3f
 8000ad4:	08000b3f 	.word	0x08000b3f
 8000ad8:	08000b3f 	.word	0x08000b3f
 8000adc:	08000b3f 	.word	0x08000b3f
 8000ae0:	08000b3f 	.word	0x08000b3f
 8000ae4:	08000b3f 	.word	0x08000b3f
 8000ae8:	08000b3f 	.word	0x08000b3f
 8000aec:	08000b3f 	.word	0x08000b3f
 8000af0:	08000b3f 	.word	0x08000b3f
 8000af4:	08000b13 	.word	0x08000b13
 8000af8:	2b40      	cmp	r3, #64	; 0x40
 8000afa:	d00c      	beq.n	8000b16 <Get_CRLH_Position+0x13a>
 8000afc:	e01f      	b.n	8000b3e <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e01e      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	e01c      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000b06:	2308      	movs	r3, #8
 8000b08:	e01a      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	e018      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	e016      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000b12:	2314      	movs	r3, #20
 8000b14:	e014      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000b16:	2318      	movs	r3, #24
 8000b18:	e012      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000b1a:	231c      	movs	r3, #28
 8000b1c:	e010      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e00e      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	e00c      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000b26:	2308      	movs	r3, #8
 8000b28:	e00a      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	e008      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	e006      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000b32:	2314      	movs	r3, #20
 8000b34:	e004      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000b36:	2318      	movs	r3, #24
 8000b38:	e002      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000b3a:	231c      	movs	r3, #28
 8000b3c:	e000      	b.n	8000b40 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d801      	bhi.n	8000b6a <MCAL_GPIO_Init+0x1e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	e001      	b.n	8000b6e <MCAL_GPIO_Init+0x22>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff31 	bl	80009dc <Get_CRLH_Position>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	230f      	movs	r3, #15
 8000b80:	4093      	lsls	r3, r2
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	401a      	ands	r2, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d00b      	beq.n	8000bae <MCAL_GPIO_Init+0x62>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d007      	beq.n	8000bae <MCAL_GPIO_Init+0x62>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d003      	beq.n	8000bae <MCAL_GPIO_Init+0x62>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d10e      	bne.n	8000bcc <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	789b      	ldrb	r3, [r3, #2]
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	78db      	ldrb	r3, [r3, #3]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 030f 	and.w	r3, r3, #15
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e02c      	b.n	8000c26 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	789b      	ldrb	r3, [r3, #2]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d003      	beq.n	8000bdc <MCAL_GPIO_Init+0x90>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e01c      	b.n	8000c26 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d102      	bne.n	8000bfa <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e015      	b.n	8000c26 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	789b      	ldrb	r3, [r3, #2]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d107      	bne.n	8000c16 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	8812      	ldrh	r2, [r2, #0]
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	e007      	b.n	8000c26 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	43d2      	mvns	r2, r2
 8000c20:	401a      	ands	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000c26:	7bfc      	ldrb	r4, [r7, #15]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fed5 	bl	80009dc <Get_CRLH_Position>
 8000c32:	4603      	mov	r3, r0
 8000c34:	fa04 f203 	lsl.w	r2, r4, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	601a      	str	r2, [r3, #0]


}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}

08000c4a <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e001      	b.n	8000c6c <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
 8000c84:	4613      	mov	r3, r2
 8000c86:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000c94:	e002      	b.n	8000c9c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <I2C1_EV_IRQHandler+0xec>)
 8000cb4:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbe:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc8:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <I2C1_EV_IRQHandler+0x48>
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d007      	beq.n	8000cf0 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f000 f866 	bl	8000dbc <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d014      	beq.n	8000d2a <I2C1_EV_IRQHandler+0x82>
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d011      	beq.n	8000d2a <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10b      	bne.n	8000d2a <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000d22:	2102      	movs	r1, #2
 8000d24:	6978      	ldr	r0, [r7, #20]
 8000d26:	f000 f849 	bl	8000dbc <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00f      	beq.n	8000d5a <I2C1_EV_IRQHandler+0xb2>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00c      	beq.n	8000d5a <I2C1_EV_IRQHandler+0xb2>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d009      	beq.n	8000d5a <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000d52:	2103      	movs	r1, #3
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f000 f831 	bl	8000dbc <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00f      	beq.n	8000d8a <I2C1_EV_IRQHandler+0xe2>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <I2C1_EV_IRQHandler+0xe2>
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d009      	beq.n	8000d8a <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000d82:	2104      	movs	r1, #4
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f000 f819 	bl	8000dbc <Slave_States>

		}
	}

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40005400 	.word	0x40005400

08000d98 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <Slave_States+0xd8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d856      	bhi.n	8000e8c <Slave_States+0xd0>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <Slave_States+0x28>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000dff 	.word	0x08000dff
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000e23 	.word	0x08000e23
 8000df0:	08000e3b 	.word	0x08000e3b
 8000df4:	08000e5f 	.word	0x08000e5f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000dfc:	e046      	b.n	8000e8c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d03b      	beq.n	8000e82 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	4922      	ldr	r1, [pc, #136]	; (8000e98 <Slave_States+0xdc>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	3320      	adds	r3, #32
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	4798      	blx	r3
		}

		break ;
 8000e20:	e02f      	b.n	8000e82 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	491c      	ldr	r1, [pc, #112]	; (8000e98 <Slave_States+0xdc>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	3320      	adds	r3, #32
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2002      	movs	r0, #2
 8000e36:	4798      	blx	r3

		break ;
 8000e38:	e028      	b.n	8000e8c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01f      	beq.n	8000e86 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <Slave_States+0xdc>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	3320      	adds	r3, #32
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2003      	movs	r0, #3
 8000e5a:	4798      	blx	r3
		}

		break ;
 8000e5c:	e013      	b.n	8000e86 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	490a      	ldr	r1, [pc, #40]	; (8000e98 <Slave_States+0xdc>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	3320      	adds	r3, #32
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	4798      	blx	r3
		}

		break ;
 8000e80:	e003      	b.n	8000e8a <Slave_States+0xce>
		break ;
 8000e82:	bf00      	nop
 8000e84:	e002      	b.n	8000e8c <Slave_States+0xd0>
		break ;
 8000e86:	bf00      	nop
 8000e88:	e000      	b.n	8000e8c <Slave_States+0xd0>
		break ;
 8000e8a:	bf00      	nop
	}
	}

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40005400 	.word	0x40005400
 8000e98:	2000006c 	.word	0x2000006c

08000e9c <TIMER2_Init>:
 * Note					- This isn't the full initialization for timer2
 *
 */

void TIMER2_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER2_CLK_EN();
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <TIMER2_Init+0x58>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <TIMER2_Init+0x58>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER2->PSC = (Clock_Speed_MHz - 1);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER2->ARR = 0xC350;  // 50000*1us = 0.05s
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER2->CR1 |= (1<<0);
 8000ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER2->SR) & (1<<0)));
 8000ed6:	bf00      	nop
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f8      	beq.n	8000ed8 <TIMER2_Init+0x3c>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <Delay_us>:
 * Note					- You must initialize timer2 before using this function
 *
 */

void Delay_us(int us)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	TIMER2->CNT = 0;
 8000f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER2->CNT) < us);
 8000f08:	bf00      	nop
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3f9      	bcc.n	8000f0a <Delay_us+0x12>
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <Delay_ms>:
 * Note					- You must initialize timer2 before using this function
 *
 */

void Delay_ms(int ms)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e006      	b.n	8000f3e <Delay_ms+0x1c>
	{
		Delay_us(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f7ff ffe0 	bl	8000ef8 <Delay_us>
	for(i=0;i<ms;i++)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf4      	blt.n	8000f30 <Delay_ms+0xe>
	}
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <TIM2_IRQHandler+0x60>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d125      	bne.n	8000fa8 <TIM2_IRQHandler+0x58>
	{
		TIMER2->SR &= ~(1<<0);
 8000f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8000f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <TIM2_IRQHandler+0x64>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <TIM2_IRQHandler+0x64>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <TIM2_IRQHandler+0x64>)
 8000f8e:	801a      	strh	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
		}
	}else{   // For further usage rather than stepper

	}
}
 8000f90:	e00a      	b.n	8000fa8 <TIM2_IRQHandler+0x58>
			stepper_Flag = 0;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <TIM2_IRQHandler+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	200000b4 	.word	0x200000b4
 8000fb4:	200000b6 	.word	0x200000b6

08000fb8 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <USART1_IRQHandler+0x10>)
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	4798      	blx	r3
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000b8 	.word	0x200000b8

08000fcc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <USART2_IRQHandler+0x10>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	4798      	blx	r3
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000b8 	.word	0x200000b8

08000fe0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <USART3_IRQHandler+0x10>)
 8000fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe8:	4798      	blx	r3
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000b8 	.word	0x200000b8

08000ff4 <main>:
#include "HAL/UltraSonic_HC_SR04/UltraSonic_Interface.h"

#include "HAL/LCD/LCD_Interface.h"

int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

	RCC_GPIOB_CLK_EN();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <main+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <main+0x5c>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <main+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <main+0x5c>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6193      	str	r3, [r2, #24]


	uint32_t UltraDistance = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]

	GPIO_PinConfig_t DC_EnPin = {
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <main+0x60>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
		.GPIO_PinNumber = GPIO_PIN_8,
		.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
		.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};
	GPIO_PinConfig_t DC_In1Pin = {
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <main+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
		.GPIO_PinNumber = GPIO_PIN_9,
		.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
		.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t DC_In2Pin = {
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <main+0x68>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60bb      	str	r3, [r7, #8]
		.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};


//	HC_SR04_Init(&UltraSonic_Configs);
	GPIO_PinConfig_t test = {
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <main+0x6c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	607b      	str	r3, [r7, #4]
			.GPIO_PinNumber = GPIO_PIN_5,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOA, &test);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <main+0x70>)
 8001034:	f7ff fd8a 	bl	8000b4c <MCAL_GPIO_Init>
	LCD_enuInit(&LCD_Configs);
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <main+0x74>)
 800103a:	f7ff f899 	bl	8000170 <LCD_enuInit>

    /* Loop forever */
	while(1){


		LCD_enuJumpCursorTo(1, 0);
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fb6d 	bl	8000720 <LCD_enuJumpCursorTo>
		LCD_enuSendString("Hi");
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <main+0x78>)
 8001048:	f7ff fb46 	bl	80006d8 <LCD_enuSendString>
		LCD_enuJumpCursorTo(1, 0);
 800104c:	e7f7      	b.n	800103e <main+0x4a>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	08001128 	.word	0x08001128
 8001058:	0800112c 	.word	0x0800112c
 800105c:	08001130 	.word	0x08001130
 8001060:	08001134 	.word	0x08001134
 8001064:	40010800 	.word	0x40010800
 8001068:	20000000 	.word	0x20000000
 800106c:	08001124 	.word	0x08001124

08001070 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001072:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001074:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800109e:	f000 f811 	bl	80010c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff ffa7 	bl	8000ff4 <main>

080010a6 <LoopForever>:

LoopForever:
  b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   r0, =_estack
 80010a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010b4:	08001140 	.word	0x08001140
  ldr r2, =_sbss
 80010b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010bc:	200000f4 	.word	0x200000f4

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <__libc_init_array>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	2600      	movs	r6, #0
 80010c8:	4d0c      	ldr	r5, [pc, #48]	; (80010fc <__libc_init_array+0x38>)
 80010ca:	4c0d      	ldr	r4, [pc, #52]	; (8001100 <__libc_init_array+0x3c>)
 80010cc:	1b64      	subs	r4, r4, r5
 80010ce:	10a4      	asrs	r4, r4, #2
 80010d0:	42a6      	cmp	r6, r4
 80010d2:	d109      	bne.n	80010e8 <__libc_init_array+0x24>
 80010d4:	f000 f81a 	bl	800110c <_init>
 80010d8:	2600      	movs	r6, #0
 80010da:	4d0a      	ldr	r5, [pc, #40]	; (8001104 <__libc_init_array+0x40>)
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <__libc_init_array+0x44>)
 80010de:	1b64      	subs	r4, r4, r5
 80010e0:	10a4      	asrs	r4, r4, #2
 80010e2:	42a6      	cmp	r6, r4
 80010e4:	d105      	bne.n	80010f2 <__libc_init_array+0x2e>
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ec:	4798      	blx	r3
 80010ee:	3601      	adds	r6, #1
 80010f0:	e7ee      	b.n	80010d0 <__libc_init_array+0xc>
 80010f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010f6:	4798      	blx	r3
 80010f8:	3601      	adds	r6, #1
 80010fa:	e7f2      	b.n	80010e2 <__libc_init_array+0x1e>
 80010fc:	08001138 	.word	0x08001138
 8001100:	08001138 	.word	0x08001138
 8001104:	08001138 	.word	0x08001138
 8001108:	0800113c 	.word	0x0800113c

0800110c <_init>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	bf00      	nop
 8001110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001112:	bc08      	pop	{r3}
 8001114:	469e      	mov	lr, r3
 8001116:	4770      	bx	lr

08001118 <_fini>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr
