
BetaRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002338  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002468  08002468  00012468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d4  080024d4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080024d4  080024d4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024d4  080024d4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080024dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000002c  08002508  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002508  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000037e7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f84  00000000  00000000  0002387f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00024808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b55  00000000  00000000  00024ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bcf  00000000  00000000  000276f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cb7e  00000000  00000000  0002d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000281  00000000  00000000  00039e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d10  00000000  00000000  0003a0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0003add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002450 	.word	0x08002450

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08002450 	.word	0x08002450

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 8000954:	2301      	movs	r3, #1
 8000956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 800095a:	4a6f      	ldr	r2, [pc, #444]	; (8000b18 <LCD_enuInit+0x1cc>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RS = {
 8000964:	863b      	strh	r3, [r7, #48]	; 0x30
 8000966:	2304      	movs	r3, #4
 8000968:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800096c:	2302      	movs	r3, #2
 800096e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &RS);
 8000972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000976:	4619      	mov	r1, r3
 8000978:	4868      	ldr	r0, [pc, #416]	; (8000b1c <LCD_enuInit+0x1d0>)
 800097a:	f000 fdef 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig_t EN = {
 8000982:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000984:	2304      	movs	r3, #4
 8000986:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800098a:	2302      	movs	r3, #2
 800098c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &EN);
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	4861      	ldr	r0, [pc, #388]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000998:	f000 fde0 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	895b      	ldrh	r3, [r3, #10]
	GPIO_PinConfig_t D7 = {
 80009a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80009a2:	2304      	movs	r3, #4
 80009a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80009a8:	2302      	movs	r3, #2
 80009aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D7);
 80009ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4859      	ldr	r0, [pc, #356]	; (8000b1c <LCD_enuInit+0x1d0>)
 80009b6:	f000 fdd1 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	899b      	ldrh	r3, [r3, #12]
	GPIO_PinConfig_t D6 = {
 80009be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80009c0:	2304      	movs	r3, #4
 80009c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80009c6:	2302      	movs	r3, #2
 80009c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D6);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4852      	ldr	r0, [pc, #328]	; (8000b1c <LCD_enuInit+0x1d0>)
 80009d4:	f000 fdc2 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	89db      	ldrh	r3, [r3, #14]
	GPIO_PinConfig_t D5 = {
 80009dc:	843b      	strh	r3, [r7, #32]
 80009de:	2304      	movs	r3, #4
 80009e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80009e4:	2302      	movs	r3, #2
 80009e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D5);
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	4619      	mov	r1, r3
 80009f0:	484a      	ldr	r0, [pc, #296]	; (8000b1c <LCD_enuInit+0x1d0>)
 80009f2:	f000 fdb3 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	8a1b      	ldrh	r3, [r3, #16]
	GPIO_PinConfig_t D4 = {
 80009fa:	83bb      	strh	r3, [r7, #28]
 80009fc:	2304      	movs	r3, #4
 80009fe:	77bb      	strb	r3, [r7, #30]
 8000a00:	2302      	movs	r3, #2
 8000a02:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D4);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4844      	ldr	r0, [pc, #272]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000a0c:	f000 fda6 	bl	800155c <MCAL_GPIO_Init>

	TIMER3_Init(RCC_CLK_8M);
 8000a10:	2008      	movs	r0, #8
 8000a12:	f000 ff4b 	bl	80018ac <TIMER3_Init>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
	Delay_Timer3_ms(35); //power on
 8000a16:	2023      	movs	r0, #35	; 0x23
 8000a18:	f000 ff88 	bl	800192c <Delay_Timer3_ms>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_LOW);

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d10a      	bne.n	8000a3a <LCD_enuInit+0xee>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	483b      	ldr	r0, [pc, #236]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000a2e:	f000 fe2b 	bl	8001688 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f000 f874 	bl	8000b20 <LCD_enuWriteAndLatch>
 8000a38:	e041      	b.n	8000abe <LCD_enuInit+0x172>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d13d      	bne.n	8000abe <LCD_enuInit+0x172>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	889b      	ldrh	r3, [r3, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4834      	ldr	r0, [pc, #208]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000a4c:	f000 fe1c 	bl	8001688 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 8000a50:	2038      	movs	r0, #56	; 0x38
 8000a52:	f000 f865 	bl	8000b20 <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	8a5b      	ldrh	r3, [r3, #18]
		GPIO_PinConfig_t D3 = {
 8000a5a:	833b      	strh	r3, [r7, #24]
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	76bb      	strb	r3, [r7, #26]
 8000a60:	2302      	movs	r3, #2
 8000a62:	76fb      	strb	r3, [r7, #27]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D3);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000a6c:	f000 fd76 	bl	800155c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	8a9b      	ldrh	r3, [r3, #20]
		GPIO_PinConfig_t D2 = {
 8000a74:	82bb      	strh	r3, [r7, #20]
 8000a76:	2304      	movs	r3, #4
 8000a78:	75bb      	strb	r3, [r7, #22]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D2);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4825      	ldr	r0, [pc, #148]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000a86:	f000 fd69 	bl	800155c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8adb      	ldrh	r3, [r3, #22]
		GPIO_PinConfig_t D1 = {
 8000a8e:	823b      	strh	r3, [r7, #16]
 8000a90:	2304      	movs	r3, #4
 8000a92:	74bb      	strb	r3, [r7, #18]
 8000a94:	2302      	movs	r3, #2
 8000a96:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D1);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481f      	ldr	r0, [pc, #124]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000aa0:	f000 fd5c 	bl	800155c <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	8b1b      	ldrh	r3, [r3, #24]
		GPIO_PinConfig_t D0 = {
 8000aa8:	81bb      	strh	r3, [r7, #12]
 8000aaa:	2304      	movs	r3, #4
 8000aac:	73bb      	strb	r3, [r7, #14]
 8000aae:	2302      	movs	r3, #2
 8000ab0:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D0);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000aba:	f000 fd4f 	bl	800155c <MCAL_GPIO_Init>
	}


	Delay_Timer3_ms(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 ff34 	bl	800192c <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000ace:	f000 fddb 	bl	8001688 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 8000ad2:	200c      	movs	r0, #12
 8000ad4:	f000 f824 	bl	8000b20 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 ff27 	bl	800192c <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000ae8:	f000 fdce 	bl	8001688 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f000 f817 	bl	8000b20 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(3);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 ff1a 	bl	800192c <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	889b      	ldrh	r3, [r3, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <LCD_enuInit+0x1d0>)
 8000b02:	f000 fdc1 	bl	8001688 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 8000b06:	2006      	movs	r0, #6
 8000b08:	f000 f80a 	bl	8000b20 <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 8000b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000048 	.word	0x20000048
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 8000b2e:	4b7e      	ldr	r3, [pc, #504]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	88db      	ldrh	r3, [r3, #6]
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	487c      	ldr	r0, [pc, #496]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000b3a:	f000 fda5 	bl	8001688 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	891b      	ldrh	r3, [r3, #8]
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4878      	ldr	r0, [pc, #480]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000b4a:	f000 fd9d 	bl	8001688 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b28      	cmp	r3, #40	; 0x28
 8000b52:	d152      	bne.n	8000bfa <LCD_enuWriteAndLatch+0xda>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 8000b54:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4873      	ldr	r0, [pc, #460]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000b5e:	f000 fd7c 	bl	800165a <MCAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d146      	bne.n	8000bfa <LCD_enuWriteAndLatch+0xda>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000b6c:	4b6e      	ldr	r3, [pc, #440]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	8959      	ldrh	r1, [r3, #10]
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	09db      	lsrs	r3, r3, #7
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	486c      	ldr	r0, [pc, #432]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000b7c:	f000 fd84 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	8999      	ldrh	r1, [r3, #12]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	099b      	lsrs	r3, r3, #6
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	4865      	ldr	r0, [pc, #404]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000b96:	f000 fd77 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000b9a:	4b63      	ldr	r3, [pc, #396]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	89d9      	ldrh	r1, [r3, #14]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	485f      	ldr	r0, [pc, #380]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000bb0:	f000 fd6a 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000bb4:	4b5c      	ldr	r3, [pc, #368]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	8a19      	ldrh	r1, [r3, #16]
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4858      	ldr	r0, [pc, #352]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000bca:	f000 fd5d 	bl	8001688 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000bce:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	891b      	ldrh	r3, [r3, #8]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4854      	ldr	r0, [pc, #336]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000bda:	f000 fd55 	bl	8001688 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fea4 	bl	800192c <Delay_Timer3_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000be4:	4b50      	ldr	r3, [pc, #320]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	891b      	ldrh	r3, [r3, #8]
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	484f      	ldr	r0, [pc, #316]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000bf0:	f000 fd4a 	bl	8001688 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 fe99 	bl	800192c <Delay_Timer3_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	f040 8095 	bne.w	8000d30 <LCD_enuWriteAndLatch+0x210>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000c06:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	8959      	ldrh	r1, [r3, #10]
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	09db      	lsrs	r3, r3, #7
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	4845      	ldr	r0, [pc, #276]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c16:	f000 fd37 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	8999      	ldrh	r1, [r3, #12]
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	099b      	lsrs	r3, r3, #6
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	483f      	ldr	r0, [pc, #252]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c30:	f000 fd2a 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000c34:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	89d9      	ldrh	r1, [r3, #14]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	4838      	ldr	r0, [pc, #224]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c4a:	f000 fd1d 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	8a19      	ldrh	r1, [r3, #16]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	4832      	ldr	r0, [pc, #200]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c64:	f000 fd10 	bl	8001688 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	891b      	ldrh	r3, [r3, #8]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4619      	mov	r1, r3
 8000c72:	482e      	ldr	r0, [pc, #184]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c74:	f000 fd08 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fe57 	bl	800192c <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	891b      	ldrh	r3, [r3, #8]
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4828      	ldr	r0, [pc, #160]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000c8a:	f000 fcfd 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fe4c 	bl	800192c <Delay_Timer3_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	8959      	ldrh	r1, [r3, #10]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000caa:	f000 fced 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	8999      	ldrh	r1, [r3, #12]
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000cc4:	f000 fce0 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	89d9      	ldrh	r1, [r3, #14]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	085b      	lsrs	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000cde:	f000 fcd3 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	8a19      	ldrh	r1, [r3, #16]
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000cf4:	f000 fcc8 	bl	8001688 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	891b      	ldrh	r3, [r3, #8]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000d04:	f000 fcc0 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fe0f 	bl	800192c <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <LCD_enuWriteAndLatch+0x208>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	891b      	ldrh	r3, [r3, #8]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <LCD_enuWriteAndLatch+0x20c>)
 8000d1a:	f000 fcb5 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 fe04 	bl	800192c <Delay_Timer3_ms>
 8000d24:	e082      	b.n	8000e2c <LCD_enuWriteAndLatch+0x30c>
 8000d26:	bf00      	nop
 8000d28:	20000048 	.word	0x20000048
 8000d2c:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b08      	cmp	r3, #8
 8000d38:	d178      	bne.n	8000e2c <LCD_enuWriteAndLatch+0x30c>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	8959      	ldrh	r1, [r3, #10]
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	483c      	ldr	r0, [pc, #240]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000d4a:	f000 fc9d 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	8999      	ldrh	r1, [r3, #12]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	4836      	ldr	r0, [pc, #216]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000d64:	f000 fc90 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	89d9      	ldrh	r1, [r3, #14]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	482f      	ldr	r0, [pc, #188]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000d7e:	f000 fc83 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	8a19      	ldrh	r1, [r3, #16]
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	4829      	ldr	r0, [pc, #164]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000d98:	f000 fc76 	bl	8001688 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	8a59      	ldrh	r1, [r3, #18]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	4822      	ldr	r0, [pc, #136]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000db2:	f000 fc69 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	8a99      	ldrh	r1, [r3, #20]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	481c      	ldr	r0, [pc, #112]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000dcc:	f000 fc5c 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	8ad9      	ldrh	r1, [r3, #22]
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	4815      	ldr	r0, [pc, #84]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000de6:	f000 fc4f 	bl	8001688 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	8b19      	ldrh	r1, [r3, #24]
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000dfc:	f000 fc44 	bl	8001688 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	891b      	ldrh	r3, [r3, #8]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000e0c:	f000 fc3c 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fd8b 	bl	800192c <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <LCD_enuWriteAndLatch+0x318>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	891b      	ldrh	r3, [r3, #8]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <LCD_enuWriteAndLatch+0x31c>)
 8000e22:	f000 fc31 	bl	8001688 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fd80 	bl	800192c <Delay_Timer3_ms>
	}

	return Local_ErrorState;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000048 	.word	0x20000048
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8000e4c:	e00e      	b.n	8000e6c <LCD_enuSendString+0x2c>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LCD_enuSendString+0x40>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	889b      	ldrh	r3, [r3, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <LCD_enuSendString+0x44>)
 8000e5a:	f000 fc15 	bl	8001688 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe5a 	bl	8000b20 <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1ec      	bne.n	8000e4e <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000048 	.word	0x20000048
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <LCD_enuJumpCursorTo+0x94>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	889b      	ldrh	r3, [r3, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481e      	ldr	r0, [pc, #120]	; (8000f20 <LCD_enuJumpCursorTo+0x98>)
 8000ea8:	f000 fbee 	bl	8001688 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <LCD_enuJumpCursorTo+0x3c>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	3b80      	subs	r3, #128	; 0x80
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe31 	bl	8000b20 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e025      	b.n	8000f10 <LCD_enuJumpCursorTo+0x88>
	}

	else if (Copy_u8StartX_Position == 2) {
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d108      	bne.n	8000edc <LCD_enuJumpCursorTo+0x54>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	3b40      	subs	r3, #64	; 0x40
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe25 	bl	8000b20 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e019      	b.n	8000f10 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 3) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d108      	bne.n	8000ef4 <LCD_enuJumpCursorTo+0x6c>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	3b6c      	subs	r3, #108	; 0x6c
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe19 	bl	8000b20 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e00d      	b.n	8000f10 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 4) {
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d108      	bne.n	8000f0c <LCD_enuJumpCursorTo+0x84>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	3b2c      	subs	r3, #44	; 0x2c
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe0d 	bl	8000b20 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e001      	b.n	8000f10 <LCD_enuJumpCursorTo+0x88>
	} else {
		Local_ErrorState = ES_NOT_OK;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000048 	.word	0x20000048
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <LCD_enuDisplayIntNum>:
//
//
//	return Local_ErrorState;
//}

ES_t LCD_enuDisplayIntNum(int Copy_s32IntNumber) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	74bb      	strb	r3, [r7, #18]

	uint32_t Local_u32Remainder;
	uint32_t Local_u32ReverseNum = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
	uint8_t Local_u8DigitsNum = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	74fb      	strb	r3, [r7, #19]
	/******** number given will be displayed reversely cause of LCD prints each number of the whole number individually ******/
	/*********  so we will reverse the whole number just to be displayed correctly at the end of function **********/
	if (Copy_s32IntNumber < 0) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	da0d      	bge.n	8000f5a <LCD_enuDisplayIntNum+0x36>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   //high for data
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <LCD_enuDisplayIntNum+0xf4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	889b      	ldrh	r3, [r3, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	4834      	ldr	r0, [pc, #208]	; (800101c <LCD_enuDisplayIntNum+0xf8>)
 8000f4a:	f000 fb9d 	bl	8001688 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch('-');
 8000f4e:	202d      	movs	r0, #45	; 0x2d
 8000f50:	f7ff fde6 	bl	8000b20 <LCD_enuWriteAndLatch>

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	425b      	negs	r3, r3
 8000f58:	607b      	str	r3, [r7, #4]
	}
	if(Copy_s32IntNumber == 0){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12c      	bne.n	8000fba <LCD_enuDisplayIntNum+0x96>
    	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   // High for Data
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <LCD_enuDisplayIntNum+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	889b      	ldrh	r3, [r3, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482c      	ldr	r0, [pc, #176]	; (800101c <LCD_enuDisplayIntNum+0xf8>)
 8000f6c:	f000 fb8c 	bl	8001688 <MCAL_GPIO_WritePin>
    	LCD_enuWriteAndLatch('0');
 8000f70:	2030      	movs	r0, #48	; 0x30
 8000f72:	f7ff fdd5 	bl	8000b20 <LCD_enuWriteAndLatch>
	}
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 8000f76:	e020      	b.n	8000fba <LCD_enuDisplayIntNum+0x96>
			{
		Local_u32Remainder = Copy_s32IntNumber % 10;
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <LCD_enuDisplayIntNum+0xfc>)
 8000f7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f80:	109a      	asrs	r2, r3, #2
 8000f82:	17cb      	asrs	r3, r1, #31
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	1aca      	subs	r2, r1, r3
 8000f90:	60fa      	str	r2, [r7, #12]
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
		Local_u8DigitsNum++; //counting number of digits for the original number
 8000fa4:	7cfb      	ldrb	r3, [r7, #19]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	74fb      	strb	r3, [r7, #19]
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <LCD_enuDisplayIntNum+0xfc>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1092      	asrs	r2, r2, #2
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dcdb      	bgt.n	8000f78 <LCD_enuDisplayIntNum+0x54>
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 8000fc0:	e022      	b.n	8001008 <LCD_enuDisplayIntNum+0xe4>
			{ // for number of cycles equal to Local_u8DigitsNum , print digits

		uint8_t Local_u8NumToPrint = Local_u32ReverseNum % 10;
 8000fc2:	6979      	ldr	r1, [r7, #20]
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <LCD_enuDisplayIntNum+0x100>)
 8000fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	1aca      	subs	r2, r1, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	747b      	strb	r3, [r7, #17]
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH); //high for data
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <LCD_enuDisplayIntNum+0xf4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LCD_enuDisplayIntNum+0xf8>)
 8000fe6:	f000 fb4f 	bl	8001688 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
 8000fea:	7c7b      	ldrb	r3, [r7, #17]
 8000fec:	3330      	adds	r3, #48	; 0x30
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fd95 	bl	8000b20 <LCD_enuWriteAndLatch>
		Local_u8DigitsNum--;
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	74fb      	strb	r3, [r7, #19]
	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <LCD_enuDisplayIntNum+0x100>)
 8001000:	fba2 2303 	umull	r2, r3, r2, r3
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1d9      	bne.n	8000fc2 <LCD_enuDisplayIntNum+0x9e>
	}

	return Local_ErrorState;
 800100e:	7cbb      	ldrb	r3, [r7, #18]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000048 	.word	0x20000048
 800101c:	40010c00 	.word	0x40010c00
 8001020:	66666667 	.word	0x66666667
 8001024:	cccccccd 	.word	0xcccccccd

08001028 <HC_SR04_Init>:
/********************************************************************/

#include "UltraSonic_Private.h"


ES_t HC_SR04_Init(HC_SR04_Config_t* Copy_pArrUltrasonicConfigs) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	TIMER3_Init(RCC_CLK_8M);
 8001030:	2008      	movs	r0, #8
 8001032:	f000 fc3b 	bl	80018ac <TIMER3_Init>

	uint8_t Local_Iterator = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e024      	b.n	800108a <HC_SR04_Init+0x62>

		GPIO_PinConfig_t Trigger = {
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].triggerPin,
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Trigger = {
 800104c:	823b      	strh	r3, [r7, #16]
 800104e:	2304      	movs	r3, #4
 8001050:	74bb      	strb	r3, [r7, #18]
 8001052:	2302      	movs	r3, #2
 8001054:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOA, &Trigger);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <HC_SR04_Init+0x7c>)
 800105e:	f000 fa7d 	bl	800155c <MCAL_GPIO_Init>

		GPIO_PinConfig_t Echo = {
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].echoPin,
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	795b      	ldrb	r3, [r3, #5]
 8001070:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Echo = {
 8001072:	81bb      	strh	r3, [r7, #12]
 8001074:	2301      	movs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]
				.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
		};

		MCAL_GPIO_Init(GPIOA, &Echo);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <HC_SR04_Init+0x7c>)
 8001080:	f000 fa6c 	bl	800155c <MCAL_GPIO_Init>
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	3301      	adds	r3, #1
 8001088:	75fb      	strb	r3, [r7, #23]
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HC_SR04_Init+0x80>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	7dfa      	ldrb	r2, [r7, #23]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3d5      	bcc.n	8001040 <HC_SR04_Init+0x18>
	}


	Private_pConfigs = Copy_pArrUltrasonicConfigs;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <HC_SR04_Init+0x84>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]

    return ES_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40010800 	.word	0x40010800
 80010a8:	2000001a 	.word	0x2000001a
 80010ac:	2000004c 	.word	0x2000004c

080010b0 <HC_SR04_Trigger>:

void HC_SR04_Trigger(uint8_t Sensor_Num) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    // Send a 10us pulse on the trigger pin to initiate measurement
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_HIGH);
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HC_SR04_Trigger+0x48>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <HC_SR04_Trigger+0x4c>)
 80010ce:	f000 fadb 	bl	8001688 <MCAL_GPIO_WritePin>
    Delay_Timer3_us(10); // Delay for 10us
 80010d2:	200a      	movs	r0, #10
 80010d4:	f000 fc14 	bl	8001900 <Delay_Timer3_us>
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_LOW);
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HC_SR04_Trigger+0x48>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <HC_SR04_Trigger+0x4c>)
 80010ec:	f000 facc 	bl	8001688 <MCAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	40010800 	.word	0x40010800

08001100 <HC_SR04_ReadDistance>:

ES_t HC_SR04_ReadDistance(uint8_t Sensor_Num,uint32_t* distance_cm) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
    // Send trigger signal to start measurement
    HC_SR04_Trigger(Sensor_Num);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffce 	bl	80010b0 <HC_SR04_Trigger>

    uint8_t echoValue;
    // Wait for the rising edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HC_SR04_ReadDistance+0xc8>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HC_SR04_ReadDistance+0xc8>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	f000 fa93 	bl	800165a <MCAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]
    }
    while ( echoValue == GPIO_PIN_LOW);
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0ea      	beq.n	8001114 <HC_SR04_ReadDistance+0x14>

    uint32_t startTime = Get_TIMER3_Counter();
 800113e:	f000 ffcf 	bl	80020e0 <Get_TIMER3_Counter>
 8001142:	6138      	str	r0, [r7, #16]
//    STK_enuGetElapsedTimeUs(&startTime);

    // Wait for the falling edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HC_SR04_ReadDistance+0xc8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HC_SR04_ReadDistance+0xc8>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	795b      	ldrb	r3, [r3, #5]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	f000 fa7b 	bl	800165a <MCAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
    }
    while (echoValue == GPIO_PIN_HIGH);
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d0ea      	beq.n	8001144 <HC_SR04_ReadDistance+0x44>

    uint32_t endTime = Get_TIMER3_Counter();
 800116e:	f000 ffb7 	bl	80020e0 <Get_TIMER3_Counter>
 8001172:	60f8      	str	r0, [r7, #12]
//    STK_enuGetElapsedTimeUs(&endTime);

    // Calculate distance in centimeters
    uint32_t pulseDuration = endTime - startTime;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	60bb      	str	r3, [r7, #8]
    *distance_cm = (pulseDuration * 0.0343) / 2; // Speed of sound is approximately 343 m/s
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff f939 	bl	80003f4 <__aeabi_ui2d>
 8001182:	a30f      	add	r3, pc, #60	; (adr r3, 80011c0 <HC_SR04_ReadDistance+0xc0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f9ae 	bl	80004e8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119c:	f7ff face 	bl	800073c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fbb0 	bl	800090c <__aeabi_d2uiz>
 80011ac:	4602      	mov	r2, r0
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	601a      	str	r2, [r3, #0]

    return ES_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	04816f00 	.word	0x04816f00
 80011c4:	3fa18fc5 	.word	0x3fa18fc5
 80011c8:	2000004c 	.word	0x2000004c

080011cc <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <EXTI0_IRQHandler+0x1c>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <EXTI0_IRQHandler+0x1c>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <EXTI0_IRQHandler+0x20>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4798      	blx	r3

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40010400 	.word	0x40010400
 80011ec:	20000050 	.word	0x20000050

080011f0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <EXTI1_IRQHandler+0x1c>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <EXTI1_IRQHandler+0x1c>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <EXTI1_IRQHandler+0x20>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4798      	blx	r3
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400
 8001210:	20000050 	.word	0x20000050

08001214 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <EXTI2_IRQHandler+0x1c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <EXTI2_IRQHandler+0x1c>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <EXTI2_IRQHandler+0x20>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4798      	blx	r3
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40010400 	.word	0x40010400
 8001234:	20000050 	.word	0x20000050

08001238 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <EXTI3_IRQHandler+0x1c>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <EXTI3_IRQHandler+0x1c>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <EXTI3_IRQHandler+0x20>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4798      	blx	r3
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010400 	.word	0x40010400
 8001258:	20000050 	.word	0x20000050

0800125c <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <EXTI4_IRQHandler+0x1c>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <EXTI4_IRQHandler+0x1c>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <EXTI4_IRQHandler+0x20>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4798      	blx	r3
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010400 	.word	0x40010400
 800127c:	20000050 	.word	0x20000050

08001280 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <EXTI9_5_IRQHandler+0x22>
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6153      	str	r3, [r2, #20]
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <EXTI9_5_IRQHandler+0xa4>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <EXTI9_5_IRQHandler+0x40>
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <EXTI9_5_IRQHandler+0xa4>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <EXTI9_5_IRQHandler+0x5e>
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d6:	6153      	str	r3, [r2, #20]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <EXTI9_5_IRQHandler+0xa4>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <EXTI9_5_IRQHandler+0x7c>
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <EXTI9_5_IRQHandler+0xa4>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <EXTI9_5_IRQHandler+0x9a>
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <EXTI9_5_IRQHandler+0xa0>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6153      	str	r3, [r2, #20]
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <EXTI9_5_IRQHandler+0xa4>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	4798      	blx	r3
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010400 	.word	0x40010400
 8001324:	20000050 	.word	0x20000050

08001328 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <EXTI15_10_IRQHandler+0x22>
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001342:	6153      	str	r3, [r2, #20]
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <EXTI15_10_IRQHandler+0x40>
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800135c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <EXTI15_10_IRQHandler+0x5e>
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 800137a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137e:	6153      	str	r3, [r2, #20]
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <EXTI15_10_IRQHandler+0x7c>
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 8001398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <EXTI15_10_IRQHandler+0x9a>
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ba:	6153      	str	r3, [r2, #20]
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <EXTI15_10_IRQHandler+0xb8>
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <EXTI15_10_IRQHandler+0xbc>)
 80013d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <EXTI15_10_IRQHandler+0xc0>)
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	4798      	blx	r3
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010400 	.word	0x40010400
 80013e8:	20000050 	.word	0x20000050

080013ec <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fc:	f000 80a5 	beq.w	800154a <Get_CRLH_Position+0x15e>
 8001400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001404:	f300 80a3 	bgt.w	800154e <Get_CRLH_Position+0x162>
 8001408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800140c:	f000 809b 	beq.w	8001546 <Get_CRLH_Position+0x15a>
 8001410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001414:	f300 809b 	bgt.w	800154e <Get_CRLH_Position+0x162>
 8001418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141c:	f000 8091 	beq.w	8001542 <Get_CRLH_Position+0x156>
 8001420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001424:	f300 8093 	bgt.w	800154e <Get_CRLH_Position+0x162>
 8001428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142c:	f000 8087 	beq.w	800153e <Get_CRLH_Position+0x152>
 8001430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001434:	f300 808b 	bgt.w	800154e <Get_CRLH_Position+0x162>
 8001438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800143c:	d07d      	beq.n	800153a <Get_CRLH_Position+0x14e>
 800143e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001442:	f300 8084 	bgt.w	800154e <Get_CRLH_Position+0x162>
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d074      	beq.n	8001536 <Get_CRLH_Position+0x14a>
 800144c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001450:	dc7d      	bgt.n	800154e <Get_CRLH_Position+0x162>
 8001452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001456:	d06c      	beq.n	8001532 <Get_CRLH_Position+0x146>
 8001458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145c:	dc77      	bgt.n	800154e <Get_CRLH_Position+0x162>
 800145e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001462:	d064      	beq.n	800152e <Get_CRLH_Position+0x142>
 8001464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001468:	dc71      	bgt.n	800154e <Get_CRLH_Position+0x162>
 800146a:	2b80      	cmp	r3, #128	; 0x80
 800146c:	d05d      	beq.n	800152a <Get_CRLH_Position+0x13e>
 800146e:	2b80      	cmp	r3, #128	; 0x80
 8001470:	dc6d      	bgt.n	800154e <Get_CRLH_Position+0x162>
 8001472:	2b20      	cmp	r3, #32
 8001474:	dc48      	bgt.n	8001508 <Get_CRLH_Position+0x11c>
 8001476:	2b00      	cmp	r3, #0
 8001478:	dd69      	ble.n	800154e <Get_CRLH_Position+0x162>
 800147a:	3b01      	subs	r3, #1
 800147c:	2b1f      	cmp	r3, #31
 800147e:	d866      	bhi.n	800154e <Get_CRLH_Position+0x162>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <Get_CRLH_Position+0x9c>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	0800150f 	.word	0x0800150f
 800148c:	08001513 	.word	0x08001513
 8001490:	0800154f 	.word	0x0800154f
 8001494:	08001517 	.word	0x08001517
 8001498:	0800154f 	.word	0x0800154f
 800149c:	0800154f 	.word	0x0800154f
 80014a0:	0800154f 	.word	0x0800154f
 80014a4:	0800151b 	.word	0x0800151b
 80014a8:	0800154f 	.word	0x0800154f
 80014ac:	0800154f 	.word	0x0800154f
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	0800154f 	.word	0x0800154f
 80014b8:	0800154f 	.word	0x0800154f
 80014bc:	0800154f 	.word	0x0800154f
 80014c0:	0800154f 	.word	0x0800154f
 80014c4:	0800151f 	.word	0x0800151f
 80014c8:	0800154f 	.word	0x0800154f
 80014cc:	0800154f 	.word	0x0800154f
 80014d0:	0800154f 	.word	0x0800154f
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	0800154f 	.word	0x0800154f
 80014dc:	0800154f 	.word	0x0800154f
 80014e0:	0800154f 	.word	0x0800154f
 80014e4:	0800154f 	.word	0x0800154f
 80014e8:	0800154f 	.word	0x0800154f
 80014ec:	0800154f 	.word	0x0800154f
 80014f0:	0800154f 	.word	0x0800154f
 80014f4:	0800154f 	.word	0x0800154f
 80014f8:	0800154f 	.word	0x0800154f
 80014fc:	0800154f 	.word	0x0800154f
 8001500:	0800154f 	.word	0x0800154f
 8001504:	08001523 	.word	0x08001523
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	d00c      	beq.n	8001526 <Get_CRLH_Position+0x13a>
 800150c:	e01f      	b.n	800154e <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e01e      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001512:	2304      	movs	r3, #4
 8001514:	e01c      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001516:	2308      	movs	r3, #8
 8001518:	e01a      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800151a:	230c      	movs	r3, #12
 800151c:	e018      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800151e:	2310      	movs	r3, #16
 8001520:	e016      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001522:	2314      	movs	r3, #20
 8001524:	e014      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001526:	2318      	movs	r3, #24
 8001528:	e012      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800152a:	231c      	movs	r3, #28
 800152c:	e010      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e00e      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001532:	2304      	movs	r3, #4
 8001534:	e00c      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001536:	2308      	movs	r3, #8
 8001538:	e00a      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800153a:	230c      	movs	r3, #12
 800153c:	e008      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 800153e:	2310      	movs	r3, #16
 8001540:	e006      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001542:	2314      	movs	r3, #20
 8001544:	e004      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001546:	2318      	movs	r3, #24
 8001548:	e002      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800154a:	231c      	movs	r3, #28
 800154c:	e000      	b.n	8001550 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d801      	bhi.n	800157a <MCAL_GPIO_Init+0x1e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <MCAL_GPIO_Init+0x22>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff31 	bl	80013ec <Get_CRLH_Position>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	230f      	movs	r3, #15
 8001590:	4093      	lsls	r3, r2
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	401a      	ands	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	789b      	ldrb	r3, [r3, #2]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d00b      	beq.n	80015be <MCAL_GPIO_Init+0x62>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	789b      	ldrb	r3, [r3, #2]
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d007      	beq.n	80015be <MCAL_GPIO_Init+0x62>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	789b      	ldrb	r3, [r3, #2]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d003      	beq.n	80015be <MCAL_GPIO_Init+0x62>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d10e      	bne.n	80015dc <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	3b04      	subs	r3, #4
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e02c      	b.n	8001636 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d003      	beq.n	80015ec <MCAL_GPIO_Init+0x90>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	789b      	ldrb	r3, [r3, #2]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	789b      	ldrb	r3, [r3, #2]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e01c      	b.n	8001636 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d102      	bne.n	800160a <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001604:	2304      	movs	r3, #4
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e015      	b.n	8001636 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 800160a:	2308      	movs	r3, #8
 800160c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	789b      	ldrb	r3, [r3, #2]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d107      	bne.n	8001626 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e007      	b.n	8001636 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	8812      	ldrh	r2, [r2, #0]
 800162e:	43d2      	mvns	r2, r2
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001636:	7bfc      	ldrb	r4, [r7, #15]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fed5 	bl	80013ec <Get_CRLH_Position>
 8001642:	4603      	mov	r3, r0
 8001644:	fa04 f203 	lsl.w	r2, r4, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	431a      	orrs	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	601a      	str	r2, [r3, #0]


}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}

0800165a <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e001      	b.n	800167c <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80016a4:	e002      	b.n	80016ac <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	615a      	str	r2, [r3, #20]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <I2C1_EV_IRQHandler+0xec>)
 80016c4:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ce:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <I2C1_EV_IRQHandler+0x48>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80016f8:	2100      	movs	r1, #0
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f000 f866 	bl	80017cc <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <I2C1_EV_IRQHandler+0x82>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d011      	beq.n	800173a <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10b      	bne.n	800173a <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001732:	2102      	movs	r1, #2
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f000 f849 	bl	80017cc <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00f      	beq.n	800176a <I2C1_EV_IRQHandler+0xb2>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <I2C1_EV_IRQHandler+0xb2>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001762:	2103      	movs	r1, #3
 8001764:	6978      	ldr	r0, [r7, #20]
 8001766:	f000 f831 	bl	80017cc <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00f      	beq.n	800179a <I2C1_EV_IRQHandler+0xe2>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <I2C1_EV_IRQHandler+0xe2>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001792:	2104      	movs	r1, #4
 8001794:	6978      	ldr	r0, [r7, #20]
 8001796:	f000 f819 	bl	80017cc <Slave_States>

		}
	}

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40005400 	.word	0x40005400

080017a8 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <Slave_States+0xd8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d856      	bhi.n	800189c <Slave_States+0xd0>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <Slave_States+0x28>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	0800180f 	.word	0x0800180f
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001833 	.word	0x08001833
 8001800:	0800184b 	.word	0x0800184b
 8001804:	0800186f 	.word	0x0800186f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 800180c:	e046      	b.n	800189c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03b      	beq.n	8001892 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	4922      	ldr	r1, [pc, #136]	; (80018a8 <Slave_States+0xdc>)
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3320      	adds	r3, #32
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2000      	movs	r0, #0
 800182e:	4798      	blx	r3
		}

		break ;
 8001830:	e02f      	b.n	8001892 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	491c      	ldr	r1, [pc, #112]	; (80018a8 <Slave_States+0xdc>)
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3320      	adds	r3, #32
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2002      	movs	r0, #2
 8001846:	4798      	blx	r3

		break ;
 8001848:	e028      	b.n	800189c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01f      	beq.n	8001896 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4913      	ldr	r1, [pc, #76]	; (80018a8 <Slave_States+0xdc>)
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3320      	adds	r3, #32
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2003      	movs	r0, #3
 800186a:	4798      	blx	r3
		}

		break ;
 800186c:	e013      	b.n	8001896 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	490a      	ldr	r1, [pc, #40]	; (80018a8 <Slave_States+0xdc>)
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3320      	adds	r3, #32
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2004      	movs	r0, #4
 800188e:	4798      	blx	r3
		}

		break ;
 8001890:	e003      	b.n	800189a <Slave_States+0xce>
		break ;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <Slave_States+0xd0>
		break ;
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <Slave_States+0xd0>
		break ;
 800189a:	bf00      	nop
	}
	}

}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40005400 	.word	0x40005400
 80018a8:	2000008c 	.word	0x2000008c

080018ac <TIMER3_Init>:




void TIMER3_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER3_CLK_EN();
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <TIMER3_Init+0x4c>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <TIMER3_Init+0x4c>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER3->PSC = (Clock_Speed_MHz - 1);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <TIMER3_Init+0x50>)
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER3->ARR = 0xC350;  // 50000*1us = 0.05s
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <TIMER3_Init+0x50>)
 80018cc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER3->CR1 |= (1<<0);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <TIMER3_Init+0x50>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <TIMER3_Init+0x50>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER3->SR) & (1<<0)));
 80018de:	bf00      	nop
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <TIMER3_Init+0x50>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f9      	beq.n	80018e0 <TIMER3_Init+0x34>
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40000400 	.word	0x40000400

08001900 <Delay_Timer3_us>:


void Delay_Timer3_us(int us)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	TIMER3->CNT = 0;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <Delay_Timer3_us+0x28>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER3->CNT) < us);
 800190e:	bf00      	nop
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <Delay_Timer3_us+0x28>)
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3fa      	bcc.n	8001910 <Delay_Timer3_us+0x10>
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40000400 	.word	0x40000400

0800192c <Delay_Timer3_ms>:


void Delay_Timer3_ms(int ms)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e006      	b.n	8001948 <Delay_Timer3_ms+0x1c>
	{
		Delay_Timer3_us(1000);
 800193a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800193e:	f7ff ffdf 	bl	8001900 <Delay_Timer3_us>
	for(i=0;i<ms;i++)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf4      	blt.n	800193a <Delay_Timer3_ms+0xe>
	}
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b098      	sub	sp, #96	; 0x60
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	72fb      	strb	r3, [r7, #11]
 800196a:	4613      	mov	r3, r2
 800196c:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8001974:	2300      	movs	r3, #0
 8001976:	65bb      	str	r3, [r7, #88]	; 0x58
 8001978:	2301      	movs	r3, #1
 800197a:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 800197c:	e017      	b.n	80019ae <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 800197e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <PWM+0x26c>)
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	4619      	mov	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8001998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800199e:	d303      	bcc.n	80019a8 <PWM+0x4c>
			Prescalar_Value += 2;
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	3302      	adds	r3, #2
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54
 80019a6:	e002      	b.n	80019ae <PWM+0x52>
		}else{
			loop_flag = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 80019ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d0e3      	beq.n	800197e <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a84      	ldr	r2, [pc, #528]	; (8001bcc <PWM+0x270>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	f040 80d8 	bne.w	8001b70 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 80019c0:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <PWM+0x274>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a82      	ldr	r2, [pc, #520]	; (8001bd0 <PWM+0x274>)
 80019c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ca:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <PWM+0x274>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <PWM+0x274>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80019d8:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <PWM+0x274>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a7c      	ldr	r2, [pc, #496]	; (8001bd0 <PWM+0x274>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 0201 	bic.w	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	f200 8336 	bhi.w	8002064 <PWM+0x708>
 80019f8:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <PWM+0xa4>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a69 	.word	0x08001a69
 8001a08:	08001ac1 	.word	0x08001ac1
 8001a0c:	08001b19 	.word	0x08001b19
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <PWM+0x278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001a16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	486e      	ldr	r0, [pc, #440]	; (8001bd8 <PWM+0x27c>)
 8001a1e:	f7ff fd9d 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f043 0208 	orr.w	r2, r3, #8
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001a46:	7abb      	ldrb	r3, [r7, #10]
 8001a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <PWM+0x280>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	095a      	lsrs	r2, r3, #5
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8001a66:	e2fd      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001a68:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <PWM+0x284>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4858      	ldr	r0, [pc, #352]	; (8001bd8 <PWM+0x27c>)
 8001a76:	f7ff fd71 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <PWM+0x280>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	095a      	lsrs	r2, r3, #5
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001abe:	e2d1      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001ac0:	4b48      	ldr	r3, [pc, #288]	; (8001be4 <PWM+0x288>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aca:	4619      	mov	r1, r3
 8001acc:	4842      	ldr	r0, [pc, #264]	; (8001bd8 <PWM+0x27c>)
 8001ace:	f7ff fd45 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f043 0208 	orr.w	r2, r3, #8
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001af6:	7abb      	ldrb	r3, [r7, #10]
 8001af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <PWM+0x280>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	095a      	lsrs	r2, r3, #5
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001b16:	e2a5      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001b18:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <PWM+0x28c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001b1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b22:	4619      	mov	r1, r3
 8001b24:	482c      	ldr	r0, [pc, #176]	; (8001bd8 <PWM+0x27c>)
 8001b26:	f7ff fd19 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001b4e:	7abb      	ldrb	r3, [r7, #10]
 8001b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <PWM+0x280>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	095a      	lsrs	r2, r3, #5
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001b6e:	e279      	b.n	8002064 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	f040 80d1 	bne.w	8001d1c <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <PWM+0x274>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <PWM+0x274>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <PWM+0x274>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <PWM+0x274>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <PWM+0x274>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <PWM+0x274>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0201 	bic.w	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8001baa:	7afb      	ldrb	r3, [r7, #11]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	f200 8259 	bhi.w	8002064 <PWM+0x708>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <PWM+0x25c>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bed 	.word	0x08001bed
 8001bbc:	08001c39 	.word	0x08001c39
 8001bc0:	08001c85 	.word	0x08001c85
 8001bc4:	08001cd1 	.word	0x08001cd1
 8001bc8:	000f4240 	.word	0x000f4240
 8001bcc:	40012c00 	.word	0x40012c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08002468 	.word	0x08002468
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	51eb851f 	.word	0x51eb851f
 8001be0:	0800246c 	.word	0x0800246c
 8001be4:	08002470 	.word	0x08002470
 8001be8:	08002474 	.word	0x08002474
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001bec:	4b9d      	ldr	r3, [pc, #628]	; (8001e64 <PWM+0x508>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	489b      	ldr	r0, [pc, #620]	; (8001e68 <PWM+0x50c>)
 8001bfa:	f7ff fcaf 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f043 0208 	orr.w	r2, r3, #8
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f043 0201 	orr.w	r2, r3, #1
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001c22:	7abb      	ldrb	r3, [r7, #10]
 8001c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a90      	ldr	r2, [pc, #576]	; (8001e6c <PWM+0x510>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	095a      	lsrs	r2, r3, #5
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001c36:	e215      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001c38:	4b8d      	ldr	r3, [pc, #564]	; (8001e70 <PWM+0x514>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001c3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c42:	4619      	mov	r1, r3
 8001c44:	4888      	ldr	r0, [pc, #544]	; (8001e68 <PWM+0x50c>)
 8001c46:	f7ff fc89 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001c6e:	7abb      	ldrb	r3, [r7, #10]
 8001c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	4a7d      	ldr	r2, [pc, #500]	; (8001e6c <PWM+0x510>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	095a      	lsrs	r2, r3, #5
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001c82:	e1ef      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001c84:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <PWM+0x518>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001c8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4875      	ldr	r0, [pc, #468]	; (8001e68 <PWM+0x50c>)
 8001c92:	f7ff fc63 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f043 0208 	orr.w	r2, r3, #8
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001cba:	7abb      	ldrb	r3, [r7, #10]
 8001cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <PWM+0x510>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	095a      	lsrs	r2, r3, #5
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001cce:	e1c9      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001cd0:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <PWM+0x51c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4862      	ldr	r0, [pc, #392]	; (8001e68 <PWM+0x50c>)
 8001cde:	f7ff fc3d 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001d06:	7abb      	ldrb	r3, [r7, #10]
 8001d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <PWM+0x510>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	095a      	lsrs	r2, r3, #5
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001d1a:	e1a3      	b.n	8002064 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <PWM+0x520>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f040 80db 	bne.w	8001edc <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <PWM+0x524>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a55      	ldr	r2, [pc, #340]	; (8001e80 <PWM+0x524>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001d32:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <PWM+0x524>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <PWM+0x524>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <PWM+0x524>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <PWM+0x524>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <PWM+0x524>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <PWM+0x524>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0201 	bic.w	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f200 817d 	bhi.w	8002064 <PWM+0x708>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <PWM+0x414>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001d81 	.word	0x08001d81
 8001d74:	08001dcd 	.word	0x08001dcd
 8001d78:	08001e19 	.word	0x08001e19
 8001d7c:	08001e91 	.word	0x08001e91
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <PWM+0x528>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4836      	ldr	r0, [pc, #216]	; (8001e68 <PWM+0x50c>)
 8001d8e:	f7ff fbe5 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f043 0208 	orr.w	r2, r3, #8
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001db6:	7abb      	ldrb	r3, [r7, #10]
 8001db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <PWM+0x510>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	095a      	lsrs	r2, r3, #5
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001dca:	e14b      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <PWM+0x52c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4823      	ldr	r0, [pc, #140]	; (8001e68 <PWM+0x50c>)
 8001dda:	f7ff fbbf 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001e02:	7abb      	ldrb	r3, [r7, #10]
 8001e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <PWM+0x510>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	095a      	lsrs	r2, r3, #5
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001e16:	e125      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <PWM+0x508>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4819      	ldr	r0, [pc, #100]	; (8001e8c <PWM+0x530>)
 8001e26:	f7ff fb99 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f043 0208 	orr.w	r2, r3, #8
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001e4e:	7abb      	ldrb	r3, [r7, #10]
 8001e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <PWM+0x510>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	095a      	lsrs	r2, r3, #5
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001e62:	e0ff      	b.n	8002064 <PWM+0x708>
 8001e64:	08002478 	.word	0x08002478
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	51eb851f 	.word	0x51eb851f
 8001e70:	0800247c 	.word	0x0800247c
 8001e74:	08002480 	.word	0x08002480
 8001e78:	08002484 	.word	0x08002484
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08002488 	.word	0x08002488
 8001e88:	0800248c 	.word	0x0800248c
 8001e8c:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <PWM+0x744>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4881      	ldr	r0, [pc, #516]	; (80020a4 <PWM+0x748>)
 8001e9e:	f7ff fb5d 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001ec6:	7abb      	ldrb	r3, [r7, #10]
 8001ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4a76      	ldr	r2, [pc, #472]	; (80020a8 <PWM+0x74c>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	095a      	lsrs	r2, r3, #5
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001eda:	e0c3      	b.n	8002064 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a73      	ldr	r2, [pc, #460]	; (80020ac <PWM+0x750>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	f040 80bf 	bne.w	8002064 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <PWM+0x754>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <PWM+0x754>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <PWM+0x754>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <PWM+0x754>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001efe:	4b6c      	ldr	r3, [pc, #432]	; (80020b0 <PWM+0x754>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a6b      	ldr	r2, [pc, #428]	; (80020b0 <PWM+0x754>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0201 	bic.w	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	f200 80a3 	bhi.w	8002064 <PWM+0x708>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <PWM+0x5c8>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f81 	.word	0x08001f81
 8001f2c:	08001fcd 	.word	0x08001fcd
 8001f30:	08002019 	.word	0x08002019
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001f34:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <PWM+0x758>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4858      	ldr	r0, [pc, #352]	; (80020a4 <PWM+0x748>)
 8001f42:	f7ff fb0b 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f043 0208 	orr.w	r2, r3, #8
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001f6a:	7abb      	ldrb	r3, [r7, #10]
 8001f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <PWM+0x74c>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	095a      	lsrs	r2, r3, #5
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8001f7e:	e071      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001f80:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <PWM+0x75c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4845      	ldr	r0, [pc, #276]	; (80020a4 <PWM+0x748>)
 8001f8e:	f7ff fae5 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f043 0210 	orr.w	r2, r3, #16
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001fb6:	7abb      	ldrb	r3, [r7, #10]
 8001fb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <PWM+0x74c>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	095a      	lsrs	r2, r3, #5
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001fca:	e04b      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <PWM+0x760>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001fd2:	f107 0318 	add.w	r3, r7, #24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4832      	ldr	r0, [pc, #200]	; (80020a4 <PWM+0x748>)
 8001fda:	f7ff fabf 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f043 0208 	orr.w	r2, r3, #8
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002002:	7abb      	ldrb	r3, [r7, #10]
 8002004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <PWM+0x74c>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	095a      	lsrs	r2, r3, #5
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002016:	e025      	b.n	8002064 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <PWM+0x764>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	481f      	ldr	r0, [pc, #124]	; (80020a4 <PWM+0x748>)
 8002026:	f7ff fa99 	bl	800155c <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800204e:	7abb      	ldrb	r3, [r7, #10]
 8002050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <PWM+0x74c>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	095a      	lsrs	r2, r3, #5
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002062:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	3760      	adds	r7, #96	; 0x60
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800247c 	.word	0x0800247c
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	51eb851f 	.word	0x51eb851f
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08002488 	.word	0x08002488
 80020b8:	0800248c 	.word	0x0800248c
 80020bc:	08002468 	.word	0x08002468
 80020c0:	0800246c 	.word	0x0800246c

080020c4 <Disable_Timer2>:


void Disable_Timer2()
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	TIMER2->CR1 &= ~(1<<0);
 80020c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <Get_TIMER3_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER3_Counter()
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	return (TIMER3->CNT);
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <Get_TIMER3_Counter+0x10>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40000400 	.word	0x40000400

080020f4 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <TIM2_IRQHandler+0x60>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d125      	bne.n	800214c <TIM2_IRQHandler+0x58>
	{
		TIMER2->SR &= ~(1<<0);
 8002100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8002110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <TIM2_IRQHandler+0x64>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <TIM2_IRQHandler+0x64>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <TIM2_IRQHandler+0x64>)
 8002132:	801a      	strh	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
		}
	}else{   // For further usage rather than stepper

	}
}
 8002134:	e00a      	b.n	800214c <TIM2_IRQHandler+0x58>
			stepper_Flag = 0;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <TIM2_IRQHandler+0x60>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 800213c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	200000d4 	.word	0x200000d4
 8002158:	200000d6 	.word	0x200000d6

0800215c <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <USART1_IRQHandler+0x10>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4798      	blx	r3
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200000d8 	.word	0x200000d8

08002170 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <USART2_IRQHandler+0x10>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	4798      	blx	r3
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200000d8 	.word	0x200000d8

08002184 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <USART3_IRQHandler+0x10>)
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	4798      	blx	r3
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200000d8 	.word	0x200000d8

08002198 <main>:
//
#include "../Src/HAL/UltraSonic_HC_SR04/UltraSonic_Interface.h"
#include "../Src/HAL/LCD/LCD_Interface.h"
#include "../Src/HAL/UltraSonic_HC_SR04/UltraSonic_Interface.h"

int main(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af02      	add	r7, sp, #8

	//RCC_GPIOC_CLK_EN();
	RCC_GPIOB_CLK_EN();
 800219e:	4b76      	ldr	r3, [pc, #472]	; (8002378 <main+0x1e0>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	4a75      	ldr	r2, [pc, #468]	; (8002378 <main+0x1e0>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80021aa:	4b73      	ldr	r3, [pc, #460]	; (8002378 <main+0x1e0>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4a72      	ldr	r2, [pc, #456]	; (8002378 <main+0x1e0>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6193      	str	r3, [r2, #24]

	TIMER3_Init(RCC_CLK_8M);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f7ff fb78 	bl	80018ac <TIMER3_Init>

	GPIO_PinConfig_t DC_En1Pin = { .GPIO_PinNumber = GPIO_PIN_7, .GPIO_MODE =
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <main+0x1e4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOB, &DC_En1Pin);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	486d      	ldr	r0, [pc, #436]	; (8002380 <main+0x1e8>)
 80021ca:	f7ff f9c7 	bl	800155c <MCAL_GPIO_Init>
	//
	GPIO_PinConfig_t DC_In1Pin = { .GPIO_PinNumber = GPIO_PIN_9, .GPIO_MODE =
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <main+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	623b      	str	r3, [r7, #32]
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOA, &DC_In1Pin);
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	4619      	mov	r1, r3
 80021da:	486b      	ldr	r0, [pc, #428]	; (8002388 <main+0x1f0>)
 80021dc:	f7ff f9be 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t DC_In2Pin = { .GPIO_PinNumber = GPIO_PIN_10, .GPIO_MODE =
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <main+0x1f4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61fb      	str	r3, [r7, #28]
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOA, &DC_In2Pin);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4866      	ldr	r0, [pc, #408]	; (8002388 <main+0x1f0>)
 80021ee:	f7ff f9b5 	bl	800155c <MCAL_GPIO_Init>
	//
	//
	GPIO_PinConfig_t DC_En2Pin = { .GPIO_PinNumber = GPIO_PIN_6, .GPIO_MODE =
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <main+0x1f8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61bb      	str	r3, [r7, #24]
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOB, &DC_En2Pin);
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4860      	ldr	r0, [pc, #384]	; (8002380 <main+0x1e8>)
 8002200:	f7ff f9ac 	bl	800155c <MCAL_GPIO_Init>
	//
	GPIO_PinConfig_t DC_In3Pin = { .GPIO_PinNumber = GPIO_PIN_11, .GPIO_MODE =
 8002204:	4b63      	ldr	r3, [pc, #396]	; (8002394 <main+0x1fc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	617b      	str	r3, [r7, #20]
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOA, &DC_In3Pin);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	485d      	ldr	r0, [pc, #372]	; (8002388 <main+0x1f0>)
 8002212:	f7ff f9a3 	bl	800155c <MCAL_GPIO_Init>

	GPIO_PinConfig_t DC_In4Pin = { .GPIO_PinNumber = GPIO_PIN_12, .GPIO_MODE =
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <main+0x200>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
			GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOA, &DC_In4Pin);
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4619      	mov	r1, r3
 8002222:	4859      	ldr	r0, [pc, #356]	; (8002388 <main+0x1f0>)
 8002224:	f7ff f99a 	bl	800155c <MCAL_GPIO_Init>

	LCD_enuInit(&LCD_Configs);
 8002228:	485c      	ldr	r0, [pc, #368]	; (800239c <main+0x204>)
 800222a:	f7fe fb8f 	bl	800094c <LCD_enuInit>

	HC_SR04_Init(UltraSonic_Configs);
 800222e:	485c      	ldr	r0, [pc, #368]	; (80023a0 <main+0x208>)
 8002230:	f7fe fefa 	bl	8001028 <HC_SR04_Init>

	GPIO_PinConfig_t StepperDirPin = { .GPIO_PinNumber = GPIO_PIN_9,
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <main+0x1ec>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL, .GPIO_OUTPUT_SPEED =
					GPIO_SPEED_2MHZ };
	MCAL_GPIO_Init(GPIOB, &StepperDirPin);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	484f      	ldr	r0, [pc, #316]	; (8002380 <main+0x1e8>)
 8002242:	f7ff f98b 	bl	800155c <MCAL_GPIO_Init>


	uint32_t Ultra1Distance = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
	uint32_t Ultra2Distance = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
		//		PWM(TIMER3, TIMER_CH1, 100, 1000, RCC_CLK_8M);
		//

		// -------------------------- DC Motor Testing ---------------------------------

		LCD_enuJumpCursorTo(1, 0);
 800224e:	2100      	movs	r1, #0
 8002250:	2001      	movs	r0, #1
 8002252:	f7fe fe19 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuSendString("START");
 8002256:	4853      	ldr	r0, [pc, #332]	; (80023a4 <main+0x20c>)
 8002258:	f7fe fdf2 	bl	8000e40 <LCD_enuSendString>

		HC_SR04_ReadDistance(0,&Ultra1Distance);
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	4619      	mov	r1, r3
 8002262:	2000      	movs	r0, #0
 8002264:	f7fe ff4c 	bl	8001100 <HC_SR04_ReadDistance>
		HC_SR04_ReadDistance(1,&Ultra2Distance);
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	2001      	movs	r0, #1
 800226e:	f7fe ff47 	bl	8001100 <HC_SR04_ReadDistance>

		LCD_enuJumpCursorTo(1, 0);
 8002272:	2100      	movs	r1, #0
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe fe07 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuSendString("Reading ");
 800227a:	484b      	ldr	r0, [pc, #300]	; (80023a8 <main+0x210>)
 800227c:	f7fe fde0 	bl	8000e40 <LCD_enuSendString>

		LCD_enuJumpCursorTo(2, 0);
 8002280:	2100      	movs	r1, #0
 8002282:	2002      	movs	r0, #2
 8002284:	f7fe fe00 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuSendString("1st:    ");
 8002288:	4848      	ldr	r0, [pc, #288]	; (80023ac <main+0x214>)
 800228a:	f7fe fdd9 	bl	8000e40 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 5);
 800228e:	2105      	movs	r1, #5
 8002290:	2002      	movs	r0, #2
 8002292:	f7fe fdf9 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra1Distance);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fe43 	bl	8000f24 <LCD_enuDisplayIntNum>

		LCD_enuJumpCursorTo(2, 9);
 800229e:	2109      	movs	r1, #9
 80022a0:	2002      	movs	r0, #2
 80022a2:	f7fe fdf1 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuSendString("2nd:    ");
 80022a6:	4842      	ldr	r0, [pc, #264]	; (80023b0 <main+0x218>)
 80022a8:	f7fe fdca 	bl	8000e40 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 13);
 80022ac:	210d      	movs	r1, #13
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7fe fdea 	bl	8000e88 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra2Distance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fe34 	bl	8000f24 <LCD_enuDisplayIntNum>
		//
		if (Ultra1Distance <= 20) {
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b14      	cmp	r3, #20
 80022c0:	d856      	bhi.n	8002370 <main+0x1d8>

			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_HIGH);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	482e      	ldr	r0, [pc, #184]	; (8002380 <main+0x1e8>)
 80022c8:	f7ff f9de 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_HIGH);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	482b      	ldr	r0, [pc, #172]	; (8002380 <main+0x1e8>)
 80022d2:	f7ff f9d9 	bl	8001688 <MCAL_GPIO_WritePin>

			// Timer3 CH2 --> A7  &&&& Timer3 CH1 --> A6

			// 9, 10 ---- 11,12
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_HIGH);
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <main+0x1f0>)
 80022de:	f7ff f9d3 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_LOW);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <main+0x1f0>)
 80022ea:	f7ff f9cd 	bl	8001688 <MCAL_GPIO_WritePin>
			//Delay_ms(1000);
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_HIGH);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f4:	4824      	ldr	r0, [pc, #144]	; (8002388 <main+0x1f0>)
 80022f6:	f7ff f9c7 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_LOW);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002300:	4821      	ldr	r0, [pc, #132]	; (8002388 <main+0x1f0>)
 8002302:	f7ff f9c1 	bl	8001688 <MCAL_GPIO_WritePin>
//					counter += 10;
//
//					if(counter > 100)
//						counter = 0;

			Delay_Timer3_ms(3000);
 8002306:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800230a:	f7ff fb0f 	bl	800192c <Delay_Timer3_ms>

			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	481b      	ldr	r0, [pc, #108]	; (8002380 <main+0x1e8>)
 8002314:	f7ff f9b8 	bl	8001688 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 8002318:	2200      	movs	r2, #0
 800231a:	2140      	movs	r1, #64	; 0x40
 800231c:	4818      	ldr	r0, [pc, #96]	; (8002380 <main+0x1e8>)
 800231e:	f7ff f9b3 	bl	8001688 <MCAL_GPIO_WritePin>

			Delay_Timer3_ms(1000);
 8002322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002326:	f7ff fb01 	bl	800192c <Delay_Timer3_ms>

			if(Ultra2Distance<=2){
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d806      	bhi.n	800233e <main+0x1a6>
				// Move stepper up
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_HIGH);
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002336:	4812      	ldr	r0, [pc, #72]	; (8002380 <main+0x1e8>)
 8002338:	f7ff f9a6 	bl	8001688 <MCAL_GPIO_WritePin>
 800233c:	e008      	b.n	8002350 <main+0x1b8>
			}else if(Ultra2Distance>=4){
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d905      	bls.n	8002350 <main+0x1b8>
				MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_LOW);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234a:	480d      	ldr	r0, [pc, #52]	; (8002380 <main+0x1e8>)
 800234c:	f7ff f99c 	bl	8001688 <MCAL_GPIO_WritePin>
			}

			PWM(TIMER2, TIMER_CH1, 50, 500, RCC_CLK_8M);
 8002350:	2308      	movs	r3, #8
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002358:	2232      	movs	r2, #50	; 0x32
 800235a:	2100      	movs	r1, #0
 800235c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002360:	f7ff fafc 	bl	800195c <PWM>

			Delay_Timer3_ms(2500);
 8002364:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002368:	f7ff fae0 	bl	800192c <Delay_Timer3_ms>

			Disable_Timer2();
 800236c:	f7ff feaa 	bl	80020c4 <Disable_Timer2>

		}

		Delay_Timer3_ms(10);
 8002370:	200a      	movs	r0, #10
 8002372:	f7ff fadb 	bl	800192c <Delay_Timer3_ms>
		LCD_enuJumpCursorTo(1, 0);
 8002376:	e76a      	b.n	800224e <main+0xb6>
 8002378:	40021000 	.word	0x40021000
 800237c:	080024bc 	.word	0x080024bc
 8002380:	40010c00 	.word	0x40010c00
 8002384:	080024c0 	.word	0x080024c0
 8002388:	40010800 	.word	0x40010800
 800238c:	080024c4 	.word	0x080024c4
 8002390:	080024c8 	.word	0x080024c8
 8002394:	080024cc 	.word	0x080024cc
 8002398:	080024d0 	.word	0x080024d0
 800239c:	20000000 	.word	0x20000000
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	08002490 	.word	0x08002490
 80023a8:	08002498 	.word	0x08002498
 80023ac:	080024a4 	.word	0x080024a4
 80023b0:	080024b0 	.word	0x080024b0

080023b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <LoopForever+0xe>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <LoopForever+0x16>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023e2:	f000 f811 	bl	8002408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023e6:	f7ff fed7 	bl	8002198 <main>

080023ea <LoopForever>:

LoopForever:
  b LoopForever
 80023ea:	e7fe      	b.n	80023ea <LoopForever>
  ldr   r0, =_estack
 80023ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80023f8:	080024dc 	.word	0x080024dc
  ldr r2, =_sbss
 80023fc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002400:	20000114 	.word	0x20000114

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <__libc_init_array>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	2600      	movs	r6, #0
 800240c:	4d0c      	ldr	r5, [pc, #48]	; (8002440 <__libc_init_array+0x38>)
 800240e:	4c0d      	ldr	r4, [pc, #52]	; (8002444 <__libc_init_array+0x3c>)
 8002410:	1b64      	subs	r4, r4, r5
 8002412:	10a4      	asrs	r4, r4, #2
 8002414:	42a6      	cmp	r6, r4
 8002416:	d109      	bne.n	800242c <__libc_init_array+0x24>
 8002418:	f000 f81a 	bl	8002450 <_init>
 800241c:	2600      	movs	r6, #0
 800241e:	4d0a      	ldr	r5, [pc, #40]	; (8002448 <__libc_init_array+0x40>)
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <__libc_init_array+0x44>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	42a6      	cmp	r6, r4
 8002428:	d105      	bne.n	8002436 <__libc_init_array+0x2e>
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002430:	4798      	blx	r3
 8002432:	3601      	adds	r6, #1
 8002434:	e7ee      	b.n	8002414 <__libc_init_array+0xc>
 8002436:	f855 3b04 	ldr.w	r3, [r5], #4
 800243a:	4798      	blx	r3
 800243c:	3601      	adds	r6, #1
 800243e:	e7f2      	b.n	8002426 <__libc_init_array+0x1e>
 8002440:	080024d4 	.word	0x080024d4
 8002444:	080024d4 	.word	0x080024d4
 8002448:	080024d4 	.word	0x080024d4
 800244c:	080024d8 	.word	0x080024d8

08002450 <_init>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	bf00      	nop
 8002454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002456:	bc08      	pop	{r3}
 8002458:	469e      	mov	lr, r3
 800245a:	4770      	bx	lr

0800245c <_fini>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr
