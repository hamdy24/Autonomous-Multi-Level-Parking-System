
MPUisBackToLife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c04  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005d38  08005d38  00015d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e50  08005e50  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005e50  08005e50  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e50  08005e50  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000068  08005ec0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005ec0  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004726  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001250  00000000  00000000  000247fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001a26  00000000  00000000  00025a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003f8  00000000  00000000  00027470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000340  00000000  00000000  00027868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000039ca  00000000  00000000  00027ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006117  00000000  00000000  0002b572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000d6b8  00000000  00000000  00031689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000184c  00000000  00000000  0003ed44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08005d1c 	.word	0x08005d1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08005d1c 	.word	0x08005d1c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2f>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa0:	bf24      	itt	cs
 8000aa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_d2f+0x30>
 8000aac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000abc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000acc:	d121      	bne.n	8000b12 <__aeabi_d2f+0x7a>
 8000ace:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad2:	bfbc      	itt	lt
 8000ad4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	4770      	bxlt	lr
 8000ada:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ade:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae2:	f1c2 0218 	rsb	r2, r2, #24
 8000ae6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aee:	fa20 f002 	lsr.w	r0, r0, r2
 8000af2:	bf18      	it	ne
 8000af4:	f040 0001 	orrne.w	r0, r0, #1
 8000af8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b04:	ea40 000c 	orr.w	r0, r0, ip
 8000b08:	fa23 f302 	lsr.w	r3, r3, r2
 8000b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b10:	e7cc      	b.n	8000aac <__aeabi_d2f+0x14>
 8000b12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b16:	d107      	bne.n	8000b28 <__aeabi_d2f+0x90>
 8000b18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b26:	4770      	bxne	lr
 8000b28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_frsub>:
 8000b38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	e002      	b.n	8000b44 <__addsf3>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_fsub>:
 8000b40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b44 <__addsf3>:
 8000b44:	0042      	lsls	r2, r0, #1
 8000b46:	bf1f      	itttt	ne
 8000b48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b4c:	ea92 0f03 	teqne	r2, r3
 8000b50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b58:	d06a      	beq.n	8000c30 <__addsf3+0xec>
 8000b5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b62:	bfc1      	itttt	gt
 8000b64:	18d2      	addgt	r2, r2, r3
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	4048      	eorgt	r0, r1
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	bfb8      	it	lt
 8000b6e:	425b      	neglt	r3, r3
 8000b70:	2b19      	cmp	r3, #25
 8000b72:	bf88      	it	hi
 8000b74:	4770      	bxhi	lr
 8000b76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4249      	negne	r1, r1
 8000b96:	ea92 0f03 	teq	r2, r3
 8000b9a:	d03f      	beq.n	8000c1c <__addsf3+0xd8>
 8000b9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba4:	eb10 000c 	adds.w	r0, r0, ip
 8000ba8:	f1c3 0320 	rsb	r3, r3, #32
 8000bac:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	d502      	bpl.n	8000bbc <__addsf3+0x78>
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc0:	d313      	bcc.n	8000bea <__addsf3+0xa6>
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d306      	bcc.n	8000bd6 <__addsf3+0x92>
 8000bc8:	0840      	lsrs	r0, r0, #1
 8000bca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bce:	f102 0201 	add.w	r2, r2, #1
 8000bd2:	2afe      	cmp	r2, #254	; 0xfe
 8000bd4:	d251      	bcs.n	8000c7a <__addsf3+0x136>
 8000bd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bde:	bf08      	it	eq
 8000be0:	f020 0001 	biceq.w	r0, r0, #1
 8000be4:	ea40 0003 	orr.w	r0, r0, r3
 8000be8:	4770      	bx	lr
 8000bea:	0049      	lsls	r1, r1, #1
 8000bec:	eb40 0000 	adc.w	r0, r0, r0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf8:	d2ed      	bcs.n	8000bd6 <__addsf3+0x92>
 8000bfa:	fab0 fc80 	clz	ip, r0
 8000bfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c02:	ebb2 020c 	subs.w	r2, r2, ip
 8000c06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0a:	bfaa      	itet	ge
 8000c0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c10:	4252      	neglt	r2, r2
 8000c12:	4318      	orrge	r0, r3
 8000c14:	bfbc      	itt	lt
 8000c16:	40d0      	lsrlt	r0, r2
 8000c18:	4318      	orrlt	r0, r3
 8000c1a:	4770      	bx	lr
 8000c1c:	f092 0f00 	teq	r2, #0
 8000c20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c24:	bf06      	itte	eq
 8000c26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2a:	3201      	addeq	r2, #1
 8000c2c:	3b01      	subne	r3, #1
 8000c2e:	e7b5      	b.n	8000b9c <__addsf3+0x58>
 8000c30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3e:	d021      	beq.n	8000c84 <__addsf3+0x140>
 8000c40:	ea92 0f03 	teq	r2, r3
 8000c44:	d004      	beq.n	8000c50 <__addsf3+0x10c>
 8000c46:	f092 0f00 	teq	r2, #0
 8000c4a:	bf08      	it	eq
 8000c4c:	4608      	moveq	r0, r1
 8000c4e:	4770      	bx	lr
 8000c50:	ea90 0f01 	teq	r0, r1
 8000c54:	bf1c      	itt	ne
 8000c56:	2000      	movne	r0, #0
 8000c58:	4770      	bxne	lr
 8000c5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5e:	d104      	bne.n	8000c6a <__addsf3+0x126>
 8000c60:	0040      	lsls	r0, r0, #1
 8000c62:	bf28      	it	cs
 8000c64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6e:	bf3c      	itt	cc
 8000c70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bxcc	lr
 8000c76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	4770      	bx	lr
 8000c84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c88:	bf16      	itet	ne
 8000c8a:	4608      	movne	r0, r1
 8000c8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c90:	4601      	movne	r1, r0
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	bf06      	itte	eq
 8000c96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9a:	ea90 0f01 	teqeq	r0, r1
 8000c9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_ui2f>:
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e004      	b.n	8000cb4 <__aeabi_i2f+0x8>
 8000caa:	bf00      	nop

08000cac <__aeabi_i2f>:
 8000cac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb0:	bf48      	it	mi
 8000cb2:	4240      	negmi	r0, r0
 8000cb4:	ea5f 0c00 	movs.w	ip, r0
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	e01c      	b.n	8000d02 <__aeabi_l2f+0x2a>

08000cc8 <__aeabi_ul2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e00a      	b.n	8000cec <__aeabi_l2f+0x14>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_l2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__aeabi_l2f+0x14>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	ea5f 0c01 	movs.w	ip, r1
 8000cf0:	bf02      	ittt	eq
 8000cf2:	4684      	moveq	ip, r0
 8000cf4:	4601      	moveq	r1, r0
 8000cf6:	2000      	moveq	r0, #0
 8000cf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cfc:	bf08      	it	eq
 8000cfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d06:	fabc f28c 	clz	r2, ip
 8000d0a:	3a08      	subs	r2, #8
 8000d0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d10:	db10      	blt.n	8000d34 <__aeabi_l2f+0x5c>
 8000d12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d16:	4463      	add	r3, ip
 8000d18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d24:	fa20 f202 	lsr.w	r2, r0, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	f020 0001 	biceq.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	f102 0220 	add.w	r2, r2, #32
 8000d38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d44:	fa21 f202 	lsr.w	r2, r1, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_fmul>:
 8000d54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d62:	ea92 0f0c 	teqne	r2, ip
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d06f      	beq.n	8000e4c <__aeabi_fmul+0xf8>
 8000d6c:	441a      	add	r2, r3
 8000d6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d72:	0240      	lsls	r0, r0, #9
 8000d74:	bf18      	it	ne
 8000d76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7a:	d01e      	beq.n	8000dba <__aeabi_fmul+0x66>
 8000d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d88:	fba0 3101 	umull	r3, r1, r0, r1
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d94:	bf3e      	ittt	cc
 8000d96:	0049      	lslcc	r1, r1, #1
 8000d98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	ea40 0001 	orr.w	r0, r0, r1
 8000da2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da6:	2afd      	cmp	r2, #253	; 0xfd
 8000da8:	d81d      	bhi.n	8000de6 <__aeabi_fmul+0x92>
 8000daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db2:	bf08      	it	eq
 8000db4:	f020 0001 	biceq.w	r0, r0, #1
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	0249      	lsleq	r1, r1, #9
 8000dc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dce:	3a7f      	subs	r2, #127	; 0x7f
 8000dd0:	bfc2      	ittt	gt
 8000dd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dda:	4770      	bxgt	lr
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	3a01      	subs	r2, #1
 8000de6:	dc5d      	bgt.n	8000ea4 <__aeabi_fmul+0x150>
 8000de8:	f112 0f19 	cmn.w	r2, #25
 8000dec:	bfdc      	itt	le
 8000dee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	4770      	bxle	lr
 8000df4:	f1c2 0200 	rsb	r2, r2, #0
 8000df8:	0041      	lsls	r1, r0, #1
 8000dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfe:	f1c2 0220 	rsb	r2, r2, #32
 8000e02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0a:	f140 0000 	adc.w	r0, r0, #0
 8000e0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e12:	bf08      	it	eq
 8000e14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e18:	4770      	bx	lr
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xce>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xe6>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e78f      	b.n	8000d6c <__aeabi_fmul+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	bf18      	it	ne
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d00a      	beq.n	8000e72 <__aeabi_fmul+0x11e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1d8      	bne.n	8000e1a <__aeabi_fmul+0xc6>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	bf17      	itett	ne
 8000e78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	f091 0f00 	teqne	r1, #0
 8000e82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e86:	d014      	beq.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_fmul+0x13e>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d10f      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e92:	ea93 0f0c 	teq	r3, ip
 8000e96:	d103      	bne.n	8000ea0 <__aeabi_fmul+0x14c>
 8000e98:	024b      	lsls	r3, r1, #9
 8000e9a:	bf18      	it	ne
 8000e9c:	4608      	movne	r0, r1
 8000e9e:	d108      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ea0:	ea80 0001 	eor.w	r0, r0, r1
 8000ea4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	4770      	bx	lr
 8000eb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_fdiv>:
 8000ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec4:	bf1e      	ittt	ne
 8000ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eca:	ea92 0f0c 	teqne	r2, ip
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d069      	beq.n	8000fa8 <__aeabi_fdiv+0xec>
 8000ed4:	eba2 0203 	sub.w	r2, r2, r3
 8000ed8:	ea80 0c01 	eor.w	ip, r0, r1
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee2:	d037      	beq.n	8000f54 <__aeabi_fdiv+0x98>
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	bf38      	it	cc
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f02:	428b      	cmp	r3, r1
 8000f04:	bf24      	itt	cs
 8000f06:	1a5b      	subcs	r3, r3, r1
 8000f08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1e:	bf24      	itt	cs
 8000f20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f2c:	bf24      	itt	cs
 8000f2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	bf18      	it	ne
 8000f3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3e:	d1e0      	bne.n	8000f02 <__aeabi_fdiv+0x46>
 8000f40:	2afd      	cmp	r2, #253	; 0xfd
 8000f42:	f63f af50 	bhi.w	8000de6 <__aeabi_fmul+0x92>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f4c:	bf08      	it	eq
 8000f4e:	f020 0001 	biceq.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5c:	327f      	adds	r2, #127	; 0x7f
 8000f5e:	bfc2      	ittt	gt
 8000f60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f68:	4770      	bxgt	lr
 8000f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	3a01      	subs	r2, #1
 8000f74:	e737      	b.n	8000de6 <__aeabi_fmul+0x92>
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xc2>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xda>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e795      	b.n	8000ed4 <__aeabi_fdiv+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d108      	bne.n	8000fc4 <__aeabi_fdiv+0x108>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	f47f af7d 	bne.w	8000eb2 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	f47f af70 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e776      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_fdiv+0x118>
 8000fca:	024b      	lsls	r3, r1, #9
 8000fcc:	f43f af4c 	beq.w	8000e68 <__aeabi_fmul+0x114>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e76e      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd8:	bf18      	it	ne
 8000fda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fde:	d1ca      	bne.n	8000f76 <__aeabi_fdiv+0xba>
 8000fe0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe4:	f47f af5c 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fe8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fec:	f47f af3c 	bne.w	8000e68 <__aeabi_fmul+0x114>
 8000ff0:	e75f      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_f2iz>:
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30f      	bcc.n	800101e <__aeabi_f2iz+0x2a>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d90d      	bls.n	8001024 <__aeabi_f2iz+0x30>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001014:	fa23 f002 	lsr.w	r0, r3, r2
 8001018:	bf18      	it	ne
 800101a:	4240      	negne	r0, r0
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr
 8001024:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001028:	d101      	bne.n	800102e <__aeabi_f2iz+0x3a>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	d105      	bne.n	800103a <__aeabi_f2iz+0x46>
 800102e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001032:	bf08      	it	eq
 8001034:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001038:	4770      	bx	lr
 800103a:	f04f 0000 	mov.w	r0, #0
 800103e:	4770      	bx	lr

08001040 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 800104c:	81bb      	strh	r3, [r7, #12]
 800104e:	2304      	movs	r3, #4
 8001050:	73bb      	strb	r3, [r7, #14]
 8001052:	2302      	movs	r3, #2
 8001054:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f107 020c 	add.w	r2, r7, #12
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f000 ffc3 	bl	8001fec <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 800106a:	813b      	strh	r3, [r7, #8]
 800106c:	2304      	movs	r3, #4
 800106e:	72bb      	strb	r3, [r7, #10]
 8001070:	2302      	movs	r3, #2
 8001072:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 ffb4 	bl	8001fec <MCAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Motor_Move_ForWard>:
}




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68d8      	ldr	r0, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7c19      	ldrb	r1, [r3, #16]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	2324      	movs	r3, #36	; 0x24
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	f001 fcf9 	bl	8002aa0 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6858      	ldr	r0, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4619      	mov	r1, r3
 80010ba:	f001 f816 	bl	80020ea <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f001 f80e 	bl	80020ea <MCAL_GPIO_WritePin>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MPU6050_Init>:
 * @retval 				- MPU6050_Status: Configuration Status (Succeeded or not)
 * Note					- Data written in ACCEL and GYRO register should be changed to be suitable for your application
 */

MPU6050_Status MPU6050_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
	MPU6050_Status Status = ERROR_CONFIG;
 80010de:	2302      	movs	r3, #2
 80010e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	// PB7: I2C1_SDA

	I2C_Config_t I2C_Cfg;

	// I2C Controller act as a master
	I2C_Cfg.General_Call_Address_Detection = I2C_ENGC_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Cfg.ACK_Control = I2C_ACK_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
	I2C_Cfg.I2C_Clock_Speed = I2C_SCLK_SM_100K;
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <MPU6050_Init+0xa4>)
 80010ee:	60bb      	str	r3, [r7, #8]
	I2C_Cfg.I2C_Mode = I2C_MODE_I2C;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
	I2C_Cfg.P_Slave_Event_CallBack = NULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_Cfg.Stretch_Mode = I2C_CLK_Stretch_Enable;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <MPU6050_Init+0xa8>)
 80010fe:	f001 f893 	bl	8002228 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C_Cfg);
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <MPU6050_Init+0xa8>)
 800110a:	f001 f805 	bl	8002118 <MCAL_I2C_Init>

	// ===================================================== //


	uint8_t DataCheck = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	71bb      	strb	r3, [r7, #6]

	// Read the MPU6050 address from WHO_AM_I register and make sure that it is 0x68
	MPU6050_Read(MPU6050_WHO_AM_I, &DataCheck, 1);
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	2075      	movs	r0, #117	; 0x75
 800111e:	f000 f86b 	bl	80011f8 <MPU6050_Read>

	if(DataCheck != (0x68))
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b68      	cmp	r3, #104	; 0x68
 8001126:	d000      	beq.n	800112a <MPU6050_Init+0x52>
	{
		while(1);
 8001128:	e7fe      	b.n	8001128 <MPU6050_Init+0x50>
	}else{
		// Start Initialization of the MPU6050
		// where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz
		// when the DLPF is enabled (see Register 26)
		Data = 0x05;
 800112a:	2305      	movs	r3, #5
 800112c:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(CONFIG, &Data, 1);
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	201a      	movs	r0, #26
 8001136:	f000 f825 	bl	8001184 <MPU6050_Write>


		// Set gyroscope Configuration
		// (FS_SEL = 1) (± 500 °/s )suitable for applications that involve faster and more dynamic rotational movements
		Data = 0x08;
 800113a:	2308      	movs	r3, #8
 800113c:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(GYRO_CONFIG, &Data, 1);
 800113e:	1dbb      	adds	r3, r7, #6
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	201b      	movs	r0, #27
 8001146:	f000 f81d 	bl	8001184 <MPU6050_Write>


		// Set accelerometer configuration
		// (AF_SEL = 2) (± 8g)suitable for applications that require measuring very high levels of acceleration
		Data = 0x10;
 800114a:	2310      	movs	r3, #16
 800114c:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(ACCEL_CONFIG, &Data, 1);
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	201c      	movs	r0, #28
 8001156:	f000 f815 	bl	8001184 <MPU6050_Write>


		// Wake up the MPU6050
		// On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz
		// 0x00 Internal 8MHz oscillator
		Data = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	71bb      	strb	r3, [r7, #6]
		MPU6050_Write(PWR_MGMT_1, &Data, 1);
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	206b      	movs	r0, #107	; 0x6b
 8001166:	f000 f80d 	bl	8001184 <MPU6050_Write>

	}
	Status = SUCCESS_CONFIG;
 800116a:	2303      	movs	r3, #3
 800116c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return Status;
 8001170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	000186a0 	.word	0x000186a0
 8001180:	40005400 	.word	0x40005400

08001184 <MPU6050_Write>:
 * Note					- The write sequence is specified in MPU6050 Datasheet
 */


MPU6050_Status MPU6050_Write(uint8_t Register_Address, uint8_t *Data_To_Write, uint8_t dataLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	MPU6050_Status Status = Data_Sent_Error;
 8001194:	2300      	movs	r3, #0
 8001196:	73bb      	strb	r3, [r7, #14]

	// Write Sequence: Master (S / AD+W / RA / DATA / DATA / P)
	// Slave sends ACK after each byte

	uint8_t ByteCounter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

	// Maximum Bytes to write is (2 Bytes (Register Address + DataToBeWritten in the Register))
	uint8_t Buffer[3];

	Buffer[0] = (uint8_t)Register_Address;
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	723b      	strb	r3, [r7, #8]

	for(ByteCounter=1; ByteCounter<(dataLength+1);ByteCounter++)
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e00c      	b.n	80011c0 <MPU6050_Write+0x3c>
	{
		Buffer[ByteCounter] = Data_To_Write[ByteCounter-1];
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	441a      	add	r2, r3
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	3310      	adds	r3, #16
 80011b4:	443b      	add	r3, r7
 80011b6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(ByteCounter=1; ByteCounter<(dataLength+1);ByteCounter++)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3301      	adds	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d2ee      	bcs.n	80011a6 <MPU6050_Write+0x22>
	}

	// dataLength+1 to include the Register address to write on
	MCAL_I2C_Master_Transmit(I2C1, MPU6050_Address, Buffer, dataLength+1, With_Stop, Start);
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	f107 0208 	add.w	r2, r7, #8
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	460b      	mov	r3, r1
 80011dc:	2168      	movs	r1, #104	; 0x68
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MPU6050_Write+0x70>)
 80011e0:	f001 f86c 	bl	80022bc <MCAL_I2C_Master_Transmit>


	Status = Data_Sent_Successfully;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73bb      	strb	r3, [r7, #14]

	return Status;
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400

080011f8 <MPU6050_Read>:
 * @retval 				- MPU6050_Status: Data Read status (If succeeded or not)
 * Note					- This function supports multibytes read from registers in MPU6050 by moving among registers
 */

MPU6050_Status MPU6050_Read(uint16_t Register_Address, uint8_t *Data_To_Read, uint8_t dataLength)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	MPU6050_Status Status = Data_Read_Error;
 8001208:	2304      	movs	r3, #4
 800120a:	73fb      	strb	r3, [r7, #15]

	// Read Sequence: Master (S / AD+W / RA / S / AD+R      / ACK      / NACK / P)
	// 				  Slave (		  ACK  ACK        ACK DATA    DATA           )

	uint8_t Buffer[2];
	Buffer[0] = (uint8_t)Register_Address;
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	733b      	strb	r3, [r7, #12]

	// Sends the Register address to read from
	MCAL_I2C_Master_Transmit(I2C1, MPU6050_Address, Buffer, 1, Without_Stop, Start);
 8001212:	f107 020c 	add.w	r2, r7, #12
 8001216:	2300      	movs	r3, #0
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2301      	movs	r3, #1
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	2168      	movs	r1, #104	; 0x68
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <MPU6050_Read+0x54>)
 8001224:	f001 f84a 	bl	80022bc <MCAL_I2C_Master_Transmit>
	// Receives MultiByte data from this register
	MCAL_I2C_Master_Receive(I2C1, MPU6050_Address, Data_To_Read, dataLength, With_Stop, RepeatedStart);
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	2201      	movs	r2, #1
 800122c:	9201      	str	r2, [sp, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	2168      	movs	r1, #104	; 0x68
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MPU6050_Read+0x54>)
 8001238:	f001 f896 	bl	8002368 <MCAL_I2C_Master_Receive>

	Status = Data_Read_Successfully;
 800123c:	2305      	movs	r3, #5
 800123e:	73fb      	strb	r3, [r7, #15]


	return Status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40005400 	.word	0x40005400

08001250 <MPU6050_CalculateError>:
 * Note					- This function reads 200 readings first to specify the error in readings and this value
 * 							can be offset to the actual readings in the main application
 */

void MPU6050_CalculateError(void)
{
 8001250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001254:	af00      	add	r7, sp, #0
	while(counterReadings < 200)
 8001256:	e106      	b.n	8001466 <MPU6050_CalculateError+0x216>
	{
		MPU6050_Read(ACCEL_XOUT_H, dataFromMPU6050X, 6);
 8001258:	2206      	movs	r2, #6
 800125a:	4993      	ldr	r1, [pc, #588]	; (80014a8 <MPU6050_CalculateError+0x258>)
 800125c:	203b      	movs	r0, #59	; 0x3b
 800125e:	f7ff ffcb 	bl	80011f8 <MPU6050_Read>
		AccX = ((dataFromMPU6050X[0] << 8) | (dataFromMPU6050X[1])) / 4096.0;
 8001262:	4b91      	ldr	r3, [pc, #580]	; (80014a8 <MPU6050_CalculateError+0x258>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	4a8f      	ldr	r2, [pc, #572]	; (80014a8 <MPU6050_CalculateError+0x258>)
 800126a:	7852      	ldrb	r2, [r2, #1]
 800126c:	4313      	orrs	r3, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8d0 	bl	8000414 <__aeabi_i2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <MPU6050_CalculateError+0x25c>)
 800127a:	f7ff fa5f 	bl	800073c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fc07 	bl	8000a98 <__aeabi_d2f>
 800128a:	4603      	mov	r3, r0
 800128c:	4a88      	ldr	r2, [pc, #544]	; (80014b0 <MPU6050_CalculateError+0x260>)
 800128e:	6013      	str	r3, [r2, #0]
		AccY = ((dataFromMPU6050X[2] << 8) | (dataFromMPU6050X[3])) / 4096.0;
 8001290:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <MPU6050_CalculateError+0x258>)
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <MPU6050_CalculateError+0x258>)
 8001298:	78d2      	ldrb	r2, [r2, #3]
 800129a:	4313      	orrs	r3, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f8b9 	bl	8000414 <__aeabi_i2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b81      	ldr	r3, [pc, #516]	; (80014ac <MPU6050_CalculateError+0x25c>)
 80012a8:	f7ff fa48 	bl	800073c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbf0 	bl	8000a98 <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a7e      	ldr	r2, [pc, #504]	; (80014b4 <MPU6050_CalculateError+0x264>)
 80012bc:	6013      	str	r3, [r2, #0]
		AccZ = ((dataFromMPU6050X[4] << 8) | (dataFromMPU6050X[5])) / 4096.0;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <MPU6050_CalculateError+0x258>)
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <MPU6050_CalculateError+0x258>)
 80012c6:	7952      	ldrb	r2, [r2, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8a2 	bl	8000414 <__aeabi_i2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <MPU6050_CalculateError+0x25c>)
 80012d6:	f7ff fa31 	bl	800073c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fbd9 	bl	8000a98 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a73      	ldr	r2, [pc, #460]	; (80014b8 <MPU6050_CalculateError+0x268>)
 80012ea:	6013      	str	r3, [r2, #0]
		// These calculations are part of a sensor fusion algorithm to estimate the orientation of the sensor with respect to the gravitational field.
		AccErrorX = AccErrorX + ((atan((AccY) / sqrt(pow((AccX), 2) + pow((AccZ), 2))) * 180 / 3.14));
 80012ec:	4b73      	ldr	r3, [pc, #460]	; (80014bc <MPU6050_CalculateError+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f8a1 	bl	8000438 <__aeabi_f2d>
 80012f6:	4604      	mov	r4, r0
 80012f8:	460d      	mov	r5, r1
 80012fa:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <MPU6050_CalculateError+0x264>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f89a 	bl	8000438 <__aeabi_f2d>
 8001304:	4680      	mov	r8, r0
 8001306:	4689      	mov	r9, r1
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <MPU6050_CalculateError+0x260>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f893 	bl	8000438 <__aeabi_f2d>
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131a:	f003 fc47 	bl	8004bac <pow>
 800131e:	4682      	mov	sl, r0
 8001320:	468b      	mov	fp, r1
 8001322:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <MPU6050_CalculateError+0x268>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f886 	bl	8000438 <__aeabi_f2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001334:	f003 fc3a 	bl	8004bac <pow>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4650      	mov	r0, sl
 800133e:	4659      	mov	r1, fp
 8001340:	f7fe ff1c 	bl	800017c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f003 fc96 	bl	8004c7c <sqrt>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7ff f9f0 	bl	800073c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f003 fcb0 	bl	8004cc8 <atan>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <MPU6050_CalculateError+0x270>)
 800136e:	f7ff f8bb 	bl	80004e8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	a349      	add	r3, pc, #292	; (adr r3, 80014a0 <MPU6050_CalculateError+0x250>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f9dc 	bl	800073c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7fe fef6 	bl	800017c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb7e 	bl	8000a98 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	4a47      	ldr	r2, [pc, #284]	; (80014bc <MPU6050_CalculateError+0x26c>)
 80013a0:	6013      	str	r3, [r2, #0]
		AccErrorY = AccErrorY + ((atan(-1 * (AccX) / sqrt(pow((AccY), 2) + pow((AccZ), 2))) * 180 / 3.14));
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MPU6050_CalculateError+0x274>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f846 	bl	8000438 <__aeabi_f2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <MPU6050_CalculateError+0x260>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f83d 	bl	8000438 <__aeabi_f2d>
 80013be:	4680      	mov	r8, r0
 80013c0:	4689      	mov	r9, r1
 80013c2:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <MPU6050_CalculateError+0x264>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f836 	bl	8000438 <__aeabi_f2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d4:	f003 fbea 	bl	8004bac <pow>
 80013d8:	4682      	mov	sl, r0
 80013da:	468b      	mov	fp, r1
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <MPU6050_CalculateError+0x268>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f829 	bl	8000438 <__aeabi_f2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ee:	f003 fbdd 	bl	8004bac <pow>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4650      	mov	r0, sl
 80013f8:	4659      	mov	r1, fp
 80013fa:	f7fe febf 	bl	800017c <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f003 fc39 	bl	8004c7c <sqrt>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4640      	mov	r0, r8
 8001410:	4649      	mov	r1, r9
 8001412:	f7ff f993 	bl	800073c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f003 fc53 	bl	8004cc8 <atan>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MPU6050_CalculateError+0x270>)
 8001428:	f7ff f85e 	bl	80004e8 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	a31a      	add	r3, pc, #104	; (adr r3, 80014a0 <MPU6050_CalculateError+0x250>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f97f 	bl	800073c <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe fe99 	bl	800017c <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fb21 	bl	8000a98 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <MPU6050_CalculateError+0x274>)
 800145a:	6013      	str	r3, [r2, #0]
		counterReadings++;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MPU6050_CalculateError+0x278>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <MPU6050_CalculateError+0x278>)
 8001464:	6013      	str	r3, [r2, #0]
	while(counterReadings < 200)
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MPU6050_CalculateError+0x278>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2bc7      	cmp	r3, #199	; 0xc7
 800146c:	f77f aef4 	ble.w	8001258 <MPU6050_CalculateError+0x8>
	}
	//Divide the sum by 200 to get the error value
	AccErrorX = AccErrorX / 200;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MPU6050_CalculateError+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4915      	ldr	r1, [pc, #84]	; (80014cc <MPU6050_CalculateError+0x27c>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fd20 	bl	8000ebc <__aeabi_fdiv>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MPU6050_CalculateError+0x26c>)
 8001482:	601a      	str	r2, [r3, #0]
	AccErrorY = AccErrorY / 200;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MPU6050_CalculateError+0x274>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4910      	ldr	r1, [pc, #64]	; (80014cc <MPU6050_CalculateError+0x27c>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd16 	bl	8000ebc <__aeabi_fdiv>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MPU6050_CalculateError+0x274>)
 8001496:	601a      	str	r2, [r3, #0]
	counterReadings = 0;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MPU6050_CalculateError+0x278>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

	while(counterReadings < 200)
 800149e:	e06f      	b.n	8001580 <MPU6050_CalculateError+0x330>
 80014a0:	51eb851f 	.word	0x51eb851f
 80014a4:	40091eb8 	.word	0x40091eb8
 80014a8:	200000a8 	.word	0x200000a8
 80014ac:	40b00000 	.word	0x40b00000
 80014b0:	2000009c 	.word	0x2000009c
 80014b4:	200000a0 	.word	0x200000a0
 80014b8:	200000a4 	.word	0x200000a4
 80014bc:	20000088 	.word	0x20000088
 80014c0:	40668000 	.word	0x40668000
 80014c4:	2000008c 	.word	0x2000008c
 80014c8:	20000084 	.word	0x20000084
 80014cc:	43480000 	.word	0x43480000
	{
		// ± 500 °/s 65.5 LSB/°/s
		MPU6050_Read(GYRO_XOUT_H, dataFromMPU6050X, 6);
 80014d0:	2206      	movs	r2, #6
 80014d2:	4941      	ldr	r1, [pc, #260]	; (80015d8 <MPU6050_CalculateError+0x388>)
 80014d4:	2043      	movs	r0, #67	; 0x43
 80014d6:	f7ff fe8f 	bl	80011f8 <MPU6050_Read>
		GyroErrorX = ((int16_t)(dataFromMPU6050X[0] << 8 | dataFromMPU6050X [1])) / 65.5;
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <MPU6050_CalculateError+0x388>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <MPU6050_CalculateError+0x388>)
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff91 	bl	8000414 <__aeabi_i2d>
 80014f2:	a337      	add	r3, pc, #220	; (adr r3, 80015d0 <MPU6050_CalculateError+0x380>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f920 	bl	800073c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff faa0 	bl	8000a48 <__aeabi_d2iz>
 8001508:	4603      	mov	r3, r0
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <MPU6050_CalculateError+0x38c>)
 800150c:	6013      	str	r3, [r2, #0]
		GyroErrorY = ((int16_t)(dataFromMPU6050X[2] << 8 | dataFromMPU6050X [3])) / 65.5;
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MPU6050_CalculateError+0x388>)
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MPU6050_CalculateError+0x388>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff77 	bl	8000414 <__aeabi_i2d>
 8001526:	a32a      	add	r3, pc, #168	; (adr r3, 80015d0 <MPU6050_CalculateError+0x380>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f906 	bl	800073c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fa86 	bl	8000a48 <__aeabi_d2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <MPU6050_CalculateError+0x390>)
 8001540:	6013      	str	r3, [r2, #0]
		GyroErrorZ = ((int16_t)(dataFromMPU6050X[4] << 8 | dataFromMPU6050X [5])) / 65.5;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MPU6050_CalculateError+0x388>)
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MPU6050_CalculateError+0x388>)
 800154c:	795b      	ldrb	r3, [r3, #5]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff5d 	bl	8000414 <__aeabi_i2d>
 800155a:	a31d      	add	r3, pc, #116	; (adr r3, 80015d0 <MPU6050_CalculateError+0x380>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f8ec 	bl	800073c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fa6c 	bl	8000a48 <__aeabi_d2iz>
 8001570:	4603      	mov	r3, r0
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MPU6050_CalculateError+0x394>)
 8001574:	6013      	str	r3, [r2, #0]
		counterReadings++;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MPU6050_CalculateError+0x398>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <MPU6050_CalculateError+0x398>)
 800157e:	6013      	str	r3, [r2, #0]
	while(counterReadings < 200)
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MPU6050_CalculateError+0x398>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2bc7      	cmp	r3, #199	; 0xc7
 8001586:	dda3      	ble.n	80014d0 <MPU6050_CalculateError+0x280>
	}
	GyroErrorX = GyroErrorX / 200;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MPU6050_CalculateError+0x38c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <MPU6050_CalculateError+0x39c>)
 800158e:	fb82 1203 	smull	r1, r2, r2, r3
 8001592:	1192      	asrs	r2, r2, #6
 8001594:	17db      	asrs	r3, r3, #31
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <MPU6050_CalculateError+0x38c>)
 800159a:	6013      	str	r3, [r2, #0]
	GyroErrorY = GyroErrorY / 200;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MPU6050_CalculateError+0x390>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MPU6050_CalculateError+0x39c>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1192      	asrs	r2, r2, #6
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <MPU6050_CalculateError+0x390>)
 80015ae:	6013      	str	r3, [r2, #0]
	GyroErrorZ = GyroErrorY / 200;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MPU6050_CalculateError+0x390>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <MPU6050_CalculateError+0x39c>)
 80015b6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ba:	1192      	asrs	r2, r2, #6
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <MPU6050_CalculateError+0x394>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40506000 	.word	0x40506000
 80015d8:	200000a8 	.word	0x200000a8
 80015dc:	20000090 	.word	0x20000090
 80015e0:	20000094 	.word	0x20000094
 80015e4:	20000098 	.word	0x20000098
 80015e8:	20000084 	.word	0x20000084
 80015ec:	51eb851f 	.word	0x51eb851f

080015f0 <MPU6050_GetReadings>:




void MPU6050_GetReadings(char roll_string[], char pitch_string[], char yaw_string[])
{
 80015f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	// Init Acceleration
	Data = 0x00;
 80015fe:	4bc6      	ldr	r3, [pc, #792]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
	MPU6050_Write(PWR_MGMT_1, &Data, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	49c4      	ldr	r1, [pc, #784]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001608:	206b      	movs	r0, #107	; 0x6b
 800160a:	f7ff fdbb 	bl	8001184 <MPU6050_Write>

	Data = 0x05;
 800160e:	4bc2      	ldr	r3, [pc, #776]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001610:	2205      	movs	r2, #5
 8001612:	701a      	strb	r2, [r3, #0]
	MPU6050_Write(CONFIG, &Data, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	49c0      	ldr	r1, [pc, #768]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001618:	201a      	movs	r0, #26
 800161a:	f7ff fdb3 	bl	8001184 <MPU6050_Write>

	Data = 0x10;
 800161e:	4bbe      	ldr	r3, [pc, #760]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001620:	2210      	movs	r2, #16
 8001622:	701a      	strb	r2, [r3, #0]
	MPU6050_Write(ACCEL_CONFIG, &Data, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	49bc      	ldr	r1, [pc, #752]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001628:	201c      	movs	r0, #28
 800162a:	f7ff fdab 	bl	8001184 <MPU6050_Write>


	// Acceleration Measurements
	// 2 ±8g 4096 LSB/g
	// Read 6 Registers from ACCEL_XOUT_H till ACCEL_ZOUT_L
	MPU6050_Read(ACCEL_XOUT_H, dataFromMPU6050, 6);
 800162e:	2206      	movs	r2, #6
 8001630:	49ba      	ldr	r1, [pc, #744]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001632:	203b      	movs	r0, #59	; 0x3b
 8001634:	f7ff fde0 	bl	80011f8 <MPU6050_Read>
	Accel_X_RAW = ((int16_t)((dataFromMPU6050[0] << 8) | (dataFromMPU6050[1]))) / 4096.0;
 8001638:	4bb8      	ldr	r3, [pc, #736]	; (800191c <MPU6050_GetReadings+0x32c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	4bb6      	ldr	r3, [pc, #728]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fee2 	bl	8000414 <__aeabi_i2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4bb2      	ldr	r3, [pc, #712]	; (8001920 <MPU6050_GetReadings+0x330>)
 8001656:	f7ff f871 	bl	800073c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa19 	bl	8000a98 <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4aae      	ldr	r2, [pc, #696]	; (8001924 <MPU6050_GetReadings+0x334>)
 800166a:	6013      	str	r3, [r2, #0]
	Accel_Y_RAW = ((int16_t)((dataFromMPU6050[2] << 8) | (dataFromMPU6050[3]))) / 4096.0;
 800166c:	4bab      	ldr	r3, [pc, #684]	; (800191c <MPU6050_GetReadings+0x32c>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	4ba9      	ldr	r3, [pc, #676]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001676:	78db      	ldrb	r3, [r3, #3]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fec8 	bl	8000414 <__aeabi_i2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4ba5      	ldr	r3, [pc, #660]	; (8001920 <MPU6050_GetReadings+0x330>)
 800168a:	f7ff f857 	bl	800073c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff f9ff 	bl	8000a98 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4aa2      	ldr	r2, [pc, #648]	; (8001928 <MPU6050_GetReadings+0x338>)
 800169e:	6013      	str	r3, [r2, #0]
	Accel_Z_RAW = ((int16_t)((dataFromMPU6050[4] << 8) | (dataFromMPU6050[5]))) / 4096.0;
 80016a0:	4b9e      	ldr	r3, [pc, #632]	; (800191c <MPU6050_GetReadings+0x32c>)
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <MPU6050_GetReadings+0x32c>)
 80016aa:	795b      	ldrb	r3, [r3, #5]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe feae 	bl	8000414 <__aeabi_i2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b98      	ldr	r3, [pc, #608]	; (8001920 <MPU6050_GetReadings+0x330>)
 80016be:	f7ff f83d 	bl	800073c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff f9e5 	bl	8000a98 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a96      	ldr	r2, [pc, #600]	; (800192c <MPU6050_GetReadings+0x33c>)
 80016d2:	6013      	str	r3, [r2, #0]

	accAngleX = (atan(Accel_Y_RAW / sqrt(pow(Accel_X_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) - 0.58; // AccErrorX ~(0.58)
 80016d4:	4b94      	ldr	r3, [pc, #592]	; (8001928 <MPU6050_GetReadings+0x338>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fead 	bl	8000438 <__aeabi_f2d>
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	4b90      	ldr	r3, [pc, #576]	; (8001924 <MPU6050_GetReadings+0x334>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fea6 	bl	8000438 <__aeabi_f2d>
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f4:	f003 fa5a 	bl	8004bac <pow>
 80016f8:	4680      	mov	r8, r0
 80016fa:	4689      	mov	r9, r1
 80016fc:	4b8b      	ldr	r3, [pc, #556]	; (800192c <MPU6050_GetReadings+0x33c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fe99 	bl	8000438 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	f003 fa4d 	bl	8004bac <pow>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4640      	mov	r0, r8
 8001718:	4649      	mov	r1, r9
 800171a:	f7fe fd2f 	bl	800017c <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f003 faa9 	bl	8004c7c <sqrt>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7ff f803 	bl	800073c <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f003 fac3 	bl	8004cc8 <atan>
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <MPU6050_GetReadings+0x340>)
 8001748:	f7fe fece 	bl	80004e8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	a368      	add	r3, pc, #416	; (adr r3, 80018f8 <MPU6050_GetReadings+0x308>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ffef 	bl	800073c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	a366      	add	r3, pc, #408	; (adr r3, 8001900 <MPU6050_GetReadings+0x310>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe fd04 	bl	8000178 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f98e 	bl	8000a98 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a6d      	ldr	r2, [pc, #436]	; (8001934 <MPU6050_GetReadings+0x344>)
 8001780:	6013      	str	r3, [r2, #0]
	accAngleY = (atan(-1 * Accel_X_RAW / sqrt(pow(Accel_Y_RAW, 2) + pow(Accel_Z_RAW, 2))) * 180 / 3.14) + 1.58; // AccErrorY ~(-1.58)
 8001782:	4b68      	ldr	r3, [pc, #416]	; (8001924 <MPU6050_GetReadings+0x334>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe54 	bl	8000438 <__aeabi_f2d>
 8001790:	4604      	mov	r4, r0
 8001792:	460d      	mov	r5, r1
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <MPU6050_GetReadings+0x338>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe4d 	bl	8000438 <__aeabi_f2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a6:	f003 fa01 	bl	8004bac <pow>
 80017aa:	4680      	mov	r8, r0
 80017ac:	4689      	mov	r9, r1
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <MPU6050_GetReadings+0x33c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe40 	bl	8000438 <__aeabi_f2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c0:	f003 f9f4 	bl	8004bac <pow>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4640      	mov	r0, r8
 80017ca:	4649      	mov	r1, r9
 80017cc:	f7fe fcd6 	bl	800017c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f003 fa50 	bl	8004c7c <sqrt>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe ffaa 	bl	800073c <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f003 fa6a 	bl	8004cc8 <atan>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <MPU6050_GetReadings+0x340>)
 80017fa:	f7fe fe75 	bl	80004e8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a33c      	add	r3, pc, #240	; (adr r3, 80018f8 <MPU6050_GetReadings+0x308>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff96 	bl	800073c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	a33b      	add	r3, pc, #236	; (adr r3, 8001908 <MPU6050_GetReadings+0x318>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe fcad 	bl	800017c <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f935 	bl	8000a98 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <MPU6050_GetReadings+0x348>)
 8001832:	6013      	str	r3, [r2, #0]

	// Init Gyroscope
	Data = 0x08;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <MPU6050_GetReadings+0x328>)
 8001836:	2208      	movs	r2, #8
 8001838:	701a      	strb	r2, [r3, #0]
	MPU6050_Write(GYRO_CONFIG, &Data, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	4936      	ldr	r1, [pc, #216]	; (8001918 <MPU6050_GetReadings+0x328>)
 800183e:	201b      	movs	r0, #27
 8001840:	f7ff fca0 	bl	8001184 <MPU6050_Write>


	// Gyroscope Measurements
	MPU6050_Read(GYRO_XOUT_H, dataFromMPU6050, 6);
 8001844:	2206      	movs	r2, #6
 8001846:	4935      	ldr	r1, [pc, #212]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001848:	2043      	movs	r0, #67	; 0x43
 800184a:	f7ff fcd5 	bl	80011f8 <MPU6050_Read>
	Gyro_X_RAW = (int16_t)(dataFromMPU6050[0] << 8 | dataFromMPU6050 [1]);
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <MPU6050_GetReadings+0x34c>)
 8001862:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(dataFromMPU6050[2] << 8 | dataFromMPU6050 [3]);
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <MPU6050_GetReadings+0x32c>)
 800186e:	78db      	ldrb	r3, [r3, #3]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21a      	sxth	r2, r3
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MPU6050_GetReadings+0x350>)
 8001878:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(dataFromMPU6050[4] << 8 | dataFromMPU6050 [5]);
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <MPU6050_GetReadings+0x32c>)
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b21a      	sxth	r2, r3
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <MPU6050_GetReadings+0x32c>)
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <MPU6050_GetReadings+0x354>)
 800188e:	801a      	strh	r2, [r3, #0]
	// Correct the outputs with the calculated error values
	GyroX = (Gyro_X_RAW / 65.5) - GyroErrorX; // GyroErrorX ~(-0.56)
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MPU6050_GetReadings+0x34c>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fdbc 	bl	8000414 <__aeabi_i2d>
 800189c:	a31c      	add	r3, pc, #112	; (adr r3, 8001910 <MPU6050_GetReadings+0x320>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe ff4b 	bl	800073c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <MPU6050_GetReadings+0x358>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fdae 	bl	8000414 <__aeabi_i2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fc5a 	bl	8000178 <__aeabi_dsub>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f8e4 	bl	8000a98 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <MPU6050_GetReadings+0x35c>)
 80018d4:	6013      	str	r3, [r2, #0]
	GyroY = (Gyro_Y_RAW / 65.5) - GyroErrorY; // GyroErrorY ~(2)
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MPU6050_GetReadings+0x350>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd99 	bl	8000414 <__aeabi_i2d>
 80018e2:	a30b      	add	r3, pc, #44	; (adr r3, 8001910 <MPU6050_GetReadings+0x320>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe ff28 	bl	800073c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	e02c      	b.n	8001950 <MPU6050_GetReadings+0x360>
 80018f6:	bf00      	nop
 80018f8:	51eb851f 	.word	0x51eb851f
 80018fc:	40091eb8 	.word	0x40091eb8
 8001900:	28f5c28f 	.word	0x28f5c28f
 8001904:	3fe28f5c 	.word	0x3fe28f5c
 8001908:	147ae148 	.word	0x147ae148
 800190c:	3ff947ae 	.word	0x3ff947ae
 8001910:	00000000 	.word	0x00000000
 8001914:	40506000 	.word	0x40506000
 8001918:	200000ae 	.word	0x200000ae
 800191c:	200000bc 	.word	0x200000bc
 8001920:	40b00000 	.word	0x40b00000
 8001924:	200000b0 	.word	0x200000b0
 8001928:	200000b4 	.word	0x200000b4
 800192c:	200000b8 	.word	0x200000b8
 8001930:	40668000 	.word	0x40668000
 8001934:	200000c4 	.word	0x200000c4
 8001938:	200000c8 	.word	0x200000c8
 800193c:	200000e0 	.word	0x200000e0
 8001940:	200000e2 	.word	0x200000e2
 8001944:	200000e4 	.word	0x200000e4
 8001948:	20000090 	.word	0x20000090
 800194c:	200000e8 	.word	0x200000e8
 8001950:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <MPU6050_GetReadings+0x578>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fd5d 	bl	8000414 <__aeabi_i2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fc09 	bl	8000178 <__aeabi_dsub>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f893 	bl	8000a98 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4a7d      	ldr	r2, [pc, #500]	; (8001b6c <MPU6050_GetReadings+0x57c>)
 8001976:	6013      	str	r3, [r2, #0]
	GyroZ = (Gyro_Z_RAW / 65.5) - GyroErrorZ; // GyroErrorZ ~ (-0.8)
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <MPU6050_GetReadings+0x580>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd48 	bl	8000414 <__aeabi_i2d>
 8001984:	a372      	add	r3, pc, #456	; (adr r3, 8001b50 <MPU6050_GetReadings+0x560>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fed7 	bl	800073c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <MPU6050_GetReadings+0x584>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fd3a 	bl	8000414 <__aeabi_i2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fbe6 	bl	8000178 <__aeabi_dsub>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f870 	bl	8000a98 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a6f      	ldr	r2, [pc, #444]	; (8001b78 <MPU6050_GetReadings+0x588>)
 80019bc:	6013      	str	r3, [r2, #0]

	// Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by seconds (s) to get the angle in degrees
	// Calculate elapsed time with seconds
	elapsedTime = Get_TIMER2_Counter();
 80019be:	f001 fc23 	bl	8003208 <Get_TIMER2_Counter>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f96d 	bl	8000ca4 <__aeabi_ui2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 80019ce:	6013      	str	r3, [r2, #0]
	elapsedTime /= 1000000;
 80019d0:	4b6a      	ldr	r3, [pc, #424]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	496a      	ldr	r1, [pc, #424]	; (8001b80 <MPU6050_GetReadings+0x590>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa70 	bl	8000ebc <__aeabi_fdiv>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 80019e2:	601a      	str	r2, [r3, #0]

	TIMER2_Stop();
 80019e4:	f001 fc19 	bl	800321a <TIMER2_Stop>

	gyroAngleX = gyroAngleX + (GyroX * elapsedTime);
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <MPU6050_GetReadings+0x594>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f9ae 	bl	8000d54 <__aeabi_fmul>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <MPU6050_GetReadings+0x598>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7ff f89e 	bl	8000b44 <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <MPU6050_GetReadings+0x598>)
 8001a0e:	601a      	str	r2, [r3, #0]
	gyroAngleY = gyroAngleY + (GyroY * elapsedTime);
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <MPU6050_GetReadings+0x57c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a59      	ldr	r2, [pc, #356]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f99a 	bl	8000d54 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <MPU6050_GetReadings+0x59c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff f88a 	bl	8000b44 <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <MPU6050_GetReadings+0x59c>)
 8001a36:	601a      	str	r2, [r3, #0]
	yaw = yaw + (GyroZ * elapsedTime);
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <MPU6050_GetReadings+0x588>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <MPU6050_GetReadings+0x58c>)
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f986 	bl	8000d54 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <MPU6050_GetReadings+0x5a0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f7ff f876 	bl	8000b44 <__addsf3>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <MPU6050_GetReadings+0x5a0>)
 8001a5e:	601a      	str	r2, [r3, #0]


	TIMER2_Start();
 8001a60:	f001 fbe9 	bl	8003236 <TIMER2_Start>


	roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
 8001a64:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <MPU6050_GetReadings+0x598>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fce5 	bl	8000438 <__aeabi_f2d>
 8001a6e:	a33a      	add	r3, pc, #232	; (adr r3, 8001b58 <MPU6050_GetReadings+0x568>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fd38 	bl	80004e8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <MPU6050_GetReadings+0x5a4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fcd7 	bl	8000438 <__aeabi_f2d>
 8001a8a:	a335      	add	r3, pc, #212	; (adr r3, 8001b60 <MPU6050_GetReadings+0x570>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fd2a 	bl	80004e8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fb6e 	bl	800017c <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7fe fff6 	bl	8000a98 <__aeabi_d2f>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <MPU6050_GetReadings+0x5a8>)
 8001ab0:	6013      	str	r3, [r2, #0]
	pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <MPU6050_GetReadings+0x59c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcbe 	bl	8000438 <__aeabi_f2d>
 8001abc:	a326      	add	r3, pc, #152	; (adr r3, 8001b58 <MPU6050_GetReadings+0x568>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fd11 	bl	80004e8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	461d      	mov	r5, r3
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <MPU6050_GetReadings+0x5ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcb0 	bl	8000438 <__aeabi_f2d>
 8001ad8:	a321      	add	r3, pc, #132	; (adr r3, 8001b60 <MPU6050_GetReadings+0x570>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fd03 	bl	80004e8 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe fb47 	bl	800017c <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffcf 	bl	8000a98 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <MPU6050_GetReadings+0x5b0>)
 8001afe:	6013      	str	r3, [r2, #0]


	sprintf(roll_string, "%d\n", (int)roll);
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <MPU6050_GetReadings+0x5a8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa75 	bl	8000ff4 <__aeabi_f2iz>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <MPU6050_GetReadings+0x5b4>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f002 fba1 	bl	8004258 <siprintf>
	sprintf(pitch_string, "%d\n", (int)pitch);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MPU6050_GetReadings+0x5b0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fa6a 	bl	8000ff4 <__aeabi_f2iz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	491f      	ldr	r1, [pc, #124]	; (8001ba4 <MPU6050_GetReadings+0x5b4>)
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f002 fb96 	bl	8004258 <siprintf>
	sprintf(yaw_string, "%d\n", (int)yaw);
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MPU6050_GetReadings+0x5a0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa5f 	bl	8000ff4 <__aeabi_f2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	491a      	ldr	r1, [pc, #104]	; (8001ba4 <MPU6050_GetReadings+0x5b4>)
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f002 fb8b 	bl	8004258 <siprintf>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	00000000 	.word	0x00000000
 8001b54:	40506000 	.word	0x40506000
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3feeb851 	.word	0x3feeb851
 8001b60:	47ae147b 	.word	0x47ae147b
 8001b64:	3fa47ae1 	.word	0x3fa47ae1
 8001b68:	20000094 	.word	0x20000094
 8001b6c:	200000ec 	.word	0x200000ec
 8001b70:	200000e4 	.word	0x200000e4
 8001b74:	20000098 	.word	0x20000098
 8001b78:	200000f0 	.word	0x200000f0
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	49742400 	.word	0x49742400
 8001b84:	200000e8 	.word	0x200000e8
 8001b88:	200000cc 	.word	0x200000cc
 8001b8c:	200000d0 	.word	0x200000d0
 8001b90:	200000d4 	.word	0x200000d4
 8001b94:	200000c4 	.word	0x200000c4
 8001b98:	200000d8 	.word	0x200000d8
 8001b9c:	200000c8 	.word	0x200000c8
 8001ba0:	200000dc 	.word	0x200000dc
 8001ba4:	08005d38 	.word	0x08005d38

08001ba8 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 8001bb4:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 8001bba:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 8001bc0:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <Stepper_Init+0x40>)
 8001bc8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4806      	ldr	r0, [pc, #24]	; (8001bec <Stepper_Init+0x44>)
 8001bd2:	f000 fa0b 	bl	8001fec <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <Stepper_Init+0x44>)
 8001bdc:	f000 fa85 	bl	80020ea <MCAL_GPIO_WritePin>

}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000f4 	.word	0x200000f4
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	70fb      	strb	r3, [r7, #3]
 8001c02:	460b      	mov	r3, r1
 8001c04:	803b      	strh	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 8001c0a:	7d3b      	ldrb	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <Stepper_Move_Steps+0x26>
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d008      	beq.n	8001c26 <Stepper_Move_Steps+0x36>
 8001c14:	e00f      	b.n	8001c36 <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <Stepper_Move_Steps+0x64>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <Stepper_Move_Steps+0x68>)
 8001c20:	f000 fa63 	bl	80020ea <MCAL_GPIO_WritePin>
		break;
 8001c24:	e007      	b.n	8001c36 <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <Stepper_Move_Steps+0x64>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <Stepper_Move_Steps+0x68>)
 8001c30:	f000 fa5b 	bl	80020ea <MCAL_GPIO_WritePin>
		break;
 8001c34:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 8001c36:	78b8      	ldrb	r0, [r7, #2]
 8001c38:	883a      	ldrh	r2, [r7, #0]
 8001c3a:	78f9      	ldrb	r1, [r7, #3]
 8001c3c:	2324      	movs	r3, #36	; 0x24
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4603      	mov	r3, r0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f001 fb04 	bl	8003254 <PWM_Move_Steps>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000f4 	.word	0x200000f4
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <EXTI0_IRQHandler+0x1c>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <EXTI0_IRQHandler+0x1c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <EXTI0_IRQHandler+0x20>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4798      	blx	r3

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40010400 	.word	0x40010400
 8001c7c:	200000f8 	.word	0x200000f8

08001c80 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <EXTI1_IRQHandler+0x1c>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <EXTI1_IRQHandler+0x1c>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <EXTI1_IRQHandler+0x20>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4798      	blx	r3
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40010400 	.word	0x40010400
 8001ca0:	200000f8 	.word	0x200000f8

08001ca4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <EXTI2_IRQHandler+0x1c>)
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <EXTI2_IRQHandler+0x1c>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <EXTI2_IRQHandler+0x20>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4798      	blx	r3
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010400 	.word	0x40010400
 8001cc4:	200000f8 	.word	0x200000f8

08001cc8 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <EXTI3_IRQHandler+0x1c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <EXTI3_IRQHandler+0x1c>)
 8001cd2:	f043 0308 	orr.w	r3, r3, #8
 8001cd6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <EXTI3_IRQHandler+0x20>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4798      	blx	r3
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40010400 	.word	0x40010400
 8001ce8:	200000f8 	.word	0x200000f8

08001cec <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <EXTI4_IRQHandler+0x1c>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <EXTI4_IRQHandler+0x1c>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <EXTI4_IRQHandler+0x20>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4798      	blx	r3
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	200000f8 	.word	0x200000f8

08001d10 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <EXTI9_5_IRQHandler+0x22>
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	6153      	str	r3, [r2, #20]
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <EXTI9_5_IRQHandler+0xa4>)
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <EXTI9_5_IRQHandler+0x40>
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	6153      	str	r3, [r2, #20]
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <EXTI9_5_IRQHandler+0xa4>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <EXTI9_5_IRQHandler+0x5e>
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	6153      	str	r3, [r2, #20]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <EXTI9_5_IRQHandler+0xa4>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d008      	beq.n	8001d8c <EXTI9_5_IRQHandler+0x7c>
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <EXTI9_5_IRQHandler+0xa4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <EXTI9_5_IRQHandler+0x9a>
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <EXTI9_5_IRQHandler+0xa0>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da2:	6153      	str	r3, [r2, #20]
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <EXTI9_5_IRQHandler+0xa4>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	4798      	blx	r3
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40010400 	.word	0x40010400
 8001db4:	200000f8 	.word	0x200000f8

08001db8 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <EXTI15_10_IRQHandler+0x22>
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6153      	str	r3, [r2, #20]
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <EXTI15_10_IRQHandler+0x40>
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df0:	6153      	str	r3, [r2, #20]
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <EXTI15_10_IRQHandler+0x5e>
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0e:	6153      	str	r3, [r2, #20]
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <EXTI15_10_IRQHandler+0x7c>
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e2c:	6153      	str	r3, [r2, #20]
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <EXTI15_10_IRQHandler+0x9a>
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4a:	6153      	str	r3, [r2, #20]
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <EXTI15_10_IRQHandler+0xb8>
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <EXTI15_10_IRQHandler+0xbc>)
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	6153      	str	r3, [r2, #20]
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <EXTI15_10_IRQHandler+0xc0>)
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	4798      	blx	r3
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40010400 	.word	0x40010400
 8001e78:	200000f8 	.word	0x200000f8

08001e7c <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e8c:	f000 80a5 	beq.w	8001fda <Get_CRLH_Position+0x15e>
 8001e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e94:	f300 80a3 	bgt.w	8001fde <Get_CRLH_Position+0x162>
 8001e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e9c:	f000 809b 	beq.w	8001fd6 <Get_CRLH_Position+0x15a>
 8001ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea4:	f300 809b 	bgt.w	8001fde <Get_CRLH_Position+0x162>
 8001ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eac:	f000 8091 	beq.w	8001fd2 <Get_CRLH_Position+0x156>
 8001eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb4:	f300 8093 	bgt.w	8001fde <Get_CRLH_Position+0x162>
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebc:	f000 8087 	beq.w	8001fce <Get_CRLH_Position+0x152>
 8001ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec4:	f300 808b 	bgt.w	8001fde <Get_CRLH_Position+0x162>
 8001ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ecc:	d07d      	beq.n	8001fca <Get_CRLH_Position+0x14e>
 8001ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed2:	f300 8084 	bgt.w	8001fde <Get_CRLH_Position+0x162>
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d074      	beq.n	8001fc6 <Get_CRLH_Position+0x14a>
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	dc7d      	bgt.n	8001fde <Get_CRLH_Position+0x162>
 8001ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee6:	d06c      	beq.n	8001fc2 <Get_CRLH_Position+0x146>
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eec:	dc77      	bgt.n	8001fde <Get_CRLH_Position+0x162>
 8001eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef2:	d064      	beq.n	8001fbe <Get_CRLH_Position+0x142>
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	dc71      	bgt.n	8001fde <Get_CRLH_Position+0x162>
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d05d      	beq.n	8001fba <Get_CRLH_Position+0x13e>
 8001efe:	2b80      	cmp	r3, #128	; 0x80
 8001f00:	dc6d      	bgt.n	8001fde <Get_CRLH_Position+0x162>
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	dc48      	bgt.n	8001f98 <Get_CRLH_Position+0x11c>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dd69      	ble.n	8001fde <Get_CRLH_Position+0x162>
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	2b1f      	cmp	r3, #31
 8001f0e:	d866      	bhi.n	8001fde <Get_CRLH_Position+0x162>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <Get_CRLH_Position+0x9c>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f9f 	.word	0x08001f9f
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fdf 	.word	0x08001fdf
 8001f24:	08001fa7 	.word	0x08001fa7
 8001f28:	08001fdf 	.word	0x08001fdf
 8001f2c:	08001fdf 	.word	0x08001fdf
 8001f30:	08001fdf 	.word	0x08001fdf
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fdf 	.word	0x08001fdf
 8001f3c:	08001fdf 	.word	0x08001fdf
 8001f40:	08001fdf 	.word	0x08001fdf
 8001f44:	08001fdf 	.word	0x08001fdf
 8001f48:	08001fdf 	.word	0x08001fdf
 8001f4c:	08001fdf 	.word	0x08001fdf
 8001f50:	08001fdf 	.word	0x08001fdf
 8001f54:	08001faf 	.word	0x08001faf
 8001f58:	08001fdf 	.word	0x08001fdf
 8001f5c:	08001fdf 	.word	0x08001fdf
 8001f60:	08001fdf 	.word	0x08001fdf
 8001f64:	08001fdf 	.word	0x08001fdf
 8001f68:	08001fdf 	.word	0x08001fdf
 8001f6c:	08001fdf 	.word	0x08001fdf
 8001f70:	08001fdf 	.word	0x08001fdf
 8001f74:	08001fdf 	.word	0x08001fdf
 8001f78:	08001fdf 	.word	0x08001fdf
 8001f7c:	08001fdf 	.word	0x08001fdf
 8001f80:	08001fdf 	.word	0x08001fdf
 8001f84:	08001fdf 	.word	0x08001fdf
 8001f88:	08001fdf 	.word	0x08001fdf
 8001f8c:	08001fdf 	.word	0x08001fdf
 8001f90:	08001fdf 	.word	0x08001fdf
 8001f94:	08001fb3 	.word	0x08001fb3
 8001f98:	2b40      	cmp	r3, #64	; 0x40
 8001f9a:	d00c      	beq.n	8001fb6 <Get_CRLH_Position+0x13a>
 8001f9c:	e01f      	b.n	8001fde <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e01e      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	e01c      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	e01a      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001faa:	230c      	movs	r3, #12
 8001fac:	e018      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	e016      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001fb2:	2314      	movs	r3, #20
 8001fb4:	e014      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001fb6:	2318      	movs	r3, #24
 8001fb8:	e012      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001fba:	231c      	movs	r3, #28
 8001fbc:	e010      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e00e      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e00c      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e00a      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	e008      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	e006      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001fd2:	2314      	movs	r3, #20
 8001fd4:	e004      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001fd6:	2318      	movs	r3, #24
 8001fd8:	e002      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001fda:	231c      	movs	r3, #28
 8001fdc:	e000      	b.n	8001fe0 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d801      	bhi.n	800200a <MCAL_GPIO_Init+0x1e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	e001      	b.n	800200e <MCAL_GPIO_Init+0x22>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <Get_CRLH_Position>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	230f      	movs	r3, #15
 8002020:	4093      	lsls	r3, r2
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	789b      	ldrb	r3, [r3, #2]
 8002032:	2b07      	cmp	r3, #7
 8002034:	d00b      	beq.n	800204e <MCAL_GPIO_Init+0x62>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d007      	beq.n	800204e <MCAL_GPIO_Init+0x62>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	2b05      	cmp	r3, #5
 8002044:	d003      	beq.n	800204e <MCAL_GPIO_Init+0x62>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d10e      	bne.n	800206c <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	789b      	ldrb	r3, [r3, #2]
 8002052:	3b04      	subs	r3, #4
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	b25a      	sxtb	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b25b      	sxtb	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e02c      	b.n	80020c6 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	789b      	ldrb	r3, [r3, #2]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d003      	beq.n	800207c <MCAL_GPIO_Init+0x90>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	789b      	ldrb	r3, [r3, #2]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e01c      	b.n	80020c6 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	789b      	ldrb	r3, [r3, #2]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d102      	bne.n	800209a <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8002094:	2304      	movs	r3, #4
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e015      	b.n	80020c6 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 800209a:	2308      	movs	r3, #8
 800209c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	e007      	b.n	80020c6 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	43d2      	mvns	r2, r2
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80020c6:	7bfc      	ldrb	r4, [r7, #15]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fed5 	bl	8001e7c <Get_CRLH_Position>
 80020d2:	4603      	mov	r3, r0
 80020d4:	fa04 f203 	lsl.w	r2, r4, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	601a      	str	r2, [r3, #0]


}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}

080020ea <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8002106:	e002      	b.n	800210e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	615a      	str	r2, [r3, #20]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <MCAL_I2C_Init>:
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_Typedef* I2Cx, I2C_Config_t *I2C_Cfg)
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]

	uint16_t tmpreg = 0, freqrange=0;
 8002122:	2300      	movs	r3, #0
 8002124:	82fb      	strh	r3, [r7, #22]
 8002126:	2300      	movs	r3, #0
 8002128:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 36000000;
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <MCAL_I2C_Init+0xf8>)
 800212c:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	81fb      	strh	r3, [r7, #14]


	// Enable RCC clock
	if(I2Cx == I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a37      	ldr	r2, [pc, #220]	; (8002214 <MCAL_I2C_Init+0xfc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d110      	bne.n	800215c <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Cfg;
 800213a:	4a37      	ldr	r2, [pc, #220]	; (8002218 <MCAL_I2C_Init+0x100>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <MCAL_I2C_Init+0x104>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <MCAL_I2C_Init+0x104>)
 8002154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002158:	61d3      	str	r3, [r2, #28]
 800215a:	e010      	b.n	800217e <MCAL_I2C_Init+0x66>
	}else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Cfg;
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <MCAL_I2C_Init+0x100>)
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002164:	4615      	mov	r5, r2
 8002166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <MCAL_I2C_Init+0x104>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <MCAL_I2C_Init+0x104>)
 8002178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217c:	61d3      	str	r3, [r2, #28]
	}


	I2Cx->CR1&=~(1<<0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0201 	bic.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
	//• Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	//Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	I2Cx->CR2 &=~(0b111111<<0);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |=((pclk1/1000000)<<0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4920      	ldr	r1, [pc, #128]	; (8002220 <MCAL_I2C_Init+0x108>)
 800219e:	fba1 1303 	umull	r1, r3, r1, r3
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	605a      	str	r2, [r3, #4]
	//Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
	//• Configure the clock control registers
	I2Cx->CCR &=~(0b11111111111<<0);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	61d3      	str	r3, [r2, #28]
	I2Cx->CCR |=((pclk1/1000)/(2*100));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	4918      	ldr	r1, [pc, #96]	; (8002224 <MCAL_I2C_Init+0x10c>)
 80021c4:	fba1 1303 	umull	r1, r3, r1, r3
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	61da      	str	r2, [r3, #28]
	//• Configure the rise time register
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->TRISE &=(0b111111<<0);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	621a      	str	r2, [r3, #32]
	I2Cx->TRISE |=(((pclk1/1000000))+1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	490f      	ldr	r1, [pc, #60]	; (8002220 <MCAL_I2C_Init+0x108>)
 80021e4:	fba1 1303 	umull	r1, r3, r1, r3
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	3301      	adds	r3, #1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]




	// Enable the selected I2C peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 80021fe:	2101      	movs	r1, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa26 	bl	8002652 <I2C_AcknowledgeConfig>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	bf00      	nop
 8002210:	02255100 	.word	0x02255100
 8002214:	40005400 	.word	0x40005400
 8002218:	20000134 	.word	0x20000134
 800221c:	40021000 	.word	0x40021000
 8002220:	431bde83 	.word	0x431bde83
 8002224:	053e2d63 	.word	0x053e2d63

08002228 <MCAL_I2C_GPIO_Set_Pins>:
 *
 */


void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef* I2Cx)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(I2Cx == I2C1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d118      	bne.n	800226a <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL --> Open drain
		// PB7: I2C1_SDA --> Open drain

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8002238:	2340      	movs	r3, #64	; 0x40
 800223a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 800223c:	2307      	movs	r3, #7
 800223e:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	481a      	ldr	r0, [pc, #104]	; (80022b4 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 800224c:	f7ff fece 	bl	8001fec <MCAL_GPIO_Init>


		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8002254:	2307      	movs	r3, #7
 8002256:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8002264:	f7ff fec2 	bl	8001fec <MCAL_GPIO_Init>
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

	}

}
 8002268:	e01d      	b.n	80022a6 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d119      	bne.n	80022a6 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8002272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002276:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8002278:	2307      	movs	r3, #7
 800227a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4619      	mov	r1, r3
 8002286:	480b      	ldr	r0, [pc, #44]	; (80022b4 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8002288:	f7ff feb0 	bl	8001fec <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800228c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002290:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_OPENDRAIN;
 8002292:	2307      	movs	r3, #7
 8002294:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80022a2:	f7ff fea3 	bl	8001fec <MCAL_GPIO_Init>
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40005400 	.word	0x40005400
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40005800 	.word	0x40005800

080022bc <MCAL_I2C_Master_Transmit>:
 *
 */


void MCAL_I2C_Master_Transmit(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	817b      	strh	r3, [r7, #10]
	int i = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
	// Support timeout (Configure timer working for specific duration, raise interrupt
	// timer_isr(){flag = 1}
	// So any code exist in while (check flag || Any polling condition)

	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, Start);
 80022d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022d4:	461a      	mov	r2, r3
 80022d6:	2101      	movs	r1, #1
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8b9 	bl	8002450 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 80022de:	bf00      	nop
 80022e0:	2101      	movs	r1, #1
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f8e8 	bl	80024b8 <I2C_GetFlagStatus>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f8      	beq.n	80022e0 <MCAL_I2C_Master_Transmit+0x24>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Transmitter);
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f967 	bl	80025c8 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80022fa:	bf00      	nop
 80022fc:	2102      	movs	r1, #2
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8da 	bl	80024b8 <I2C_GetFlagStatus>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f8      	beq.n	80022fc <MCAL_I2C_Master_Transmit+0x40>


	// 4- Check : TRA, BUSY, MSL, TXE Flags
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 800230a:	bf00      	nop
 800230c:	4915      	ldr	r1, [pc, #84]	; (8002364 <MCAL_I2C_Master_Transmit+0xa8>)
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f8d2 	bl	80024b8 <I2C_GetFlagStatus>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f8      	beq.n	800230c <MCAL_I2C_Master_Transmit+0x50>

	// 5- Send Data
	for(i=0;i<dataLen;i++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e011      	b.n	8002344 <MCAL_I2C_Master_Transmit+0x88>
	{
		// Write in the DR register the data to be sent
		I2Cx->DR = dataOut[i];
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	611a      	str	r2, [r3, #16]

		// Wait EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 800232e:	bf00      	nop
 8002330:	2103      	movs	r1, #3
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8c0 	bl	80024b8 <I2C_GetFlagStatus>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f8      	beq.n	8002330 <MCAL_I2C_Master_Transmit+0x74>
	for(i=0;i<dataLen;i++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8e9      	bhi.n	8002320 <MCAL_I2C_Master_Transmit+0x64>
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));


	// 6- Stop Condition
	if(Stop == With_Stop)
 800234c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <MCAL_I2C_Master_Transmit+0xa0>
	{
		I2C_Generate_STOP(I2Cx,ENABLE);
 8002354:	2101      	movs	r1, #1
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f960 	bl	800261c <I2C_Generate_STOP>
	}

}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	00070080 	.word	0x00070080

08002368 <MCAL_I2C_Master_Receive>:




void MCAL_I2C_Master_Receive(I2C_Typedef *I2Cx, uint16_t slaveAddress, uint8_t *dataOut, uint32_t dataLen, Stop_Condition Stop, Repeated_Start Start)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	460b      	mov	r3, r1
 8002376:	817b      	strh	r3, [r7, #10]
	int i=0;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <MCAL_I2C_Master_Receive+0xe4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	74fb      	strb	r3, [r7, #19]
	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 800238c:	2101      	movs	r1, #1
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f95f 	bl	8002652 <I2C_AcknowledgeConfig>


	// 1- Set START bit in I2C_CRQ to generate a start condition
	I2C_Generate_START(I2Cx, ENABLE, Start);
 8002394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002398:	461a      	mov	r2, r3
 800239a:	2101      	movs	r1, #1
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f857 	bl	8002450 <I2C_Generate_START>

	// 2- Wait for EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 80023a2:	bf00      	nop
 80023a4:	2101      	movs	r1, #1
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f886 	bl	80024b8 <I2C_GetFlagStatus>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f8      	beq.n	80023a4 <MCAL_I2C_Master_Receive+0x3c>


	// 3- Send Address
	I2C_SendAddress(I2Cx, slaveAddress, I2C_Direction_Reciever);
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f905 	bl	80025c8 <I2C_SendAddress>


	// .. Wait for EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 80023be:	bf00      	nop
 80023c0:	2102      	movs	r1, #2
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f878 	bl	80024b8 <I2C_GetFlagStatus>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f8      	beq.n	80023c0 <MCAL_I2C_Master_Receive+0x58>


	// Enabling Acknowledge
	if(dataLen<=1){
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d804      	bhi.n	80023de <MCAL_I2C_Master_Receive+0x76>
		I2C_AcknowledgeConfig(I2Cx,DISABLE);
 80023d4:	2100      	movs	r1, #0
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f93b 	bl	8002652 <I2C_AcknowledgeConfig>
 80023dc:	e003      	b.n	80023e6 <MCAL_I2C_Master_Receive+0x7e>
	}
	else{
		I2C_AcknowledgeConfig(I2Cx,ENABLE);
 80023de:	2101      	movs	r1, #1
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f936 	bl	8002652 <I2C_AcknowledgeConfig>
	}


	if(dataLen)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01f      	beq.n	800242c <MCAL_I2C_Master_Receive+0xc4>
	{
		for(i=dataLen;i>=1;i--)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e019      	b.n	8002426 <MCAL_I2C_Master_Receive+0xbe>
		{
			// Wait for EV7: RXNE=1, Cleared by reading DR
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 80023f2:	bf00      	nop
 80023f4:	2105      	movs	r1, #5
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f85e 	bl	80024b8 <I2C_GetFlagStatus>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f8      	beq.n	80023f4 <MCAL_I2C_Master_Receive+0x8c>
			// Read data from register
			*dataOut = I2Cx->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	701a      	strb	r2, [r3, #0]
			dataOut++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3301      	adds	r3, #1
 8002410:	607b      	str	r3, [r7, #4]
			if(i==2)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d103      	bne.n	8002420 <MCAL_I2C_Master_Receive+0xb8>
			{
				// Once receiving the last byte, we want to send NACK
				I2C_AcknowledgeConfig(I2Cx,DISABLE);
 8002418:	2100      	movs	r1, #0
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f919 	bl	8002652 <I2C_AcknowledgeConfig>
		for(i=dataLen;i>=1;i--)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3b01      	subs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dce2      	bgt.n	80023f2 <MCAL_I2C_Master_Receive+0x8a>
			}
		}

	}

	I2C_AcknowledgeConfig(I2Cx,ENABLE);
 800242c:	2101      	movs	r1, #1
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f90f 	bl	8002652 <I2C_AcknowledgeConfig>

	// Generate Stop Condition
	if(Stop == With_Stop)
 8002434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <MCAL_I2C_Master_Receive+0xdc>
	{
		I2C_Generate_STOP(I2Cx, ENABLE);
 800243c:	2101      	movs	r1, #1
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f8ec 	bl	800261c <I2C_Generate_STOP>
	}



}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400

08002450 <I2C_Generate_START>:
 *
 */


void I2C_Generate_START(I2C_Typedef *I2Cx, FunctionalState NewState,Repeated_Start Start)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	70bb      	strb	r3, [r7, #2]
	// Check if start or repeated start
	if(Start != RepeatedStart)
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d007      	beq.n	8002476 <I2C_Generate_START+0x26>
	{
		// Check if bus is idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8002466:	bf00      	nop
 8002468:	2100      	movs	r1, #0
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f824 	bl	80024b8 <I2C_GetFlagStatus>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f8      	bne.n	8002468 <I2C_Generate_START+0x18>
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	// Enable start condition
	if(NewState != DISABLE)
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <I2C_Generate_START+0x52>
	{
		// Disable POS
		I2Cx->CR1 &= ~(1<<11);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
		// Enable ACK
		I2Cx->CR1 |= (1<<10);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= I2C_CR1_START;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	601a      	str	r2, [r3, #0]
		// Disable Start condition
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}


}
 80024a0:	e005      	b.n	80024ae <I2C_Generate_START+0x5e>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <I2C_GetFlagStatus>:
 *
 */


Flag_Status I2C_GetFlagStatus(I2C_Typedef* I2Cx, Status flag)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;   // To read from
	uint32_t flag1=0,flag2=0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
	uint32_t lastEvent = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
	Flag_Status BitStatus = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	77fb      	strb	r3, [r7, #31]
	switch(flag)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d811      	bhi.n	80024fc <I2C_GetFlagStatus+0x44>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d86b      	bhi.n	80025b6 <I2C_GetFlagStatus+0xfe>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <I2C_GetFlagStatus+0x2c>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002507 	.word	0x08002507
 80024e8:	0800251f 	.word	0x0800251f
 80024ec:	08002537 	.word	0x08002537
 80024f0:	08002587 	.word	0x08002587
 80024f4:	08002587 	.word	0x08002587
 80024f8:	0800259f 	.word	0x0800259f
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <I2C_GetFlagStatus+0x10c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <I2C_GetFlagStatus+0x9c>
 8002504:	e057      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if(I2Cx->SR2 & (I2C_SR2_BUSY))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <I2C_GetFlagStatus+0x60>
			BitStatus = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 8002516:	e04e      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
		break;
 800251c:	e04b      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if(I2Cx->SR1 & (I2C_SR1_SB))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <I2C_GetFlagStatus+0x78>
			BitStatus = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	77fb      	strb	r3, [r7, #31]
		else
			BitStatus = RESET;
		break;
 800252e:	e042      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
		break;
 8002534:	e03f      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
	case EV6:
	{
		//		Address sent (Master)
		//		0: No end of address transmission
		//		1: End of address transmission
		if(I2Cx->SR1 & (I2C_SR1_ADDR))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <I2C_GetFlagStatus+0x90>
			BitStatus = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]
 8002546:	e001      	b.n	800254c <I2C_GetFlagStatus+0x94>
		else
			BitStatus = RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]
		//		//		ADDR=1, cleared by reading SR1 register followed by reading SR2
		dummyRead = I2Cx->SR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	60fb      	str	r3, [r7, #12]
		break;
 8002552:	e030      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		flag1 = I2Cx->SR1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	617b      	str	r3, [r7, #20]
		// Concatenate the two registers
		lastEvent = (flag1 | flag2) & ((uint32_t)(0xffffffff));
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
		if((lastEvent & flag) == flag)
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d102      	bne.n	8002580 <I2C_GetFlagStatus+0xc8>
		{
			BitStatus = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 800257e:	e01a      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	77fb      	strb	r3, [r7, #31]
		break;
 8002584:	e017      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
	case EV8_1:
	case EV8:
	{
		//		EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		//		EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		if((I2Cx->SR1)& (I2C_SR1_TXE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <I2C_GetFlagStatus+0xe0>
		{
			BitStatus = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}
		break;
 8002596:	e00e      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
			BitStatus = RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	77fb      	strb	r3, [r7, #31]
		break;
 800259c:	e00b      	b.n	80025b6 <I2C_GetFlagStatus+0xfe>
	case EV7:
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if((I2Cx->SR1)& (I2C_SR1_RXNE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <I2C_GetFlagStatus+0xf8>
		{
			BitStatus = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77fb      	strb	r3, [r7, #31]
		}else{
			BitStatus = RESET;
		}


		break;
 80025ae:	e001      	b.n	80025b4 <I2C_GetFlagStatus+0xfc>
			BitStatus = RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
		break;
 80025b4:	bf00      	nop
	}
	}


	return BitStatus;
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3724      	adds	r7, #36	; 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	00070080 	.word	0x00070080

080025c8 <I2C_SendAddress>:
 *
 */


void I2C_SendAddress(I2C_Typedef* I2Cx, uint16_t Address, I2C_Direction direction)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <I2C_SendAddress+0x50>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	73fb      	strb	r3, [r7, #15]


	// Check if 7-bit address or 10-bit address
	Address = (Address << 1);
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	807b      	strh	r3, [r7, #2]


	if(direction != I2C_Direction_Transmitter)
 80025ee:	787b      	ldrb	r3, [r7, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <I2C_SendAddress+0x36>
	{
		Address |= 1<<0;
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	e003      	b.n	8002606 <I2C_SendAddress+0x3e>
	}else
	{
		// Reset address bit0 to write
		Address &= ~(1<<0);
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	807b      	strh	r3, [r7, #2]
	}

	// Send address
	I2Cx->DR = Address;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]


}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40005400 	.word	0x40005400

0800261c <I2C_Generate_STOP>:
 *
 */


void I2C_Generate_STOP(I2C_Typedef *I2Cx, FunctionalState NewState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
	// STOP: 9 in CR1

	if(NewState != DISABLE)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <I2C_Generate_STOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 800263a:	e005      	b.n	8002648 <I2C_Generate_STOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <I2C_AcknowledgeConfig>:
 *
 */


void I2C_AcknowledgeConfig(I2C_Typedef* I2Cx, FunctionalState NewState)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]

	if (NewState != DISABLE)
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8002670:	e005      	b.n	800267e <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <I2C1_EV_IRQHandler+0xec>)
 8002694:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <I2C1_EV_IRQHandler+0x48>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 80026c8:	2100      	movs	r1, #0
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f000 f866 	bl	800279c <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <I2C1_EV_IRQHandler+0x82>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d011      	beq.n	800270a <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8002702:	2102      	movs	r1, #2
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f000 f849 	bl	800279c <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <I2C1_EV_IRQHandler+0xb2>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <I2C1_EV_IRQHandler+0xb2>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8002732:	2103      	movs	r1, #3
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f000 f831 	bl	800279c <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00f      	beq.n	800276a <I2C1_EV_IRQHandler+0xe2>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <I2C1_EV_IRQHandler+0xe2>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8002762:	2104      	movs	r1, #4
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f000 f819 	bl	800279c <Slave_States>

		}
	}

}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40005400 	.word	0x40005400

08002778 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <Slave_States+0xd8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	73fb      	strb	r3, [r7, #15]

	switch (state)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d856      	bhi.n	800286c <Slave_States+0xd0>
 80027be:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <Slave_States+0x28>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027df 	.word	0x080027df
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	08002803 	.word	0x08002803
 80027d0:	0800281b 	.word	0x0800281b
 80027d4:	0800283f 	.word	0x0800283f
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 80027dc:	e046      	b.n	800286c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03b      	beq.n	8002862 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	4922      	ldr	r1, [pc, #136]	; (8002878 <Slave_States+0xdc>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3320      	adds	r3, #32
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2000      	movs	r0, #0
 80027fe:	4798      	blx	r3
		}

		break ;
 8002800:	e02f      	b.n	8002862 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	491c      	ldr	r1, [pc, #112]	; (8002878 <Slave_States+0xdc>)
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3320      	adds	r3, #32
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2002      	movs	r0, #2
 8002816:	4798      	blx	r3

		break ;
 8002818:	e028      	b.n	800286c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01f      	beq.n	8002866 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	4913      	ldr	r1, [pc, #76]	; (8002878 <Slave_States+0xdc>)
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3320      	adds	r3, #32
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2003      	movs	r0, #3
 800283a:	4798      	blx	r3
		}

		break ;
 800283c:	e013      	b.n	8002866 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	490a      	ldr	r1, [pc, #40]	; (8002878 <Slave_States+0xdc>)
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3320      	adds	r3, #32
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2004      	movs	r0, #4
 800285e:	4798      	blx	r3
		}

		break ;
 8002860:	e003      	b.n	800286a <Slave_States+0xce>
		break ;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <Slave_States+0xd0>
		break ;
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <Slave_States+0xd0>
		break ;
 800286a:	bf00      	nop
	}
	}

}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40005400 	.word	0x40005400
 8002878:	20000134 	.word	0x20000134

0800287c <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d049      	beq.n	800292a <MCAL_RCC_CLK_Init+0xae>
 8002896:	2b02      	cmp	r3, #2
 8002898:	f300 80cc 	bgt.w	8002a34 <MCAL_RCC_CLK_Init+0x1b8>
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80c8 	beq.w	8002a32 <MCAL_RCC_CLK_Init+0x1b6>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80c6 	bne.w	8002a34 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 80028a8:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a64      	ldr	r2, [pc, #400]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a61      	ldr	r2, [pc, #388]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	2b48      	cmp	r3, #72	; 0x48
 80028d0:	d106      	bne.n	80028e0 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a5a      	ldr	r2, [pc, #360]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028d8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80028dc:	6053      	str	r3, [r2, #4]
			break;
 80028de:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 80028e0:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 80028ec:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a53      	ldr	r2, [pc, #332]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a50      	ldr	r2, [pc, #320]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 8002904:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 800290a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290e:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002916:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800291a:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a47      	ldr	r2, [pc, #284]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002922:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002926:	6053      	str	r3, [r2, #4]




		break;
 8002928:	e084      	b.n	8002a34 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 800292a:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8002936:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 800293c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002940:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	3b10      	subs	r3, #16
 8002946:	2b14      	cmp	r3, #20
 8002948:	d85d      	bhi.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <MCAL_RCC_CLK_Init+0xd4>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	080029a5 	.word	0x080029a5
 8002954:	08002a07 	.word	0x08002a07
 8002958:	08002a07 	.word	0x08002a07
 800295c:	08002a07 	.word	0x08002a07
 8002960:	080029b3 	.word	0x080029b3
 8002964:	08002a07 	.word	0x08002a07
 8002968:	08002a07 	.word	0x08002a07
 800296c:	08002a07 	.word	0x08002a07
 8002970:	080029c1 	.word	0x080029c1
 8002974:	08002a07 	.word	0x08002a07
 8002978:	080029cf 	.word	0x080029cf
 800297c:	08002a07 	.word	0x08002a07
 8002980:	080029dd 	.word	0x080029dd
 8002984:	08002a07 	.word	0x08002a07
 8002988:	08002a07 	.word	0x08002a07
 800298c:	08002a07 	.word	0x08002a07
 8002990:	080029eb 	.word	0x080029eb
 8002994:	08002a07 	.word	0x08002a07
 8002998:	08002a07 	.word	0x08002a07
 800299c:	08002a07 	.word	0x08002a07
 80029a0:	080029f9 	.word	0x080029f9
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029ae:	6053      	str	r3, [r2, #4]
			break;
 80029b0:	e029      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029b8:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80029bc:	6053      	str	r3, [r2, #4]
			break;
 80029be:	e022      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ca:	6053      	str	r3, [r2, #4]
			break;
 80029cc:	e01b      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029d4:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 80029d8:	6053      	str	r3, [r2, #4]
			break;
 80029da:	e014      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029e2:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80029e6:	6053      	str	r3, [r2, #4]
			break;
 80029e8:	e00d      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029f0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80029f4:	6053      	str	r3, [r2, #4]
			break;
 80029f6:	e006      	b.n	8002a06 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 80029fe:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002a02:	6053      	str	r3, [r2, #4]
			break;
 8002a04:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a10:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 8002a12:	bf00      	nop
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f9      	beq.n	8002a14 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <MCAL_RCC_CLK_Init+0x1c4>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]



		break;
 8002a30:	e000      	b.n	8002a34 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8002a32:	bf00      	nop
	}
	}
	return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000

08002a44 <TIMER2_Init>:

uint8_t PinStepper_flag = 0;


void TIMER2_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER2_CLK_EN();
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <TIMER2_Init+0x58>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <TIMER2_Init+0x58>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER2->PSC = (Clock_Speed_MHz - 1);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER2->ARR = 0xC350;  // 50000*1us = 0.05s
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER2->CR1 |= (1<<0);
 8002a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER2->SR) & (1<<0)));
 8002a7e:	bf00      	nop
 8002a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f8      	beq.n	8002a80 <TIMER2_Init+0x3c>
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b098      	sub	sp, #96	; 0x60
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8002abc:	2301      	movs	r3, #1
 8002abe:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 8002ac0:	e017      	b.n	8002af2 <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8002ac2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002ac6:	4a91      	ldr	r2, [pc, #580]	; (8002d0c <PWM+0x26c>)
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8002adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ade:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ae2:	d303      	bcc.n	8002aec <PWM+0x4c>
			Prescalar_Value += 2;
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aea:	e002      	b.n	8002af2 <PWM+0x52>
		}else{
			loop_flag = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 8002af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d0e3      	beq.n	8002ac2 <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a84      	ldr	r2, [pc, #528]	; (8002d10 <PWM+0x270>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f040 80d8 	bne.w	8002cb4 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8002b04:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <PWM+0x274>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a82      	ldr	r2, [pc, #520]	; (8002d14 <PWM+0x274>)
 8002b0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b0e:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002b10:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <PWM+0x274>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a7f      	ldr	r2, [pc, #508]	; (8002d14 <PWM+0x274>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <PWM+0x274>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <PWM+0x274>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 0201 	bic.w	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002b34:	7afb      	ldrb	r3, [r7, #11]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 8336 	bhi.w	80031a8 <PWM+0x708>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <PWM+0xa4>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002c05 	.word	0x08002c05
 8002b50:	08002c5d 	.word	0x08002c5d
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b54:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <PWM+0x278>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002b5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b5e:	4619      	mov	r1, r3
 8002b60:	486e      	ldr	r0, [pc, #440]	; (8002d1c <PWM+0x27c>)
 8002b62:	f7ff fa43 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f043 0208 	orr.w	r2, r3, #8
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002b8a:	7abb      	ldrb	r3, [r7, #10]
 8002b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <PWM+0x280>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095a      	lsrs	r2, r3, #5
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8002baa:	e2fd      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002bac:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <PWM+0x284>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002bb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4858      	ldr	r0, [pc, #352]	; (8002d1c <PWM+0x27c>)
 8002bba:	f7ff fa17 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002be2:	7abb      	ldrb	r3, [r7, #10]
 8002be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <PWM+0x280>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095a      	lsrs	r2, r3, #5
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002c02:	e2d1      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c04:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <PWM+0x288>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4842      	ldr	r0, [pc, #264]	; (8002d1c <PWM+0x27c>)
 8002c12:	f7ff f9eb 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f043 0208 	orr.w	r2, r3, #8
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002c3a:	7abb      	ldrb	r3, [r7, #10]
 8002c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <PWM+0x280>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	095a      	lsrs	r2, r3, #5
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002c5a:	e2a5      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c5c:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <PWM+0x28c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c66:	4619      	mov	r1, r3
 8002c68:	482c      	ldr	r0, [pc, #176]	; (8002d1c <PWM+0x27c>)
 8002c6a:	f7ff f9bf 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002c92:	7abb      	ldrb	r3, [r7, #10]
 8002c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <PWM+0x280>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095a      	lsrs	r2, r3, #5
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002cb2:	e279      	b.n	80031a8 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cba:	f040 80d1 	bne.w	8002e60 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <PWM+0x274>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <PWM+0x274>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <PWM+0x274>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <PWM+0x274>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <PWM+0x274>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <PWM+0x274>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0201 	bic.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	f200 8259 	bhi.w	80031a8 <PWM+0x708>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <PWM+0x25c>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d31 	.word	0x08002d31
 8002d00:	08002d7d 	.word	0x08002d7d
 8002d04:	08002dc9 	.word	0x08002dc9
 8002d08:	08002e15 	.word	0x08002e15
 8002d0c:	000f4240 	.word	0x000f4240
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08005d3c 	.word	0x08005d3c
 8002d1c:	40010800 	.word	0x40010800
 8002d20:	51eb851f 	.word	0x51eb851f
 8002d24:	08005d40 	.word	0x08005d40
 8002d28:	08005d44 	.word	0x08005d44
 8002d2c:	08005d48 	.word	0x08005d48
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d30:	4b9d      	ldr	r3, [pc, #628]	; (8002fa8 <PWM+0x508>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002d36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	489b      	ldr	r0, [pc, #620]	; (8002fac <PWM+0x50c>)
 8002d3e:	f7ff f955 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f043 0208 	orr.w	r2, r3, #8
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002d66:	7abb      	ldrb	r3, [r7, #10]
 8002d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a90      	ldr	r2, [pc, #576]	; (8002fb0 <PWM+0x510>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095a      	lsrs	r2, r3, #5
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002d7a:	e215      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d7c:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <PWM+0x514>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002d82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d86:	4619      	mov	r1, r3
 8002d88:	4888      	ldr	r0, [pc, #544]	; (8002fac <PWM+0x50c>)
 8002d8a:	f7ff f92f 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002db2:	7abb      	ldrb	r3, [r7, #10]
 8002db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <PWM+0x510>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	095a      	lsrs	r2, r3, #5
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002dc6:	e1ef      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <PWM+0x518>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4875      	ldr	r0, [pc, #468]	; (8002fac <PWM+0x50c>)
 8002dd6:	f7ff f909 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f043 0208 	orr.w	r2, r3, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002dfe:	7abb      	ldrb	r3, [r7, #10]
 8002e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <PWM+0x510>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095a      	lsrs	r2, r3, #5
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002e12:	e1c9      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e14:	4b69      	ldr	r3, [pc, #420]	; (8002fbc <PWM+0x51c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002e1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4862      	ldr	r0, [pc, #392]	; (8002fac <PWM+0x50c>)
 8002e22:	f7ff f8e3 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002e4a:	7abb      	ldrb	r3, [r7, #10]
 8002e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <PWM+0x510>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095a      	lsrs	r2, r3, #5
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002e5e:	e1a3      	b.n	80031a8 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a57      	ldr	r2, [pc, #348]	; (8002fc0 <PWM+0x520>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	f040 80db 	bne.w	8003020 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <PWM+0x524>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a55      	ldr	r2, [pc, #340]	; (8002fc4 <PWM+0x524>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002e76:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <PWM+0x524>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	4a52      	ldr	r2, [pc, #328]	; (8002fc4 <PWM+0x524>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002e82:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <PWM+0x524>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <PWM+0x524>)
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002e8e:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <PWM+0x524>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <PWM+0x524>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0201 	bic.w	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	f200 817d 	bhi.w	80031a8 <PWM+0x708>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <PWM+0x414>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002f11 	.word	0x08002f11
 8002ebc:	08002f5d 	.word	0x08002f5d
 8002ec0:	08002fd5 	.word	0x08002fd5
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ec4:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <PWM+0x528>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002eca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4836      	ldr	r0, [pc, #216]	; (8002fac <PWM+0x50c>)
 8002ed2:	f7ff f88b 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 0208 	orr.w	r2, r3, #8
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002efa:	7abb      	ldrb	r3, [r7, #10]
 8002efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a2b      	ldr	r2, [pc, #172]	; (8002fb0 <PWM+0x510>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095a      	lsrs	r2, r3, #5
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002f0e:	e14b      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <PWM+0x52c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4823      	ldr	r0, [pc, #140]	; (8002fac <PWM+0x50c>)
 8002f1e:	f7ff f865 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002f46:	7abb      	ldrb	r3, [r7, #10]
 8002f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <PWM+0x510>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095a      	lsrs	r2, r3, #5
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002f5a:	e125      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <PWM+0x508>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	4619      	mov	r1, r3
 8002f68:	4819      	ldr	r0, [pc, #100]	; (8002fd0 <PWM+0x530>)
 8002f6a:	f7ff f83f 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002f92:	7abb      	ldrb	r3, [r7, #10]
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <PWM+0x510>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095a      	lsrs	r2, r3, #5
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002fa6:	e0ff      	b.n	80031a8 <PWM+0x708>
 8002fa8:	08005d4c 	.word	0x08005d4c
 8002fac:	40010800 	.word	0x40010800
 8002fb0:	51eb851f 	.word	0x51eb851f
 8002fb4:	08005d50 	.word	0x08005d50
 8002fb8:	08005d54 	.word	0x08005d54
 8002fbc:	08005d58 	.word	0x08005d58
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005d5c 	.word	0x08005d5c
 8002fcc:	08005d60 	.word	0x08005d60
 8002fd0:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002fd4:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <PWM+0x744>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4881      	ldr	r0, [pc, #516]	; (80031e8 <PWM+0x748>)
 8002fe2:	f7ff f803 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800300a:	7abb      	ldrb	r3, [r7, #10]
 800300c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a76      	ldr	r2, [pc, #472]	; (80031ec <PWM+0x74c>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095a      	lsrs	r2, r3, #5
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 800301e:	e0c3      	b.n	80031a8 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a73      	ldr	r2, [pc, #460]	; (80031f0 <PWM+0x750>)
 8003024:	4293      	cmp	r3, r2
 8003026:	f040 80bf 	bne.w	80031a8 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 800302a:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <PWM+0x754>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a71      	ldr	r2, [pc, #452]	; (80031f4 <PWM+0x754>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8003036:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <PWM+0x754>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4a6e      	ldr	r2, [pc, #440]	; (80031f4 <PWM+0x754>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8003042:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <PWM+0x754>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a6b      	ldr	r2, [pc, #428]	; (80031f4 <PWM+0x754>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0201 	bic.w	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	2b03      	cmp	r3, #3
 800305e:	f200 80a3 	bhi.w	80031a8 <PWM+0x708>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <PWM+0x5c8>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003079 	.word	0x08003079
 800306c:	080030c5 	.word	0x080030c5
 8003070:	08003111 	.word	0x08003111
 8003074:	0800315d 	.word	0x0800315d
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003078:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <PWM+0x758>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800307e:	f107 0320 	add.w	r3, r7, #32
 8003082:	4619      	mov	r1, r3
 8003084:	4858      	ldr	r0, [pc, #352]	; (80031e8 <PWM+0x748>)
 8003086:	f7fe ffb1 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f043 0208 	orr.w	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80030ae:	7abb      	ldrb	r3, [r7, #10]
 80030b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <PWM+0x74c>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	095a      	lsrs	r2, r3, #5
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80030c2:	e071      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80030c4:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <PWM+0x75c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	4845      	ldr	r0, [pc, #276]	; (80031e8 <PWM+0x748>)
 80030d2:	f7fe ff8b 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80030fa:	7abb      	ldrb	r3, [r7, #10]
 80030fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <PWM+0x74c>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095a      	lsrs	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 800310e:	e04b      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <PWM+0x760>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003116:	f107 0318 	add.w	r3, r7, #24
 800311a:	4619      	mov	r1, r3
 800311c:	4832      	ldr	r0, [pc, #200]	; (80031e8 <PWM+0x748>)
 800311e:	f7fe ff65 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8003146:	7abb      	ldrb	r3, [r7, #10]
 8003148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <PWM+0x74c>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095a      	lsrs	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800315a:	e025      	b.n	80031a8 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <PWM+0x764>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	481f      	ldr	r0, [pc, #124]	; (80031e8 <PWM+0x748>)
 800316a:	f7fe ff3f 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8003192:	7abb      	ldrb	r3, [r7, #10]
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a14      	ldr	r2, [pc, #80]	; (80031ec <PWM+0x74c>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095a      	lsrs	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80031a6:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 80031ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031bc:	1e5a      	subs	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	3760      	adds	r7, #96	; 0x60
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	08005d50 	.word	0x08005d50
 80031e8:	40010c00 	.word	0x40010c00
 80031ec:	51eb851f 	.word	0x51eb851f
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08005d5c 	.word	0x08005d5c
 80031fc:	08005d60 	.word	0x08005d60
 8003200:	08005d3c 	.word	0x08005d3c
 8003204:	08005d40 	.word	0x08005d40

08003208 <Get_TIMER2_Counter>:

}


uint32_t Get_TIMER2_Counter()
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	return (TIMER2->CNT);
 800320c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <TIMER2_Stop>:
{
	return (TIMER3->CNT);
}

void TIMER2_Stop()
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER2->CR1 &= ~(1<<0);
 800321e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6013      	str	r3, [r2, #0]
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <TIMER2_Start>:

void TIMER2_Start()
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER2->CR1 |= (1<<0);
 800323a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6013      	str	r3, [r2, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
	...

08003254 <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b096      	sub	sp, #88	; 0x58
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	4608      	mov	r0, r1
 800325e:	4611      	mov	r1, r2
 8003260:	461a      	mov	r2, r3
 8003262:	4603      	mov	r3, r0
 8003264:	70fb      	strb	r3, [r7, #3]
 8003266:	460b      	mov	r3, r1
 8003268:	803b      	strh	r3, [r7, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 800326e:	4b9b      	ldr	r3, [pc, #620]	; (80034dc <PWM_Move_Steps+0x288>)
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 8003274:	4a9a      	ldr	r2, [pc, #616]	; (80034e0 <PWM_Move_Steps+0x28c>)
 8003276:	883b      	ldrh	r3, [r7, #0]
 8003278:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8003280:	2300      	movs	r3, #0
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
 8003284:	2301      	movs	r3, #1
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(loop_flag == 1)
 8003288:	e017      	b.n	80032ba <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 800328a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800328e:	4a95      	ldr	r2, [pc, #596]	; (80034e4 <PWM_Move_Steps+0x290>)
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	4619      	mov	r1, r3
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 80032a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80032aa:	d303      	bcc.n	80032b4 <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 80032ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ae:	3302      	adds	r3, #2
 80032b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b2:	e002      	b.n	80032ba <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(loop_flag == 1)
 80032ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d0e3      	beq.n	800328a <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a88      	ldr	r2, [pc, #544]	; (80034e8 <PWM_Move_Steps+0x294>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 8120 	bne.w	800350c <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 80032cc:	4b87      	ldr	r3, [pc, #540]	; (80034ec <PWM_Move_Steps+0x298>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	4a86      	ldr	r2, [pc, #536]	; (80034ec <PWM_Move_Steps+0x298>)
 80032d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d6:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 80032d8:	4b84      	ldr	r3, [pc, #528]	; (80034ec <PWM_Move_Steps+0x298>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4a83      	ldr	r2, [pc, #524]	; (80034ec <PWM_Move_Steps+0x298>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80032e4:	4b81      	ldr	r3, [pc, #516]	; (80034ec <PWM_Move_Steps+0x298>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4a80      	ldr	r2, [pc, #512]	; (80034ec <PWM_Move_Steps+0x298>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 80032f0:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <PWM_Move_Steps+0x29c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a7e      	ldr	r2, [pc, #504]	; (80034f0 <PWM_Move_Steps+0x29c>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 80032fc:	4b7c      	ldr	r3, [pc, #496]	; (80034f0 <PWM_Move_Steps+0x29c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7b      	ldr	r2, [pc, #492]	; (80034f0 <PWM_Move_Steps+0x29c>)
 8003302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003306:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 8003308:	4b79      	ldr	r3, [pc, #484]	; (80034f0 <PWM_Move_Steps+0x29c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a78      	ldr	r2, [pc, #480]	; (80034f0 <PWM_Move_Steps+0x29c>)
 800330e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 8003314:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <PWM_Move_Steps+0x29c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a75      	ldr	r2, [pc, #468]	; (80034f0 <PWM_Move_Steps+0x29c>)
 800331a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800331e:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 0201 	bic.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	2b03      	cmp	r3, #3
 8003330:	f200 83c2 	bhi.w	8003ab8 <PWM_Move_Steps+0x864>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <PWM_Move_Steps+0xe8>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	0800334d 	.word	0x0800334d
 8003340:	080033b1 	.word	0x080033b1
 8003344:	08003415 	.word	0x08003415
 8003348:	08003479 	.word	0x08003479
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800334c:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <PWM_Move_Steps+0x2a0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8003352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003356:	4619      	mov	r1, r3
 8003358:	4867      	ldr	r0, [pc, #412]	; (80034f8 <PWM_Move_Steps+0x2a4>)
 800335a:	f7fe fe47 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f043 0208 	orr.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8003382:	78bb      	ldrb	r3, [r7, #2]
 8003384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <PWM_Move_Steps+0x2a8>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095a      	lsrs	r2, r3, #5
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f043 0203 	orr.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60da      	str	r2, [r3, #12]
			break;
 80033ae:	e383      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <PWM_Move_Steps+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80033b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ba:	4619      	mov	r1, r3
 80033bc:	484e      	ldr	r0, [pc, #312]	; (80034f8 <PWM_Move_Steps+0x2a4>)
 80033be:	f7fe fe15 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80033e6:	78bb      	ldrb	r3, [r7, #2]
 80033e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a43      	ldr	r2, [pc, #268]	; (80034fc <PWM_Move_Steps+0x2a8>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095a      	lsrs	r2, r3, #5
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b101 << 0);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f043 0205 	orr.w	r2, r3, #5
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60da      	str	r2, [r3, #12]
			break;
 8003412:	e351      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <PWM_Move_Steps+0x2b0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800341a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800341e:	4619      	mov	r1, r3
 8003420:	4835      	ldr	r0, [pc, #212]	; (80034f8 <PWM_Move_Steps+0x2a4>)
 8003422:	f7fe fde3 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f043 0208 	orr.w	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800344a:	78bb      	ldrb	r3, [r7, #2]
 800344c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <PWM_Move_Steps+0x2a8>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	095a      	lsrs	r2, r3, #5
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b1001 << 0);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f043 0209 	orr.w	r2, r3, #9
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]
			break;
 8003476:	e31f      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <PWM_Move_Steps+0x2b4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800347e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003482:	4619      	mov	r1, r3
 8003484:	481c      	ldr	r0, [pc, #112]	; (80034f8 <PWM_Move_Steps+0x2a4>)
 8003486:	f7fe fdb1 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80034ae:	78bb      	ldrb	r3, [r7, #2]
 80034b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <PWM_Move_Steps+0x2a8>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095a      	lsrs	r2, r3, #5
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b10001 << 0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f043 0211 	orr.w	r2, r3, #17
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60da      	str	r2, [r3, #12]
			break;
 80034da:	e2ed      	b.n	8003ab8 <PWM_Move_Steps+0x864>
 80034dc:	2000017d 	.word	0x2000017d
 80034e0:	2000017e 	.word	0x2000017e
 80034e4:	000f4240 	.word	0x000f4240
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40021000 	.word	0x40021000
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	08005d3c 	.word	0x08005d3c
 80034f8:	40010800 	.word	0x40010800
 80034fc:	51eb851f 	.word	0x51eb851f
 8003500:	08005d40 	.word	0x08005d40
 8003504:	08005d44 	.word	0x08005d44
 8003508:	08005d48 	.word	0x08005d48
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	f040 80dd 	bne.w	80036d0 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 8003516:	4ba0      	ldr	r3, [pc, #640]	; (8003798 <PWM_Move_Steps+0x544>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a9f      	ldr	r2, [pc, #636]	; (8003798 <PWM_Move_Steps+0x544>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8003522:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <PWM_Move_Steps+0x544>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4a9c      	ldr	r2, [pc, #624]	; (8003798 <PWM_Move_Steps+0x544>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800352e:	4b9a      	ldr	r3, [pc, #616]	; (8003798 <PWM_Move_Steps+0x544>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	4a99      	ldr	r2, [pc, #612]	; (8003798 <PWM_Move_Steps+0x544>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 800353a:	4b98      	ldr	r3, [pc, #608]	; (800379c <PWM_Move_Steps+0x548>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a97      	ldr	r2, [pc, #604]	; (800379c <PWM_Move_Steps+0x548>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 0201 	bic.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b03      	cmp	r3, #3
 8003556:	f200 82af 	bhi.w	8003ab8 <PWM_Move_Steps+0x864>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <PWM_Move_Steps+0x30c>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003571 	.word	0x08003571
 8003564:	080035c9 	.word	0x080035c9
 8003568:	08003621 	.word	0x08003621
 800356c:	08003679 	.word	0x08003679
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <PWM_Move_Steps+0x54c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8003576:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800357a:	4619      	mov	r1, r3
 800357c:	4889      	ldr	r0, [pc, #548]	; (80037a4 <PWM_Move_Steps+0x550>)
 800357e:	f7fe fd35 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f043 0208 	orr.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80035a6:	78bb      	ldrb	r3, [r7, #2]
 80035a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a7e      	ldr	r2, [pc, #504]	; (80037a8 <PWM_Move_Steps+0x554>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095a      	lsrs	r2, r3, #5
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f043 0203 	orr.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]
			break;
 80035c6:	e277      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <PWM_Move_Steps+0x558>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80035ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035d2:	4619      	mov	r1, r3
 80035d4:	4873      	ldr	r0, [pc, #460]	; (80037a4 <PWM_Move_Steps+0x550>)
 80035d6:	f7fe fd09 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	4a68      	ldr	r2, [pc, #416]	; (80037a8 <PWM_Move_Steps+0x554>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095a      	lsrs	r2, r3, #5
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f043 0205 	orr.w	r2, r3, #5
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]
			break;
 800361e:	e24b      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003620:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <PWM_Move_Steps+0x55c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	4619      	mov	r1, r3
 800362c:	485d      	ldr	r0, [pc, #372]	; (80037a4 <PWM_Move_Steps+0x550>)
 800362e:	f7fe fcdd 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f043 0208 	orr.w	r2, r3, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8003656:	78bb      	ldrb	r3, [r7, #2]
 8003658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <PWM_Move_Steps+0x554>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	095a      	lsrs	r2, r3, #5
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f043 0209 	orr.w	r2, r3, #9
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
			break;
 8003676:	e21f      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003678:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <PWM_Move_Steps+0x560>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800367e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003682:	4619      	mov	r1, r3
 8003684:	4847      	ldr	r0, [pc, #284]	; (80037a4 <PWM_Move_Steps+0x550>)
 8003686:	f7fe fcb1 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80036ae:	78bb      	ldrb	r3, [r7, #2]
 80036b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	4a3c      	ldr	r2, [pc, #240]	; (80037a8 <PWM_Move_Steps+0x554>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095a      	lsrs	r2, r3, #5
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f043 0211 	orr.w	r2, r3, #17
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]
			break;
 80036ce:	e1f3      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a39      	ldr	r2, [pc, #228]	; (80037b8 <PWM_Move_Steps+0x564>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f040 80f7 	bne.w	80038c8 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <PWM_Move_Steps+0x544>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a2e      	ldr	r2, [pc, #184]	; (8003798 <PWM_Move_Steps+0x544>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <PWM_Move_Steps+0x544>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <PWM_Move_Steps+0x544>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <PWM_Move_Steps+0x544>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <PWM_Move_Steps+0x544>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <PWM_Move_Steps+0x544>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <PWM_Move_Steps+0x544>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <PWM_Move_Steps+0x548>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a23      	ldr	r2, [pc, #140]	; (800379c <PWM_Move_Steps+0x548>)
 8003710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003714:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b03      	cmp	r3, #3
 8003726:	f200 81c7 	bhi.w	8003ab8 <PWM_Move_Steps+0x864>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <PWM_Move_Steps+0x4dc>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003741 	.word	0x08003741
 8003734:	080037c1 	.word	0x080037c1
 8003738:	08003819 	.word	0x08003819
 800373c:	08003871 	.word	0x08003871
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <PWM_Move_Steps+0x568>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8003746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800374a:	4619      	mov	r1, r3
 800374c:	4815      	ldr	r0, [pc, #84]	; (80037a4 <PWM_Move_Steps+0x550>)
 800374e:	f7fe fc4d 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f043 0208 	orr.w	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8003776:	78bb      	ldrb	r3, [r7, #2]
 8003778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <PWM_Move_Steps+0x554>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	095a      	lsrs	r2, r3, #5
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f043 0203 	orr.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]
			break;
 8003796:	e18f      	b.n	8003ab8 <PWM_Move_Steps+0x864>
 8003798:	40021000 	.word	0x40021000
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	08005d4c 	.word	0x08005d4c
 80037a4:	40010800 	.word	0x40010800
 80037a8:	51eb851f 	.word	0x51eb851f
 80037ac:	08005d50 	.word	0x08005d50
 80037b0:	08005d54 	.word	0x08005d54
 80037b4:	08005d58 	.word	0x08005d58
 80037b8:	40000400 	.word	0x40000400
 80037bc:	08005d5c 	.word	0x08005d5c
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80037c0:	4b9c      	ldr	r3, [pc, #624]	; (8003a34 <PWM_Move_Steps+0x7e0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80037c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ca:	4619      	mov	r1, r3
 80037cc:	489a      	ldr	r0, [pc, #616]	; (8003a38 <PWM_Move_Steps+0x7e4>)
 80037ce:	f7fe fc0d 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80037f6:	78bb      	ldrb	r3, [r7, #2]
 80037f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4a8f      	ldr	r2, [pc, #572]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095a      	lsrs	r2, r3, #5
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f043 0205 	orr.w	r2, r3, #5
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60da      	str	r2, [r3, #12]
			break;
 8003816:	e14f      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003818:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <PWM_Move_Steps+0x7ec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	4619      	mov	r1, r3
 8003824:	4887      	ldr	r0, [pc, #540]	; (8003a44 <PWM_Move_Steps+0x7f0>)
 8003826:	f7fe fbe1 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800384e:	78bb      	ldrb	r3, [r7, #2]
 8003850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095a      	lsrs	r2, r3, #5
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60da      	str	r2, [r3, #12]
			break;
 800386e:	e123      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <PWM_Move_Steps+0x7f4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	4619      	mov	r1, r3
 800387c:	4871      	ldr	r0, [pc, #452]	; (8003a44 <PWM_Move_Steps+0x7f0>)
 800387e:	f7fe fbb5 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80038a6:	78bb      	ldrb	r3, [r7, #2]
 80038a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095a      	lsrs	r2, r3, #5
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]
			break;
 80038c6:	e0f7      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a60      	ldr	r2, [pc, #384]	; (8003a4c <PWM_Move_Steps+0x7f8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	f040 80f3 	bne.w	8003ab8 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80038ea:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <PWM_Move_Steps+0x7fc>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <PWM_Move_Steps+0x800>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <PWM_Move_Steps+0x800>)
 80038fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003900:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	2b03      	cmp	r3, #3
 8003912:	f200 80d1 	bhi.w	8003ab8 <PWM_Move_Steps+0x864>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <PWM_Move_Steps+0x6c8>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003985 	.word	0x08003985
 8003924:	080039dd 	.word	0x080039dd
 8003928:	08003a61 	.word	0x08003a61
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800392c:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <PWM_Move_Steps+0x804>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003932:	f107 0318 	add.w	r3, r7, #24
 8003936:	4619      	mov	r1, r3
 8003938:	4842      	ldr	r0, [pc, #264]	; (8003a44 <PWM_Move_Steps+0x7f0>)
 800393a:	f7fe fb57 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f043 0208 	orr.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8003962:	78bb      	ldrb	r3, [r7, #2]
 8003964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095a      	lsrs	r2, r3, #5
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f043 0203 	orr.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60da      	str	r2, [r3, #12]
			break;
 8003982:	e099      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <PWM_Move_Steps+0x7e0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	4619      	mov	r1, r3
 8003990:	482c      	ldr	r0, [pc, #176]	; (8003a44 <PWM_Move_Steps+0x7f0>)
 8003992:	f7fe fb2b 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80039ba:	78bb      	ldrb	r3, [r7, #2]
 80039bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095a      	lsrs	r2, r3, #5
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f043 0205 	orr.w	r2, r3, #5
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]
			break;
 80039da:	e06d      	b.n	8003ab8 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <PWM_Move_Steps+0x808>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80039e2:	f107 0310 	add.w	r3, r7, #16
 80039e6:	4619      	mov	r1, r3
 80039e8:	4816      	ldr	r0, [pc, #88]	; (8003a44 <PWM_Move_Steps+0x7f0>)
 80039ea:	f7fe faff 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8003a12:	78bb      	ldrb	r3, [r7, #2]
 8003a14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <PWM_Move_Steps+0x7e8>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095a      	lsrs	r2, r3, #5
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]
			break;
 8003a32:	e041      	b.n	8003ab8 <PWM_Move_Steps+0x864>
 8003a34:	08005d60 	.word	0x08005d60
 8003a38:	40010800 	.word	0x40010800
 8003a3c:	51eb851f 	.word	0x51eb851f
 8003a40:	08005d4c 	.word	0x08005d4c
 8003a44:	40010c00 	.word	0x40010c00
 8003a48:	08005d50 	.word	0x08005d50
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40021000 	.word	0x40021000
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	08005d5c 	.word	0x08005d5c
 8003a5c:	08005d3c 	.word	0x08005d3c
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <PWM_Move_Steps+0x8ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4825      	ldr	r0, [pc, #148]	; (8003b04 <PWM_Move_Steps+0x8b0>)
 8003a6e:	f7fe fabd 	bl	8001fec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8003a96:	78bb      	ldrb	r3, [r7, #2]
 8003a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <PWM_Move_Steps+0x8b4>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095a      	lsrs	r2, r3, #5
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60da      	str	r2, [r3, #12]
			break;
 8003ab6:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8003aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28


	TIMERx->DIER |=(0b1<<0);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]





}
 8003af6:	bf00      	nop
 8003af8:	3758      	adds	r7, #88	; 0x58
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	08005d40 	.word	0x08005d40
 8003b04:	40010c00 	.word	0x40010c00
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <TIM2_IRQHandler+0x68>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d128      	bne.n	8003b6a <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8003b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b32:	f023 0302 	bic.w	r3, r3, #2
 8003b36:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <TIM2_IRQHandler+0x6c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <TIM2_IRQHandler+0x6c>)
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <TIM2_IRQHandler+0x6c>)
 8003b4a:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003b4c:	e00d      	b.n	8003b6a <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <TIM2_IRQHandler+0x68>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8003b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <TIM2_IRQHandler+0x70>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000017d 	.word	0x2000017d
 8003b78:	2000017e 	.word	0x2000017e
 8003b7c:	2000017c 	.word	0x2000017c

08003b80 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <TIM3_IRQHandler+0x5c>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d122      	bne.n	8003bd2 <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003b9e:	f023 0302 	bic.w	r3, r3, #2
 8003ba2:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <TIM3_IRQHandler+0x64>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 8003bac:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <TIM3_IRQHandler+0x64>)
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <TIM3_IRQHandler+0x64>)
 8003bb6:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003bb8:	e00b      	b.n	8003bd2 <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <TIM3_IRQHandler+0x5c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a06      	ldr	r2, [pc, #24]	; (8003be0 <TIM3_IRQHandler+0x60>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <TIM3_IRQHandler+0x68>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2000017d 	.word	0x2000017d
 8003be0:	40000400 	.word	0x40000400
 8003be4:	2000017e 	.word	0x2000017e
 8003be8:	2000017c 	.word	0x2000017c

08003bec <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <TIM4_IRQHandler+0x5c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d122      	bne.n	8003c3e <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003c0a:	f023 0302 	bic.w	r3, r3, #2
 8003c0e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <TIM4_IRQHandler+0x64>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <TIM4_IRQHandler+0x64>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <TIM4_IRQHandler+0x64>)
 8003c22:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003c24:	e00b      	b.n	8003c3e <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <TIM4_IRQHandler+0x5c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <TIM4_IRQHandler+0x60>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <TIM4_IRQHandler+0x68>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000017d 	.word	0x2000017d
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	2000017e 	.word	0x2000017e
 8003c54:	2000017c 	.word	0x2000017c

08003c58 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <which_UART+0x38>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <which_UART+0x14>
		return 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e00c      	b.n	8003c86 <which_UART+0x2e>
	else if(USARTx == USART2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <which_UART+0x3c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <which_UART+0x20>
		return 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e006      	b.n	8003c86 <which_UART+0x2e>
	else if(USARTx == USART3)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <which_UART+0x40>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <which_UART+0x2c>
		return 2;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e000      	b.n	8003c86 <which_UART+0x2e>
	return 3;
 8003c84:	2303      	movs	r3, #3
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40004400 	.word	0x40004400
 8003c98:	40004800 	.word	0x40004800

08003c9c <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8003c9c:	b4b0      	push	{r4, r5, r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8003ca6:	4b5e      	ldr	r3, [pc, #376]	; (8003e20 <MCAL_UART_Init+0x184>)
 8003ca8:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a5d      	ldr	r2, [pc, #372]	; (8003e24 <MCAL_UART_Init+0x188>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10e      	bne.n	8003cd0 <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8003cb2:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <MCAL_UART_Init+0x18c>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4614      	mov	r4, r2
 8003cb8:	461d      	mov	r5, r3
 8003cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8003cc2:	4b5a      	ldr	r3, [pc, #360]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	4a59      	ldr	r2, [pc, #356]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6193      	str	r3, [r2, #24]
 8003cce:	e026      	b.n	8003d1e <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a57      	ldr	r2, [pc, #348]	; (8003e30 <MCAL_UART_Init+0x194>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10f      	bne.n	8003cf8 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <MCAL_UART_Init+0x18c>)
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	f103 0414 	add.w	r4, r3, #20
 8003ce0:	4615      	mov	r5, r2
 8003ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ce6:	682b      	ldr	r3, [r5, #0]
 8003ce8:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 8003cea:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4a4f      	ldr	r2, [pc, #316]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	61d3      	str	r3, [r2, #28]
 8003cf6:	e012      	b.n	8003d1e <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <MCAL_UART_Init+0x198>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10e      	bne.n	8003d1e <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 8003d00:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <MCAL_UART_Init+0x18c>)
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8003d08:	4615      	mov	r5, r2
 8003d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4a45      	ldr	r2, [pc, #276]	; (8003e2c <MCAL_UART_Init+0x190>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d1c:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	7a12      	ldrb	r2, [r2, #8]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	7a52      	ldrb	r2, [r2, #9]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	7a92      	ldrb	r2, [r2, #10]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	7ad2      	ldrb	r2, [r2, #11]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	0119      	lsls	r1, r3, #4
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da0:	2064      	movs	r0, #100	; 0x64
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4a23      	ldr	r2, [pc, #140]	; (8003e38 <MCAL_UART_Init+0x19c>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	430b      	orrs	r3, r1
 8003db8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	7b1b      	ldrb	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d026      	beq.n	8003e16 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	7b12      	ldrb	r2, [r2, #12]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <MCAL_UART_Init+0x188>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d106      	bne.n	8003dec <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 8003dea:	e014      	b.n	8003e16 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <MCAL_UART_Init+0x194>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d106      	bne.n	8003e02 <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	e009      	b.n	8003e16 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <MCAL_UART_Init+0x198>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d105      	bne.n	8003e16 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <MCAL_UART_Init+0x1a0>)
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	6013      	str	r3, [r2, #0]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bcb0      	pop	{r4, r5, r7}
 8003e1e:	4770      	bx	lr
 8003e20:	02255100 	.word	0x02255100
 8003e24:	40013800 	.word	0x40013800
 8003e28:	20000180 	.word	0x20000180
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40004400 	.word	0x40004400
 8003e34:	40004800 	.word	0x40004800
 8003e38:	51eb851f 	.word	0x51eb851f
 8003e3c:	e000e104 	.word	0xe000e104

08003e40 <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8003e54:	bf00      	nop
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f9      	beq.n	8003e56 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fef8 	bl	8003c58 <which_UART>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
	}
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <MCAL_UART_SendString>:




void MCAL_UART_SendString(USART_Typedef * USARTx, uint8_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
    uint16_t DefaultStop = '\r';
 8003e8c:	230d      	movs	r3, #13
 8003e8e:	82bb      	strh	r3, [r7, #20]

    uint8_t i = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8003e94:	e00a      	b.n	8003eac <MCAL_UART_SendString+0x2e>
    {
        MCAL_UART_SendData(USARTx, &(pTxBuffer[i]), PollingEn);
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ffcd 	bl	8003e40 <MCAL_UART_SendData>
        i++;
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
    while (pTxBuffer[i] != '\0')
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <MCAL_UART_SendString+0x18>
    }
    MCAL_UART_SendData(USARTx, &DefaultStop, PollingEn);
 8003eb8:	79fa      	ldrb	r2, [r7, #7]
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff ffbd 	bl	8003e40 <MCAL_UART_SendData>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <MCAL_UART_GPIO_SetPins+0xb8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d118      	bne.n	8003f12 <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8003ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4825      	ldr	r0, [pc, #148]	; (8003f8c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003ef6:	f7fe f879 	bl	8001fec <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efe:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003f00:	2308      	movs	r3, #8
 8003f02:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4820      	ldr	r0, [pc, #128]	; (8003f8c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003f0c:	f7fe f86e 	bl	8001fec <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 8003f10:	e036      	b.n	8003f80 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <MCAL_UART_GPIO_SetPins+0xc0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d116      	bne.n	8003f48 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8003f1e:	2306      	movs	r3, #6
 8003f20:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4817      	ldr	r0, [pc, #92]	; (8003f8c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003f2e:	f7fe f85d 	bl	8001fec <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8003f32:	2308      	movs	r3, #8
 8003f34:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003f36:	2308      	movs	r3, #8
 8003f38:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4812      	ldr	r0, [pc, #72]	; (8003f8c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003f42:	f7fe f853 	bl	8001fec <MCAL_GPIO_Init>
}
 8003f46:	e01b      	b.n	8003f80 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <MCAL_UART_GPIO_SetPins+0xc4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d117      	bne.n	8003f80 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f54:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8003f56:	2306      	movs	r3, #6
 8003f58:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003f66:	f7fe f841 	bl	8001fec <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8003f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f6e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8003f70:	2308      	movs	r3, #8
 8003f72:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4807      	ldr	r0, [pc, #28]	; (8003f98 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003f7c:	f7fe f836 	bl	8001fec <MCAL_GPIO_Init>
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40010800 	.word	0x40010800
 8003f90:	40004400 	.word	0x40004400
 8003f94:	40004800 	.word	0x40004800
 8003f98:	40010c00 	.word	0x40010c00

08003f9c <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <USART1_IRQHandler+0x10>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4798      	blx	r3
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000180 	.word	0x20000180

08003fb0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <USART2_IRQHandler+0x10>)
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	4798      	blx	r3
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000180 	.word	0x20000180

08003fc4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <USART3_IRQHandler+0x10>)
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	4798      	blx	r3
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000180 	.word	0x20000180

08003fd8 <Clock_Init>:




void Clock_Init()
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 8003fdc:	2148      	movs	r1, #72	; 0x48
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7fe fc4c 	bl	800287c <MCAL_RCC_CLK_Init>

	RCC_GPIOC_CLK_EN();
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <Clock_Init+0x6c>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <Clock_Init+0x6c>)
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <Clock_Init+0x6c>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	; (8004044 <Clock_Init+0x6c>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	61d3      	str	r3, [r2, #28]

	RCC_GPIOB_CLK_EN();
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <Clock_Init+0x6c>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	4a10      	ldr	r2, [pc, #64]	; (8004044 <Clock_Init+0x6c>)
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <Clock_Init+0x6c>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <Clock_Init+0x6c>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <Clock_Init+0x6c>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <Clock_Init+0x6c>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6193      	str	r3, [r2, #24]
	RCC_TIMER2_CLK_EN();
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <Clock_Init+0x6c>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <Clock_Init+0x6c>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	61d3      	str	r3, [r2, #28]
	RCC_I2C1_CLK_EN();
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <Clock_Init+0x6c>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <Clock_Init+0x6c>)
 8004032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004036:	61d3      	str	r3, [r2, #28]

	TIMER2_Init(RCC_CLK_36M);
 8004038:	2024      	movs	r0, #36	; 0x24
 800403a:	f7fe fd03 	bl	8002a44 <TIMER2_Init>
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000

08004048 <main>:


int main(void) {
 8004048:	b5b0      	push	{r4, r5, r7, lr}
 800404a:	b094      	sub	sp, #80	; 0x50
 800404c:	af02      	add	r7, sp, #8

	Clock_Init();
 800404e:	f7ff ffc3 	bl	8003fd8 <Clock_Init>


	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_9600;
 8004052:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_NONE;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	UART_Cfg.P_IRQ_CallBack = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
	UART_Cfg.Parity = UART_Parity_NONE;
 8004068:	2300      	movs	r3, #0
 800406a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	UART_Cfg.StopBits = UART_StopBits_1;
 8004074:	2300      	movs	r3, #0
 8004076:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 800407a:	230c      	movs	r3, #12
 800407c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34



	// Should be uncommented

	MCAL_UART_Init(USART2, &UART_Cfg);
 8004080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004084:	4619      	mov	r1, r3
 8004086:	4837      	ldr	r0, [pc, #220]	; (8004164 <main+0x11c>)
 8004088:	f7ff fe08 	bl	8003c9c <MCAL_UART_Init>
	//
	MCAL_UART_GPIO_SetPins(USART2);
 800408c:	4835      	ldr	r0, [pc, #212]	; (8004164 <main+0x11c>)
 800408e:	f7ff ff1f 	bl	8003ed0 <MCAL_UART_GPIO_SetPins>

	//	TIMER2_Init(RCC_CLK_36M);


	// For MPU
	MPU6050_Init();
 8004092:	f7fd f821 	bl	80010d8 <MPU6050_Init>
	MPU6050_CalculateError();
 8004096:	f7fd f8db 	bl	8001250 <MPU6050_CalculateError>



	Motor_Config_t DC_Motor1 =
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <main+0x120>)
 800409c:	f107 0420 	add.w	r4, r7, #32
 80040a0:	461d      	mov	r5, r3
 80040a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040a6:	682b      	ldr	r3, [r5, #0]
 80040a8:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3, //A6
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <main+0x124>)
 80040ac:	f107 040c 	add.w	r4, r7, #12
 80040b0:	461d      	mov	r5, r3
 80040b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3, // B1
			.PWM_Channel = TIMER_CH4
	};


	Motor_intialize(&DC_Motor1);
 80040ba:	f107 0320 	add.w	r3, r7, #32
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc ffbe 	bl	8001040 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc ffb9 	bl	8001040 <Motor_intialize>

	GPIO_PinConfig_t StepperDirPin = {
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <main+0x128>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]
			.GPIO_PinNumber = GPIO_PIN_9,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t IR = {
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <main+0x12c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	607b      	str	r3, [r7, #4]
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOC, &IR);
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4826      	ldr	r0, [pc, #152]	; (8004178 <main+0x130>)
 80040e0:	f7fd ff84 	bl	8001fec <MCAL_GPIO_Init>
	Stepper_Init(&StepperDirPin);
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd fd5d 	bl	8001ba8 <Stepper_Init>


	while (1) {
		//		uint8_t IR_Reading = MCAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
		MPU6050_GetReadings(&roll_str, &pitch_str, &yaw_str);
 80040ee:	4a23      	ldr	r2, [pc, #140]	; (800417c <main+0x134>)
 80040f0:	4923      	ldr	r1, [pc, #140]	; (8004180 <main+0x138>)
 80040f2:	4824      	ldr	r0, [pc, #144]	; (8004184 <main+0x13c>)
 80040f4:	f7fd fa7c 	bl	80015f0 <MPU6050_GetReadings>

		MCAL_UART_SendString(USART2, "Roll: ", Enable);
 80040f8:	2201      	movs	r2, #1
 80040fa:	4923      	ldr	r1, [pc, #140]	; (8004188 <main+0x140>)
 80040fc:	4819      	ldr	r0, [pc, #100]	; (8004164 <main+0x11c>)
 80040fe:	f7ff febe 	bl	8003e7e <MCAL_UART_SendString>
		MCAL_UART_SendString(USART2, roll_str, Enable);
 8004102:	2201      	movs	r2, #1
 8004104:	491f      	ldr	r1, [pc, #124]	; (8004184 <main+0x13c>)
 8004106:	4817      	ldr	r0, [pc, #92]	; (8004164 <main+0x11c>)
 8004108:	f7ff feb9 	bl	8003e7e <MCAL_UART_SendString>

		MCAL_UART_SendString(USART2, "Pitch: ", Enable);
 800410c:	2201      	movs	r2, #1
 800410e:	491f      	ldr	r1, [pc, #124]	; (800418c <main+0x144>)
 8004110:	4814      	ldr	r0, [pc, #80]	; (8004164 <main+0x11c>)
 8004112:	f7ff feb4 	bl	8003e7e <MCAL_UART_SendString>
		MCAL_UART_SendString(USART2, pitch_str, Enable);
 8004116:	2201      	movs	r2, #1
 8004118:	4919      	ldr	r1, [pc, #100]	; (8004180 <main+0x138>)
 800411a:	4812      	ldr	r0, [pc, #72]	; (8004164 <main+0x11c>)
 800411c:	f7ff feaf 	bl	8003e7e <MCAL_UART_SendString>

		MCAL_UART_SendString(USART2, "Yaw: ", Enable);
 8004120:	2201      	movs	r2, #1
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <main+0x148>)
 8004124:	480f      	ldr	r0, [pc, #60]	; (8004164 <main+0x11c>)
 8004126:	f7ff feaa 	bl	8003e7e <MCAL_UART_SendString>
		MCAL_UART_SendString(USART2, yaw_str, Enable);
 800412a:	2201      	movs	r2, #1
 800412c:	4913      	ldr	r1, [pc, #76]	; (800417c <main+0x134>)
 800412e:	480d      	ldr	r0, [pc, #52]	; (8004164 <main+0x11c>)
 8004130:	f7ff fea5 	bl	8003e7e <MCAL_UART_SendString>




		//		if(IR_Reading == 1){
		Motor_Move_ForWard(&DC_Motor1, 100);
 8004134:	f107 0320 	add.w	r3, r7, #32
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc ffa6 	bl	800108c <Motor_Move_ForWard>
		Motor_Move_ForWard(&DC_Motor2, 100);
 8004140:	f107 030c 	add.w	r3, r7, #12
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc ffa0 	bl	800108c <Motor_Move_ForWard>
		////			Motor_TurnOff(&DC_Motor2);
		//			// B1, B9, A6
		//			// Timer3 --> CH4
		//			//		Stepper_Move_Steps(TIMER3, TIMER_CH4, 200, 50, 500, Stepper_UP);  // B1 Checked
		//			//		Stepper_Move_Steps(TIMER3, TIMER_CH1, 200, 50, 500, Stepper_UP);  // A6 Checked
		Stepper_Move_Steps(TIMER4, TIMER_CH4, 200, 50, 500, Stepper_UP);  // B9
 800414c:	2301      	movs	r3, #1
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2332      	movs	r3, #50	; 0x32
 8004158:	22c8      	movs	r2, #200	; 0xc8
 800415a:	2103      	movs	r1, #3
 800415c:	480d      	ldr	r0, [pc, #52]	; (8004194 <main+0x14c>)
 800415e:	f7fd fd47 	bl	8001bf0 <Stepper_Move_Steps>
		MPU6050_GetReadings(&roll_str, &pitch_str, &yaw_str);
 8004162:	e7c4      	b.n	80040ee <main+0xa6>
 8004164:	40004400 	.word	0x40004400
 8004168:	08005d7c 	.word	0x08005d7c
 800416c:	08005d90 	.word	0x08005d90
 8004170:	08005da4 	.word	0x08005da4
 8004174:	08005da8 	.word	0x08005da8
 8004178:	40011000 	.word	0x40011000
 800417c:	200001bc 	.word	0x200001bc
 8004180:	200001c4 	.word	0x200001c4
 8004184:	200001cc 	.word	0x200001cc
 8004188:	08005d64 	.word	0x08005d64
 800418c:	08005d6c 	.word	0x08005d6c
 8004190:	08005d74 	.word	0x08005d74
 8004194:	40000800 	.word	0x40000800

08004198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <_sbrk+0x5c>)
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <_sbrk+0x60>)
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <_sbrk+0x64>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <_sbrk+0x64>)
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <_sbrk+0x68>)
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <_sbrk+0x64>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d207      	bcs.n	80041d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c8:	f000 f866 	bl	8004298 <__errno>
 80041cc:	4603      	mov	r3, r0
 80041ce:	220c      	movs	r2, #12
 80041d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e009      	b.n	80041ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <_sbrk+0x64>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <_sbrk+0x64>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	4a05      	ldr	r2, [pc, #20]	; (80041fc <_sbrk+0x64>)
 80041e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20005000 	.word	0x20005000
 80041f8:	00000400 	.word	0x00000400
 80041fc:	200001d4 	.word	0x200001d4
 8004200:	20000320 	.word	0x20000320

08004204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004204:	480d      	ldr	r0, [pc, #52]	; (800423c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800420c:	480c      	ldr	r0, [pc, #48]	; (8004240 <LoopForever+0x6>)
  ldr r1, =_edata
 800420e:	490d      	ldr	r1, [pc, #52]	; (8004244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <LoopForever+0xe>)
  movs r3, #0
 8004212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004214:	e002      	b.n	800421c <LoopCopyDataInit>

08004216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421a:	3304      	adds	r3, #4

0800421c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800421c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004220:	d3f9      	bcc.n	8004216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004224:	4c0a      	ldr	r4, [pc, #40]	; (8004250 <LoopForever+0x16>)
  movs r3, #0
 8004226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004228:	e001      	b.n	800422e <LoopFillZerobss>

0800422a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800422c:	3204      	adds	r2, #4

0800422e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004230:	d3fb      	bcc.n	800422a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004232:	f000 f837 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004236:	f7ff ff07 	bl	8004048 <main>

0800423a <LoopForever>:

LoopForever:
  b LoopForever
 800423a:	e7fe      	b.n	800423a <LoopForever>
  ldr   r0, =_estack
 800423c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004244:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004248:	08005e58 	.word	0x08005e58
  ldr r2, =_sbss
 800424c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004250:	20000320 	.word	0x20000320

08004254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004254:	e7fe      	b.n	8004254 <ADC1_2_IRQHandler>
	...

08004258 <siprintf>:
 8004258:	b40e      	push	{r1, r2, r3}
 800425a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800425e:	b500      	push	{lr}
 8004260:	b09c      	sub	sp, #112	; 0x70
 8004262:	ab1d      	add	r3, sp, #116	; 0x74
 8004264:	9002      	str	r0, [sp, #8]
 8004266:	9006      	str	r0, [sp, #24]
 8004268:	9107      	str	r1, [sp, #28]
 800426a:	9104      	str	r1, [sp, #16]
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <siprintf+0x38>)
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <siprintf+0x3c>)
 8004270:	f853 2b04 	ldr.w	r2, [r3], #4
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	6800      	ldr	r0, [r0, #0]
 8004278:	a902      	add	r1, sp, #8
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f000 f986 	bl	800458c <_svfiprintf_r>
 8004280:	2200      	movs	r2, #0
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	b01c      	add	sp, #112	; 0x70
 8004288:	f85d eb04 	ldr.w	lr, [sp], #4
 800428c:	b003      	add	sp, #12
 800428e:	4770      	bx	lr
 8004290:	20000050 	.word	0x20000050
 8004294:	ffff0208 	.word	0xffff0208

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000050 	.word	0x20000050

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4d0c      	ldr	r5, [pc, #48]	; (80042dc <__libc_init_array+0x38>)
 80042aa:	4c0d      	ldr	r4, [pc, #52]	; (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	f001 fd32 	bl	8005d1c <_init>
 80042b8:	2600      	movs	r6, #0
 80042ba:	4d0a      	ldr	r5, [pc, #40]	; (80042e4 <__libc_init_array+0x40>)
 80042bc:	4c0a      	ldr	r4, [pc, #40]	; (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08005e50 	.word	0x08005e50
 80042e0:	08005e50 	.word	0x08005e50
 80042e4:	08005e50 	.word	0x08005e50
 80042e8:	08005e54 	.word	0x08005e54

080042ec <__retarget_lock_acquire_recursive>:
 80042ec:	4770      	bx	lr

080042ee <__retarget_lock_release_recursive>:
 80042ee:	4770      	bx	lr

080042f0 <_free_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4605      	mov	r5, r0
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d040      	beq.n	800437a <_free_r+0x8a>
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f0c      	subs	r4, r1, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfb8      	it	lt
 8004302:	18e4      	addlt	r4, r4, r3
 8004304:	f000 f8dc 	bl	80044c0 <__malloc_lock>
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <_free_r+0x8c>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b933      	cbnz	r3, 800431c <_free_r+0x2c>
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6014      	str	r4, [r2, #0]
 8004312:	4628      	mov	r0, r5
 8004314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004318:	f000 b8d8 	b.w	80044cc <__malloc_unlock>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d908      	bls.n	8004332 <_free_r+0x42>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	1821      	adds	r1, r4, r0
 8004324:	428b      	cmp	r3, r1
 8004326:	bf01      	itttt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	1809      	addeq	r1, r1, r0
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	e7ed      	b.n	800430e <_free_r+0x1e>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x4c>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x42>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1850      	adds	r0, r2, r1
 8004340:	42a0      	cmp	r0, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x6c>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	4401      	add	r1, r0
 8004348:	1850      	adds	r0, r2, r1
 800434a:	4283      	cmp	r3, r0
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1e0      	bne.n	8004312 <_free_r+0x22>
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4408      	add	r0, r1
 8004356:	6010      	str	r0, [r2, #0]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	e7da      	b.n	8004312 <_free_r+0x22>
 800435c:	d902      	bls.n	8004364 <_free_r+0x74>
 800435e:	230c      	movs	r3, #12
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	e7d6      	b.n	8004312 <_free_r+0x22>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	1821      	adds	r1, r4, r0
 8004368:	428b      	cmp	r3, r1
 800436a:	bf01      	itttt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	1809      	addeq	r1, r1, r0
 8004372:	6021      	streq	r1, [r4, #0]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	6054      	str	r4, [r2, #4]
 8004378:	e7cb      	b.n	8004312 <_free_r+0x22>
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	20000318 	.word	0x20000318

08004380 <sbrk_aligned>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4e0e      	ldr	r6, [pc, #56]	; (80043bc <sbrk_aligned+0x3c>)
 8004384:	460c      	mov	r4, r1
 8004386:	6831      	ldr	r1, [r6, #0]
 8004388:	4605      	mov	r5, r0
 800438a:	b911      	cbnz	r1, 8004392 <sbrk_aligned+0x12>
 800438c:	f000 fbaa 	bl	8004ae4 <_sbrk_r>
 8004390:	6030      	str	r0, [r6, #0]
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 fba5 	bl	8004ae4 <_sbrk_r>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d00a      	beq.n	80043b4 <sbrk_aligned+0x34>
 800439e:	1cc4      	adds	r4, r0, #3
 80043a0:	f024 0403 	bic.w	r4, r4, #3
 80043a4:	42a0      	cmp	r0, r4
 80043a6:	d007      	beq.n	80043b8 <sbrk_aligned+0x38>
 80043a8:	1a21      	subs	r1, r4, r0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fb9a 	bl	8004ae4 <_sbrk_r>
 80043b0:	3001      	adds	r0, #1
 80043b2:	d101      	bne.n	80043b8 <sbrk_aligned+0x38>
 80043b4:	f04f 34ff 	mov.w	r4, #4294967295
 80043b8:	4620      	mov	r0, r4
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	2000031c 	.word	0x2000031c

080043c0 <_malloc_r>:
 80043c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c4:	1ccd      	adds	r5, r1, #3
 80043c6:	f025 0503 	bic.w	r5, r5, #3
 80043ca:	3508      	adds	r5, #8
 80043cc:	2d0c      	cmp	r5, #12
 80043ce:	bf38      	it	cc
 80043d0:	250c      	movcc	r5, #12
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	4607      	mov	r7, r0
 80043d6:	db01      	blt.n	80043dc <_malloc_r+0x1c>
 80043d8:	42a9      	cmp	r1, r5
 80043da:	d905      	bls.n	80043e8 <_malloc_r+0x28>
 80043dc:	230c      	movs	r3, #12
 80043de:	2600      	movs	r6, #0
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4630      	mov	r0, r6
 80043e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044bc <_malloc_r+0xfc>
 80043ec:	f000 f868 	bl	80044c0 <__malloc_lock>
 80043f0:	f8d8 3000 	ldr.w	r3, [r8]
 80043f4:	461c      	mov	r4, r3
 80043f6:	bb5c      	cbnz	r4, 8004450 <_malloc_r+0x90>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4638      	mov	r0, r7
 80043fc:	f7ff ffc0 	bl	8004380 <sbrk_aligned>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	4604      	mov	r4, r0
 8004404:	d155      	bne.n	80044b2 <_malloc_r+0xf2>
 8004406:	f8d8 4000 	ldr.w	r4, [r8]
 800440a:	4626      	mov	r6, r4
 800440c:	2e00      	cmp	r6, #0
 800440e:	d145      	bne.n	800449c <_malloc_r+0xdc>
 8004410:	2c00      	cmp	r4, #0
 8004412:	d048      	beq.n	80044a6 <_malloc_r+0xe6>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	4631      	mov	r1, r6
 8004418:	4638      	mov	r0, r7
 800441a:	eb04 0903 	add.w	r9, r4, r3
 800441e:	f000 fb61 	bl	8004ae4 <_sbrk_r>
 8004422:	4581      	cmp	r9, r0
 8004424:	d13f      	bne.n	80044a6 <_malloc_r+0xe6>
 8004426:	6821      	ldr	r1, [r4, #0]
 8004428:	4638      	mov	r0, r7
 800442a:	1a6d      	subs	r5, r5, r1
 800442c:	4629      	mov	r1, r5
 800442e:	f7ff ffa7 	bl	8004380 <sbrk_aligned>
 8004432:	3001      	adds	r0, #1
 8004434:	d037      	beq.n	80044a6 <_malloc_r+0xe6>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	442b      	add	r3, r5
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	f8d8 3000 	ldr.w	r3, [r8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d038      	beq.n	80044b6 <_malloc_r+0xf6>
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	42a2      	cmp	r2, r4
 8004448:	d12b      	bne.n	80044a2 <_malloc_r+0xe2>
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e00f      	b.n	8004470 <_malloc_r+0xb0>
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	1b52      	subs	r2, r2, r5
 8004454:	d41f      	bmi.n	8004496 <_malloc_r+0xd6>
 8004456:	2a0b      	cmp	r2, #11
 8004458:	d917      	bls.n	800448a <_malloc_r+0xca>
 800445a:	1961      	adds	r1, r4, r5
 800445c:	42a3      	cmp	r3, r4
 800445e:	6025      	str	r5, [r4, #0]
 8004460:	bf18      	it	ne
 8004462:	6059      	strne	r1, [r3, #4]
 8004464:	6863      	ldr	r3, [r4, #4]
 8004466:	bf08      	it	eq
 8004468:	f8c8 1000 	streq.w	r1, [r8]
 800446c:	5162      	str	r2, [r4, r5]
 800446e:	604b      	str	r3, [r1, #4]
 8004470:	4638      	mov	r0, r7
 8004472:	f104 060b 	add.w	r6, r4, #11
 8004476:	f000 f829 	bl	80044cc <__malloc_unlock>
 800447a:	f026 0607 	bic.w	r6, r6, #7
 800447e:	1d23      	adds	r3, r4, #4
 8004480:	1af2      	subs	r2, r6, r3
 8004482:	d0ae      	beq.n	80043e2 <_malloc_r+0x22>
 8004484:	1b9b      	subs	r3, r3, r6
 8004486:	50a3      	str	r3, [r4, r2]
 8004488:	e7ab      	b.n	80043e2 <_malloc_r+0x22>
 800448a:	42a3      	cmp	r3, r4
 800448c:	6862      	ldr	r2, [r4, #4]
 800448e:	d1dd      	bne.n	800444c <_malloc_r+0x8c>
 8004490:	f8c8 2000 	str.w	r2, [r8]
 8004494:	e7ec      	b.n	8004470 <_malloc_r+0xb0>
 8004496:	4623      	mov	r3, r4
 8004498:	6864      	ldr	r4, [r4, #4]
 800449a:	e7ac      	b.n	80043f6 <_malloc_r+0x36>
 800449c:	4634      	mov	r4, r6
 800449e:	6876      	ldr	r6, [r6, #4]
 80044a0:	e7b4      	b.n	800440c <_malloc_r+0x4c>
 80044a2:	4613      	mov	r3, r2
 80044a4:	e7cc      	b.n	8004440 <_malloc_r+0x80>
 80044a6:	230c      	movs	r3, #12
 80044a8:	4638      	mov	r0, r7
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f000 f80e 	bl	80044cc <__malloc_unlock>
 80044b0:	e797      	b.n	80043e2 <_malloc_r+0x22>
 80044b2:	6025      	str	r5, [r4, #0]
 80044b4:	e7dc      	b.n	8004470 <_malloc_r+0xb0>
 80044b6:	605b      	str	r3, [r3, #4]
 80044b8:	deff      	udf	#255	; 0xff
 80044ba:	bf00      	nop
 80044bc:	20000318 	.word	0x20000318

080044c0 <__malloc_lock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_lock+0x8>)
 80044c2:	f7ff bf13 	b.w	80042ec <__retarget_lock_acquire_recursive>
 80044c6:	bf00      	nop
 80044c8:	20000314 	.word	0x20000314

080044cc <__malloc_unlock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__malloc_unlock+0x8>)
 80044ce:	f7ff bf0e 	b.w	80042ee <__retarget_lock_release_recursive>
 80044d2:	bf00      	nop
 80044d4:	20000314 	.word	0x20000314

080044d8 <__ssputs_r>:
 80044d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	461f      	mov	r7, r3
 80044de:	688e      	ldr	r6, [r1, #8]
 80044e0:	4682      	mov	sl, r0
 80044e2:	42be      	cmp	r6, r7
 80044e4:	460c      	mov	r4, r1
 80044e6:	4690      	mov	r8, r2
 80044e8:	680b      	ldr	r3, [r1, #0]
 80044ea:	d82c      	bhi.n	8004546 <__ssputs_r+0x6e>
 80044ec:	898a      	ldrh	r2, [r1, #12]
 80044ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044f2:	d026      	beq.n	8004542 <__ssputs_r+0x6a>
 80044f4:	6965      	ldr	r5, [r4, #20]
 80044f6:	6909      	ldr	r1, [r1, #16]
 80044f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044fc:	eba3 0901 	sub.w	r9, r3, r1
 8004500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004504:	1c7b      	adds	r3, r7, #1
 8004506:	444b      	add	r3, r9
 8004508:	106d      	asrs	r5, r5, #1
 800450a:	429d      	cmp	r5, r3
 800450c:	bf38      	it	cc
 800450e:	461d      	movcc	r5, r3
 8004510:	0553      	lsls	r3, r2, #21
 8004512:	d527      	bpl.n	8004564 <__ssputs_r+0x8c>
 8004514:	4629      	mov	r1, r5
 8004516:	f7ff ff53 	bl	80043c0 <_malloc_r>
 800451a:	4606      	mov	r6, r0
 800451c:	b360      	cbz	r0, 8004578 <__ssputs_r+0xa0>
 800451e:	464a      	mov	r2, r9
 8004520:	6921      	ldr	r1, [r4, #16]
 8004522:	f000 fafd 	bl	8004b20 <memcpy>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	6126      	str	r6, [r4, #16]
 8004534:	444e      	add	r6, r9
 8004536:	6026      	str	r6, [r4, #0]
 8004538:	463e      	mov	r6, r7
 800453a:	6165      	str	r5, [r4, #20]
 800453c:	eba5 0509 	sub.w	r5, r5, r9
 8004540:	60a5      	str	r5, [r4, #8]
 8004542:	42be      	cmp	r6, r7
 8004544:	d900      	bls.n	8004548 <__ssputs_r+0x70>
 8004546:	463e      	mov	r6, r7
 8004548:	4632      	mov	r2, r6
 800454a:	4641      	mov	r1, r8
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	f000 faaf 	bl	8004ab0 <memmove>
 8004552:	2000      	movs	r0, #0
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	1b9b      	subs	r3, r3, r6
 8004558:	60a3      	str	r3, [r4, #8]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	4433      	add	r3, r6
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	462a      	mov	r2, r5
 8004566:	f000 fae9 	bl	8004b3c <_realloc_r>
 800456a:	4606      	mov	r6, r0
 800456c:	2800      	cmp	r0, #0
 800456e:	d1e0      	bne.n	8004532 <__ssputs_r+0x5a>
 8004570:	4650      	mov	r0, sl
 8004572:	6921      	ldr	r1, [r4, #16]
 8004574:	f7ff febc 	bl	80042f0 <_free_r>
 8004578:	230c      	movs	r3, #12
 800457a:	f8ca 3000 	str.w	r3, [sl]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	e7e9      	b.n	8004560 <__ssputs_r+0x88>

0800458c <_svfiprintf_r>:
 800458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004590:	4698      	mov	r8, r3
 8004592:	898b      	ldrh	r3, [r1, #12]
 8004594:	4607      	mov	r7, r0
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	460d      	mov	r5, r1
 800459a:	4614      	mov	r4, r2
 800459c:	b09d      	sub	sp, #116	; 0x74
 800459e:	d50e      	bpl.n	80045be <_svfiprintf_r+0x32>
 80045a0:	690b      	ldr	r3, [r1, #16]
 80045a2:	b963      	cbnz	r3, 80045be <_svfiprintf_r+0x32>
 80045a4:	2140      	movs	r1, #64	; 0x40
 80045a6:	f7ff ff0b 	bl	80043c0 <_malloc_r>
 80045aa:	6028      	str	r0, [r5, #0]
 80045ac:	6128      	str	r0, [r5, #16]
 80045ae:	b920      	cbnz	r0, 80045ba <_svfiprintf_r+0x2e>
 80045b0:	230c      	movs	r3, #12
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	e0d0      	b.n	800475c <_svfiprintf_r+0x1d0>
 80045ba:	2340      	movs	r3, #64	; 0x40
 80045bc:	616b      	str	r3, [r5, #20]
 80045be:	2300      	movs	r3, #0
 80045c0:	9309      	str	r3, [sp, #36]	; 0x24
 80045c2:	2320      	movs	r3, #32
 80045c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045c8:	2330      	movs	r3, #48	; 0x30
 80045ca:	f04f 0901 	mov.w	r9, #1
 80045ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004774 <_svfiprintf_r+0x1e8>
 80045d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045da:	4623      	mov	r3, r4
 80045dc:	469a      	mov	sl, r3
 80045de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045e2:	b10a      	cbz	r2, 80045e8 <_svfiprintf_r+0x5c>
 80045e4:	2a25      	cmp	r2, #37	; 0x25
 80045e6:	d1f9      	bne.n	80045dc <_svfiprintf_r+0x50>
 80045e8:	ebba 0b04 	subs.w	fp, sl, r4
 80045ec:	d00b      	beq.n	8004606 <_svfiprintf_r+0x7a>
 80045ee:	465b      	mov	r3, fp
 80045f0:	4622      	mov	r2, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	4638      	mov	r0, r7
 80045f6:	f7ff ff6f 	bl	80044d8 <__ssputs_r>
 80045fa:	3001      	adds	r0, #1
 80045fc:	f000 80a9 	beq.w	8004752 <_svfiprintf_r+0x1c6>
 8004600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004602:	445a      	add	r2, fp
 8004604:	9209      	str	r2, [sp, #36]	; 0x24
 8004606:	f89a 3000 	ldrb.w	r3, [sl]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a1 	beq.w	8004752 <_svfiprintf_r+0x1c6>
 8004610:	2300      	movs	r3, #0
 8004612:	f04f 32ff 	mov.w	r2, #4294967295
 8004616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800461a:	f10a 0a01 	add.w	sl, sl, #1
 800461e:	9304      	str	r3, [sp, #16]
 8004620:	9307      	str	r3, [sp, #28]
 8004622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004626:	931a      	str	r3, [sp, #104]	; 0x68
 8004628:	4654      	mov	r4, sl
 800462a:	2205      	movs	r2, #5
 800462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004630:	4850      	ldr	r0, [pc, #320]	; (8004774 <_svfiprintf_r+0x1e8>)
 8004632:	f000 fa67 	bl	8004b04 <memchr>
 8004636:	9a04      	ldr	r2, [sp, #16]
 8004638:	b9d8      	cbnz	r0, 8004672 <_svfiprintf_r+0xe6>
 800463a:	06d0      	lsls	r0, r2, #27
 800463c:	bf44      	itt	mi
 800463e:	2320      	movmi	r3, #32
 8004640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004644:	0711      	lsls	r1, r2, #28
 8004646:	bf44      	itt	mi
 8004648:	232b      	movmi	r3, #43	; 0x2b
 800464a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800464e:	f89a 3000 	ldrb.w	r3, [sl]
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d015      	beq.n	8004682 <_svfiprintf_r+0xf6>
 8004656:	4654      	mov	r4, sl
 8004658:	2000      	movs	r0, #0
 800465a:	f04f 0c0a 	mov.w	ip, #10
 800465e:	9a07      	ldr	r2, [sp, #28]
 8004660:	4621      	mov	r1, r4
 8004662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004666:	3b30      	subs	r3, #48	; 0x30
 8004668:	2b09      	cmp	r3, #9
 800466a:	d94d      	bls.n	8004708 <_svfiprintf_r+0x17c>
 800466c:	b1b0      	cbz	r0, 800469c <_svfiprintf_r+0x110>
 800466e:	9207      	str	r2, [sp, #28]
 8004670:	e014      	b.n	800469c <_svfiprintf_r+0x110>
 8004672:	eba0 0308 	sub.w	r3, r0, r8
 8004676:	fa09 f303 	lsl.w	r3, r9, r3
 800467a:	4313      	orrs	r3, r2
 800467c:	46a2      	mov	sl, r4
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	e7d2      	b.n	8004628 <_svfiprintf_r+0x9c>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	1d19      	adds	r1, r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	9103      	str	r1, [sp, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfbb      	ittet	lt
 800468e:	425b      	neglt	r3, r3
 8004690:	f042 0202 	orrlt.w	r2, r2, #2
 8004694:	9307      	strge	r3, [sp, #28]
 8004696:	9307      	strlt	r3, [sp, #28]
 8004698:	bfb8      	it	lt
 800469a:	9204      	strlt	r2, [sp, #16]
 800469c:	7823      	ldrb	r3, [r4, #0]
 800469e:	2b2e      	cmp	r3, #46	; 0x2e
 80046a0:	d10c      	bne.n	80046bc <_svfiprintf_r+0x130>
 80046a2:	7863      	ldrb	r3, [r4, #1]
 80046a4:	2b2a      	cmp	r3, #42	; 0x2a
 80046a6:	d134      	bne.n	8004712 <_svfiprintf_r+0x186>
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	3402      	adds	r4, #2
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	9203      	str	r2, [sp, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfb8      	it	lt
 80046b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ba:	9305      	str	r3, [sp, #20]
 80046bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004778 <_svfiprintf_r+0x1ec>
 80046c0:	2203      	movs	r2, #3
 80046c2:	4650      	mov	r0, sl
 80046c4:	7821      	ldrb	r1, [r4, #0]
 80046c6:	f000 fa1d 	bl	8004b04 <memchr>
 80046ca:	b138      	cbz	r0, 80046dc <_svfiprintf_r+0x150>
 80046cc:	2240      	movs	r2, #64	; 0x40
 80046ce:	9b04      	ldr	r3, [sp, #16]
 80046d0:	eba0 000a 	sub.w	r0, r0, sl
 80046d4:	4082      	lsls	r2, r0
 80046d6:	4313      	orrs	r3, r2
 80046d8:	3401      	adds	r4, #1
 80046da:	9304      	str	r3, [sp, #16]
 80046dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e0:	2206      	movs	r2, #6
 80046e2:	4826      	ldr	r0, [pc, #152]	; (800477c <_svfiprintf_r+0x1f0>)
 80046e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046e8:	f000 fa0c 	bl	8004b04 <memchr>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d038      	beq.n	8004762 <_svfiprintf_r+0x1d6>
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <_svfiprintf_r+0x1f4>)
 80046f2:	bb1b      	cbnz	r3, 800473c <_svfiprintf_r+0x1b0>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	3307      	adds	r3, #7
 80046f8:	f023 0307 	bic.w	r3, r3, #7
 80046fc:	3308      	adds	r3, #8
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004702:	4433      	add	r3, r6
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
 8004706:	e768      	b.n	80045da <_svfiprintf_r+0x4e>
 8004708:	460c      	mov	r4, r1
 800470a:	2001      	movs	r0, #1
 800470c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004710:	e7a6      	b.n	8004660 <_svfiprintf_r+0xd4>
 8004712:	2300      	movs	r3, #0
 8004714:	f04f 0c0a 	mov.w	ip, #10
 8004718:	4619      	mov	r1, r3
 800471a:	3401      	adds	r4, #1
 800471c:	9305      	str	r3, [sp, #20]
 800471e:	4620      	mov	r0, r4
 8004720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004724:	3a30      	subs	r2, #48	; 0x30
 8004726:	2a09      	cmp	r2, #9
 8004728:	d903      	bls.n	8004732 <_svfiprintf_r+0x1a6>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0c6      	beq.n	80046bc <_svfiprintf_r+0x130>
 800472e:	9105      	str	r1, [sp, #20]
 8004730:	e7c4      	b.n	80046bc <_svfiprintf_r+0x130>
 8004732:	4604      	mov	r4, r0
 8004734:	2301      	movs	r3, #1
 8004736:	fb0c 2101 	mla	r1, ip, r1, r2
 800473a:	e7f0      	b.n	800471e <_svfiprintf_r+0x192>
 800473c:	ab03      	add	r3, sp, #12
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	462a      	mov	r2, r5
 8004742:	4638      	mov	r0, r7
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <_svfiprintf_r+0x1f8>)
 8004746:	a904      	add	r1, sp, #16
 8004748:	f3af 8000 	nop.w
 800474c:	1c42      	adds	r2, r0, #1
 800474e:	4606      	mov	r6, r0
 8004750:	d1d6      	bne.n	8004700 <_svfiprintf_r+0x174>
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	065b      	lsls	r3, r3, #25
 8004756:	f53f af2d 	bmi.w	80045b4 <_svfiprintf_r+0x28>
 800475a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800475c:	b01d      	add	sp, #116	; 0x74
 800475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004762:	ab03      	add	r3, sp, #12
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	462a      	mov	r2, r5
 8004768:	4638      	mov	r0, r7
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <_svfiprintf_r+0x1f8>)
 800476c:	a904      	add	r1, sp, #16
 800476e:	f000 f87d 	bl	800486c <_printf_i>
 8004772:	e7eb      	b.n	800474c <_svfiprintf_r+0x1c0>
 8004774:	08005dac 	.word	0x08005dac
 8004778:	08005db2 	.word	0x08005db2
 800477c:	08005db6 	.word	0x08005db6
 8004780:	00000000 	.word	0x00000000
 8004784:	080044d9 	.word	0x080044d9

08004788 <_printf_common>:
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	4616      	mov	r6, r2
 800478e:	4699      	mov	r9, r3
 8004790:	688a      	ldr	r2, [r1, #8]
 8004792:	690b      	ldr	r3, [r1, #16]
 8004794:	4607      	mov	r7, r0
 8004796:	4293      	cmp	r3, r2
 8004798:	bfb8      	it	lt
 800479a:	4613      	movlt	r3, r2
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047a2:	460c      	mov	r4, r1
 80047a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a8:	b10a      	cbz	r2, 80047ae <_printf_common+0x26>
 80047aa:	3301      	adds	r3, #1
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	0699      	lsls	r1, r3, #26
 80047b2:	bf42      	ittt	mi
 80047b4:	6833      	ldrmi	r3, [r6, #0]
 80047b6:	3302      	addmi	r3, #2
 80047b8:	6033      	strmi	r3, [r6, #0]
 80047ba:	6825      	ldr	r5, [r4, #0]
 80047bc:	f015 0506 	ands.w	r5, r5, #6
 80047c0:	d106      	bne.n	80047d0 <_printf_common+0x48>
 80047c2:	f104 0a19 	add.w	sl, r4, #25
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	6832      	ldr	r2, [r6, #0]
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc2b      	bgt.n	8004828 <_printf_common+0xa0>
 80047d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047d4:	1e13      	subs	r3, r2, #0
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	0692      	lsls	r2, r2, #26
 80047de:	d430      	bmi.n	8004842 <_printf_common+0xba>
 80047e0:	4649      	mov	r1, r9
 80047e2:	4638      	mov	r0, r7
 80047e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e8:	47c0      	blx	r8
 80047ea:	3001      	adds	r0, #1
 80047ec:	d023      	beq.n	8004836 <_printf_common+0xae>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	f003 0306 	and.w	r3, r3, #6
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf14      	ite	ne
 80047fa:	2500      	movne	r5, #0
 80047fc:	6833      	ldreq	r3, [r6, #0]
 80047fe:	f04f 0600 	mov.w	r6, #0
 8004802:	bf08      	it	eq
 8004804:	68e5      	ldreq	r5, [r4, #12]
 8004806:	f104 041a 	add.w	r4, r4, #26
 800480a:	bf08      	it	eq
 800480c:	1aed      	subeq	r5, r5, r3
 800480e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004812:	bf08      	it	eq
 8004814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004818:	4293      	cmp	r3, r2
 800481a:	bfc4      	itt	gt
 800481c:	1a9b      	subgt	r3, r3, r2
 800481e:	18ed      	addgt	r5, r5, r3
 8004820:	42b5      	cmp	r5, r6
 8004822:	d11a      	bne.n	800485a <_printf_common+0xd2>
 8004824:	2000      	movs	r0, #0
 8004826:	e008      	b.n	800483a <_printf_common+0xb2>
 8004828:	2301      	movs	r3, #1
 800482a:	4652      	mov	r2, sl
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d103      	bne.n	800483e <_printf_common+0xb6>
 8004836:	f04f 30ff 	mov.w	r0, #4294967295
 800483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483e:	3501      	adds	r5, #1
 8004840:	e7c1      	b.n	80047c6 <_printf_common+0x3e>
 8004842:	2030      	movs	r0, #48	; 0x30
 8004844:	18e1      	adds	r1, r4, r3
 8004846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004850:	4422      	add	r2, r4
 8004852:	3302      	adds	r3, #2
 8004854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004858:	e7c2      	b.n	80047e0 <_printf_common+0x58>
 800485a:	2301      	movs	r3, #1
 800485c:	4622      	mov	r2, r4
 800485e:	4649      	mov	r1, r9
 8004860:	4638      	mov	r0, r7
 8004862:	47c0      	blx	r8
 8004864:	3001      	adds	r0, #1
 8004866:	d0e6      	beq.n	8004836 <_printf_common+0xae>
 8004868:	3601      	adds	r6, #1
 800486a:	e7d9      	b.n	8004820 <_printf_common+0x98>

0800486c <_printf_i>:
 800486c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	7e0f      	ldrb	r7, [r1, #24]
 8004872:	4691      	mov	r9, r2
 8004874:	2f78      	cmp	r7, #120	; 0x78
 8004876:	4680      	mov	r8, r0
 8004878:	460c      	mov	r4, r1
 800487a:	469a      	mov	sl, r3
 800487c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800487e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004882:	d807      	bhi.n	8004894 <_printf_i+0x28>
 8004884:	2f62      	cmp	r7, #98	; 0x62
 8004886:	d80a      	bhi.n	800489e <_printf_i+0x32>
 8004888:	2f00      	cmp	r7, #0
 800488a:	f000 80d5 	beq.w	8004a38 <_printf_i+0x1cc>
 800488e:	2f58      	cmp	r7, #88	; 0x58
 8004890:	f000 80c1 	beq.w	8004a16 <_printf_i+0x1aa>
 8004894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800489c:	e03a      	b.n	8004914 <_printf_i+0xa8>
 800489e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048a2:	2b15      	cmp	r3, #21
 80048a4:	d8f6      	bhi.n	8004894 <_printf_i+0x28>
 80048a6:	a101      	add	r1, pc, #4	; (adr r1, 80048ac <_printf_i+0x40>)
 80048a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004895 	.word	0x08004895
 80048b8:	08004895 	.word	0x08004895
 80048bc:	08004895 	.word	0x08004895
 80048c0:	08004895 	.word	0x08004895
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004895 	.word	0x08004895
 80048cc:	08004895 	.word	0x08004895
 80048d0:	08004895 	.word	0x08004895
 80048d4:	08004895 	.word	0x08004895
 80048d8:	08004a1f 	.word	0x08004a1f
 80048dc:	08004945 	.word	0x08004945
 80048e0:	080049d9 	.word	0x080049d9
 80048e4:	08004895 	.word	0x08004895
 80048e8:	08004895 	.word	0x08004895
 80048ec:	08004a41 	.word	0x08004a41
 80048f0:	08004895 	.word	0x08004895
 80048f4:	08004945 	.word	0x08004945
 80048f8:	08004895 	.word	0x08004895
 80048fc:	08004895 	.word	0x08004895
 8004900:	080049e1 	.word	0x080049e1
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	602a      	str	r2, [r5, #0]
 800490c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004914:	2301      	movs	r3, #1
 8004916:	e0a0      	b.n	8004a5a <_printf_i+0x1ee>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	0607      	lsls	r7, r0, #24
 800491e:	f103 0104 	add.w	r1, r3, #4
 8004922:	6029      	str	r1, [r5, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0xbe>
 8004926:	681e      	ldr	r6, [r3, #0]
 8004928:	e003      	b.n	8004932 <_printf_i+0xc6>
 800492a:	0646      	lsls	r6, r0, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0xba>
 800492e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004932:	2e00      	cmp	r6, #0
 8004934:	da03      	bge.n	800493e <_printf_i+0xd2>
 8004936:	232d      	movs	r3, #45	; 0x2d
 8004938:	4276      	negs	r6, r6
 800493a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493e:	230a      	movs	r3, #10
 8004940:	4859      	ldr	r0, [pc, #356]	; (8004aa8 <_printf_i+0x23c>)
 8004942:	e012      	b.n	800496a <_printf_i+0xfe>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1d19      	adds	r1, r3, #4
 800494a:	6029      	str	r1, [r5, #0]
 800494c:	0605      	lsls	r5, r0, #24
 800494e:	d501      	bpl.n	8004954 <_printf_i+0xe8>
 8004950:	681e      	ldr	r6, [r3, #0]
 8004952:	e002      	b.n	800495a <_printf_i+0xee>
 8004954:	0641      	lsls	r1, r0, #25
 8004956:	d5fb      	bpl.n	8004950 <_printf_i+0xe4>
 8004958:	881e      	ldrh	r6, [r3, #0]
 800495a:	2f6f      	cmp	r7, #111	; 0x6f
 800495c:	bf0c      	ite	eq
 800495e:	2308      	moveq	r3, #8
 8004960:	230a      	movne	r3, #10
 8004962:	4851      	ldr	r0, [pc, #324]	; (8004aa8 <_printf_i+0x23c>)
 8004964:	2100      	movs	r1, #0
 8004966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496a:	6865      	ldr	r5, [r4, #4]
 800496c:	2d00      	cmp	r5, #0
 800496e:	bfa8      	it	ge
 8004970:	6821      	ldrge	r1, [r4, #0]
 8004972:	60a5      	str	r5, [r4, #8]
 8004974:	bfa4      	itt	ge
 8004976:	f021 0104 	bicge.w	r1, r1, #4
 800497a:	6021      	strge	r1, [r4, #0]
 800497c:	b90e      	cbnz	r6, 8004982 <_printf_i+0x116>
 800497e:	2d00      	cmp	r5, #0
 8004980:	d04b      	beq.n	8004a1a <_printf_i+0x1ae>
 8004982:	4615      	mov	r5, r2
 8004984:	fbb6 f1f3 	udiv	r1, r6, r3
 8004988:	fb03 6711 	mls	r7, r3, r1, r6
 800498c:	5dc7      	ldrb	r7, [r0, r7]
 800498e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004992:	4637      	mov	r7, r6
 8004994:	42bb      	cmp	r3, r7
 8004996:	460e      	mov	r6, r1
 8004998:	d9f4      	bls.n	8004984 <_printf_i+0x118>
 800499a:	2b08      	cmp	r3, #8
 800499c:	d10b      	bne.n	80049b6 <_printf_i+0x14a>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	07de      	lsls	r6, r3, #31
 80049a2:	d508      	bpl.n	80049b6 <_printf_i+0x14a>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	6861      	ldr	r1, [r4, #4]
 80049a8:	4299      	cmp	r1, r3
 80049aa:	bfde      	ittt	le
 80049ac:	2330      	movle	r3, #48	; 0x30
 80049ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049b6:	1b52      	subs	r2, r2, r5
 80049b8:	6122      	str	r2, [r4, #16]
 80049ba:	464b      	mov	r3, r9
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f8cd a000 	str.w	sl, [sp]
 80049c4:	aa03      	add	r2, sp, #12
 80049c6:	f7ff fedf 	bl	8004788 <_printf_common>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d14a      	bne.n	8004a64 <_printf_i+0x1f8>
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	b004      	add	sp, #16
 80049d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f043 0320 	orr.w	r3, r3, #32
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	2778      	movs	r7, #120	; 0x78
 80049e2:	4832      	ldr	r0, [pc, #200]	; (8004aac <_printf_i+0x240>)
 80049e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	6829      	ldr	r1, [r5, #0]
 80049ec:	061f      	lsls	r7, r3, #24
 80049ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f2:	d402      	bmi.n	80049fa <_printf_i+0x18e>
 80049f4:	065f      	lsls	r7, r3, #25
 80049f6:	bf48      	it	mi
 80049f8:	b2b6      	uxthmi	r6, r6
 80049fa:	07df      	lsls	r7, r3, #31
 80049fc:	bf48      	it	mi
 80049fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004a02:	6029      	str	r1, [r5, #0]
 8004a04:	bf48      	it	mi
 8004a06:	6023      	strmi	r3, [r4, #0]
 8004a08:	b91e      	cbnz	r6, 8004a12 <_printf_i+0x1a6>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f023 0320 	bic.w	r3, r3, #32
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	2310      	movs	r3, #16
 8004a14:	e7a6      	b.n	8004964 <_printf_i+0xf8>
 8004a16:	4824      	ldr	r0, [pc, #144]	; (8004aa8 <_printf_i+0x23c>)
 8004a18:	e7e4      	b.n	80049e4 <_printf_i+0x178>
 8004a1a:	4615      	mov	r5, r2
 8004a1c:	e7bd      	b.n	800499a <_printf_i+0x12e>
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	6826      	ldr	r6, [r4, #0]
 8004a22:	1d18      	adds	r0, r3, #4
 8004a24:	6961      	ldr	r1, [r4, #20]
 8004a26:	6028      	str	r0, [r5, #0]
 8004a28:	0635      	lsls	r5, r6, #24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	d501      	bpl.n	8004a32 <_printf_i+0x1c6>
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	e002      	b.n	8004a38 <_printf_i+0x1cc>
 8004a32:	0670      	lsls	r0, r6, #25
 8004a34:	d5fb      	bpl.n	8004a2e <_printf_i+0x1c2>
 8004a36:	8019      	strh	r1, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4615      	mov	r5, r2
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	e7bc      	b.n	80049ba <_printf_i+0x14e>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	2100      	movs	r1, #0
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f859 	bl	8004b04 <memchr>
 8004a52:	b108      	cbz	r0, 8004a58 <_printf_i+0x1ec>
 8004a54:	1b40      	subs	r0, r0, r5
 8004a56:	6060      	str	r0, [r4, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a62:	e7aa      	b.n	80049ba <_printf_i+0x14e>
 8004a64:	462a      	mov	r2, r5
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	47d0      	blx	sl
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0ad      	beq.n	80049ce <_printf_i+0x162>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	079b      	lsls	r3, r3, #30
 8004a76:	d413      	bmi.n	8004aa0 <_printf_i+0x234>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e7a6      	b.n	80049d2 <_printf_i+0x166>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4632      	mov	r2, r6
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	47d0      	blx	sl
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d09d      	beq.n	80049ce <_printf_i+0x162>
 8004a92:	3501      	adds	r5, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	9903      	ldr	r1, [sp, #12]
 8004a98:	1a5b      	subs	r3, r3, r1
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dcf2      	bgt.n	8004a84 <_printf_i+0x218>
 8004a9e:	e7eb      	b.n	8004a78 <_printf_i+0x20c>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	f104 0619 	add.w	r6, r4, #25
 8004aa6:	e7f5      	b.n	8004a94 <_printf_i+0x228>
 8004aa8:	08005dbd 	.word	0x08005dbd
 8004aac:	08005dce 	.word	0x08005dce

08004ab0 <memmove>:
 8004ab0:	4288      	cmp	r0, r1
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	eb01 0402 	add.w	r4, r1, r2
 8004ab8:	d902      	bls.n	8004ac0 <memmove+0x10>
 8004aba:	4284      	cmp	r4, r0
 8004abc:	4623      	mov	r3, r4
 8004abe:	d807      	bhi.n	8004ad0 <memmove+0x20>
 8004ac0:	1e43      	subs	r3, r0, #1
 8004ac2:	42a1      	cmp	r1, r4
 8004ac4:	d008      	beq.n	8004ad8 <memmove+0x28>
 8004ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ace:	e7f8      	b.n	8004ac2 <memmove+0x12>
 8004ad0:	4601      	mov	r1, r0
 8004ad2:	4402      	add	r2, r0
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	d100      	bne.n	8004ada <memmove+0x2a>
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ae2:	e7f7      	b.n	8004ad4 <memmove+0x24>

08004ae4 <_sbrk_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <_sbrk_r+0x1c>)
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7ff fb52 	bl	8004198 <_sbrk>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_sbrk_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_sbrk_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	20000310 	.word	0x20000310

08004b04 <memchr>:
 8004b04:	4603      	mov	r3, r0
 8004b06:	b510      	push	{r4, lr}
 8004b08:	b2c9      	uxtb	r1, r1
 8004b0a:	4402      	add	r2, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	d101      	bne.n	8004b16 <memchr+0x12>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e003      	b.n	8004b1e <memchr+0x1a>
 8004b16:	7804      	ldrb	r4, [r0, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	428c      	cmp	r4, r1
 8004b1c:	d1f6      	bne.n	8004b0c <memchr+0x8>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <memcpy>:
 8004b20:	440a      	add	r2, r1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xc>
 8004b2a:	4770      	bx	lr
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b32:	4291      	cmp	r1, r2
 8004b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b38:	d1f9      	bne.n	8004b2e <memcpy+0xe>
 8004b3a:	bd10      	pop	{r4, pc}

08004b3c <_realloc_r>:
 8004b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b40:	4680      	mov	r8, r0
 8004b42:	4614      	mov	r4, r2
 8004b44:	460e      	mov	r6, r1
 8004b46:	b921      	cbnz	r1, 8004b52 <_realloc_r+0x16>
 8004b48:	4611      	mov	r1, r2
 8004b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4e:	f7ff bc37 	b.w	80043c0 <_malloc_r>
 8004b52:	b92a      	cbnz	r2, 8004b60 <_realloc_r+0x24>
 8004b54:	f7ff fbcc 	bl	80042f0 <_free_r>
 8004b58:	4625      	mov	r5, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b60:	f000 f81b 	bl	8004b9a <_malloc_usable_size_r>
 8004b64:	4284      	cmp	r4, r0
 8004b66:	4607      	mov	r7, r0
 8004b68:	d802      	bhi.n	8004b70 <_realloc_r+0x34>
 8004b6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b6e:	d812      	bhi.n	8004b96 <_realloc_r+0x5a>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7ff fc24 	bl	80043c0 <_malloc_r>
 8004b78:	4605      	mov	r5, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d0ed      	beq.n	8004b5a <_realloc_r+0x1e>
 8004b7e:	42bc      	cmp	r4, r7
 8004b80:	4622      	mov	r2, r4
 8004b82:	4631      	mov	r1, r6
 8004b84:	bf28      	it	cs
 8004b86:	463a      	movcs	r2, r7
 8004b88:	f7ff ffca 	bl	8004b20 <memcpy>
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f7ff fbae 	bl	80042f0 <_free_r>
 8004b94:	e7e1      	b.n	8004b5a <_realloc_r+0x1e>
 8004b96:	4635      	mov	r5, r6
 8004b98:	e7df      	b.n	8004b5a <_realloc_r+0x1e>

08004b9a <_malloc_usable_size_r>:
 8004b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9e:	1f18      	subs	r0, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bfbc      	itt	lt
 8004ba4:	580b      	ldrlt	r3, [r1, r0]
 8004ba6:	18c0      	addlt	r0, r0, r3
 8004ba8:	4770      	bx	lr
	...

08004bac <pow>:
 8004bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	4689      	mov	r9, r1
 8004bb8:	f000 faf2 	bl	80051a0 <__ieee754_pow>
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460f      	mov	r7, r1
 8004bc2:	462b      	mov	r3, r5
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb ff28 	bl	8000a1c <__aeabi_dcmpun>
 8004bcc:	bbc8      	cbnz	r0, 8004c42 <pow+0x96>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	f7fb feef 	bl	80009b8 <__aeabi_dcmpeq>
 8004bda:	b1b8      	cbz	r0, 8004c0c <pow+0x60>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	4620      	mov	r0, r4
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7fb fee8 	bl	80009b8 <__aeabi_dcmpeq>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d141      	bne.n	8004c70 <pow+0xc4>
 8004bec:	4620      	mov	r0, r4
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f000 f9f8 	bl	8004fe4 <finite>
 8004bf4:	b328      	cbz	r0, 8004c42 <pow+0x96>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fee5 	bl	80009cc <__aeabi_dcmplt>
 8004c02:	b1f0      	cbz	r0, 8004c42 <pow+0x96>
 8004c04:	f7ff fb48 	bl	8004298 <__errno>
 8004c08:	2322      	movs	r3, #34	; 0x22
 8004c0a:	e019      	b.n	8004c40 <pow+0x94>
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f000 f9e8 	bl	8004fe4 <finite>
 8004c14:	b9c8      	cbnz	r0, 8004c4a <pow+0x9e>
 8004c16:	4640      	mov	r0, r8
 8004c18:	4649      	mov	r1, r9
 8004c1a:	f000 f9e3 	bl	8004fe4 <finite>
 8004c1e:	b1a0      	cbz	r0, 8004c4a <pow+0x9e>
 8004c20:	4620      	mov	r0, r4
 8004c22:	4629      	mov	r1, r5
 8004c24:	f000 f9de 	bl	8004fe4 <finite>
 8004c28:	b178      	cbz	r0, 8004c4a <pow+0x9e>
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	4630      	mov	r0, r6
 8004c30:	4639      	mov	r1, r7
 8004c32:	f7fb fef3 	bl	8000a1c <__aeabi_dcmpun>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d0e4      	beq.n	8004c04 <pow+0x58>
 8004c3a:	f7ff fb2d 	bl	8004298 <__errno>
 8004c3e:	2321      	movs	r3, #33	; 0x21
 8004c40:	6003      	str	r3, [r0, #0]
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4630      	mov	r0, r6
 8004c50:	4639      	mov	r1, r7
 8004c52:	f7fb feb1 	bl	80009b8 <__aeabi_dcmpeq>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d0f3      	beq.n	8004c42 <pow+0x96>
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	f000 f9c1 	bl	8004fe4 <finite>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0ed      	beq.n	8004c42 <pow+0x96>
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f000 f9bb 	bl	8004fe4 <finite>
 8004c6e:	e7c8      	b.n	8004c02 <pow+0x56>
 8004c70:	2600      	movs	r6, #0
 8004c72:	4f01      	ldr	r7, [pc, #4]	; (8004c78 <pow+0xcc>)
 8004c74:	e7e5      	b.n	8004c42 <pow+0x96>
 8004c76:	bf00      	nop
 8004c78:	3ff00000 	.word	0x3ff00000

08004c7c <sqrt>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460f      	mov	r7, r1
 8004c82:	f000 f9b5 	bl	8004ff0 <__ieee754_sqrt>
 8004c86:	4632      	mov	r2, r6
 8004c88:	4604      	mov	r4, r0
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	4630      	mov	r0, r6
 8004c90:	4639      	mov	r1, r7
 8004c92:	f7fb fec3 	bl	8000a1c <__aeabi_dcmpun>
 8004c96:	b990      	cbnz	r0, 8004cbe <sqrt+0x42>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f7fb fe94 	bl	80009cc <__aeabi_dcmplt>
 8004ca4:	b158      	cbz	r0, 8004cbe <sqrt+0x42>
 8004ca6:	f7ff faf7 	bl	8004298 <__errno>
 8004caa:	2321      	movs	r3, #33	; 0x21
 8004cac:	2200      	movs	r2, #0
 8004cae:	6003      	str	r3, [r0, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb fd41 	bl	800073c <__aeabi_ddiv>
 8004cba:	4604      	mov	r4, r0
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc4:	0000      	movs	r0, r0
	...

08004cc8 <atan>:
 8004cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	4bb6      	ldr	r3, [pc, #728]	; (8004fa8 <atan+0x2e0>)
 8004cce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004cd2:	429e      	cmp	r6, r3
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	460d      	mov	r5, r1
 8004cd8:	468b      	mov	fp, r1
 8004cda:	dd17      	ble.n	8004d0c <atan+0x44>
 8004cdc:	4bb3      	ldr	r3, [pc, #716]	; (8004fac <atan+0x2e4>)
 8004cde:	429e      	cmp	r6, r3
 8004ce0:	dc01      	bgt.n	8004ce6 <atan+0x1e>
 8004ce2:	d109      	bne.n	8004cf8 <atan+0x30>
 8004ce4:	b140      	cbz	r0, 8004cf8 <atan+0x30>
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	462b      	mov	r3, r5
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7fb fa45 	bl	800017c <__adddf3>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	e005      	b.n	8004d04 <atan+0x3c>
 8004cf8:	f1bb 0f00 	cmp.w	fp, #0
 8004cfc:	4cac      	ldr	r4, [pc, #688]	; (8004fb0 <atan+0x2e8>)
 8004cfe:	f300 8121 	bgt.w	8004f44 <atan+0x27c>
 8004d02:	4dac      	ldr	r5, [pc, #688]	; (8004fb4 <atan+0x2ec>)
 8004d04:	4620      	mov	r0, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0c:	4baa      	ldr	r3, [pc, #680]	; (8004fb8 <atan+0x2f0>)
 8004d0e:	429e      	cmp	r6, r3
 8004d10:	dc11      	bgt.n	8004d36 <atan+0x6e>
 8004d12:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004d16:	429e      	cmp	r6, r3
 8004d18:	dc0a      	bgt.n	8004d30 <atan+0x68>
 8004d1a:	a38b      	add	r3, pc, #556	; (adr r3, 8004f48 <atan+0x280>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fa2c 	bl	800017c <__adddf3>
 8004d24:	2200      	movs	r2, #0
 8004d26:	4ba5      	ldr	r3, [pc, #660]	; (8004fbc <atan+0x2f4>)
 8004d28:	f7fb fe6e 	bl	8000a08 <__aeabi_dcmpgt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1e9      	bne.n	8004d04 <atan+0x3c>
 8004d30:	f04f 3aff 	mov.w	sl, #4294967295
 8004d34:	e027      	b.n	8004d86 <atan+0xbe>
 8004d36:	f000 f951 	bl	8004fdc <fabs>
 8004d3a:	4ba1      	ldr	r3, [pc, #644]	; (8004fc0 <atan+0x2f8>)
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	429e      	cmp	r6, r3
 8004d40:	460d      	mov	r5, r1
 8004d42:	f300 80b8 	bgt.w	8004eb6 <atan+0x1ee>
 8004d46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	f300 809c 	bgt.w	8004e88 <atan+0x1c0>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	f7fb fa12 	bl	800017c <__adddf3>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4b98      	ldr	r3, [pc, #608]	; (8004fbc <atan+0x2f4>)
 8004d5c:	f7fb fa0c 	bl	8000178 <__aeabi_dsub>
 8004d60:	2200      	movs	r2, #0
 8004d62:	4606      	mov	r6, r0
 8004d64:	460f      	mov	r7, r1
 8004d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fa05 	bl	800017c <__adddf3>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fcdf 	bl	800073c <__aeabi_ddiv>
 8004d7e:	f04f 0a00 	mov.w	sl, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	460d      	mov	r5, r1
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fbab 	bl	80004e8 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4680      	mov	r8, r0
 8004d98:	4689      	mov	r9, r1
 8004d9a:	f7fb fba5 	bl	80004e8 <__aeabi_dmul>
 8004d9e:	a36c      	add	r3, pc, #432	; (adr r3, 8004f50 <atan+0x288>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	f7fb fb9e 	bl	80004e8 <__aeabi_dmul>
 8004dac:	a36a      	add	r3, pc, #424	; (adr r3, 8004f58 <atan+0x290>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb f9e3 	bl	800017c <__adddf3>
 8004db6:	4632      	mov	r2, r6
 8004db8:	463b      	mov	r3, r7
 8004dba:	f7fb fb95 	bl	80004e8 <__aeabi_dmul>
 8004dbe:	a368      	add	r3, pc, #416	; (adr r3, 8004f60 <atan+0x298>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb f9da 	bl	800017c <__adddf3>
 8004dc8:	4632      	mov	r2, r6
 8004dca:	463b      	mov	r3, r7
 8004dcc:	f7fb fb8c 	bl	80004e8 <__aeabi_dmul>
 8004dd0:	a365      	add	r3, pc, #404	; (adr r3, 8004f68 <atan+0x2a0>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb f9d1 	bl	800017c <__adddf3>
 8004dda:	4632      	mov	r2, r6
 8004ddc:	463b      	mov	r3, r7
 8004dde:	f7fb fb83 	bl	80004e8 <__aeabi_dmul>
 8004de2:	a363      	add	r3, pc, #396	; (adr r3, 8004f70 <atan+0x2a8>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f7fb f9c8 	bl	800017c <__adddf3>
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	f7fb fb7a 	bl	80004e8 <__aeabi_dmul>
 8004df4:	a360      	add	r3, pc, #384	; (adr r3, 8004f78 <atan+0x2b0>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f7fb f9bf 	bl	800017c <__adddf3>
 8004dfe:	4642      	mov	r2, r8
 8004e00:	464b      	mov	r3, r9
 8004e02:	f7fb fb71 	bl	80004e8 <__aeabi_dmul>
 8004e06:	a35e      	add	r3, pc, #376	; (adr r3, 8004f80 <atan+0x2b8>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	4689      	mov	r9, r1
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb fb68 	bl	80004e8 <__aeabi_dmul>
 8004e18:	a35b      	add	r3, pc, #364	; (adr r3, 8004f88 <atan+0x2c0>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb f9ab 	bl	8000178 <__aeabi_dsub>
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	f7fb fb5f 	bl	80004e8 <__aeabi_dmul>
 8004e2a:	a359      	add	r3, pc, #356	; (adr r3, 8004f90 <atan+0x2c8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb f9a2 	bl	8000178 <__aeabi_dsub>
 8004e34:	4632      	mov	r2, r6
 8004e36:	463b      	mov	r3, r7
 8004e38:	f7fb fb56 	bl	80004e8 <__aeabi_dmul>
 8004e3c:	a356      	add	r3, pc, #344	; (adr r3, 8004f98 <atan+0x2d0>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb f999 	bl	8000178 <__aeabi_dsub>
 8004e46:	4632      	mov	r2, r6
 8004e48:	463b      	mov	r3, r7
 8004e4a:	f7fb fb4d 	bl	80004e8 <__aeabi_dmul>
 8004e4e:	a354      	add	r3, pc, #336	; (adr r3, 8004fa0 <atan+0x2d8>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f990 	bl	8000178 <__aeabi_dsub>
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	f7fb fb44 	bl	80004e8 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4640      	mov	r0, r8
 8004e66:	4649      	mov	r1, r9
 8004e68:	f7fb f988 	bl	800017c <__adddf3>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	462b      	mov	r3, r5
 8004e70:	f7fb fb3a 	bl	80004e8 <__aeabi_dmul>
 8004e74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	d144      	bne.n	8004f08 <atan+0x240>
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb f979 	bl	8000178 <__aeabi_dsub>
 8004e86:	e734      	b.n	8004cf2 <atan+0x2a>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	; (8004fbc <atan+0x2f4>)
 8004e8c:	f7fb f974 	bl	8000178 <__aeabi_dsub>
 8004e90:	2200      	movs	r2, #0
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4b48      	ldr	r3, [pc, #288]	; (8004fbc <atan+0x2f4>)
 8004e9c:	f7fb f96e 	bl	800017c <__adddf3>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f7fb fc48 	bl	800073c <__aeabi_ddiv>
 8004eac:	f04f 0a01 	mov.w	sl, #1
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	460d      	mov	r5, r1
 8004eb4:	e767      	b.n	8004d86 <atan+0xbe>
 8004eb6:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <atan+0x2fc>)
 8004eb8:	429e      	cmp	r6, r3
 8004eba:	da1a      	bge.n	8004ef2 <atan+0x22a>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <atan+0x300>)
 8004ec0:	f7fb f95a 	bl	8000178 <__aeabi_dsub>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	460f      	mov	r7, r1
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <atan+0x300>)
 8004ed0:	f7fb fb0a 	bl	80004e8 <__aeabi_dmul>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <atan+0x2f4>)
 8004ed8:	f7fb f950 	bl	800017c <__adddf3>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb fc2a 	bl	800073c <__aeabi_ddiv>
 8004ee8:	f04f 0a02 	mov.w	sl, #2
 8004eec:	4604      	mov	r4, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	e749      	b.n	8004d86 <atan+0xbe>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	4934      	ldr	r1, [pc, #208]	; (8004fcc <atan+0x304>)
 8004efa:	f7fb fc1f 	bl	800073c <__aeabi_ddiv>
 8004efe:	f04f 0a03 	mov.w	sl, #3
 8004f02:	4604      	mov	r4, r0
 8004f04:	460d      	mov	r5, r1
 8004f06:	e73e      	b.n	8004d86 <atan+0xbe>
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <atan+0x308>)
 8004f0a:	4e32      	ldr	r6, [pc, #200]	; (8004fd4 <atan+0x30c>)
 8004f0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb f930 	bl	8000178 <__aeabi_dsub>
 8004f18:	4622      	mov	r2, r4
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	f7fb f92c 	bl	8000178 <__aeabi_dsub>
 8004f20:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004f2c:	f7fb f924 	bl	8000178 <__aeabi_dsub>
 8004f30:	f1bb 0f00 	cmp.w	fp, #0
 8004f34:	4604      	mov	r4, r0
 8004f36:	460d      	mov	r5, r1
 8004f38:	f6bf aee4 	bge.w	8004d04 <atan+0x3c>
 8004f3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f40:	461d      	mov	r5, r3
 8004f42:	e6df      	b.n	8004d04 <atan+0x3c>
 8004f44:	4d24      	ldr	r5, [pc, #144]	; (8004fd8 <atan+0x310>)
 8004f46:	e6dd      	b.n	8004d04 <atan+0x3c>
 8004f48:	8800759c 	.word	0x8800759c
 8004f4c:	7e37e43c 	.word	0x7e37e43c
 8004f50:	e322da11 	.word	0xe322da11
 8004f54:	3f90ad3a 	.word	0x3f90ad3a
 8004f58:	24760deb 	.word	0x24760deb
 8004f5c:	3fa97b4b 	.word	0x3fa97b4b
 8004f60:	a0d03d51 	.word	0xa0d03d51
 8004f64:	3fb10d66 	.word	0x3fb10d66
 8004f68:	c54c206e 	.word	0xc54c206e
 8004f6c:	3fb745cd 	.word	0x3fb745cd
 8004f70:	920083ff 	.word	0x920083ff
 8004f74:	3fc24924 	.word	0x3fc24924
 8004f78:	5555550d 	.word	0x5555550d
 8004f7c:	3fd55555 	.word	0x3fd55555
 8004f80:	2c6a6c2f 	.word	0x2c6a6c2f
 8004f84:	bfa2b444 	.word	0xbfa2b444
 8004f88:	52defd9a 	.word	0x52defd9a
 8004f8c:	3fadde2d 	.word	0x3fadde2d
 8004f90:	af749a6d 	.word	0xaf749a6d
 8004f94:	3fb3b0f2 	.word	0x3fb3b0f2
 8004f98:	fe231671 	.word	0xfe231671
 8004f9c:	3fbc71c6 	.word	0x3fbc71c6
 8004fa0:	9998ebc4 	.word	0x9998ebc4
 8004fa4:	3fc99999 	.word	0x3fc99999
 8004fa8:	440fffff 	.word	0x440fffff
 8004fac:	7ff00000 	.word	0x7ff00000
 8004fb0:	54442d18 	.word	0x54442d18
 8004fb4:	bff921fb 	.word	0xbff921fb
 8004fb8:	3fdbffff 	.word	0x3fdbffff
 8004fbc:	3ff00000 	.word	0x3ff00000
 8004fc0:	3ff2ffff 	.word	0x3ff2ffff
 8004fc4:	40038000 	.word	0x40038000
 8004fc8:	3ff80000 	.word	0x3ff80000
 8004fcc:	bff00000 	.word	0xbff00000
 8004fd0:	08005e00 	.word	0x08005e00
 8004fd4:	08005de0 	.word	0x08005de0
 8004fd8:	3ff921fb 	.word	0x3ff921fb

08004fdc <fabs>:
 8004fdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4770      	bx	lr

08004fe4 <finite>:
 8004fe4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004fe8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004fec:	0fc0      	lsrs	r0, r0, #31
 8004fee:	4770      	bx	lr

08004ff0 <__ieee754_sqrt>:
 8004ff0:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005194 <__ieee754_sqrt+0x1a4>
 8004ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	ea3c 0c01 	bics.w	ip, ip, r1
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4606      	mov	r6, r0
 8005000:	460d      	mov	r5, r1
 8005002:	460a      	mov	r2, r1
 8005004:	4604      	mov	r4, r0
 8005006:	d10e      	bne.n	8005026 <__ieee754_sqrt+0x36>
 8005008:	4602      	mov	r2, r0
 800500a:	f7fb fa6d 	bl	80004e8 <__aeabi_dmul>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4630      	mov	r0, r6
 8005014:	4629      	mov	r1, r5
 8005016:	f7fb f8b1 	bl	800017c <__adddf3>
 800501a:	4606      	mov	r6, r0
 800501c:	460d      	mov	r5, r1
 800501e:	4630      	mov	r0, r6
 8005020:	4629      	mov	r1, r5
 8005022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005026:	2900      	cmp	r1, #0
 8005028:	dc0d      	bgt.n	8005046 <__ieee754_sqrt+0x56>
 800502a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800502e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005032:	d0f4      	beq.n	800501e <__ieee754_sqrt+0x2e>
 8005034:	b139      	cbz	r1, 8005046 <__ieee754_sqrt+0x56>
 8005036:	4602      	mov	r2, r0
 8005038:	f7fb f89e 	bl	8000178 <__aeabi_dsub>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	f7fb fb7c 	bl	800073c <__aeabi_ddiv>
 8005044:	e7e9      	b.n	800501a <__ieee754_sqrt+0x2a>
 8005046:	1512      	asrs	r2, r2, #20
 8005048:	f000 8089 	beq.w	800515e <__ieee754_sqrt+0x16e>
 800504c:	2500      	movs	r5, #0
 800504e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005052:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505a:	07d2      	lsls	r2, r2, #31
 800505c:	bf5c      	itt	pl
 800505e:	005b      	lslpl	r3, r3, #1
 8005060:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005064:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005068:	bf58      	it	pl
 800506a:	0064      	lslpl	r4, r4, #1
 800506c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005070:	0062      	lsls	r2, r4, #1
 8005072:	2016      	movs	r0, #22
 8005074:	4629      	mov	r1, r5
 8005076:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800507a:	1076      	asrs	r6, r6, #1
 800507c:	190f      	adds	r7, r1, r4
 800507e:	429f      	cmp	r7, r3
 8005080:	bfde      	ittt	le
 8005082:	1bdb      	suble	r3, r3, r7
 8005084:	1939      	addle	r1, r7, r4
 8005086:	192d      	addle	r5, r5, r4
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	3801      	subs	r0, #1
 800508c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005090:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005094:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005098:	d1f0      	bne.n	800507c <__ieee754_sqrt+0x8c>
 800509a:	4604      	mov	r4, r0
 800509c:	2720      	movs	r7, #32
 800509e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80050a2:	428b      	cmp	r3, r1
 80050a4:	eb0c 0e00 	add.w	lr, ip, r0
 80050a8:	dc02      	bgt.n	80050b0 <__ieee754_sqrt+0xc0>
 80050aa:	d113      	bne.n	80050d4 <__ieee754_sqrt+0xe4>
 80050ac:	4596      	cmp	lr, r2
 80050ae:	d811      	bhi.n	80050d4 <__ieee754_sqrt+0xe4>
 80050b0:	f1be 0f00 	cmp.w	lr, #0
 80050b4:	eb0e 000c 	add.w	r0, lr, ip
 80050b8:	da56      	bge.n	8005168 <__ieee754_sqrt+0x178>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	db54      	blt.n	8005168 <__ieee754_sqrt+0x178>
 80050be:	f101 0801 	add.w	r8, r1, #1
 80050c2:	1a5b      	subs	r3, r3, r1
 80050c4:	4641      	mov	r1, r8
 80050c6:	4596      	cmp	lr, r2
 80050c8:	bf88      	it	hi
 80050ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80050ce:	eba2 020e 	sub.w	r2, r2, lr
 80050d2:	4464      	add	r4, ip
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	3f01      	subs	r7, #1
 80050d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80050dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80050e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80050e4:	d1dd      	bne.n	80050a2 <__ieee754_sqrt+0xb2>
 80050e6:	4313      	orrs	r3, r2
 80050e8:	d01b      	beq.n	8005122 <__ieee754_sqrt+0x132>
 80050ea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005198 <__ieee754_sqrt+0x1a8>
 80050ee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800519c <__ieee754_sqrt+0x1ac>
 80050f2:	e9da 0100 	ldrd	r0, r1, [sl]
 80050f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80050fa:	f7fb f83d 	bl	8000178 <__aeabi_dsub>
 80050fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4640      	mov	r0, r8
 8005108:	4649      	mov	r1, r9
 800510a:	f7fb fc69 	bl	80009e0 <__aeabi_dcmple>
 800510e:	b140      	cbz	r0, 8005122 <__ieee754_sqrt+0x132>
 8005110:	e9da 0100 	ldrd	r0, r1, [sl]
 8005114:	e9db 2300 	ldrd	r2, r3, [fp]
 8005118:	f1b4 3fff 	cmp.w	r4, #4294967295
 800511c:	d126      	bne.n	800516c <__ieee754_sqrt+0x17c>
 800511e:	463c      	mov	r4, r7
 8005120:	3501      	adds	r5, #1
 8005122:	106b      	asrs	r3, r5, #1
 8005124:	0864      	lsrs	r4, r4, #1
 8005126:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800512a:	07ea      	lsls	r2, r5, #31
 800512c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005130:	bf48      	it	mi
 8005132:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8005136:	4620      	mov	r0, r4
 8005138:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800513c:	e76d      	b.n	800501a <__ieee754_sqrt+0x2a>
 800513e:	0ae3      	lsrs	r3, r4, #11
 8005140:	3915      	subs	r1, #21
 8005142:	0564      	lsls	r4, r4, #21
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0fa      	beq.n	800513e <__ieee754_sqrt+0x14e>
 8005148:	02d8      	lsls	r0, r3, #11
 800514a:	d50a      	bpl.n	8005162 <__ieee754_sqrt+0x172>
 800514c:	f1c2 0020 	rsb	r0, r2, #32
 8005150:	fa24 f000 	lsr.w	r0, r4, r0
 8005154:	1e55      	subs	r5, r2, #1
 8005156:	4094      	lsls	r4, r2
 8005158:	4303      	orrs	r3, r0
 800515a:	1b4a      	subs	r2, r1, r5
 800515c:	e776      	b.n	800504c <__ieee754_sqrt+0x5c>
 800515e:	4611      	mov	r1, r2
 8005160:	e7f0      	b.n	8005144 <__ieee754_sqrt+0x154>
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	3201      	adds	r2, #1
 8005166:	e7ef      	b.n	8005148 <__ieee754_sqrt+0x158>
 8005168:	4688      	mov	r8, r1
 800516a:	e7aa      	b.n	80050c2 <__ieee754_sqrt+0xd2>
 800516c:	f7fb f806 	bl	800017c <__adddf3>
 8005170:	e9da 8900 	ldrd	r8, r9, [sl]
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb fc26 	bl	80009cc <__aeabi_dcmplt>
 8005180:	b120      	cbz	r0, 800518c <__ieee754_sqrt+0x19c>
 8005182:	1ca1      	adds	r1, r4, #2
 8005184:	bf08      	it	eq
 8005186:	3501      	addeq	r5, #1
 8005188:	3402      	adds	r4, #2
 800518a:	e7ca      	b.n	8005122 <__ieee754_sqrt+0x132>
 800518c:	3401      	adds	r4, #1
 800518e:	f024 0401 	bic.w	r4, r4, #1
 8005192:	e7c6      	b.n	8005122 <__ieee754_sqrt+0x132>
 8005194:	7ff00000 	.word	0x7ff00000
 8005198:	20000058 	.word	0x20000058
 800519c:	20000060 	.word	0x20000060

080051a0 <__ieee754_pow>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b093      	sub	sp, #76	; 0x4c
 80051a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051aa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80051ae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80051b2:	4689      	mov	r9, r1
 80051b4:	ea56 0102 	orrs.w	r1, r6, r2
 80051b8:	4680      	mov	r8, r0
 80051ba:	d111      	bne.n	80051e0 <__ieee754_pow+0x40>
 80051bc:	1803      	adds	r3, r0, r0
 80051be:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80051c2:	4152      	adcs	r2, r2
 80051c4:	4299      	cmp	r1, r3
 80051c6:	4b82      	ldr	r3, [pc, #520]	; (80053d0 <__ieee754_pow+0x230>)
 80051c8:	4193      	sbcs	r3, r2
 80051ca:	f080 84ba 	bcs.w	8005b42 <__ieee754_pow+0x9a2>
 80051ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d2:	4640      	mov	r0, r8
 80051d4:	4649      	mov	r1, r9
 80051d6:	f7fa ffd1 	bl	800017c <__adddf3>
 80051da:	4683      	mov	fp, r0
 80051dc:	468c      	mov	ip, r1
 80051de:	e06f      	b.n	80052c0 <__ieee754_pow+0x120>
 80051e0:	4b7c      	ldr	r3, [pc, #496]	; (80053d4 <__ieee754_pow+0x234>)
 80051e2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80051e6:	429c      	cmp	r4, r3
 80051e8:	464d      	mov	r5, r9
 80051ea:	4682      	mov	sl, r0
 80051ec:	dc06      	bgt.n	80051fc <__ieee754_pow+0x5c>
 80051ee:	d101      	bne.n	80051f4 <__ieee754_pow+0x54>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1ec      	bne.n	80051ce <__ieee754_pow+0x2e>
 80051f4:	429e      	cmp	r6, r3
 80051f6:	dc01      	bgt.n	80051fc <__ieee754_pow+0x5c>
 80051f8:	d10f      	bne.n	800521a <__ieee754_pow+0x7a>
 80051fa:	b172      	cbz	r2, 800521a <__ieee754_pow+0x7a>
 80051fc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005200:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005204:	ea55 050a 	orrs.w	r5, r5, sl
 8005208:	d1e1      	bne.n	80051ce <__ieee754_pow+0x2e>
 800520a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800520e:	18db      	adds	r3, r3, r3
 8005210:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005214:	4152      	adcs	r2, r2
 8005216:	429d      	cmp	r5, r3
 8005218:	e7d5      	b.n	80051c6 <__ieee754_pow+0x26>
 800521a:	2d00      	cmp	r5, #0
 800521c:	da39      	bge.n	8005292 <__ieee754_pow+0xf2>
 800521e:	4b6e      	ldr	r3, [pc, #440]	; (80053d8 <__ieee754_pow+0x238>)
 8005220:	429e      	cmp	r6, r3
 8005222:	dc52      	bgt.n	80052ca <__ieee754_pow+0x12a>
 8005224:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005228:	429e      	cmp	r6, r3
 800522a:	f340 849d 	ble.w	8005b68 <__ieee754_pow+0x9c8>
 800522e:	1533      	asrs	r3, r6, #20
 8005230:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005234:	2b14      	cmp	r3, #20
 8005236:	dd0f      	ble.n	8005258 <__ieee754_pow+0xb8>
 8005238:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800523c:	fa22 f103 	lsr.w	r1, r2, r3
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	4293      	cmp	r3, r2
 8005246:	f040 848f 	bne.w	8005b68 <__ieee754_pow+0x9c8>
 800524a:	f001 0101 	and.w	r1, r1, #1
 800524e:	f1c1 0302 	rsb	r3, r1, #2
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	b182      	cbz	r2, 8005278 <__ieee754_pow+0xd8>
 8005256:	e05d      	b.n	8005314 <__ieee754_pow+0x174>
 8005258:	2a00      	cmp	r2, #0
 800525a:	d159      	bne.n	8005310 <__ieee754_pow+0x170>
 800525c:	f1c3 0314 	rsb	r3, r3, #20
 8005260:	fa46 f103 	asr.w	r1, r6, r3
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	42b3      	cmp	r3, r6
 800526a:	f040 847a 	bne.w	8005b62 <__ieee754_pow+0x9c2>
 800526e:	f001 0101 	and.w	r1, r1, #1
 8005272:	f1c1 0302 	rsb	r3, r1, #2
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	4b58      	ldr	r3, [pc, #352]	; (80053dc <__ieee754_pow+0x23c>)
 800527a:	429e      	cmp	r6, r3
 800527c:	d132      	bne.n	80052e4 <__ieee754_pow+0x144>
 800527e:	2f00      	cmp	r7, #0
 8005280:	f280 846b 	bge.w	8005b5a <__ieee754_pow+0x9ba>
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	2000      	movs	r0, #0
 800528a:	4954      	ldr	r1, [pc, #336]	; (80053dc <__ieee754_pow+0x23c>)
 800528c:	f7fb fa56 	bl	800073c <__aeabi_ddiv>
 8005290:	e7a3      	b.n	80051da <__ieee754_pow+0x3a>
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2a00      	cmp	r2, #0
 8005298:	d13c      	bne.n	8005314 <__ieee754_pow+0x174>
 800529a:	4b4e      	ldr	r3, [pc, #312]	; (80053d4 <__ieee754_pow+0x234>)
 800529c:	429e      	cmp	r6, r3
 800529e:	d1eb      	bne.n	8005278 <__ieee754_pow+0xd8>
 80052a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80052a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80052a8:	ea53 030a 	orrs.w	r3, r3, sl
 80052ac:	f000 8449 	beq.w	8005b42 <__ieee754_pow+0x9a2>
 80052b0:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <__ieee754_pow+0x240>)
 80052b2:	429c      	cmp	r4, r3
 80052b4:	dd0b      	ble.n	80052ce <__ieee754_pow+0x12e>
 80052b6:	2f00      	cmp	r7, #0
 80052b8:	f2c0 8449 	blt.w	8005b4e <__ieee754_pow+0x9ae>
 80052bc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80052c0:	4658      	mov	r0, fp
 80052c2:	4661      	mov	r1, ip
 80052c4:	b013      	add	sp, #76	; 0x4c
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	2302      	movs	r3, #2
 80052cc:	e7e2      	b.n	8005294 <__ieee754_pow+0xf4>
 80052ce:	2f00      	cmp	r7, #0
 80052d0:	f04f 0b00 	mov.w	fp, #0
 80052d4:	f04f 0c00 	mov.w	ip, #0
 80052d8:	daf2      	bge.n	80052c0 <__ieee754_pow+0x120>
 80052da:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80052de:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80052e2:	e7ed      	b.n	80052c0 <__ieee754_pow+0x120>
 80052e4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80052e8:	d106      	bne.n	80052f8 <__ieee754_pow+0x158>
 80052ea:	4642      	mov	r2, r8
 80052ec:	464b      	mov	r3, r9
 80052ee:	4640      	mov	r0, r8
 80052f0:	4649      	mov	r1, r9
 80052f2:	f7fb f8f9 	bl	80004e8 <__aeabi_dmul>
 80052f6:	e770      	b.n	80051da <__ieee754_pow+0x3a>
 80052f8:	4b3a      	ldr	r3, [pc, #232]	; (80053e4 <__ieee754_pow+0x244>)
 80052fa:	429f      	cmp	r7, r3
 80052fc:	d10a      	bne.n	8005314 <__ieee754_pow+0x174>
 80052fe:	2d00      	cmp	r5, #0
 8005300:	db08      	blt.n	8005314 <__ieee754_pow+0x174>
 8005302:	4640      	mov	r0, r8
 8005304:	4649      	mov	r1, r9
 8005306:	b013      	add	sp, #76	; 0x4c
 8005308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	f7ff be70 	b.w	8004ff0 <__ieee754_sqrt>
 8005310:	2300      	movs	r3, #0
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7ff fe60 	bl	8004fdc <fabs>
 800531c:	4683      	mov	fp, r0
 800531e:	468c      	mov	ip, r1
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	d128      	bne.n	8005378 <__ieee754_pow+0x1d8>
 8005326:	b124      	cbz	r4, 8005332 <__ieee754_pow+0x192>
 8005328:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <__ieee754_pow+0x23c>)
 800532a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800532e:	429a      	cmp	r2, r3
 8005330:	d122      	bne.n	8005378 <__ieee754_pow+0x1d8>
 8005332:	2f00      	cmp	r7, #0
 8005334:	da07      	bge.n	8005346 <__ieee754_pow+0x1a6>
 8005336:	465a      	mov	r2, fp
 8005338:	4663      	mov	r3, ip
 800533a:	2000      	movs	r0, #0
 800533c:	4927      	ldr	r1, [pc, #156]	; (80053dc <__ieee754_pow+0x23c>)
 800533e:	f7fb f9fd 	bl	800073c <__aeabi_ddiv>
 8005342:	4683      	mov	fp, r0
 8005344:	468c      	mov	ip, r1
 8005346:	2d00      	cmp	r5, #0
 8005348:	daba      	bge.n	80052c0 <__ieee754_pow+0x120>
 800534a:	9b00      	ldr	r3, [sp, #0]
 800534c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005350:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005354:	431c      	orrs	r4, r3
 8005356:	d108      	bne.n	800536a <__ieee754_pow+0x1ca>
 8005358:	465a      	mov	r2, fp
 800535a:	4663      	mov	r3, ip
 800535c:	4658      	mov	r0, fp
 800535e:	4661      	mov	r1, ip
 8005360:	f7fa ff0a 	bl	8000178 <__aeabi_dsub>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	e790      	b.n	800528c <__ieee754_pow+0xec>
 800536a:	9b00      	ldr	r3, [sp, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d1a7      	bne.n	80052c0 <__ieee754_pow+0x120>
 8005370:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005374:	469c      	mov	ip, r3
 8005376:	e7a3      	b.n	80052c0 <__ieee754_pow+0x120>
 8005378:	0feb      	lsrs	r3, r5, #31
 800537a:	3b01      	subs	r3, #1
 800537c:	930c      	str	r3, [sp, #48]	; 0x30
 800537e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005380:	9b00      	ldr	r3, [sp, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	d104      	bne.n	8005390 <__ieee754_pow+0x1f0>
 8005386:	4642      	mov	r2, r8
 8005388:	464b      	mov	r3, r9
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	e7e7      	b.n	8005360 <__ieee754_pow+0x1c0>
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <__ieee754_pow+0x248>)
 8005392:	429e      	cmp	r6, r3
 8005394:	f340 80f6 	ble.w	8005584 <__ieee754_pow+0x3e4>
 8005398:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800539c:	429e      	cmp	r6, r3
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <__ieee754_pow+0x240>)
 80053a0:	dd09      	ble.n	80053b6 <__ieee754_pow+0x216>
 80053a2:	429c      	cmp	r4, r3
 80053a4:	dc0c      	bgt.n	80053c0 <__ieee754_pow+0x220>
 80053a6:	2f00      	cmp	r7, #0
 80053a8:	da0c      	bge.n	80053c4 <__ieee754_pow+0x224>
 80053aa:	2000      	movs	r0, #0
 80053ac:	b013      	add	sp, #76	; 0x4c
 80053ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b2:	f000 bcae 	b.w	8005d12 <__math_oflow>
 80053b6:	429c      	cmp	r4, r3
 80053b8:	dbf5      	blt.n	80053a6 <__ieee754_pow+0x206>
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <__ieee754_pow+0x23c>)
 80053bc:	429c      	cmp	r4, r3
 80053be:	dd15      	ble.n	80053ec <__ieee754_pow+0x24c>
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	dcf2      	bgt.n	80053aa <__ieee754_pow+0x20a>
 80053c4:	2000      	movs	r0, #0
 80053c6:	b013      	add	sp, #76	; 0x4c
 80053c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	f000 bc9c 	b.w	8005d08 <__math_uflow>
 80053d0:	fff00000 	.word	0xfff00000
 80053d4:	7ff00000 	.word	0x7ff00000
 80053d8:	433fffff 	.word	0x433fffff
 80053dc:	3ff00000 	.word	0x3ff00000
 80053e0:	3fefffff 	.word	0x3fefffff
 80053e4:	3fe00000 	.word	0x3fe00000
 80053e8:	41e00000 	.word	0x41e00000
 80053ec:	4661      	mov	r1, ip
 80053ee:	2200      	movs	r2, #0
 80053f0:	4658      	mov	r0, fp
 80053f2:	4b5f      	ldr	r3, [pc, #380]	; (8005570 <__ieee754_pow+0x3d0>)
 80053f4:	f7fa fec0 	bl	8000178 <__aeabi_dsub>
 80053f8:	a355      	add	r3, pc, #340	; (adr r3, 8005550 <__ieee754_pow+0x3b0>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4604      	mov	r4, r0
 8005400:	460d      	mov	r5, r1
 8005402:	f7fb f871 	bl	80004e8 <__aeabi_dmul>
 8005406:	a354      	add	r3, pc, #336	; (adr r3, 8005558 <__ieee754_pow+0x3b8>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	4620      	mov	r0, r4
 8005412:	4629      	mov	r1, r5
 8005414:	f7fb f868 	bl	80004e8 <__aeabi_dmul>
 8005418:	2200      	movs	r2, #0
 800541a:	4682      	mov	sl, r0
 800541c:	468b      	mov	fp, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	4b54      	ldr	r3, [pc, #336]	; (8005574 <__ieee754_pow+0x3d4>)
 8005424:	f7fb f860 	bl	80004e8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	a14c      	add	r1, pc, #304	; (adr r1, 8005560 <__ieee754_pow+0x3c0>)
 800542e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005432:	f7fa fea1 	bl	8000178 <__aeabi_dsub>
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	f7fb f855 	bl	80004e8 <__aeabi_dmul>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	2000      	movs	r0, #0
 8005444:	494c      	ldr	r1, [pc, #304]	; (8005578 <__ieee754_pow+0x3d8>)
 8005446:	f7fa fe97 	bl	8000178 <__aeabi_dsub>
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	4680      	mov	r8, r0
 8005450:	4689      	mov	r9, r1
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f7fb f847 	bl	80004e8 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4640      	mov	r0, r8
 8005460:	4649      	mov	r1, r9
 8005462:	f7fb f841 	bl	80004e8 <__aeabi_dmul>
 8005466:	a340      	add	r3, pc, #256	; (adr r3, 8005568 <__ieee754_pow+0x3c8>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f7fb f83c 	bl	80004e8 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4650      	mov	r0, sl
 8005476:	4659      	mov	r1, fp
 8005478:	f7fa fe7e 	bl	8000178 <__aeabi_dsub>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4604      	mov	r4, r0
 8005482:	460d      	mov	r5, r1
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	f7fa fe78 	bl	800017c <__adddf3>
 800548c:	2000      	movs	r0, #0
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	4682      	mov	sl, r0
 8005494:	468b      	mov	fp, r1
 8005496:	f7fa fe6f 	bl	8000178 <__aeabi_dsub>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fa fe69 	bl	8000178 <__aeabi_dsub>
 80054a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054ae:	3b01      	subs	r3, #1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f04f 0600 	mov.w	r6, #0
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	4b2f      	ldreq	r3, [pc, #188]	; (800557c <__ieee754_pow+0x3dc>)
 80054be:	4b2c      	ldrne	r3, [pc, #176]	; (8005570 <__ieee754_pow+0x3d0>)
 80054c0:	4604      	mov	r4, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c8:	e9cd 2300 	strd	r2, r3, [sp]
 80054cc:	4632      	mov	r2, r6
 80054ce:	463b      	mov	r3, r7
 80054d0:	f7fa fe52 	bl	8000178 <__aeabi_dsub>
 80054d4:	4652      	mov	r2, sl
 80054d6:	465b      	mov	r3, fp
 80054d8:	f7fb f806 	bl	80004e8 <__aeabi_dmul>
 80054dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e0:	4680      	mov	r8, r0
 80054e2:	4689      	mov	r9, r1
 80054e4:	4620      	mov	r0, r4
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7fa fffe 	bl	80004e8 <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fa fe42 	bl	800017c <__adddf3>
 80054f8:	4632      	mov	r2, r6
 80054fa:	463b      	mov	r3, r7
 80054fc:	4680      	mov	r8, r0
 80054fe:	4689      	mov	r9, r1
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fa fff0 	bl	80004e8 <__aeabi_dmul>
 8005508:	4604      	mov	r4, r0
 800550a:	460d      	mov	r5, r1
 800550c:	460b      	mov	r3, r1
 800550e:	4602      	mov	r2, r0
 8005510:	4649      	mov	r1, r9
 8005512:	4640      	mov	r0, r8
 8005514:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005518:	f7fa fe30 	bl	800017c <__adddf3>
 800551c:	4b18      	ldr	r3, [pc, #96]	; (8005580 <__ieee754_pow+0x3e0>)
 800551e:	4682      	mov	sl, r0
 8005520:	4299      	cmp	r1, r3
 8005522:	460f      	mov	r7, r1
 8005524:	460e      	mov	r6, r1
 8005526:	f340 82e7 	ble.w	8005af8 <__ieee754_pow+0x958>
 800552a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800552e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005532:	4303      	orrs	r3, r0
 8005534:	f000 81e2 	beq.w	80058fc <__ieee754_pow+0x75c>
 8005538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800553c:	2200      	movs	r2, #0
 800553e:	2300      	movs	r3, #0
 8005540:	f7fb fa44 	bl	80009cc <__aeabi_dcmplt>
 8005544:	3800      	subs	r0, #0
 8005546:	bf18      	it	ne
 8005548:	2001      	movne	r0, #1
 800554a:	e72f      	b.n	80053ac <__ieee754_pow+0x20c>
 800554c:	f3af 8000 	nop.w
 8005550:	60000000 	.word	0x60000000
 8005554:	3ff71547 	.word	0x3ff71547
 8005558:	f85ddf44 	.word	0xf85ddf44
 800555c:	3e54ae0b 	.word	0x3e54ae0b
 8005560:	55555555 	.word	0x55555555
 8005564:	3fd55555 	.word	0x3fd55555
 8005568:	652b82fe 	.word	0x652b82fe
 800556c:	3ff71547 	.word	0x3ff71547
 8005570:	3ff00000 	.word	0x3ff00000
 8005574:	3fd00000 	.word	0x3fd00000
 8005578:	3fe00000 	.word	0x3fe00000
 800557c:	bff00000 	.word	0xbff00000
 8005580:	408fffff 	.word	0x408fffff
 8005584:	4bd4      	ldr	r3, [pc, #848]	; (80058d8 <__ieee754_pow+0x738>)
 8005586:	2200      	movs	r2, #0
 8005588:	402b      	ands	r3, r5
 800558a:	b943      	cbnz	r3, 800559e <__ieee754_pow+0x3fe>
 800558c:	4658      	mov	r0, fp
 800558e:	4661      	mov	r1, ip
 8005590:	4bd2      	ldr	r3, [pc, #840]	; (80058dc <__ieee754_pow+0x73c>)
 8005592:	f7fa ffa9 	bl	80004e8 <__aeabi_dmul>
 8005596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800559a:	4683      	mov	fp, r0
 800559c:	460c      	mov	r4, r1
 800559e:	1523      	asrs	r3, r4, #20
 80055a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80055a4:	4413      	add	r3, r2
 80055a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055a8:	4bcd      	ldr	r3, [pc, #820]	; (80058e0 <__ieee754_pow+0x740>)
 80055aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80055ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80055b2:	429c      	cmp	r4, r3
 80055b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80055b8:	dd08      	ble.n	80055cc <__ieee754_pow+0x42c>
 80055ba:	4bca      	ldr	r3, [pc, #808]	; (80058e4 <__ieee754_pow+0x744>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	f340 8164 	ble.w	800588a <__ieee754_pow+0x6ea>
 80055c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80055c8:	3301      	adds	r3, #1
 80055ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80055cc:	2600      	movs	r6, #0
 80055ce:	00f3      	lsls	r3, r6, #3
 80055d0:	930d      	str	r3, [sp, #52]	; 0x34
 80055d2:	4bc5      	ldr	r3, [pc, #788]	; (80058e8 <__ieee754_pow+0x748>)
 80055d4:	4658      	mov	r0, fp
 80055d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055de:	4629      	mov	r1, r5
 80055e0:	461a      	mov	r2, r3
 80055e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80055e6:	4623      	mov	r3, r4
 80055e8:	f7fa fdc6 	bl	8000178 <__aeabi_dsub>
 80055ec:	46da      	mov	sl, fp
 80055ee:	462b      	mov	r3, r5
 80055f0:	4652      	mov	r2, sl
 80055f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80055f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055fa:	f7fa fdbf 	bl	800017c <__adddf3>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	2000      	movs	r0, #0
 8005604:	49b9      	ldr	r1, [pc, #740]	; (80058ec <__ieee754_pow+0x74c>)
 8005606:	f7fb f899 	bl	800073c <__aeabi_ddiv>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005612:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005616:	f7fa ff67 	bl	80004e8 <__aeabi_dmul>
 800561a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800561e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005622:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005626:	2300      	movs	r3, #0
 8005628:	2200      	movs	r2, #0
 800562a:	46ab      	mov	fp, r5
 800562c:	106d      	asrs	r5, r5, #1
 800562e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005638:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800563c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005640:	4640      	mov	r0, r8
 8005642:	4649      	mov	r1, r9
 8005644:	4614      	mov	r4, r2
 8005646:	461d      	mov	r5, r3
 8005648:	f7fa ff4e 	bl	80004e8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005654:	f7fa fd90 	bl	8000178 <__aeabi_dsub>
 8005658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800565c:	4606      	mov	r6, r0
 800565e:	460f      	mov	r7, r1
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fa fd88 	bl	8000178 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f7fa fd82 	bl	8000178 <__aeabi_dsub>
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	f7fa ff36 	bl	80004e8 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4630      	mov	r0, r6
 8005682:	4639      	mov	r1, r7
 8005684:	f7fa fd78 	bl	8000178 <__aeabi_dsub>
 8005688:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800568c:	f7fa ff2c 	bl	80004e8 <__aeabi_dmul>
 8005690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005694:	4682      	mov	sl, r0
 8005696:	468b      	mov	fp, r1
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	f7fa ff24 	bl	80004e8 <__aeabi_dmul>
 80056a0:	a37b      	add	r3, pc, #492	; (adr r3, 8005890 <__ieee754_pow+0x6f0>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	4604      	mov	r4, r0
 80056a8:	460d      	mov	r5, r1
 80056aa:	f7fa ff1d 	bl	80004e8 <__aeabi_dmul>
 80056ae:	a37a      	add	r3, pc, #488	; (adr r3, 8005898 <__ieee754_pow+0x6f8>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fa fd62 	bl	800017c <__adddf3>
 80056b8:	4622      	mov	r2, r4
 80056ba:	462b      	mov	r3, r5
 80056bc:	f7fa ff14 	bl	80004e8 <__aeabi_dmul>
 80056c0:	a377      	add	r3, pc, #476	; (adr r3, 80058a0 <__ieee754_pow+0x700>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa fd59 	bl	800017c <__adddf3>
 80056ca:	4622      	mov	r2, r4
 80056cc:	462b      	mov	r3, r5
 80056ce:	f7fa ff0b 	bl	80004e8 <__aeabi_dmul>
 80056d2:	a375      	add	r3, pc, #468	; (adr r3, 80058a8 <__ieee754_pow+0x708>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fd50 	bl	800017c <__adddf3>
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	f7fa ff02 	bl	80004e8 <__aeabi_dmul>
 80056e4:	a372      	add	r3, pc, #456	; (adr r3, 80058b0 <__ieee754_pow+0x710>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fd47 	bl	800017c <__adddf3>
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	f7fa fef9 	bl	80004e8 <__aeabi_dmul>
 80056f6:	a370      	add	r3, pc, #448	; (adr r3, 80058b8 <__ieee754_pow+0x718>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa fd3e 	bl	800017c <__adddf3>
 8005700:	4622      	mov	r2, r4
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	462b      	mov	r3, r5
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa feec 	bl	80004e8 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fa fee6 	bl	80004e8 <__aeabi_dmul>
 800571c:	4604      	mov	r4, r0
 800571e:	460d      	mov	r5, r1
 8005720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005724:	4642      	mov	r2, r8
 8005726:	464b      	mov	r3, r9
 8005728:	f7fa fd28 	bl	800017c <__adddf3>
 800572c:	4652      	mov	r2, sl
 800572e:	465b      	mov	r3, fp
 8005730:	f7fa feda 	bl	80004e8 <__aeabi_dmul>
 8005734:	4622      	mov	r2, r4
 8005736:	462b      	mov	r3, r5
 8005738:	f7fa fd20 	bl	800017c <__adddf3>
 800573c:	4642      	mov	r2, r8
 800573e:	4606      	mov	r6, r0
 8005740:	460f      	mov	r7, r1
 8005742:	464b      	mov	r3, r9
 8005744:	4640      	mov	r0, r8
 8005746:	4649      	mov	r1, r9
 8005748:	f7fa fece 	bl	80004e8 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005754:	2200      	movs	r2, #0
 8005756:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <__ieee754_pow+0x750>)
 8005758:	f7fa fd10 	bl	800017c <__adddf3>
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	f7fa fd0c 	bl	800017c <__adddf3>
 8005764:	2400      	movs	r4, #0
 8005766:	460d      	mov	r5, r1
 8005768:	4622      	mov	r2, r4
 800576a:	460b      	mov	r3, r1
 800576c:	4640      	mov	r0, r8
 800576e:	4649      	mov	r1, r9
 8005770:	f7fa feba 	bl	80004e8 <__aeabi_dmul>
 8005774:	2200      	movs	r2, #0
 8005776:	4680      	mov	r8, r0
 8005778:	4689      	mov	r9, r1
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	4b5c      	ldr	r3, [pc, #368]	; (80058f0 <__ieee754_pow+0x750>)
 8005780:	f7fa fcfa 	bl	8000178 <__aeabi_dsub>
 8005784:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005788:	f7fa fcf6 	bl	8000178 <__aeabi_dsub>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fcf0 	bl	8000178 <__aeabi_dsub>
 8005798:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800579c:	f7fa fea4 	bl	80004e8 <__aeabi_dmul>
 80057a0:	4622      	mov	r2, r4
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	462b      	mov	r3, r5
 80057a8:	4650      	mov	r0, sl
 80057aa:	4659      	mov	r1, fp
 80057ac:	f7fa fe9c 	bl	80004e8 <__aeabi_dmul>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fa fce0 	bl	800017c <__adddf3>
 80057bc:	2400      	movs	r4, #0
 80057be:	4606      	mov	r6, r0
 80057c0:	460f      	mov	r7, r1
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4640      	mov	r0, r8
 80057c8:	4649      	mov	r1, r9
 80057ca:	f7fa fcd7 	bl	800017c <__adddf3>
 80057ce:	a33c      	add	r3, pc, #240	; (adr r3, 80058c0 <__ieee754_pow+0x720>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	4620      	mov	r0, r4
 80057d6:	460d      	mov	r5, r1
 80057d8:	f7fa fe86 	bl	80004e8 <__aeabi_dmul>
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fa fcc6 	bl	8000178 <__aeabi_dsub>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fa fcc0 	bl	8000178 <__aeabi_dsub>
 80057f8:	a333      	add	r3, pc, #204	; (adr r3, 80058c8 <__ieee754_pow+0x728>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa fe73 	bl	80004e8 <__aeabi_dmul>
 8005802:	a333      	add	r3, pc, #204	; (adr r3, 80058d0 <__ieee754_pow+0x730>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	4606      	mov	r6, r0
 800580a:	460f      	mov	r7, r1
 800580c:	4620      	mov	r0, r4
 800580e:	4629      	mov	r1, r5
 8005810:	f7fa fe6a 	bl	80004e8 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fa fcae 	bl	800017c <__adddf3>
 8005820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005822:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <__ieee754_pow+0x754>)
 8005824:	4413      	add	r3, r2
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fca7 	bl	800017c <__adddf3>
 800582e:	4680      	mov	r8, r0
 8005830:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005832:	4689      	mov	r9, r1
 8005834:	f7fa fdee 	bl	8000414 <__aeabi_i2d>
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005842:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <__ieee754_pow+0x758>)
 8005844:	4413      	add	r3, r2
 8005846:	e9d3 6700 	ldrd	r6, r7, [r3]
 800584a:	4642      	mov	r2, r8
 800584c:	464b      	mov	r3, r9
 800584e:	f7fa fc95 	bl	800017c <__adddf3>
 8005852:	4632      	mov	r2, r6
 8005854:	463b      	mov	r3, r7
 8005856:	f7fa fc91 	bl	800017c <__adddf3>
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	f7fa fc8d 	bl	800017c <__adddf3>
 8005862:	2000      	movs	r0, #0
 8005864:	4622      	mov	r2, r4
 8005866:	462b      	mov	r3, r5
 8005868:	4682      	mov	sl, r0
 800586a:	468b      	mov	fp, r1
 800586c:	f7fa fc84 	bl	8000178 <__aeabi_dsub>
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	f7fa fc80 	bl	8000178 <__aeabi_dsub>
 8005878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800587c:	f7fa fc7c 	bl	8000178 <__aeabi_dsub>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	e60b      	b.n	80054a2 <__ieee754_pow+0x302>
 800588a:	2601      	movs	r6, #1
 800588c:	e69f      	b.n	80055ce <__ieee754_pow+0x42e>
 800588e:	bf00      	nop
 8005890:	4a454eef 	.word	0x4a454eef
 8005894:	3fca7e28 	.word	0x3fca7e28
 8005898:	93c9db65 	.word	0x93c9db65
 800589c:	3fcd864a 	.word	0x3fcd864a
 80058a0:	a91d4101 	.word	0xa91d4101
 80058a4:	3fd17460 	.word	0x3fd17460
 80058a8:	518f264d 	.word	0x518f264d
 80058ac:	3fd55555 	.word	0x3fd55555
 80058b0:	db6fabff 	.word	0xdb6fabff
 80058b4:	3fdb6db6 	.word	0x3fdb6db6
 80058b8:	33333303 	.word	0x33333303
 80058bc:	3fe33333 	.word	0x3fe33333
 80058c0:	e0000000 	.word	0xe0000000
 80058c4:	3feec709 	.word	0x3feec709
 80058c8:	dc3a03fd 	.word	0xdc3a03fd
 80058cc:	3feec709 	.word	0x3feec709
 80058d0:	145b01f5 	.word	0x145b01f5
 80058d4:	be3e2fe0 	.word	0xbe3e2fe0
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	43400000 	.word	0x43400000
 80058e0:	0003988e 	.word	0x0003988e
 80058e4:	000bb679 	.word	0x000bb679
 80058e8:	08005e20 	.word	0x08005e20
 80058ec:	3ff00000 	.word	0x3ff00000
 80058f0:	40080000 	.word	0x40080000
 80058f4:	08005e40 	.word	0x08005e40
 80058f8:	08005e30 	.word	0x08005e30
 80058fc:	a39c      	add	r3, pc, #624	; (adr r3, 8005b70 <__ieee754_pow+0x9d0>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fc39 	bl	800017c <__adddf3>
 800590a:	4622      	mov	r2, r4
 800590c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005910:	462b      	mov	r3, r5
 8005912:	4650      	mov	r0, sl
 8005914:	4639      	mov	r1, r7
 8005916:	f7fa fc2f 	bl	8000178 <__aeabi_dsub>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005922:	f7fb f871 	bl	8000a08 <__aeabi_dcmpgt>
 8005926:	2800      	cmp	r0, #0
 8005928:	f47f ae06 	bne.w	8005538 <__ieee754_pow+0x398>
 800592c:	4aa2      	ldr	r2, [pc, #648]	; (8005bb8 <__ieee754_pow+0xa18>)
 800592e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005932:	4293      	cmp	r3, r2
 8005934:	f340 8100 	ble.w	8005b38 <__ieee754_pow+0x998>
 8005938:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800593c:	151b      	asrs	r3, r3, #20
 800593e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005942:	fa4a fa03 	asr.w	sl, sl, r3
 8005946:	44b2      	add	sl, r6
 8005948:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800594c:	489b      	ldr	r0, [pc, #620]	; (8005bbc <__ieee754_pow+0xa1c>)
 800594e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005952:	4108      	asrs	r0, r1
 8005954:	ea00 030a 	and.w	r3, r0, sl
 8005958:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800595c:	f1c1 0114 	rsb	r1, r1, #20
 8005960:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005964:	fa4a fa01 	asr.w	sl, sl, r1
 8005968:	2e00      	cmp	r6, #0
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	bfb8      	it	lt
 8005974:	f1ca 0a00 	rsblt	sl, sl, #0
 8005978:	f7fa fbfe 	bl	8000178 <__aeabi_dsub>
 800597c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005984:	2400      	movs	r4, #0
 8005986:	4642      	mov	r2, r8
 8005988:	464b      	mov	r3, r9
 800598a:	f7fa fbf7 	bl	800017c <__adddf3>
 800598e:	a37a      	add	r3, pc, #488	; (adr r3, 8005b78 <__ieee754_pow+0x9d8>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	4620      	mov	r0, r4
 8005996:	460d      	mov	r5, r1
 8005998:	f7fa fda6 	bl	80004e8 <__aeabi_dmul>
 800599c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059a0:	4606      	mov	r6, r0
 80059a2:	460f      	mov	r7, r1
 80059a4:	4620      	mov	r0, r4
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7fa fbe6 	bl	8000178 <__aeabi_dsub>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4640      	mov	r0, r8
 80059b2:	4649      	mov	r1, r9
 80059b4:	f7fa fbe0 	bl	8000178 <__aeabi_dsub>
 80059b8:	a371      	add	r3, pc, #452	; (adr r3, 8005b80 <__ieee754_pow+0x9e0>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fd93 	bl	80004e8 <__aeabi_dmul>
 80059c2:	a371      	add	r3, pc, #452	; (adr r3, 8005b88 <__ieee754_pow+0x9e8>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	4680      	mov	r8, r0
 80059ca:	4689      	mov	r9, r1
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fd8a 	bl	80004e8 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fbce 	bl	800017c <__adddf3>
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fa fbc6 	bl	800017c <__adddf3>
 80059f0:	4632      	mov	r2, r6
 80059f2:	463b      	mov	r3, r7
 80059f4:	4680      	mov	r8, r0
 80059f6:	4689      	mov	r9, r1
 80059f8:	f7fa fbbe 	bl	8000178 <__aeabi_dsub>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7fa fbb8 	bl	8000178 <__aeabi_dsub>
 8005a08:	4642      	mov	r2, r8
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	464b      	mov	r3, r9
 8005a10:	4640      	mov	r0, r8
 8005a12:	4649      	mov	r1, r9
 8005a14:	f7fa fd68 	bl	80004e8 <__aeabi_dmul>
 8005a18:	a35d      	add	r3, pc, #372	; (adr r3, 8005b90 <__ieee754_pow+0x9f0>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	f7fa fd61 	bl	80004e8 <__aeabi_dmul>
 8005a26:	a35c      	add	r3, pc, #368	; (adr r3, 8005b98 <__ieee754_pow+0x9f8>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fba4 	bl	8000178 <__aeabi_dsub>
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	f7fa fd58 	bl	80004e8 <__aeabi_dmul>
 8005a38:	a359      	add	r3, pc, #356	; (adr r3, 8005ba0 <__ieee754_pow+0xa00>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fb9d 	bl	800017c <__adddf3>
 8005a42:	4622      	mov	r2, r4
 8005a44:	462b      	mov	r3, r5
 8005a46:	f7fa fd4f 	bl	80004e8 <__aeabi_dmul>
 8005a4a:	a357      	add	r3, pc, #348	; (adr r3, 8005ba8 <__ieee754_pow+0xa08>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fb92 	bl	8000178 <__aeabi_dsub>
 8005a54:	4622      	mov	r2, r4
 8005a56:	462b      	mov	r3, r5
 8005a58:	f7fa fd46 	bl	80004e8 <__aeabi_dmul>
 8005a5c:	a354      	add	r3, pc, #336	; (adr r3, 8005bb0 <__ieee754_pow+0xa10>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fb8b 	bl	800017c <__adddf3>
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	f7fa fd3d 	bl	80004e8 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4640      	mov	r0, r8
 8005a74:	4649      	mov	r1, r9
 8005a76:	f7fa fb7f 	bl	8000178 <__aeabi_dsub>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	460d      	mov	r5, r1
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fd2f 	bl	80004e8 <__aeabi_dmul>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fb6e 	bl	8000178 <__aeabi_dsub>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa4:	f7fa fe4a 	bl	800073c <__aeabi_ddiv>
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	463b      	mov	r3, r7
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa fd18 	bl	80004e8 <__aeabi_dmul>
 8005ab8:	4632      	mov	r2, r6
 8005aba:	463b      	mov	r3, r7
 8005abc:	f7fa fb5e 	bl	800017c <__adddf3>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7fa fb56 	bl	8000178 <__aeabi_dsub>
 8005acc:	4642      	mov	r2, r8
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f7fa fb52 	bl	8000178 <__aeabi_dsub>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	2000      	movs	r0, #0
 8005ada:	4939      	ldr	r1, [pc, #228]	; (8005bc0 <__ieee754_pow+0xa20>)
 8005adc:	f7fa fb4c 	bl	8000178 <__aeabi_dsub>
 8005ae0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005ae4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ae8:	da29      	bge.n	8005b3e <__ieee754_pow+0x99e>
 8005aea:	4652      	mov	r2, sl
 8005aec:	f000 f870 	bl	8005bd0 <scalbn>
 8005af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af4:	f7ff bbfd 	b.w	80052f2 <__ieee754_pow+0x152>
 8005af8:	4b32      	ldr	r3, [pc, #200]	; (8005bc4 <__ieee754_pow+0xa24>)
 8005afa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005afe:	429f      	cmp	r7, r3
 8005b00:	f77f af14 	ble.w	800592c <__ieee754_pow+0x78c>
 8005b04:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <__ieee754_pow+0xa28>)
 8005b06:	440b      	add	r3, r1
 8005b08:	4303      	orrs	r3, r0
 8005b0a:	d009      	beq.n	8005b20 <__ieee754_pow+0x980>
 8005b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2300      	movs	r3, #0
 8005b14:	f7fa ff5a 	bl	80009cc <__aeabi_dcmplt>
 8005b18:	3800      	subs	r0, #0
 8005b1a:	bf18      	it	ne
 8005b1c:	2001      	movne	r0, #1
 8005b1e:	e452      	b.n	80053c6 <__ieee754_pow+0x226>
 8005b20:	4622      	mov	r2, r4
 8005b22:	462b      	mov	r3, r5
 8005b24:	f7fa fb28 	bl	8000178 <__aeabi_dsub>
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	f7fa ff62 	bl	80009f4 <__aeabi_dcmpge>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f43f aefb 	beq.w	800592c <__ieee754_pow+0x78c>
 8005b36:	e7e9      	b.n	8005b0c <__ieee754_pow+0x96c>
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	e720      	b.n	8005980 <__ieee754_pow+0x7e0>
 8005b3e:	4621      	mov	r1, r4
 8005b40:	e7d6      	b.n	8005af0 <__ieee754_pow+0x950>
 8005b42:	f04f 0b00 	mov.w	fp, #0
 8005b46:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005bc0 <__ieee754_pow+0xa20>
 8005b4a:	f7ff bbb9 	b.w	80052c0 <__ieee754_pow+0x120>
 8005b4e:	f04f 0b00 	mov.w	fp, #0
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	f7ff bbb3 	b.w	80052c0 <__ieee754_pow+0x120>
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7ff bb3c 	b.w	80051da <__ieee754_pow+0x3a>
 8005b62:	9200      	str	r2, [sp, #0]
 8005b64:	f7ff bb88 	b.w	8005278 <__ieee754_pow+0xd8>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f7ff bb72 	b.w	8005252 <__ieee754_pow+0xb2>
 8005b6e:	bf00      	nop
 8005b70:	652b82fe 	.word	0x652b82fe
 8005b74:	3c971547 	.word	0x3c971547
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	3fe62e43 	.word	0x3fe62e43
 8005b80:	fefa39ef 	.word	0xfefa39ef
 8005b84:	3fe62e42 	.word	0x3fe62e42
 8005b88:	0ca86c39 	.word	0x0ca86c39
 8005b8c:	be205c61 	.word	0xbe205c61
 8005b90:	72bea4d0 	.word	0x72bea4d0
 8005b94:	3e663769 	.word	0x3e663769
 8005b98:	c5d26bf1 	.word	0xc5d26bf1
 8005b9c:	3ebbbd41 	.word	0x3ebbbd41
 8005ba0:	af25de2c 	.word	0xaf25de2c
 8005ba4:	3f11566a 	.word	0x3f11566a
 8005ba8:	16bebd93 	.word	0x16bebd93
 8005bac:	3f66c16c 	.word	0x3f66c16c
 8005bb0:	5555553e 	.word	0x5555553e
 8005bb4:	3fc55555 	.word	0x3fc55555
 8005bb8:	3fe00000 	.word	0x3fe00000
 8005bbc:	fff00000 	.word	0xfff00000
 8005bc0:	3ff00000 	.word	0x3ff00000
 8005bc4:	4090cbff 	.word	0x4090cbff
 8005bc8:	3f6f3400 	.word	0x3f6f3400
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <scalbn>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	4616      	mov	r6, r2
 8005bd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	460b      	mov	r3, r1
 8005bde:	b992      	cbnz	r2, 8005c06 <scalbn+0x36>
 8005be0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005be4:	4303      	orrs	r3, r0
 8005be6:	d03c      	beq.n	8005c62 <scalbn+0x92>
 8005be8:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <scalbn+0xe0>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	f7fa fc7c 	bl	80004e8 <__aeabi_dmul>
 8005bf0:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <scalbn+0xe4>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	429e      	cmp	r6, r3
 8005bf6:	460d      	mov	r5, r1
 8005bf8:	da0f      	bge.n	8005c1a <scalbn+0x4a>
 8005bfa:	a329      	add	r3, pc, #164	; (adr r3, 8005ca0 <scalbn+0xd0>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa fc72 	bl	80004e8 <__aeabi_dmul>
 8005c04:	e006      	b.n	8005c14 <scalbn+0x44>
 8005c06:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005c0a:	42ba      	cmp	r2, r7
 8005c0c:	d109      	bne.n	8005c22 <scalbn+0x52>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f7fa fab4 	bl	800017c <__adddf3>
 8005c14:	4604      	mov	r4, r0
 8005c16:	460d      	mov	r5, r1
 8005c18:	e023      	b.n	8005c62 <scalbn+0x92>
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c20:	3a36      	subs	r2, #54	; 0x36
 8005c22:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005c26:	428e      	cmp	r6, r1
 8005c28:	dd0e      	ble.n	8005c48 <scalbn+0x78>
 8005c2a:	a31f      	add	r3, pc, #124	; (adr r3, 8005ca8 <scalbn+0xd8>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005c34:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005c38:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005c3c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005c40:	481d      	ldr	r0, [pc, #116]	; (8005cb8 <scalbn+0xe8>)
 8005c42:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005c46:	e7db      	b.n	8005c00 <scalbn+0x30>
 8005c48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c4c:	4432      	add	r2, r6
 8005c4e:	428a      	cmp	r2, r1
 8005c50:	dceb      	bgt.n	8005c2a <scalbn+0x5a>
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	dd08      	ble.n	8005c68 <scalbn+0x98>
 8005c56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c6c:	da0c      	bge.n	8005c88 <scalbn+0xb8>
 8005c6e:	a30c      	add	r3, pc, #48	; (adr r3, 8005ca0 <scalbn+0xd0>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005c78:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005c7c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005c80:	480e      	ldr	r0, [pc, #56]	; (8005cbc <scalbn+0xec>)
 8005c82:	f041 011f 	orr.w	r1, r1, #31
 8005c86:	e7bb      	b.n	8005c00 <scalbn+0x30>
 8005c88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c8c:	3236      	adds	r2, #54	; 0x36
 8005c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <scalbn+0xf0>)
 8005c9e:	e7af      	b.n	8005c00 <scalbn+0x30>
 8005ca0:	c2f8f359 	.word	0xc2f8f359
 8005ca4:	01a56e1f 	.word	0x01a56e1f
 8005ca8:	8800759c 	.word	0x8800759c
 8005cac:	7e37e43c 	.word	0x7e37e43c
 8005cb0:	43500000 	.word	0x43500000
 8005cb4:	ffff3cb0 	.word	0xffff3cb0
 8005cb8:	8800759c 	.word	0x8800759c
 8005cbc:	c2f8f359 	.word	0xc2f8f359
 8005cc0:	3c900000 	.word	0x3c900000

08005cc4 <with_errno>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	4616      	mov	r6, r2
 8005ccc:	f7fe fae4 	bl	8004298 <__errno>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	6006      	str	r6, [r0, #0]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}

08005cd8 <xflow>:
 8005cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cda:	4615      	mov	r5, r2
 8005cdc:	461c      	mov	r4, r3
 8005cde:	b180      	cbz	r0, 8005d02 <xflow+0x2a>
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8005cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	f7fa fbf9 	bl	80004e8 <__aeabi_dmul>
 8005cf6:	2222      	movs	r2, #34	; 0x22
 8005cf8:	b003      	add	sp, #12
 8005cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cfe:	f7ff bfe1 	b.w	8005cc4 <with_errno>
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	e7ee      	b.n	8005ce6 <xflow+0xe>

08005d08 <__math_uflow>:
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d0e:	f7ff bfe3 	b.w	8005cd8 <xflow>

08005d12 <__math_oflow>:
 8005d12:	2200      	movs	r2, #0
 8005d14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005d18:	f7ff bfde 	b.w	8005cd8 <xflow>

08005d1c <_init>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr

08005d28 <_fini>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr
