
BetaRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003534  08003534  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003534  08003534  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003534  08003534  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800353c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000038  08003574  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003574  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004202  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000129d  00000000  00000000  000242a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  00025548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002cb  00000000  00000000  00025950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037fd  00000000  00000000  00025c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006aa6  00000000  00000000  00029418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cd63  00000000  00000000  0002febe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fa4  00000000  00000000  0003cc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	080034a4 	.word	0x080034a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	080034a4 	.word	0x080034a4

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	; 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	bf28      	it	cs
 8000b70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b74:	d2ed      	bcs.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_f2iz>:
 8000dbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dc4:	d30f      	bcc.n	8000de6 <__aeabi_f2iz+0x2a>
 8000dc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dce:	d90d      	bls.n	8000dec <__aeabi_f2iz+0x30>
 8000dd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ddc:	fa23 f002 	lsr.w	r0, r3, r2
 8000de0:	bf18      	it	ne
 8000de2:	4240      	negne	r0, r0
 8000de4:	4770      	bx	lr
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	4770      	bx	lr
 8000dec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000df0:	d101      	bne.n	8000df6 <__aeabi_f2iz+0x3a>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d105      	bne.n	8000e02 <__aeabi_f2iz+0x46>
 8000df6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dfa:	bf08      	it	eq
 8000dfc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4770      	bx	lr

08000e08 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 8000e14:	81bb      	strh	r3, [r7, #12]
 8000e16:	2304      	movs	r3, #4
 8000e18:	73bb      	strb	r3, [r7, #14]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber, &Motor_IN1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fec3 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 8000e32:	813b      	strh	r3, [r7, #8]
 8000e34:	2304      	movs	r3, #4
 8000e36:	72bb      	strb	r3, [r7, #10]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber, &Motor_IN2);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f107 0208 	add.w	r2, r7, #8
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 feb4 	bl	8001bb4 <MCAL_GPIO_Init>


//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6858      	ldr	r0, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	f000 ff3a 	bl	8001ce0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6858      	ldr	r0, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	885b      	ldrh	r3, [r3, #2]
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	f000 ff32 	bl	8001ce0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <Motor_TurnOff+0x48>)
 8000e82:	f000 ff2d 	bl	8001ce0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <Motor_TurnOff+0x48>)
 8000e8c:	f000 ff28 	bl	8001ce0 <MCAL_GPIO_WritePin>

	TIMER4_Stop();
 8000e90:	f001 fc4e 	bl	8002730 <TIMER4_Stop>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
//
//
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_HIGH);
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_HIGH);

	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_8M);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6898      	ldr	r0, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7b19      	ldrb	r1, [r3, #12]
 8000eb4:	78fa      	ldrb	r2, [r7, #3]
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	f001 f879 	bl	8001fb4 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6858      	ldr	r0, [r3, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f000 ff07 	bl	8001ce0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	f000 feff 	bl	8001ce0 <MCAL_GPIO_WritePin>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 8000efa:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <LCD_enuInit+0x1cc>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RS = {
 8000f04:	863b      	strh	r3, [r7, #48]	; 0x30
 8000f06:	2304      	movs	r3, #4
 8000f08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &RS);
 8000f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f16:	4619      	mov	r1, r3
 8000f18:	4868      	ldr	r0, [pc, #416]	; (80010bc <LCD_enuInit+0x1d0>)
 8000f1a:	f000 fe4b 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig_t EN = {
 8000f22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000f24:	2304      	movs	r3, #4
 8000f26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &EN);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4861      	ldr	r0, [pc, #388]	; (80010bc <LCD_enuInit+0x1d0>)
 8000f38:	f000 fe3c 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	895b      	ldrh	r3, [r3, #10]
	GPIO_PinConfig_t D7 = {
 8000f40:	853b      	strh	r3, [r7, #40]	; 0x28
 8000f42:	2304      	movs	r3, #4
 8000f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D7);
 8000f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4859      	ldr	r0, [pc, #356]	; (80010bc <LCD_enuInit+0x1d0>)
 8000f56:	f000 fe2d 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	899b      	ldrh	r3, [r3, #12]
	GPIO_PinConfig_t D6 = {
 8000f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f60:	2304      	movs	r3, #4
 8000f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f66:	2302      	movs	r3, #2
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D6);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4852      	ldr	r0, [pc, #328]	; (80010bc <LCD_enuInit+0x1d0>)
 8000f74:	f000 fe1e 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	89db      	ldrh	r3, [r3, #14]
	GPIO_PinConfig_t D5 = {
 8000f7c:	843b      	strh	r3, [r7, #32]
 8000f7e:	2304      	movs	r3, #4
 8000f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f84:	2302      	movs	r3, #2
 8000f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D5);
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	4619      	mov	r1, r3
 8000f90:	484a      	ldr	r0, [pc, #296]	; (80010bc <LCD_enuInit+0x1d0>)
 8000f92:	f000 fe0f 	bl	8001bb4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	8a1b      	ldrh	r3, [r3, #16]
	GPIO_PinConfig_t D4 = {
 8000f9a:	83bb      	strh	r3, [r7, #28]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	77bb      	strb	r3, [r7, #30]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D4);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4844      	ldr	r0, [pc, #272]	; (80010bc <LCD_enuInit+0x1d0>)
 8000fac:	f000 fe02 	bl	8001bb4 <MCAL_GPIO_Init>

	TIMER3_Init(RCC_CLK_8M);
 8000fb0:	2008      	movs	r0, #8
 8000fb2:	f000 ffa7 	bl	8001f04 <TIMER3_Init>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
	Delay_Timer3_ms(35); //power on
 8000fb6:	2023      	movs	r0, #35	; 0x23
 8000fb8:	f000 ffe4 	bl	8001f84 <Delay_Timer3_ms>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_LOW);

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d10a      	bne.n	8000fda <LCD_enuInit+0xee>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483b      	ldr	r0, [pc, #236]	; (80010bc <LCD_enuInit+0x1d0>)
 8000fce:	f000 fe87 	bl	8001ce0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f000 f874 	bl	80010c0 <LCD_enuWriteAndLatch>
 8000fd8:	e041      	b.n	800105e <LCD_enuInit+0x172>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d13d      	bne.n	800105e <LCD_enuInit+0x172>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	889b      	ldrh	r3, [r3, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4834      	ldr	r0, [pc, #208]	; (80010bc <LCD_enuInit+0x1d0>)
 8000fec:	f000 fe78 	bl	8001ce0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 8000ff0:	2038      	movs	r0, #56	; 0x38
 8000ff2:	f000 f865 	bl	80010c0 <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	8a5b      	ldrh	r3, [r3, #18]
		GPIO_PinConfig_t D3 = {
 8000ffa:	833b      	strh	r3, [r7, #24]
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	76bb      	strb	r3, [r7, #26]
 8001000:	2302      	movs	r3, #2
 8001002:	76fb      	strb	r3, [r7, #27]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D3);
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4619      	mov	r1, r3
 800100a:	482c      	ldr	r0, [pc, #176]	; (80010bc <LCD_enuInit+0x1d0>)
 800100c:	f000 fdd2 	bl	8001bb4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8a9b      	ldrh	r3, [r3, #20]
		GPIO_PinConfig_t D2 = {
 8001014:	82bb      	strh	r3, [r7, #20]
 8001016:	2304      	movs	r3, #4
 8001018:	75bb      	strb	r3, [r7, #22]
 800101a:	2302      	movs	r3, #2
 800101c:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D2);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4825      	ldr	r0, [pc, #148]	; (80010bc <LCD_enuInit+0x1d0>)
 8001026:	f000 fdc5 	bl	8001bb4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8adb      	ldrh	r3, [r3, #22]
		GPIO_PinConfig_t D1 = {
 800102e:	823b      	strh	r3, [r7, #16]
 8001030:	2304      	movs	r3, #4
 8001032:	74bb      	strb	r3, [r7, #18]
 8001034:	2302      	movs	r3, #2
 8001036:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D1);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <LCD_enuInit+0x1d0>)
 8001040:	f000 fdb8 	bl	8001bb4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8b1b      	ldrh	r3, [r3, #24]
		GPIO_PinConfig_t D0 = {
 8001048:	81bb      	strh	r3, [r7, #12]
 800104a:	2304      	movs	r3, #4
 800104c:	73bb      	strb	r3, [r7, #14]
 800104e:	2302      	movs	r3, #2
 8001050:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D0);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4818      	ldr	r0, [pc, #96]	; (80010bc <LCD_enuInit+0x1d0>)
 800105a:	f000 fdab 	bl	8001bb4 <MCAL_GPIO_Init>
	}


	Delay_Timer3_ms(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 ff90 	bl	8001f84 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <LCD_enuInit+0x1d0>)
 800106e:	f000 fe37 	bl	8001ce0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 8001072:	200c      	movs	r0, #12
 8001074:	f000 f824 	bl	80010c0 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f000 ff83 	bl	8001f84 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <LCD_enuInit+0x1d0>)
 8001088:	f000 fe2a 	bl	8001ce0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 f817 	bl	80010c0 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(3);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 ff76 	bl	8001f84 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <LCD_enuInit+0x1d0>)
 80010a2:	f000 fe1d 	bl	8001ce0 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 80010a6:	2006      	movs	r0, #6
 80010a8:	f000 f80a 	bl	80010c0 <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 80010ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3738      	adds	r7, #56	; 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000054 	.word	0x20000054
 80010bc:	40010c00 	.word	0x40010c00

080010c0 <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 80010ce:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	88db      	ldrh	r3, [r3, #6]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	487c      	ldr	r0, [pc, #496]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80010da:	f000 fe01 	bl	8001ce0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 80010de:	4b7a      	ldr	r3, [pc, #488]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	891b      	ldrh	r3, [r3, #8]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4878      	ldr	r0, [pc, #480]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80010ea:	f000 fdf9 	bl	8001ce0 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b28      	cmp	r3, #40	; 0x28
 80010f2:	d152      	bne.n	800119a <LCD_enuWriteAndLatch+0xda>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 80010f4:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	4619      	mov	r1, r3
 80010fc:	4873      	ldr	r0, [pc, #460]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80010fe:	f000 fdd8 	bl	8001cb2 <MCAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d146      	bne.n	800119a <LCD_enuWriteAndLatch+0xda>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 800110c:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	8959      	ldrh	r1, [r3, #10]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	09db      	lsrs	r3, r3, #7
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	486c      	ldr	r0, [pc, #432]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800111c:	f000 fde0 	bl	8001ce0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8001120:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	8999      	ldrh	r1, [r3, #12]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	4865      	ldr	r0, [pc, #404]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001136:	f000 fdd3 	bl	8001ce0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	89d9      	ldrh	r1, [r3, #14]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	485f      	ldr	r0, [pc, #380]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001150:	f000 fdc6 	bl	8001ce0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8001154:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	8a19      	ldrh	r1, [r3, #16]
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4858      	ldr	r0, [pc, #352]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800116a:	f000 fdb9 	bl	8001ce0 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	891b      	ldrh	r3, [r3, #8]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	4854      	ldr	r0, [pc, #336]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800117a:	f000 fdb1 	bl	8001ce0 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 ff00 	bl	8001f84 <Delay_Timer3_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	891b      	ldrh	r3, [r3, #8]
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	484f      	ldr	r0, [pc, #316]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001190:	f000 fda6 	bl	8001ce0 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f000 fef5 	bl	8001f84 <Delay_Timer3_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	f040 8095 	bne.w	80012d0 <LCD_enuWriteAndLatch+0x210>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	8959      	ldrh	r1, [r3, #10]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	09db      	lsrs	r3, r3, #7
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4845      	ldr	r0, [pc, #276]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80011b6:	f000 fd93 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	8999      	ldrh	r1, [r3, #12]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	483f      	ldr	r0, [pc, #252]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80011d0:	f000 fd86 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	89d9      	ldrh	r1, [r3, #14]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	4838      	ldr	r0, [pc, #224]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80011ea:	f000 fd79 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	8a19      	ldrh	r1, [r3, #16]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001204:	f000 fd6c 	bl	8001ce0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	891b      	ldrh	r3, [r3, #8]
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	482e      	ldr	r0, [pc, #184]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001214:	f000 fd64 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 feb3 	bl	8001f84 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	891b      	ldrh	r3, [r3, #8]
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800122a:	f000 fd59 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 fea8 	bl	8001f84 <Delay_Timer3_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	8959      	ldrh	r1, [r3, #10]
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800124a:	f000 fd49 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	8999      	ldrh	r1, [r3, #12]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001264:	f000 fd3c 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	89d9      	ldrh	r1, [r3, #14]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 800127e:	f000 fd2f 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	8a19      	ldrh	r1, [r3, #16]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 8001294:	f000 fd24 	bl	8001ce0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80012a4:	f000 fd1c 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 fe6b 	bl	8001f84 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LCD_enuWriteAndLatch+0x208>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <LCD_enuWriteAndLatch+0x20c>)
 80012ba:	f000 fd11 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fe60 	bl	8001f84 <Delay_Timer3_ms>
 80012c4:	e082      	b.n	80013cc <LCD_enuWriteAndLatch+0x30c>
 80012c6:	bf00      	nop
 80012c8:	20000054 	.word	0x20000054
 80012cc:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 80012d0:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d178      	bne.n	80013cc <LCD_enuWriteAndLatch+0x30c>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	8959      	ldrh	r1, [r3, #10]
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	09db      	lsrs	r3, r3, #7
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	483c      	ldr	r0, [pc, #240]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 80012ea:	f000 fcf9 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	8999      	ldrh	r1, [r3, #12]
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	099b      	lsrs	r3, r3, #6
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4836      	ldr	r0, [pc, #216]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 8001304:	f000 fcec 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	89d9      	ldrh	r1, [r3, #14]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 800131e:	f000 fcdf 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	8a19      	ldrh	r1, [r3, #16]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4829      	ldr	r0, [pc, #164]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 8001338:	f000 fcd2 	bl	8001ce0 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	8a59      	ldrh	r1, [r3, #18]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4822      	ldr	r0, [pc, #136]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 8001352:	f000 fcc5 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	8a99      	ldrh	r1, [r3, #20]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	481c      	ldr	r0, [pc, #112]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 800136c:	f000 fcb8 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	8ad9      	ldrh	r1, [r3, #22]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 8001386:	f000 fcab 	bl	8001ce0 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	8b19      	ldrh	r1, [r3, #24]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 800139c:	f000 fca0 	bl	8001ce0 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 80013ac:	f000 fc98 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fde7 	bl	8001f84 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LCD_enuWriteAndLatch+0x318>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	891b      	ldrh	r3, [r3, #8]
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <LCD_enuWriteAndLatch+0x31c>)
 80013c2:	f000 fc8d 	bl	8001ce0 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fddc 	bl	8001f84 <Delay_Timer3_ms>
	}

	return Local_ErrorState;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000054 	.word	0x20000054
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 80013ec:	e00e      	b.n	800140c <LCD_enuSendString+0x2c>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <LCD_enuSendString+0x40>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LCD_enuSendString+0x44>)
 80013fa:	f000 fc71 	bl	8001ce0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe5a 	bl	80010c0 <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1ec      	bne.n	80013ee <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000054 	.word	0x20000054
 8001424:	40010c00 	.word	0x40010c00

08001428 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <LCD_enuJumpCursorTo+0x94>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	889b      	ldrh	r3, [r3, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	481e      	ldr	r0, [pc, #120]	; (80014c0 <LCD_enuJumpCursorTo+0x98>)
 8001448:	f000 fc4a 	bl	8001ce0 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <LCD_enuJumpCursorTo+0x3c>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3b80      	subs	r3, #128	; 0x80
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fe31 	bl	80010c0 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e025      	b.n	80014b0 <LCD_enuJumpCursorTo+0x88>
	}

	else if (Copy_u8StartX_Position == 2) {
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d108      	bne.n	800147c <LCD_enuJumpCursorTo+0x54>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	3b40      	subs	r3, #64	; 0x40
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe25 	bl	80010c0 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e019      	b.n	80014b0 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 3) {
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d108      	bne.n	8001494 <LCD_enuJumpCursorTo+0x6c>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	3b6c      	subs	r3, #108	; 0x6c
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe19 	bl	80010c0 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e00d      	b.n	80014b0 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 4) {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d108      	bne.n	80014ac <LCD_enuJumpCursorTo+0x84>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	3b2c      	subs	r3, #44	; 0x2c
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe0d 	bl	80010c0 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e001      	b.n	80014b0 <LCD_enuJumpCursorTo+0x88>
	} else {
		Local_ErrorState = ES_NOT_OK;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000054 	.word	0x20000054
 80014c0:	40010c00 	.word	0x40010c00

080014c4 <LCD_enuDisplayIntNum>:
//
//
//	return Local_ErrorState;
//}

ES_t LCD_enuDisplayIntNum(int Copy_s32IntNumber) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 80014cc:	2301      	movs	r3, #1
 80014ce:	74bb      	strb	r3, [r7, #18]

	uint32_t Local_u32Remainder;
	uint32_t Local_u32ReverseNum = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
	uint8_t Local_u8DigitsNum = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	74fb      	strb	r3, [r7, #19]
	/******** number given will be displayed reversely cause of LCD prints each number of the whole number individually ******/
	/*********  so we will reverse the whole number just to be displayed correctly at the end of function **********/
	if (Copy_s32IntNumber < 0) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da0d      	bge.n	80014fa <LCD_enuDisplayIntNum+0x36>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   //high for data
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <LCD_enuDisplayIntNum+0xf4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	4834      	ldr	r0, [pc, #208]	; (80015bc <LCD_enuDisplayIntNum+0xf8>)
 80014ea:	f000 fbf9 	bl	8001ce0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch('-');
 80014ee:	202d      	movs	r0, #45	; 0x2d
 80014f0:	f7ff fde6 	bl	80010c0 <LCD_enuWriteAndLatch>

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	425b      	negs	r3, r3
 80014f8:	607b      	str	r3, [r7, #4]
	}
	if(Copy_s32IntNumber == 0){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12c      	bne.n	800155a <LCD_enuDisplayIntNum+0x96>
    	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   // High for Data
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <LCD_enuDisplayIntNum+0xf4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <LCD_enuDisplayIntNum+0xf8>)
 800150c:	f000 fbe8 	bl	8001ce0 <MCAL_GPIO_WritePin>
    	LCD_enuWriteAndLatch('0');
 8001510:	2030      	movs	r0, #48	; 0x30
 8001512:	f7ff fdd5 	bl	80010c0 <LCD_enuWriteAndLatch>
	}
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 8001516:	e020      	b.n	800155a <LCD_enuDisplayIntNum+0x96>
			{
		Local_u32Remainder = Copy_s32IntNumber % 10;
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <LCD_enuDisplayIntNum+0xfc>)
 800151c:	fb83 2301 	smull	r2, r3, r3, r1
 8001520:	109a      	asrs	r2, r3, #2
 8001522:	17cb      	asrs	r3, r1, #31
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	1aca      	subs	r2, r1, r3
 8001530:	60fa      	str	r2, [r7, #12]
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	461a      	mov	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
		Local_u8DigitsNum++; //counting number of digits for the original number
 8001544:	7cfb      	ldrb	r3, [r7, #19]
 8001546:	3301      	adds	r3, #1
 8001548:	74fb      	strb	r3, [r7, #19]
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <LCD_enuDisplayIntNum+0xfc>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1092      	asrs	r2, r2, #2
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dcdb      	bgt.n	8001518 <LCD_enuDisplayIntNum+0x54>
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 8001560:	e022      	b.n	80015a8 <LCD_enuDisplayIntNum+0xe4>
			{ // for number of cycles equal to Local_u8DigitsNum , print digits

		uint8_t Local_u8NumToPrint = Local_u32ReverseNum % 10;
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <LCD_enuDisplayIntNum+0x100>)
 8001566:	fba3 2301 	umull	r2, r3, r3, r1
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	1aca      	subs	r2, r1, r3
 8001576:	4613      	mov	r3, r2
 8001578:	747b      	strb	r3, [r7, #17]
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH); //high for data
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <LCD_enuDisplayIntNum+0xf4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LCD_enuDisplayIntNum+0xf8>)
 8001586:	f000 fbab 	bl	8001ce0 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
 800158a:	7c7b      	ldrb	r3, [r7, #17]
 800158c:	3330      	adds	r3, #48	; 0x30
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fd95 	bl	80010c0 <LCD_enuWriteAndLatch>
		Local_u8DigitsNum--;
 8001596:	7cfb      	ldrb	r3, [r7, #19]
 8001598:	3b01      	subs	r3, #1
 800159a:	74fb      	strb	r3, [r7, #19]
	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <LCD_enuDisplayIntNum+0x100>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	7cfb      	ldrb	r3, [r7, #19]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1d9      	bne.n	8001562 <LCD_enuDisplayIntNum+0x9e>
	}

	return Local_ErrorState;
 80015ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000054 	.word	0x20000054
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	66666667 	.word	0x66666667
 80015c4:	cccccccd 	.word	0xcccccccd

080015c8 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 80015d4:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 80015da:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 80015e0:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	881a      	ldrh	r2, [r3, #0]
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Stepper_Init+0x40>)
 80015e8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <Stepper_Init+0x44>)
 80015f2:	f000 fadf 	bl	8001bb4 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_LOW);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <Stepper_Init+0x48>)
 80015fc:	f000 fb70 	bl	8001ce0 <MCAL_GPIO_WritePin>

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000058 	.word	0x20000058
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40010800 	.word	0x40010800

08001614 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	70fb      	strb	r3, [r7, #3]
 8001626:	460b      	mov	r3, r1
 8001628:	803b      	strh	r3, [r7, #0]
 800162a:	4613      	mov	r3, r2
 800162c:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 800162e:	7d3b      	ldrb	r3, [r7, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <Stepper_Move_Steps+0x26>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d008      	beq.n	800164a <Stepper_Move_Steps+0x36>
 8001638:	e00f      	b.n	800165a <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <Stepper_Move_Steps+0x64>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <Stepper_Move_Steps+0x68>)
 8001644:	f000 fb4c 	bl	8001ce0 <MCAL_GPIO_WritePin>
		break;
 8001648:	e007      	b.n	800165a <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <Stepper_Move_Steps+0x64>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <Stepper_Move_Steps+0x68>)
 8001654:	f000 fb44 	bl	8001ce0 <MCAL_GPIO_WritePin>
		break;
 8001658:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_8M);
 800165a:	78b8      	ldrb	r0, [r7, #2]
 800165c:	883a      	ldrh	r2, [r7, #0]
 800165e:	78f9      	ldrb	r1, [r7, #3]
 8001660:	2308      	movs	r3, #8
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4603      	mov	r3, r0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f001 f86e 	bl	800274c <PWM_Move_Steps>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000058 	.word	0x20000058
 800167c:	40010c00 	.word	0x40010c00

08001680 <HC_SR04_Init>:
/********************************************************************/

#include "UltraSonic_Private.h"


ES_t HC_SR04_Init(HC_SR04_Config_t* Copy_pArrUltrasonicConfigs) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	TIMER3_Init(RCC_CLK_8M);
 8001688:	2008      	movs	r0, #8
 800168a:	f000 fc3b 	bl	8001f04 <TIMER3_Init>

	uint8_t Local_Iterator = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
 8001696:	e024      	b.n	80016e2 <HC_SR04_Init+0x62>

		GPIO_PinConfig_t Trigger = {
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].triggerPin,
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	791b      	ldrb	r3, [r3, #4]
 80016a2:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Trigger = {
 80016a4:	823b      	strh	r3, [r7, #16]
 80016a6:	2304      	movs	r3, #4
 80016a8:	74bb      	strb	r3, [r7, #18]
 80016aa:	2302      	movs	r3, #2
 80016ac:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOA, &Trigger);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <HC_SR04_Init+0x7c>)
 80016b6:	f000 fa7d 	bl	8001bb4 <MCAL_GPIO_Init>

		GPIO_PinConfig_t Echo = {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].echoPin,
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	795b      	ldrb	r3, [r3, #5]
 80016c8:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Echo = {
 80016ca:	81bb      	strh	r3, [r7, #12]
 80016cc:	2301      	movs	r3, #1
 80016ce:	73bb      	strb	r3, [r7, #14]
				.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
		};

		MCAL_GPIO_Init(GPIOA, &Echo);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <HC_SR04_Init+0x7c>)
 80016d8:	f000 fa6c 	bl	8001bb4 <MCAL_GPIO_Init>
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	3301      	adds	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HC_SR04_Init+0x80>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3d5      	bcc.n	8001698 <HC_SR04_Init+0x18>
	}


	Private_pConfigs = Copy_pArrUltrasonicConfigs;
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HC_SR04_Init+0x84>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]

    return ES_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010800 	.word	0x40010800
 8001700:	2000001a 	.word	0x2000001a
 8001704:	2000005c 	.word	0x2000005c

08001708 <HC_SR04_Trigger>:

void HC_SR04_Trigger(uint8_t Sensor_Num) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    // Send a 10us pulse on the trigger pin to initiate measurement
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_HIGH);
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HC_SR04_Trigger+0x48>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	2201      	movs	r2, #1
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <HC_SR04_Trigger+0x4c>)
 8001726:	f000 fadb 	bl	8001ce0 <MCAL_GPIO_WritePin>
    Delay_Timer3_us(10); // Delay for 10us
 800172a:	200a      	movs	r0, #10
 800172c:	f000 fc14 	bl	8001f58 <Delay_Timer3_us>
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_LOW);
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HC_SR04_Trigger+0x48>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	791b      	ldrb	r3, [r3, #4]
 800173c:	b29b      	uxth	r3, r3
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <HC_SR04_Trigger+0x4c>)
 8001744:	f000 facc 	bl	8001ce0 <MCAL_GPIO_WritePin>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000005c 	.word	0x2000005c
 8001754:	40010800 	.word	0x40010800

08001758 <HC_SR04_ReadDistance>:

ES_t HC_SR04_ReadDistance(uint8_t Sensor_Num,uint32_t* distance_cm) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
    // Send trigger signal to start measurement
    HC_SR04_Trigger(Sensor_Num);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffce 	bl	8001708 <HC_SR04_Trigger>

    uint8_t echoValue;
    // Wait for the rising edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <HC_SR04_ReadDistance+0xc8>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HC_SR04_ReadDistance+0xc8>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	795b      	ldrb	r3, [r3, #5]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	f000 fa93 	bl	8001cb2 <MCAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]
    }
    while ( echoValue == GPIO_PIN_LOW);
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ea      	beq.n	800176c <HC_SR04_ReadDistance+0x14>

    uint32_t startTime = Get_TIMER3_Counter();
 8001796:	f000 ffc1 	bl	800271c <Get_TIMER3_Counter>
 800179a:	6138      	str	r0, [r7, #16]
//    STK_enuGetElapsedTimeUs(&startTime);

    // Wait for the falling edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HC_SR04_ReadDistance+0xc8>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HC_SR04_ReadDistance+0xc8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	f000 fa7b 	bl	8001cb2 <MCAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]
    }
    while (echoValue == GPIO_PIN_HIGH);
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d0ea      	beq.n	800179c <HC_SR04_ReadDistance+0x44>

    uint32_t endTime = Get_TIMER3_Counter();
 80017c6:	f000 ffa9 	bl	800271c <Get_TIMER3_Counter>
 80017ca:	60f8      	str	r0, [r7, #12]
//    STK_enuGetElapsedTimeUs(&endTime);

    // Calculate distance in centimeters
    uint32_t pulseDuration = endTime - startTime;
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	60bb      	str	r3, [r7, #8]
    *distance_cm = (pulseDuration * 0.0343) / 2; // Speed of sound is approximately 343 m/s
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f7fe fec1 	bl	800055c <__aeabi_ui2d>
 80017da:	a30f      	add	r3, pc, #60	; (adr r3, 8001818 <HC_SR04_ReadDistance+0xc0>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff36 	bl	8000650 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f4:	f7ff f856 	bl	80008a4 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f938 	bl	8000a74 <__aeabi_d2uiz>
 8001804:	4602      	mov	r2, r0
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]

    return ES_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	04816f00 	.word	0x04816f00
 800181c:	3fa18fc5 	.word	0x3fa18fc5
 8001820:	2000005c 	.word	0x2000005c

08001824 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <EXTI0_IRQHandler+0x1c>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <EXTI0_IRQHandler+0x1c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <EXTI0_IRQHandler+0x20>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4798      	blx	r3

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010400 	.word	0x40010400
 8001844:	20000060 	.word	0x20000060

08001848 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <EXTI1_IRQHandler+0x1c>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <EXTI1_IRQHandler+0x1c>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <EXTI1_IRQHandler+0x20>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4798      	blx	r3
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40010400 	.word	0x40010400
 8001868:	20000060 	.word	0x20000060

0800186c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <EXTI2_IRQHandler+0x1c>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <EXTI2_IRQHandler+0x1c>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <EXTI2_IRQHandler+0x20>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4798      	blx	r3
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40010400 	.word	0x40010400
 800188c:	20000060 	.word	0x20000060

08001890 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <EXTI3_IRQHandler+0x1c>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <EXTI3_IRQHandler+0x1c>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <EXTI3_IRQHandler+0x20>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4798      	blx	r3
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40010400 	.word	0x40010400
 80018b0:	20000060 	.word	0x20000060

080018b4 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <EXTI4_IRQHandler+0x1c>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <EXTI4_IRQHandler+0x1c>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <EXTI4_IRQHandler+0x20>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4798      	blx	r3
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010400 	.word	0x40010400
 80018d4:	20000060 	.word	0x20000060

080018d8 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <EXTI9_5_IRQHandler+0x22>
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6153      	str	r3, [r2, #20]
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <EXTI9_5_IRQHandler+0xa4>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <EXTI9_5_IRQHandler+0x40>
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 800190c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <EXTI9_5_IRQHandler+0xa4>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <EXTI9_5_IRQHandler+0x5e>
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 800192a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192e:	6153      	str	r3, [r2, #20]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <EXTI9_5_IRQHandler+0xa4>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <EXTI9_5_IRQHandler+0x7c>
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6153      	str	r3, [r2, #20]
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <EXTI9_5_IRQHandler+0xa4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <EXTI9_5_IRQHandler+0x9a>
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <EXTI9_5_IRQHandler+0xa0>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6153      	str	r3, [r2, #20]
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <EXTI9_5_IRQHandler+0xa4>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	4798      	blx	r3
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40010400 	.word	0x40010400
 800197c:	20000060 	.word	0x20000060

08001980 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <EXTI15_10_IRQHandler+0x22>
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6153      	str	r3, [r2, #20]
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <EXTI15_10_IRQHandler+0x40>
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b8:	6153      	str	r3, [r2, #20]
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <EXTI15_10_IRQHandler+0x5e>
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d6:	6153      	str	r3, [r2, #20]
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <EXTI15_10_IRQHandler+0x7c>
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <EXTI15_10_IRQHandler+0x9a>
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a12:	6153      	str	r3, [r2, #20]
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <EXTI15_10_IRQHandler+0xb8>
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <EXTI15_10_IRQHandler+0xbc>)
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a30:	6153      	str	r3, [r2, #20]
 8001a32:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <EXTI15_10_IRQHandler+0xc0>)
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	4798      	blx	r3
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40010400 	.word	0x40010400
 8001a40:	20000060 	.word	0x20000060

08001a44 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a54:	f000 80a5 	beq.w	8001ba2 <Get_CRLH_Position+0x15e>
 8001a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5c:	f300 80a3 	bgt.w	8001ba6 <Get_CRLH_Position+0x162>
 8001a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a64:	f000 809b 	beq.w	8001b9e <Get_CRLH_Position+0x15a>
 8001a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6c:	f300 809b 	bgt.w	8001ba6 <Get_CRLH_Position+0x162>
 8001a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a74:	f000 8091 	beq.w	8001b9a <Get_CRLH_Position+0x156>
 8001a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7c:	f300 8093 	bgt.w	8001ba6 <Get_CRLH_Position+0x162>
 8001a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a84:	f000 8087 	beq.w	8001b96 <Get_CRLH_Position+0x152>
 8001a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8c:	f300 808b 	bgt.w	8001ba6 <Get_CRLH_Position+0x162>
 8001a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a94:	d07d      	beq.n	8001b92 <Get_CRLH_Position+0x14e>
 8001a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a9a:	f300 8084 	bgt.w	8001ba6 <Get_CRLH_Position+0x162>
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa2:	d074      	beq.n	8001b8e <Get_CRLH_Position+0x14a>
 8001aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa8:	dc7d      	bgt.n	8001ba6 <Get_CRLH_Position+0x162>
 8001aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aae:	d06c      	beq.n	8001b8a <Get_CRLH_Position+0x146>
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab4:	dc77      	bgt.n	8001ba6 <Get_CRLH_Position+0x162>
 8001ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aba:	d064      	beq.n	8001b86 <Get_CRLH_Position+0x142>
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac0:	dc71      	bgt.n	8001ba6 <Get_CRLH_Position+0x162>
 8001ac2:	2b80      	cmp	r3, #128	; 0x80
 8001ac4:	d05d      	beq.n	8001b82 <Get_CRLH_Position+0x13e>
 8001ac6:	2b80      	cmp	r3, #128	; 0x80
 8001ac8:	dc6d      	bgt.n	8001ba6 <Get_CRLH_Position+0x162>
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	dc48      	bgt.n	8001b60 <Get_CRLH_Position+0x11c>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dd69      	ble.n	8001ba6 <Get_CRLH_Position+0x162>
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	d866      	bhi.n	8001ba6 <Get_CRLH_Position+0x162>
 8001ad8:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <Get_CRLH_Position+0x9c>)
 8001ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ade:	bf00      	nop
 8001ae0:	08001b67 	.word	0x08001b67
 8001ae4:	08001b6b 	.word	0x08001b6b
 8001ae8:	08001ba7 	.word	0x08001ba7
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001ba7 	.word	0x08001ba7
 8001af4:	08001ba7 	.word	0x08001ba7
 8001af8:	08001ba7 	.word	0x08001ba7
 8001afc:	08001b73 	.word	0x08001b73
 8001b00:	08001ba7 	.word	0x08001ba7
 8001b04:	08001ba7 	.word	0x08001ba7
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001b77 	.word	0x08001b77
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001ba7 	.word	0x08001ba7
 8001b40:	08001ba7 	.word	0x08001ba7
 8001b44:	08001ba7 	.word	0x08001ba7
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001ba7 	.word	0x08001ba7
 8001b50:	08001ba7 	.word	0x08001ba7
 8001b54:	08001ba7 	.word	0x08001ba7
 8001b58:	08001ba7 	.word	0x08001ba7
 8001b5c:	08001b7b 	.word	0x08001b7b
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d00c      	beq.n	8001b7e <Get_CRLH_Position+0x13a>
 8001b64:	e01f      	b.n	8001ba6 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e01e      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e01c      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e01a      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001b72:	230c      	movs	r3, #12
 8001b74:	e018      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001b76:	2310      	movs	r3, #16
 8001b78:	e016      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	e014      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001b7e:	2318      	movs	r3, #24
 8001b80:	e012      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001b82:	231c      	movs	r3, #28
 8001b84:	e010      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e00e      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e00c      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	e00a      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001b92:	230c      	movs	r3, #12
 8001b94:	e008      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001b96:	2310      	movs	r3, #16
 8001b98:	e006      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	e004      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001b9e:	2318      	movs	r3, #24
 8001ba0:	e002      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001ba2:	231c      	movs	r3, #28
 8001ba4:	e000      	b.n	8001ba8 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d801      	bhi.n	8001bd2 <MCAL_GPIO_Init+0x1e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	e001      	b.n	8001bd6 <MCAL_GPIO_Init+0x22>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff31 	bl	8001a44 <Get_CRLH_Position>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	230f      	movs	r3, #15
 8001be8:	4093      	lsls	r3, r2
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	d00b      	beq.n	8001c16 <MCAL_GPIO_Init+0x62>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d007      	beq.n	8001c16 <MCAL_GPIO_Init+0x62>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d003      	beq.n	8001c16 <MCAL_GPIO_Init+0x62>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d10e      	bne.n	8001c34 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	789b      	ldrb	r3, [r3, #2]
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e02c      	b.n	8001c8e <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d003      	beq.n	8001c44 <MCAL_GPIO_Init+0x90>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e01c      	b.n	8001c8e <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	789b      	ldrb	r3, [r3, #2]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d102      	bne.n	8001c62 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e015      	b.n	8001c8e <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001c62:	2308      	movs	r3, #8
 8001c64:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	789b      	ldrb	r3, [r3, #2]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	e007      	b.n	8001c8e <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	43d2      	mvns	r2, r2
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001c8e:	7bfc      	ldrb	r4, [r7, #15]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fed5 	bl	8001a44 <Get_CRLH_Position>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	fa04 f203 	lsl.w	r2, r4, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	601a      	str	r2, [r3, #0]


}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}

08001cb2 <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e001      	b.n	8001cd4 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8001cfc:	e002      	b.n	8001d04 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	615a      	str	r2, [r3, #20]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <I2C1_EV_IRQHandler+0xec>)
 8001d1c:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <I2C1_EV_IRQHandler+0x48>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8001d50:	2100      	movs	r1, #0
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f000 f866 	bl	8001e24 <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d014      	beq.n	8001d92 <I2C1_EV_IRQHandler+0x82>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d011      	beq.n	8001d92 <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10b      	bne.n	8001d92 <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f000 f849 	bl	8001e24 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00f      	beq.n	8001dc2 <I2C1_EV_IRQHandler+0xb2>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <I2C1_EV_IRQHandler+0xb2>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001dba:	2103      	movs	r1, #3
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f000 f831 	bl	8001e24 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00f      	beq.n	8001df2 <I2C1_EV_IRQHandler+0xe2>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <I2C1_EV_IRQHandler+0xe2>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001dea:	2104      	movs	r1, #4
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f000 f819 	bl	8001e24 <Slave_States>

		}
	}

}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40005400 	.word	0x40005400

08001e00 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <Slave_States+0xd8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d856      	bhi.n	8001ef4 <Slave_States+0xd0>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <Slave_States+0x28>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e67 	.word	0x08001e67
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e8b 	.word	0x08001e8b
 8001e58:	08001ea3 	.word	0x08001ea3
 8001e5c:	08001ec7 	.word	0x08001ec7
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001e64:	e046      	b.n	8001ef4 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03b      	beq.n	8001eea <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	4922      	ldr	r1, [pc, #136]	; (8001f00 <Slave_States+0xdc>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3320      	adds	r3, #32
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2000      	movs	r0, #0
 8001e86:	4798      	blx	r3
		}

		break ;
 8001e88:	e02f      	b.n	8001eea <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	491c      	ldr	r1, [pc, #112]	; (8001f00 <Slave_States+0xdc>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3320      	adds	r3, #32
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	4798      	blx	r3

		break ;
 8001ea0:	e028      	b.n	8001ef4 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01f      	beq.n	8001eee <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	4913      	ldr	r1, [pc, #76]	; (8001f00 <Slave_States+0xdc>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	3320      	adds	r3, #32
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	4798      	blx	r3
		}

		break ;
 8001ec4:	e013      	b.n	8001eee <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	490a      	ldr	r1, [pc, #40]	; (8001f00 <Slave_States+0xdc>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2004      	movs	r0, #4
 8001ee6:	4798      	blx	r3
		}

		break ;
 8001ee8:	e003      	b.n	8001ef2 <Slave_States+0xce>
		break ;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <Slave_States+0xd0>
		break ;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <Slave_States+0xd0>
		break ;
 8001ef2:	bf00      	nop
	}
	}

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40005400 	.word	0x40005400
 8001f00:	2000009c 	.word	0x2000009c

08001f04 <TIMER3_Init>:




void TIMER3_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER3_CLK_EN();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <TIMER3_Init+0x4c>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <TIMER3_Init+0x4c>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER3->PSC = (Clock_Speed_MHz - 1);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <TIMER3_Init+0x50>)
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER3->ARR = 0xC350;  // 50000*1us = 0.05s
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <TIMER3_Init+0x50>)
 8001f24:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER3->CR1 |= (1<<0);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <TIMER3_Init+0x50>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <TIMER3_Init+0x50>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER3->SR) & (1<<0)));
 8001f36:	bf00      	nop
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <TIMER3_Init+0x50>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f9      	beq.n	8001f38 <TIMER3_Init+0x34>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40000400 	.word	0x40000400

08001f58 <Delay_Timer3_us>:


void Delay_Timer3_us(int us)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	TIMER3->CNT = 0;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <Delay_Timer3_us+0x28>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER3->CNT) < us);
 8001f66:	bf00      	nop
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <Delay_Timer3_us+0x28>)
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3fa      	bcc.n	8001f68 <Delay_Timer3_us+0x10>
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40000400 	.word	0x40000400

08001f84 <Delay_Timer3_ms>:


void Delay_Timer3_ms(int ms)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e006      	b.n	8001fa0 <Delay_Timer3_ms+0x1c>
	{
		Delay_Timer3_us(1000);
 8001f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f96:	f7ff ffdf 	bl	8001f58 <Delay_Timer3_us>
	for(i=0;i<ms;i++)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf4      	blt.n	8001f92 <Delay_Timer3_ms+0xe>
	}
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b098      	sub	sp, #96	; 0x60
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	72fb      	strb	r3, [r7, #11]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 8001fd4:	e017      	b.n	8002006 <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8001fd6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001fda:	4a91      	ldr	r2, [pc, #580]	; (8002220 <PWM+0x26c>)
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fee:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8001ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001ff6:	d303      	bcc.n	8002000 <PWM+0x4c>
			Prescalar_Value += 2;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	657b      	str	r3, [r7, #84]	; 0x54
 8001ffe:	e002      	b.n	8002006 <PWM+0x52>
		}else{
			loop_flag = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 8002006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800200a:	2b01      	cmp	r3, #1
 800200c:	d0e3      	beq.n	8001fd6 <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a84      	ldr	r2, [pc, #528]	; (8002224 <PWM+0x270>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 80d8 	bne.w	80021c8 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8002018:	4b83      	ldr	r3, [pc, #524]	; (8002228 <PWM+0x274>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a82      	ldr	r2, [pc, #520]	; (8002228 <PWM+0x274>)
 800201e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002022:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002024:	4b80      	ldr	r3, [pc, #512]	; (8002228 <PWM+0x274>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a7f      	ldr	r2, [pc, #508]	; (8002228 <PWM+0x274>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002030:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <PWM+0x274>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <PWM+0x274>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0201 	bic.w	r2, r3, #1
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	2b03      	cmp	r3, #3
 800204c:	f200 8336 	bhi.w	80026bc <PWM+0x708>
 8002050:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <PWM+0xa4>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	08002069 	.word	0x08002069
 800205c:	080020c1 	.word	0x080020c1
 8002060:	08002119 	.word	0x08002119
 8002064:	08002171 	.word	0x08002171
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <PWM+0x278>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800206e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002072:	4619      	mov	r1, r3
 8002074:	486e      	ldr	r0, [pc, #440]	; (8002230 <PWM+0x27c>)
 8002076:	f7ff fd9d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f043 0208 	orr.w	r2, r3, #8
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800209e:	7abb      	ldrb	r3, [r7, #10]
 80020a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <PWM+0x280>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	095a      	lsrs	r2, r3, #5
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 80020be:	e2fd      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <PWM+0x284>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80020c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4858      	ldr	r0, [pc, #352]	; (8002230 <PWM+0x27c>)
 80020ce:	f7ff fd71 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80020f6:	7abb      	ldrb	r3, [r7, #10]
 80020f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <PWM+0x280>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095a      	lsrs	r2, r3, #5
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002116:	e2d1      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <PWM+0x288>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800211e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002122:	4619      	mov	r1, r3
 8002124:	4842      	ldr	r0, [pc, #264]	; (8002230 <PWM+0x27c>)
 8002126:	f7ff fd45 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f043 0208 	orr.w	r2, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	4a37      	ldr	r2, [pc, #220]	; (8002234 <PWM+0x280>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095a      	lsrs	r2, r3, #5
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800216e:	e2a5      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002170:	4b33      	ldr	r3, [pc, #204]	; (8002240 <PWM+0x28c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002176:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800217a:	4619      	mov	r1, r3
 800217c:	482c      	ldr	r0, [pc, #176]	; (8002230 <PWM+0x27c>)
 800217e:	f7ff fd19 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80021a6:	7abb      	ldrb	r3, [r7, #10]
 80021a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <PWM+0x280>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	095a      	lsrs	r2, r3, #5
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80021c6:	e279      	b.n	80026bc <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	f040 80d1 	bne.w	8002374 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <PWM+0x274>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <PWM+0x274>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <PWM+0x274>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <PWM+0x274>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <PWM+0x274>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <PWM+0x274>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0201 	bic.w	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	2b03      	cmp	r3, #3
 8002206:	f200 8259 	bhi.w	80026bc <PWM+0x708>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <PWM+0x25c>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002245 	.word	0x08002245
 8002214:	08002291 	.word	0x08002291
 8002218:	080022dd 	.word	0x080022dd
 800221c:	08002329 	.word	0x08002329
 8002220:	000f4240 	.word	0x000f4240
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40021000 	.word	0x40021000
 800222c:	080034bc 	.word	0x080034bc
 8002230:	40010800 	.word	0x40010800
 8002234:	51eb851f 	.word	0x51eb851f
 8002238:	080034c0 	.word	0x080034c0
 800223c:	080034c4 	.word	0x080034c4
 8002240:	080034c8 	.word	0x080034c8
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002244:	4b9d      	ldr	r3, [pc, #628]	; (80024bc <PWM+0x508>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800224a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800224e:	4619      	mov	r1, r3
 8002250:	489b      	ldr	r0, [pc, #620]	; (80024c0 <PWM+0x50c>)
 8002252:	f7ff fcaf 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f043 0208 	orr.w	r2, r3, #8
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800227a:	7abb      	ldrb	r3, [r7, #10]
 800227c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <PWM+0x510>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095a      	lsrs	r2, r3, #5
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 800228e:	e215      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002290:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <PWM+0x514>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800229a:	4619      	mov	r1, r3
 800229c:	4888      	ldr	r0, [pc, #544]	; (80024c0 <PWM+0x50c>)
 800229e:	f7ff fc89 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80022c6:	7abb      	ldrb	r3, [r7, #10]
 80022c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a7d      	ldr	r2, [pc, #500]	; (80024c4 <PWM+0x510>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	095a      	lsrs	r2, r3, #5
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80022da:	e1ef      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80022dc:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <PWM+0x518>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80022e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e6:	4619      	mov	r1, r3
 80022e8:	4875      	ldr	r0, [pc, #468]	; (80024c0 <PWM+0x50c>)
 80022ea:	f7ff fc63 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f043 0208 	orr.w	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002312:	7abb      	ldrb	r3, [r7, #10]
 8002314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <PWM+0x510>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	095a      	lsrs	r2, r3, #5
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002326:	e1c9      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <PWM+0x51c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800232e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002332:	4619      	mov	r1, r3
 8002334:	4862      	ldr	r0, [pc, #392]	; (80024c0 <PWM+0x50c>)
 8002336:	f7ff fc3d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800235e:	7abb      	ldrb	r3, [r7, #10]
 8002360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <PWM+0x510>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	095a      	lsrs	r2, r3, #5
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002372:	e1a3      	b.n	80026bc <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <PWM+0x520>)
 8002378:	4293      	cmp	r3, r2
 800237a:	f040 80db 	bne.w	8002534 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <PWM+0x524>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <PWM+0x524>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <PWM+0x524>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <PWM+0x524>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <PWM+0x524>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <PWM+0x524>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80023a2:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <PWM+0x524>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <PWM+0x524>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	f200 817d 	bhi.w	80026bc <PWM+0x708>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <PWM+0x414>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	08002425 	.word	0x08002425
 80023d0:	08002471 	.word	0x08002471
 80023d4:	080024e9 	.word	0x080024e9
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <PWM+0x528>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80023de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e2:	4619      	mov	r1, r3
 80023e4:	4836      	ldr	r0, [pc, #216]	; (80024c0 <PWM+0x50c>)
 80023e6:	f7ff fbe5 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f043 0208 	orr.w	r2, r3, #8
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800240e:	7abb      	ldrb	r3, [r7, #10]
 8002410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <PWM+0x510>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	095a      	lsrs	r2, r3, #5
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002422:	e14b      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <PWM+0x52c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800242a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242e:	4619      	mov	r1, r3
 8002430:	4823      	ldr	r0, [pc, #140]	; (80024c0 <PWM+0x50c>)
 8002432:	f7ff fbbf 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800245a:	7abb      	ldrb	r3, [r7, #10]
 800245c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <PWM+0x510>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	095a      	lsrs	r2, r3, #5
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 800246e:	e125      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <PWM+0x508>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	4619      	mov	r1, r3
 800247c:	4819      	ldr	r0, [pc, #100]	; (80024e4 <PWM+0x530>)
 800247e:	f7ff fb99 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f043 0208 	orr.w	r2, r3, #8
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80024a6:	7abb      	ldrb	r3, [r7, #10]
 80024a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <PWM+0x510>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095a      	lsrs	r2, r3, #5
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 80024ba:	e0ff      	b.n	80026bc <PWM+0x708>
 80024bc:	080034cc 	.word	0x080034cc
 80024c0:	40010800 	.word	0x40010800
 80024c4:	51eb851f 	.word	0x51eb851f
 80024c8:	080034d0 	.word	0x080034d0
 80024cc:	080034d4 	.word	0x080034d4
 80024d0:	080034d8 	.word	0x080034d8
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080034dc 	.word	0x080034dc
 80024e0:	080034e0 	.word	0x080034e0
 80024e4:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80024e8:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <PWM+0x744>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	4881      	ldr	r0, [pc, #516]	; (80026fc <PWM+0x748>)
 80024f6:	f7ff fb5d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800251e:	7abb      	ldrb	r3, [r7, #10]
 8002520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a76      	ldr	r2, [pc, #472]	; (8002700 <PWM+0x74c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095a      	lsrs	r2, r3, #5
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002532:	e0c3      	b.n	80026bc <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a73      	ldr	r2, [pc, #460]	; (8002704 <PWM+0x750>)
 8002538:	4293      	cmp	r3, r2
 800253a:	f040 80bf 	bne.w	80026bc <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <PWM+0x754>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <PWM+0x754>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <PWM+0x754>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <PWM+0x754>)
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <PWM+0x754>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <PWM+0x754>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800256e:	7afb      	ldrb	r3, [r7, #11]
 8002570:	2b03      	cmp	r3, #3
 8002572:	f200 80a3 	bhi.w	80026bc <PWM+0x708>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <PWM+0x5c8>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	080025d9 	.word	0x080025d9
 8002584:	08002625 	.word	0x08002625
 8002588:	08002671 	.word	0x08002671
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <PWM+0x758>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	4619      	mov	r1, r3
 8002598:	4858      	ldr	r0, [pc, #352]	; (80026fc <PWM+0x748>)
 800259a:	f7ff fb0b 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f043 0208 	orr.w	r2, r3, #8
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4a4d      	ldr	r2, [pc, #308]	; (8002700 <PWM+0x74c>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	095a      	lsrs	r2, r3, #5
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80025d6:	e071      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <PWM+0x75c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4845      	ldr	r0, [pc, #276]	; (80026fc <PWM+0x748>)
 80025e6:	f7ff fae5 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800260e:	7abb      	ldrb	r3, [r7, #10]
 8002610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <PWM+0x74c>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	095a      	lsrs	r2, r3, #5
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002622:	e04b      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002624:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <PWM+0x760>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800262a:	f107 0318 	add.w	r3, r7, #24
 800262e:	4619      	mov	r1, r3
 8002630:	4832      	ldr	r0, [pc, #200]	; (80026fc <PWM+0x748>)
 8002632:	f7ff fabf 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f043 0208 	orr.w	r2, r3, #8
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800265a:	7abb      	ldrb	r3, [r7, #10]
 800265c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a27      	ldr	r2, [pc, #156]	; (8002700 <PWM+0x74c>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	095a      	lsrs	r2, r3, #5
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800266e:	e025      	b.n	80026bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <PWM+0x764>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	481f      	ldr	r0, [pc, #124]	; (80026fc <PWM+0x748>)
 800267e:	f7ff fa99 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80026a6:	7abb      	ldrb	r3, [r7, #10]
 80026a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <PWM+0x74c>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095a      	lsrs	r2, r3, #5
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80026ba:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3760      	adds	r7, #96	; 0x60
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	080034d0 	.word	0x080034d0
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	51eb851f 	.word	0x51eb851f
 8002704:	40000800 	.word	0x40000800
 8002708:	40021000 	.word	0x40021000
 800270c:	080034dc 	.word	0x080034dc
 8002710:	080034e0 	.word	0x080034e0
 8002714:	080034bc 	.word	0x080034bc
 8002718:	080034c0 	.word	0x080034c0

0800271c <Get_TIMER3_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER3_Counter()
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	return (TIMER3->CNT);
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <Get_TIMER3_Counter+0x10>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40000400 	.word	0x40000400

08002730 <TIMER4_Stop>:
	TIMER3->CR1 &= ~(1<<0);
}


void TIMER4_Stop()
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER4->CR1 &= ~(1<<0);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <TIMER4_Stop+0x18>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a03      	ldr	r2, [pc, #12]	; (8002748 <TIMER4_Stop+0x18>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40000800 	.word	0x40000800

0800274c <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b096      	sub	sp, #88	; 0x58
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	70fb      	strb	r3, [r7, #3]
 800275e:	460b      	mov	r3, r1
 8002760:	803b      	strh	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 8002766:	4b9b      	ldr	r3, [pc, #620]	; (80029d4 <PWM_Move_Steps+0x288>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 800276c:	4a9a      	ldr	r2, [pc, #616]	; (80029d8 <PWM_Move_Steps+0x28c>)
 800276e:	883b      	ldrh	r3, [r7, #0]
 8002770:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002778:	2300      	movs	r3, #0
 800277a:	653b      	str	r3, [r7, #80]	; 0x50
 800277c:	2301      	movs	r3, #1
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(loop_flag == 1)
 8002780:	e017      	b.n	80027b2 <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8002782:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002786:	4a95      	ldr	r2, [pc, #596]	; (80029dc <PWM_Move_Steps+0x290>)
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4619      	mov	r1, r3
 800278e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	fbb1 f3f3 	udiv	r3, r1, r3
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80027a2:	d303      	bcc.n	80027ac <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	3302      	adds	r3, #2
 80027a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027aa:	e002      	b.n	80027b2 <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(loop_flag == 1)
 80027b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d0e3      	beq.n	8002782 <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a88      	ldr	r2, [pc, #544]	; (80029e0 <PWM_Move_Steps+0x294>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 8120 	bne.w	8002a04 <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 80027c4:	4b87      	ldr	r3, [pc, #540]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a86      	ldr	r2, [pc, #536]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ce:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 80027d0:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a83      	ldr	r2, [pc, #524]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80027dc:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a80      	ldr	r2, [pc, #512]	; (80029e4 <PWM_Move_Steps+0x298>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 80027e8:	4b7f      	ldr	r3, [pc, #508]	; (80029e8 <PWM_Move_Steps+0x29c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7e      	ldr	r2, [pc, #504]	; (80029e8 <PWM_Move_Steps+0x29c>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <PWM_Move_Steps+0x29c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7b      	ldr	r2, [pc, #492]	; (80029e8 <PWM_Move_Steps+0x29c>)
 80027fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fe:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 8002800:	4b79      	ldr	r3, [pc, #484]	; (80029e8 <PWM_Move_Steps+0x29c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a78      	ldr	r2, [pc, #480]	; (80029e8 <PWM_Move_Steps+0x29c>)
 8002806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800280a:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <PWM_Move_Steps+0x29c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a75      	ldr	r2, [pc, #468]	; (80029e8 <PWM_Move_Steps+0x29c>)
 8002812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002816:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 0201 	bic.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	2b03      	cmp	r3, #3
 8002828:	f200 83c2 	bhi.w	8002fb0 <PWM_Move_Steps+0x864>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <PWM_Move_Steps+0xe8>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	080028a9 	.word	0x080028a9
 800283c:	0800290d 	.word	0x0800290d
 8002840:	08002971 	.word	0x08002971
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002844:	4b69      	ldr	r3, [pc, #420]	; (80029ec <PWM_Move_Steps+0x2a0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800284a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800284e:	4619      	mov	r1, r3
 8002850:	4867      	ldr	r0, [pc, #412]	; (80029f0 <PWM_Move_Steps+0x2a4>)
 8002852:	f7ff f9af 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f043 0208 	orr.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800287a:	78bb      	ldrb	r3, [r7, #2]
 800287c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <PWM_Move_Steps+0x2a8>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	095a      	lsrs	r2, r3, #5
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f043 0203 	orr.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60da      	str	r2, [r3, #12]
			break;
 80028a6:	e383      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <PWM_Move_Steps+0x2ac>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80028ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b2:	4619      	mov	r1, r3
 80028b4:	484e      	ldr	r0, [pc, #312]	; (80029f0 <PWM_Move_Steps+0x2a4>)
 80028b6:	f7ff f97d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a43      	ldr	r2, [pc, #268]	; (80029f4 <PWM_Move_Steps+0x2a8>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095a      	lsrs	r2, r3, #5
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b101 << 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f043 0205 	orr.w	r2, r3, #5
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60da      	str	r2, [r3, #12]
			break;
 800290a:	e351      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <PWM_Move_Steps+0x2b0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002916:	4619      	mov	r1, r3
 8002918:	4835      	ldr	r0, [pc, #212]	; (80029f0 <PWM_Move_Steps+0x2a4>)
 800291a:	f7ff f94b 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f043 0208 	orr.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002942:	78bb      	ldrb	r3, [r7, #2]
 8002944:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <PWM_Move_Steps+0x2a8>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095a      	lsrs	r2, r3, #5
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f043 0209 	orr.w	r2, r3, #9
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60da      	str	r2, [r3, #12]
			break;
 800296e:	e31f      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <PWM_Move_Steps+0x2b4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800297a:	4619      	mov	r1, r3
 800297c:	481c      	ldr	r0, [pc, #112]	; (80029f0 <PWM_Move_Steps+0x2a4>)
 800297e:	f7ff f919 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80029a6:	78bb      	ldrb	r3, [r7, #2]
 80029a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <PWM_Move_Steps+0x2a8>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095a      	lsrs	r2, r3, #5
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b10001 << 0);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f043 0211 	orr.w	r2, r3, #17
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]
			break;
 80029d2:	e2ed      	b.n	8002fb0 <PWM_Move_Steps+0x864>
 80029d4:	200000e5 	.word	0x200000e5
 80029d8:	200000e6 	.word	0x200000e6
 80029dc:	000f4240 	.word	0x000f4240
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	080034bc 	.word	0x080034bc
 80029f0:	40010800 	.word	0x40010800
 80029f4:	51eb851f 	.word	0x51eb851f
 80029f8:	080034c0 	.word	0x080034c0
 80029fc:	080034c4 	.word	0x080034c4
 8002a00:	080034c8 	.word	0x080034c8
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	f040 80dd 	bne.w	8002bc8 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 8002a0e:	4ba0      	ldr	r3, [pc, #640]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a9f      	ldr	r2, [pc, #636]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002a1a:	4b9d      	ldr	r3, [pc, #628]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a9c      	ldr	r2, [pc, #624]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002a26:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a99      	ldr	r2, [pc, #612]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 8002a32:	4b98      	ldr	r3, [pc, #608]	; (8002c94 <PWM_Move_Steps+0x548>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a97      	ldr	r2, [pc, #604]	; (8002c94 <PWM_Move_Steps+0x548>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0201 	bic.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	f200 82af 	bhi.w	8002fb0 <PWM_Move_Steps+0x864>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <PWM_Move_Steps+0x30c>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002ac1 	.word	0x08002ac1
 8002a60:	08002b19 	.word	0x08002b19
 8002a64:	08002b71 	.word	0x08002b71
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002a68:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <PWM_Move_Steps+0x54c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a72:	4619      	mov	r1, r3
 8002a74:	4889      	ldr	r0, [pc, #548]	; (8002c9c <PWM_Move_Steps+0x550>)
 8002a76:	f7ff f89d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f043 0208 	orr.w	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002a9e:	78bb      	ldrb	r3, [r7, #2]
 8002aa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a7e      	ldr	r2, [pc, #504]	; (8002ca0 <PWM_Move_Steps+0x554>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095a      	lsrs	r2, r3, #5
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f043 0203 	orr.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
			break;
 8002abe:	e277      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ac0:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <PWM_Move_Steps+0x558>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aca:	4619      	mov	r1, r3
 8002acc:	4873      	ldr	r0, [pc, #460]	; (8002c9c <PWM_Move_Steps+0x550>)
 8002ace:	f7ff f871 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002af6:	78bb      	ldrb	r3, [r7, #2]
 8002af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	4a68      	ldr	r2, [pc, #416]	; (8002ca0 <PWM_Move_Steps+0x554>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	095a      	lsrs	r2, r3, #5
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f043 0205 	orr.w	r2, r3, #5
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]
			break;
 8002b16:	e24b      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <PWM_Move_Steps+0x55c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b22:	4619      	mov	r1, r3
 8002b24:	485d      	ldr	r0, [pc, #372]	; (8002c9c <PWM_Move_Steps+0x550>)
 8002b26:	f7ff f845 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f043 0208 	orr.w	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002b4e:	78bb      	ldrb	r3, [r7, #2]
 8002b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <PWM_Move_Steps+0x554>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095a      	lsrs	r2, r3, #5
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f043 0209 	orr.w	r2, r3, #9
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]
			break;
 8002b6e:	e21f      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b70:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <PWM_Move_Steps+0x560>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4847      	ldr	r0, [pc, #284]	; (8002c9c <PWM_Move_Steps+0x550>)
 8002b7e:	f7ff f819 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <PWM_Move_Steps+0x554>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095a      	lsrs	r2, r3, #5
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f043 0211 	orr.w	r2, r3, #17
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60da      	str	r2, [r3, #12]
			break;
 8002bc6:	e1f3      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <PWM_Move_Steps+0x564>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f040 80f7 	bne.w	8002dc0 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <PWM_Move_Steps+0x544>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <PWM_Move_Steps+0x548>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <PWM_Move_Steps+0x548>)
 8002c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c0c:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	f200 81c7 	bhi.w	8002fb0 <PWM_Move_Steps+0x864>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <PWM_Move_Steps+0x4dc>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002cb9 	.word	0x08002cb9
 8002c30:	08002d11 	.word	0x08002d11
 8002c34:	08002d69 	.word	0x08002d69
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <PWM_Move_Steps+0x568>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4815      	ldr	r0, [pc, #84]	; (8002c9c <PWM_Move_Steps+0x550>)
 8002c46:	f7fe ffb5 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002c6e:	78bb      	ldrb	r3, [r7, #2]
 8002c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <PWM_Move_Steps+0x554>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095a      	lsrs	r2, r3, #5
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f043 0203 	orr.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60da      	str	r2, [r3, #12]
			break;
 8002c8e:	e18f      	b.n	8002fb0 <PWM_Move_Steps+0x864>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	080034cc 	.word	0x080034cc
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	51eb851f 	.word	0x51eb851f
 8002ca4:	080034d0 	.word	0x080034d0
 8002ca8:	080034d4 	.word	0x080034d4
 8002cac:	080034d8 	.word	0x080034d8
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	080034dc 	.word	0x080034dc
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002cb8:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <PWM_Move_Steps+0x7e0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	489a      	ldr	r0, [pc, #616]	; (8002f30 <PWM_Move_Steps+0x7e4>)
 8002cc6:	f7fe ff75 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002cee:	78bb      	ldrb	r3, [r7, #2]
 8002cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a8f      	ldr	r2, [pc, #572]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095a      	lsrs	r2, r3, #5
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 0205 	orr.w	r2, r3, #5
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]
			break;
 8002d0e:	e14f      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d10:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <PWM_Move_Steps+0x7ec>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002d16:	f107 0320 	add.w	r3, r7, #32
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4887      	ldr	r0, [pc, #540]	; (8002f3c <PWM_Move_Steps+0x7f0>)
 8002d1e:	f7fe ff49 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002d46:	78bb      	ldrb	r3, [r7, #2]
 8002d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095a      	lsrs	r2, r3, #5
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f043 0209 	orr.w	r2, r3, #9
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
			break;
 8002d66:	e123      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <PWM_Move_Steps+0x7f4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	4871      	ldr	r0, [pc, #452]	; (8002f3c <PWM_Move_Steps+0x7f0>)
 8002d76:	f7fe ff1d 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002d9e:	78bb      	ldrb	r3, [r7, #2]
 8002da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095a      	lsrs	r2, r3, #5
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f043 0211 	orr.w	r2, r3, #17
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
			break;
 8002dbe:	e0f7      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a60      	ldr	r2, [pc, #384]	; (8002f44 <PWM_Move_Steps+0x7f8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	f040 80f3 	bne.w	8002fb0 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <PWM_Move_Steps+0x7fc>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <PWM_Move_Steps+0x800>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a56      	ldr	r2, [pc, #344]	; (8002f4c <PWM_Move_Steps+0x800>)
 8002df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002df8:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0201 	bic.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	f200 80d1 	bhi.w	8002fb0 <PWM_Move_Steps+0x864>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <PWM_Move_Steps+0x6c8>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e7d 	.word	0x08002e7d
 8002e1c:	08002ed5 	.word	0x08002ed5
 8002e20:	08002f59 	.word	0x08002f59
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <PWM_Move_Steps+0x804>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002e2a:	f107 0318 	add.w	r3, r7, #24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4842      	ldr	r0, [pc, #264]	; (8002f3c <PWM_Move_Steps+0x7f0>)
 8002e32:	f7fe febf 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f043 0208 	orr.w	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095a      	lsrs	r2, r3, #5
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f043 0203 	orr.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]
			break;
 8002e7a:	e099      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <PWM_Move_Steps+0x7e0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	482c      	ldr	r0, [pc, #176]	; (8002f3c <PWM_Move_Steps+0x7f0>)
 8002e8a:	f7fe fe93 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002eb2:	78bb      	ldrb	r3, [r7, #2]
 8002eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095a      	lsrs	r2, r3, #5
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f043 0205 	orr.w	r2, r3, #5
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
			break;
 8002ed2:	e06d      	b.n	8002fb0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <PWM_Move_Steps+0x808>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4816      	ldr	r0, [pc, #88]	; (8002f3c <PWM_Move_Steps+0x7f0>)
 8002ee2:	f7fe fe67 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f043 0208 	orr.w	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002f0a:	78bb      	ldrb	r3, [r7, #2]
 8002f0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <PWM_Move_Steps+0x7e8>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095a      	lsrs	r2, r3, #5
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f043 0209 	orr.w	r2, r3, #9
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
			break;
 8002f2a:	e041      	b.n	8002fb0 <PWM_Move_Steps+0x864>
 8002f2c:	080034e0 	.word	0x080034e0
 8002f30:	40010800 	.word	0x40010800
 8002f34:	51eb851f 	.word	0x51eb851f
 8002f38:	080034cc 	.word	0x080034cc
 8002f3c:	40010c00 	.word	0x40010c00
 8002f40:	080034d0 	.word	0x080034d0
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	080034dc 	.word	0x080034dc
 8002f54:	080034bc 	.word	0x080034bc
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <PWM_Move_Steps+0x8ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	4825      	ldr	r0, [pc, #148]	; (8002ffc <PWM_Move_Steps+0x8b0>)
 8002f66:	f7fe fe25 	bl	8001bb4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002f8e:	78bb      	ldrb	r3, [r7, #2]
 8002f90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <PWM_Move_Steps+0x8b4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095a      	lsrs	r2, r3, #5
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f043 0211 	orr.w	r2, r3, #17
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
			break;
 8002fae:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28


	TIMERx->DIER |=(0b1<<0);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]





}
 8002fee:	bf00      	nop
 8002ff0:	3758      	adds	r7, #88	; 0x58
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080034c0 	.word	0x080034c0
 8002ffc:	40010c00 	.word	0x40010c00
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <TIM2_IRQHandler+0x68>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d128      	bne.n	8003062 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8003010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800302a:	f023 0302 	bic.w	r3, r3, #2
 800302e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <TIM2_IRQHandler+0x6c>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <TIM2_IRQHandler+0x6c>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <TIM2_IRQHandler+0x6c>)
 8003042:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003044:	e00d      	b.n	8003062 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <TIM2_IRQHandler+0x68>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 800304c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <TIM2_IRQHandler+0x70>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200000e5 	.word	0x200000e5
 8003070:	200000e6 	.word	0x200000e6
 8003074:	200000e4 	.word	0x200000e4

08003078 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <USART1_IRQHandler+0x10>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4798      	blx	r3
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200000e8 	.word	0x200000e8

0800308c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <USART2_IRQHandler+0x10>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	4798      	blx	r3
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200000e8 	.word	0x200000e8

080030a0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <USART3_IRQHandler+0x10>)
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	4798      	blx	r3
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200000e8 	.word	0x200000e8

080030b4 <main>:
float Kp = 0.5; 	// Proportional gain
float Ki = 0.001; 	// Integral gain
float Kd = 0.05; 	// Derivative gain


int main(void) {
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b097      	sub	sp, #92	; 0x5c
 80030b8:	af02      	add	r7, sp, #8


	Motor_Config_t DC_Motor1 =
 80030ba:	4b9f      	ldr	r3, [pc, #636]	; (8003338 <main+0x284>)
 80030bc:	f107 0420 	add.w	r4, r7, #32
 80030c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.DC_Pin2Number = GPIO_PIN_10,
			.DC_PortNumber = GPIOA,
			.PWM_Timer = TIMER4,
			.PWM_Channel = TIMER_CH2
	};
	Motor_Config_t DC_Motor2 =
 80030c6:	4b9d      	ldr	r3, [pc, #628]	; (800333c <main+0x288>)
 80030c8:	f107 0410 	add.w	r4, r7, #16
 80030cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.PWM_Timer = TIMER4,
			.PWM_Channel = TIMER_CH1
	};


	GPIO_PinConfig_t StepperDirPin = {
 80030d2:	4b9b      	ldr	r3, [pc, #620]	; (8003340 <main+0x28c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ };


	//RCC_GPIOC_CLK_EN();

	RCC_GPIOB_CLK_EN();
 80030d8:	4b9a      	ldr	r3, [pc, #616]	; (8003344 <main+0x290>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4a99      	ldr	r2, [pc, #612]	; (8003344 <main+0x290>)
 80030de:	f043 0308 	orr.w	r3, r3, #8
 80030e2:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80030e4:	4b97      	ldr	r3, [pc, #604]	; (8003344 <main+0x290>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a96      	ldr	r2, [pc, #600]	; (8003344 <main+0x290>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6193      	str	r3, [r2, #24]

	RCC_TIMER3_CLK_EN();
 80030f0:	4b94      	ldr	r3, [pc, #592]	; (8003344 <main+0x290>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a93      	ldr	r2, [pc, #588]	; (8003344 <main+0x290>)
 80030f6:	f043 0302 	orr.w	r3, r3, #2
 80030fa:	61d3      	str	r3, [r2, #28]

	TIMER3_Init(RCC_CLK_8M);
 80030fc:	2008      	movs	r0, #8
 80030fe:	f7fe ff01 	bl	8001f04 <TIMER3_Init>

	Motor_intialize(&DC_Motor1);
 8003102:	f107 0320 	add.w	r3, r7, #32
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fe7e 	bl	8000e08 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fe79 	bl	8000e08 <Motor_intialize>

	LCD_enuInit(&LCD_Configs);
 8003116:	488c      	ldr	r0, [pc, #560]	; (8003348 <main+0x294>)
 8003118:	f7fd fee8 	bl	8000eec <LCD_enuInit>

	HC_SR04_Init(UltraSonic_Configs);
 800311c:	488b      	ldr	r0, [pc, #556]	; (800334c <main+0x298>)
 800311e:	f7fe faaf 	bl	8001680 <HC_SR04_Init>

	Stepper_Init(&StepperDirPin);
 8003122:	f107 030c 	add.w	r3, r7, #12
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fa4e 	bl	80015c8 <Stepper_Init>

	uint32_t Ultra1Distance = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
	uint32_t Ultra2Distance = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	607b      	str	r3, [r7, #4]

	float integral = 0;
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	64fb      	str	r3, [r7, #76]	; 0x4c
	float derivative = 0;
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c

	float error = 0;
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
	float error_previous = 0;
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	647b      	str	r3, [r7, #68]	; 0x44
	int correction_steps = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	643b      	str	r3, [r7, #64]	; 0x40
	/* Loop forever */
	while (1) {


		if(PinStepper_flag == 1)
 8003150:	4b7f      	ldr	r3, [pc, #508]	; (8003350 <main+0x29c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <main+0xb4>
		{
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_LOW);
 8003158:	2200      	movs	r2, #0
 800315a:	2101      	movs	r1, #1
 800315c:	487d      	ldr	r0, [pc, #500]	; (8003354 <main+0x2a0>)
 800315e:	f7fe fdbf 	bl	8001ce0 <MCAL_GPIO_WritePin>
			PinStepper_flag = 0;
 8003162:	4b7b      	ldr	r3, [pc, #492]	; (8003350 <main+0x29c>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
		}


		LCD_enuJumpCursorTo(1, 0);
 8003168:	2100      	movs	r1, #0
 800316a:	2001      	movs	r0, #1
 800316c:	f7fe f95c 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuSendString("START");
 8003170:	4879      	ldr	r0, [pc, #484]	; (8003358 <main+0x2a4>)
 8003172:	f7fe f935 	bl	80013e0 <LCD_enuSendString>

		HC_SR04_ReadDistance(0,&Ultra1Distance);
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	4619      	mov	r1, r3
 800317c:	2000      	movs	r0, #0
 800317e:	f7fe faeb 	bl	8001758 <HC_SR04_ReadDistance>
		HC_SR04_ReadDistance(1,&Ultra2Distance);
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	4619      	mov	r1, r3
 8003186:	2001      	movs	r0, #1
 8003188:	f7fe fae6 	bl	8001758 <HC_SR04_ReadDistance>

		LCD_enuJumpCursorTo(1, 0);
 800318c:	2100      	movs	r1, #0
 800318e:	2001      	movs	r0, #1
 8003190:	f7fe f94a 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuSendString("Reading ");
 8003194:	4871      	ldr	r0, [pc, #452]	; (800335c <main+0x2a8>)
 8003196:	f7fe f923 	bl	80013e0 <LCD_enuSendString>

		LCD_enuJumpCursorTo(2, 0);
 800319a:	2100      	movs	r1, #0
 800319c:	2002      	movs	r0, #2
 800319e:	f7fe f943 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuSendString("1st:    ");
 80031a2:	486f      	ldr	r0, [pc, #444]	; (8003360 <main+0x2ac>)
 80031a4:	f7fe f91c 	bl	80013e0 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 5);
 80031a8:	2105      	movs	r1, #5
 80031aa:	2002      	movs	r0, #2
 80031ac:	f7fe f93c 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra1Distance);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe f986 	bl	80014c4 <LCD_enuDisplayIntNum>

		LCD_enuJumpCursorTo(2, 9);
 80031b8:	2109      	movs	r1, #9
 80031ba:	2002      	movs	r0, #2
 80031bc:	f7fe f934 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuSendString("2nd:    ");
 80031c0:	4868      	ldr	r0, [pc, #416]	; (8003364 <main+0x2b0>)
 80031c2:	f7fe f90d 	bl	80013e0 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 13);
 80031c6:	210d      	movs	r1, #13
 80031c8:	2002      	movs	r0, #2
 80031ca:	f7fe f92d 	bl	8001428 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra2Distance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f977 	bl	80014c4 <LCD_enuDisplayIntNum>

		if (Ultra1Distance <= 5) {
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	f200 810f 	bhi.w	80033fc <main+0x348>

			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 80031de:	2200      	movs	r2, #0
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	4861      	ldr	r0, [pc, #388]	; (8003368 <main+0x2b4>)
 80031e4:	f7fe fd7c 	bl	8001ce0 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 80031e8:	2200      	movs	r2, #0
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	485e      	ldr	r0, [pc, #376]	; (8003368 <main+0x2b4>)
 80031ee:	f7fe fd77 	bl	8001ce0 <MCAL_GPIO_WritePin>

			Motor_Move_ForWard(&DC_Motor1, 100);
 80031f2:	f107 0320 	add.w	r3, r7, #32
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fe51 	bl	8000ea0 <Motor_Move_ForWard>
			Motor_Move_ForWard(&DC_Motor2, 100);
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fe4b 	bl	8000ea0 <Motor_Move_ForWard>

			Delay_Timer3_ms(2000);
 800320a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800320e:	f7fe feb9 	bl	8001f84 <Delay_Timer3_ms>

			Motor_TurnOff(&DC_Motor1);
 8003212:	f107 0320 	add.w	r3, r7, #32
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd fe1c 	bl	8000e54 <Motor_TurnOff>
			Motor_TurnOff(&DC_Motor2);
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fe17 	bl	8000e54 <Motor_TurnOff>

			Delay_Timer3_ms(1000);
 8003226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800322a:	f7fe feab 	bl	8001f84 <Delay_Timer3_ms>

			if(Ultra2Distance<=2){
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d80d      	bhi.n	8003250 <main+0x19c>
				// 8000 =~ 2cm
				// Move stepper up
				Stepper_Move_Steps(TIMER2, TIMER_CH1, 8000, 50, 500, Stepper_UP);
 8003234:	2301      	movs	r3, #1
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2332      	movs	r3, #50	; 0x32
 8003240:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003244:	2100      	movs	r1, #0
 8003246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800324a:	f7fe f9e3 	bl	8001614 <Stepper_Move_Steps>
 800324e:	e0d5      	b.n	80033fc <main+0x348>

			}else if(Ultra2Distance>=4){ // 5
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d90d      	bls.n	8003272 <main+0x1be>
				// Move stepper down
				Stepper_Move_Steps(TIMER2, TIMER_CH1, 8000, 50, 500, Stepper_Down);
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2332      	movs	r3, #50	; 0x32
 8003262:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003266:	2100      	movs	r1, #0
 8003268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800326c:	f7fe f9d2 	bl	8001614 <Stepper_Move_Steps>
 8003270:	e0c4      	b.n	80033fc <main+0x348>

			} // 3
			else{

				// Calculate error
				error = TARGET_DISTANCE_MAX - Ultra2Distance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f1c3 0304 	rsb	r3, r3, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fcd1 	bl	8000c20 <__aeabi_ui2f>
 800327e:	4603      	mov	r3, r0
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48

				do{
					// Proportional term
					float P = Kp * error;
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <main+0x2b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800328a:	f7fc ff71 	bl	8000170 <__aeabi_fmul>
 800328e:	4603      	mov	r3, r0
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38

					// Integral term
					if (Ki != 0) {
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <main+0x2bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd fd5c 	bl	8000d58 <__aeabi_fcmpeq>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d119      	bne.n	80032da <main+0x226>
						integral += error;
 80032a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80032a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80032aa:	f7fd fc09 	bl	8000ac0 <__addsf3>
 80032ae:	4603      	mov	r3, r0
 80032b0:	64fb      	str	r3, [r7, #76]	; 0x4c
						if (integral > 100)
 80032b2:	4930      	ldr	r1, [pc, #192]	; (8003374 <main+0x2c0>)
 80032b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80032b6:	f7fd fd77 	bl	8000da8 <__aeabi_fcmpgt>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <main+0x212>
							integral = 100;
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <main+0x2c0>)
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	e00c      	b.n	80032e0 <main+0x22c>
						else if (integral < -100)
 80032c6:	492c      	ldr	r1, [pc, #176]	; (8003378 <main+0x2c4>)
 80032c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80032ca:	f7fd fd4f 	bl	8000d6c <__aeabi_fcmplt>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <main+0x22c>
							integral = -100;
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <main+0x2c4>)
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d8:	e002      	b.n	80032e0 <main+0x22c>
					} else {
						integral = 0;
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
					}
					float I = Ki * integral;
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <main+0x2bc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80032e8:	f7fc ff42 	bl	8000170 <__aeabi_fmul>
 80032ec:	4603      	mov	r3, r0
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34

					// Derivative term
					derivative = error - error_previous;
 80032f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80032f4:	f7fd fbe2 	bl	8000abc <__aeabi_fsub>
 80032f8:	4603      	mov	r3, r0
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
					float D = Kd * derivative;
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <main+0x2c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003304:	f7fc ff34 	bl	8000170 <__aeabi_fmul>
 8003308:	4603      	mov	r3, r0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30

					// Calculate PID output
					correction_steps = P + I + D;
 800330c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800330e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003310:	f7fd fbd6 	bl	8000ac0 <__addsf3>
 8003314:	4603      	mov	r3, r0
 8003316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fbd1 	bl	8000ac0 <__addsf3>
 800331e:	4603      	mov	r3, r0
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fd4b 	bl	8000dbc <__aeabi_f2iz>
 8003326:	4603      	mov	r3, r0
 8003328:	643b      	str	r3, [r7, #64]	; 0x40

					// Limit correction steps to avoid excessive adjustments
					if (correction_steps > 100) {
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	dd27      	ble.n	8003380 <main+0x2cc>
						correction_steps = 100;
 8003330:	2364      	movs	r3, #100	; 0x64
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
 8003334:	e02b      	b.n	800338e <main+0x2da>
 8003336:	bf00      	nop
 8003338:	08003510 	.word	0x08003510
 800333c:	08003520 	.word	0x08003520
 8003340:	08003530 	.word	0x08003530
 8003344:	40021000 	.word	0x40021000
 8003348:	20000000 	.word	0x20000000
 800334c:	2000001c 	.word	0x2000001c
 8003350:	200000e4 	.word	0x200000e4
 8003354:	40010800 	.word	0x40010800
 8003358:	080034e4 	.word	0x080034e4
 800335c:	080034ec 	.word	0x080034ec
 8003360:	080034f8 	.word	0x080034f8
 8003364:	08003504 	.word	0x08003504
 8003368:	40010c00 	.word	0x40010c00
 800336c:	2000002c 	.word	0x2000002c
 8003370:	20000030 	.word	0x20000030
 8003374:	42c80000 	.word	0x42c80000
 8003378:	c2c80000 	.word	0xc2c80000
 800337c:	20000034 	.word	0x20000034
					} else if (correction_steps < -100) {
 8003380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003382:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003386:	da02      	bge.n	800338e <main+0x2da>
						correction_steps = -100;
 8003388:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800338c:	643b      	str	r3, [r7, #64]	; 0x40
					}
					Stepper_Move_Steps(TIMER2, TIMER_CH1,(uint16_t)(1500 + correction_steps), 50, 500, Stepper_UP);
 800338e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003390:	b29b      	uxth	r3, r3
 8003392:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003396:	b29a      	uxth	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2332      	movs	r3, #50	; 0x32
 80033a4:	2100      	movs	r1, #0
 80033a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80033aa:	f7fe f933 	bl	8001614 <Stepper_Move_Steps>
			        // Update previous error for next iteration
			        error_previous = error;
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44

//					Delay_Timer3_ms(1000);

					// re-read the distance
					HC_SR04_ReadDistance(1,&Ultra2Distance);
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7fe f9ce 	bl	8001758 <HC_SR04_ReadDistance>
					LCD_enuJumpCursorTo(2, 9);
 80033bc:	2109      	movs	r1, #9
 80033be:	2002      	movs	r0, #2
 80033c0:	f7fe f832 	bl	8001428 <LCD_enuJumpCursorTo>
					LCD_enuSendString("2nd:    ");
 80033c4:	480f      	ldr	r0, [pc, #60]	; (8003404 <main+0x350>)
 80033c6:	f7fe f80b 	bl	80013e0 <LCD_enuSendString>
					LCD_enuJumpCursorTo(2, 13);
 80033ca:	210d      	movs	r1, #13
 80033cc:	2002      	movs	r0, #2
 80033ce:	f7fe f82b 	bl	8001428 <LCD_enuJumpCursorTo>
					LCD_enuDisplayIntNum(Ultra2Distance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f875 	bl	80014c4 <LCD_enuDisplayIntNum>

					// re-Calculate error
					error = TARGET_DISTANCE_MAX - Ultra2Distance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1c3 0304 	rsb	r3, r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fc1d 	bl	8000c20 <__aeabi_ui2f>
 80033e6:	4603      	mov	r3, r0
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48

				}while(error);// control
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80033f0:	f7fd fcb2 	bl	8000d58 <__aeabi_fcmpeq>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f43f af43 	beq.w	8003282 <main+0x1ce>

			}

		}

		Delay_Timer3_ms(10);
 80033fc:	200a      	movs	r0, #10
 80033fe:	f7fe fdc1 	bl	8001f84 <Delay_Timer3_ms>
		if(PinStepper_flag == 1)
 8003402:	e6a5      	b.n	8003150 <main+0x9c>
 8003404:	08003504 	.word	0x08003504

08003408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800340a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800340c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <LoopForever+0x6>)
  ldr r1, =_edata
 8003412:	490d      	ldr	r1, [pc, #52]	; (8003448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <LoopForever+0xe>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003418:	e002      	b.n	8003420 <LoopCopyDataInit>

0800341a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800341c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341e:	3304      	adds	r3, #4

08003420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003424:	d3f9      	bcc.n	800341a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003428:	4c0a      	ldr	r4, [pc, #40]	; (8003454 <LoopForever+0x16>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800342c:	e001      	b.n	8003432 <LoopFillZerobss>

0800342e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003430:	3204      	adds	r2, #4

08003432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003434:	d3fb      	bcc.n	800342e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003436:	f000 f811 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800343a:	f7ff fe3b 	bl	80030b4 <main>

0800343e <LoopForever>:

LoopForever:
  b LoopForever
 800343e:	e7fe      	b.n	800343e <LoopForever>
  ldr   r0, =_estack
 8003440:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003448:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800344c:	0800353c 	.word	0x0800353c
  ldr r2, =_sbss
 8003450:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8003454:	20000124 	.word	0x20000124

08003458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003458:	e7fe      	b.n	8003458 <ADC1_2_IRQHandler>
	...

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2600      	movs	r6, #0
 8003460:	4d0c      	ldr	r5, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	f000 f81a 	bl	80034a4 <_init>
 8003470:	2600      	movs	r6, #0
 8003472:	4d0a      	ldr	r5, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f855 3b04 	ldr.w	r3, [r5], #4
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f855 3b04 	ldr.w	r3, [r5], #4
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	08003534 	.word	0x08003534
 8003498:	08003534 	.word	0x08003534
 800349c:	08003534 	.word	0x08003534
 80034a0:	08003538 	.word	0x08003538

080034a4 <_init>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	bf00      	nop
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr

080034b0 <_fini>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr
