
Elev_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002600  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800278c  0800278c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800278c  0800278c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800278c  0800278c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002794  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000004  08002798  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002798  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000368e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f7b  00000000  00000000  000236fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00024680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b0  00000000  00000000  00024a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003201  00000000  00000000  00024ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000533b  00000000  00000000  00027ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8b4  00000000  00000000  0002d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cc8  00000000  00000000  00039ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0003a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08002718 	.word	0x08002718

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08002718 	.word	0x08002718

08000170 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 800017c:	81bb      	strh	r3, [r7, #12]
 800017e:	2304      	movs	r3, #4
 8000180:	73bb      	strb	r3, [r7, #14]
 8000182:	2302      	movs	r3, #2
 8000184:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber1, &Motor_IN1);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	f107 020c 	add.w	r2, r7, #12
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 faa7 	bl	80006e4 <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 800019a:	813b      	strh	r3, [r7, #8]
 800019c:	2304      	movs	r3, #4
 800019e:	72bb      	strb	r3, [r7, #10]
 80001a0:	2302      	movs	r3, #2
 80001a2:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber2, &Motor_IN2);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	f107 0208 	add.w	r2, r7, #8
 80001ac:	4611      	mov	r1, r2
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fa98 	bl	80006e4 <MCAL_GPIO_Init>

}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6858      	ldr	r0, [r3, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	4619      	mov	r1, r3
 80001d0:	f000 fb07 	bl	80007e2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	6898      	ldr	r0, [r3, #8]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	885b      	ldrh	r3, [r3, #2]
 80001dc:	2200      	movs	r2, #0
 80001de:	4619      	mov	r1, r3
 80001e0:	f000 faff 	bl	80007e2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2102      	movs	r1, #2
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <Motor_TurnOff+0x48>)
 80001ea:	f000 fafa 	bl	80007e2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_LOW);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <Motor_TurnOff+0x4c>)
 80001f4:	f000 faf5 	bl	80007e2 <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 80001f8:	f001 f8f4 	bl	80013e4 <TIMER3_Stop>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	40010800 	.word	0x40010800

0800020c <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af02      	add	r7, sp, #8
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	68d8      	ldr	r0, [r3, #12]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	7c19      	ldrb	r1, [r3, #16]
 8000220:	78fa      	ldrb	r2, [r7, #3]
 8000222:	2324      	movs	r3, #36	; 0x24
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	f000 fd27 	bl	8000c7c <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6858      	ldr	r0, [r3, #4]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	2201      	movs	r2, #1
 8000238:	4619      	mov	r1, r3
 800023a:	f000 fad2 	bl	80007e2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6898      	ldr	r0, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	885b      	ldrh	r3, [r3, #2]
 8000246:	2200      	movs	r2, #0
 8000248:	4619      	mov	r1, r3
 800024a:	f000 faca 	bl	80007e2 <MCAL_GPIO_WritePin>

}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <Motor_Move_BackWard>:





void Motor_Move_BackWard(Motor_Config_t *Motor, uint8_t speed){
 8000256:	b580      	push	{r7, lr}
 8000258:	b084      	sub	sp, #16
 800025a:	af02      	add	r7, sp, #8
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	460b      	mov	r3, r1
 8000260:	70fb      	strb	r3, [r7, #3]
	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_36M);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	68d8      	ldr	r0, [r3, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7c19      	ldrb	r1, [r3, #16]
 800026a:	78fa      	ldrb	r2, [r7, #3]
 800026c:	2324      	movs	r3, #36	; 0x24
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	f000 fd02 	bl	8000c7c <PWM>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber1, Motor->DC_Pin1Number,GPIO_PIN_LOW);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6858      	ldr	r0, [r3, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	881b      	ldrh	r3, [r3, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	4619      	mov	r1, r3
 8000284:	f000 faad 	bl	80007e2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber2, Motor->DC_Pin2Number,GPIO_PIN_HIGH);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6898      	ldr	r0, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	885b      	ldrh	r3, [r3, #2]
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	f000 faa5 	bl	80007e2 <MCAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 80002ac:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 80002b2:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 80002b8:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	881a      	ldrh	r2, [r3, #0]
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <Stepper_Init+0x40>)
 80002c0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	4806      	ldr	r0, [pc, #24]	; (80002e4 <Stepper_Init+0x44>)
 80002ca:	f000 fa0b 	bl	80006e4 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	4804      	ldr	r0, [pc, #16]	; (80002e4 <Stepper_Init+0x44>)
 80002d4:	f000 fa85 	bl	80007e2 <MCAL_GPIO_WritePin>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000020 	.word	0x20000020
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af02      	add	r7, sp, #8
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	4608      	mov	r0, r1
 80002f2:	4611      	mov	r1, r2
 80002f4:	461a      	mov	r2, r3
 80002f6:	4603      	mov	r3, r0
 80002f8:	70fb      	strb	r3, [r7, #3]
 80002fa:	460b      	mov	r3, r1
 80002fc:	803b      	strh	r3, [r7, #0]
 80002fe:	4613      	mov	r3, r2
 8000300:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 8000302:	7d3b      	ldrb	r3, [r7, #20]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <Stepper_Move_Steps+0x26>
 8000308:	2b01      	cmp	r3, #1
 800030a:	d008      	beq.n	800031e <Stepper_Move_Steps+0x36>
 800030c:	e00f      	b.n	800032e <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <Stepper_Move_Steps+0x64>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <Stepper_Move_Steps+0x68>)
 8000318:	f000 fa63 	bl	80007e2 <MCAL_GPIO_WritePin>
		break;
 800031c:	e007      	b.n	800032e <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <Stepper_Move_Steps+0x64>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	480a      	ldr	r0, [pc, #40]	; (8000350 <Stepper_Move_Steps+0x68>)
 8000328:	f000 fa5b 	bl	80007e2 <MCAL_GPIO_WritePin>
		break;
 800032c:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 800032e:	78b8      	ldrb	r0, [r7, #2]
 8000330:	883a      	ldrh	r2, [r7, #0]
 8000332:	78f9      	ldrb	r1, [r7, #3]
 8000334:	2324      	movs	r3, #36	; 0x24
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	4603      	mov	r3, r0
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f001 f85e 	bl	8001400 <PWM_Move_Steps>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000020 	.word	0x20000020
 8000350:	40010c00 	.word	0x40010c00

08000354 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI0_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI0_IRQHandler+0x1c>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI0_IRQHandler+0x20>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4798      	blx	r3

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	20000024 	.word	0x20000024

08000378 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI1_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI1_IRQHandler+0x1c>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI1_IRQHandler+0x20>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	20000024 	.word	0x20000024

0800039c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI2_IRQHandler+0x1c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI2_IRQHandler+0x1c>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI2_IRQHandler+0x20>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4798      	blx	r3
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	20000024 	.word	0x20000024

080003c0 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <EXTI3_IRQHandler+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <EXTI3_IRQHandler+0x1c>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <EXTI3_IRQHandler+0x20>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4798      	blx	r3
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010400 	.word	0x40010400
 80003e0:	20000024 	.word	0x20000024

080003e4 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI4_IRQHandler+0x1c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI4_IRQHandler+0x1c>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI4_IRQHandler+0x20>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	4798      	blx	r3
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000024 	.word	0x20000024

08000408 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x22>
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <EXTI9_5_IRQHandler+0xa4>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI9_5_IRQHandler+0x40>
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800043c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <EXTI9_5_IRQHandler+0xa4>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI9_5_IRQHandler+0x5e>
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <EXTI9_5_IRQHandler+0xa4>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI9_5_IRQHandler+0x7c>
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <EXTI9_5_IRQHandler+0xa4>)
 8000480:	6a1b      	ldr	r3, [r3, #32]
 8000482:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI9_5_IRQHandler+0x9a>
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI9_5_IRQHandler+0xa0>)
 8000496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EXTI9_5_IRQHandler+0xa4>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a0:	4798      	blx	r3
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010400 	.word	0x40010400
 80004ac:	20000024 	.word	0x20000024

080004b0 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x22>
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a29      	ldr	r2, [pc, #164]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0x40>
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ee:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d008      	beq.n	800050e <EXTI15_10_IRQHandler+0x5e>
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 8000502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000506:	6153      	str	r3, [r2, #20]
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <EXTI15_10_IRQHandler+0x7c>
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <EXTI15_10_IRQHandler+0x9a>
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 8000546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000548:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <EXTI15_10_IRQHandler+0xb8>
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <EXTI15_10_IRQHandler+0xbc>)
 800055c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <EXTI15_10_IRQHandler+0xc0>)
 8000564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000566:	4798      	blx	r3
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40010400 	.word	0x40010400
 8000570:	20000024 	.word	0x20000024

08000574 <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000584:	f000 80a5 	beq.w	80006d2 <Get_CRLH_Position+0x15e>
 8000588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800058c:	f300 80a3 	bgt.w	80006d6 <Get_CRLH_Position+0x162>
 8000590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000594:	f000 809b 	beq.w	80006ce <Get_CRLH_Position+0x15a>
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	f300 809b 	bgt.w	80006d6 <Get_CRLH_Position+0x162>
 80005a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a4:	f000 8091 	beq.w	80006ca <Get_CRLH_Position+0x156>
 80005a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ac:	f300 8093 	bgt.w	80006d6 <Get_CRLH_Position+0x162>
 80005b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005b4:	f000 8087 	beq.w	80006c6 <Get_CRLH_Position+0x152>
 80005b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005bc:	f300 808b 	bgt.w	80006d6 <Get_CRLH_Position+0x162>
 80005c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c4:	d07d      	beq.n	80006c2 <Get_CRLH_Position+0x14e>
 80005c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ca:	f300 8084 	bgt.w	80006d6 <Get_CRLH_Position+0x162>
 80005ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d2:	d074      	beq.n	80006be <Get_CRLH_Position+0x14a>
 80005d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d8:	dc7d      	bgt.n	80006d6 <Get_CRLH_Position+0x162>
 80005da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005de:	d06c      	beq.n	80006ba <Get_CRLH_Position+0x146>
 80005e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e4:	dc77      	bgt.n	80006d6 <Get_CRLH_Position+0x162>
 80005e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005ea:	d064      	beq.n	80006b6 <Get_CRLH_Position+0x142>
 80005ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005f0:	dc71      	bgt.n	80006d6 <Get_CRLH_Position+0x162>
 80005f2:	2b80      	cmp	r3, #128	; 0x80
 80005f4:	d05d      	beq.n	80006b2 <Get_CRLH_Position+0x13e>
 80005f6:	2b80      	cmp	r3, #128	; 0x80
 80005f8:	dc6d      	bgt.n	80006d6 <Get_CRLH_Position+0x162>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	dc48      	bgt.n	8000690 <Get_CRLH_Position+0x11c>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	dd69      	ble.n	80006d6 <Get_CRLH_Position+0x162>
 8000602:	3b01      	subs	r3, #1
 8000604:	2b1f      	cmp	r3, #31
 8000606:	d866      	bhi.n	80006d6 <Get_CRLH_Position+0x162>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <Get_CRLH_Position+0x9c>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000697 	.word	0x08000697
 8000614:	0800069b 	.word	0x0800069b
 8000618:	080006d7 	.word	0x080006d7
 800061c:	0800069f 	.word	0x0800069f
 8000620:	080006d7 	.word	0x080006d7
 8000624:	080006d7 	.word	0x080006d7
 8000628:	080006d7 	.word	0x080006d7
 800062c:	080006a3 	.word	0x080006a3
 8000630:	080006d7 	.word	0x080006d7
 8000634:	080006d7 	.word	0x080006d7
 8000638:	080006d7 	.word	0x080006d7
 800063c:	080006d7 	.word	0x080006d7
 8000640:	080006d7 	.word	0x080006d7
 8000644:	080006d7 	.word	0x080006d7
 8000648:	080006d7 	.word	0x080006d7
 800064c:	080006a7 	.word	0x080006a7
 8000650:	080006d7 	.word	0x080006d7
 8000654:	080006d7 	.word	0x080006d7
 8000658:	080006d7 	.word	0x080006d7
 800065c:	080006d7 	.word	0x080006d7
 8000660:	080006d7 	.word	0x080006d7
 8000664:	080006d7 	.word	0x080006d7
 8000668:	080006d7 	.word	0x080006d7
 800066c:	080006d7 	.word	0x080006d7
 8000670:	080006d7 	.word	0x080006d7
 8000674:	080006d7 	.word	0x080006d7
 8000678:	080006d7 	.word	0x080006d7
 800067c:	080006d7 	.word	0x080006d7
 8000680:	080006d7 	.word	0x080006d7
 8000684:	080006d7 	.word	0x080006d7
 8000688:	080006d7 	.word	0x080006d7
 800068c:	080006ab 	.word	0x080006ab
 8000690:	2b40      	cmp	r3, #64	; 0x40
 8000692:	d00c      	beq.n	80006ae <Get_CRLH_Position+0x13a>
 8000694:	e01f      	b.n	80006d6 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000696:	2300      	movs	r3, #0
 8000698:	e01e      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 800069a:	2304      	movs	r3, #4
 800069c:	e01c      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800069e:	2308      	movs	r3, #8
 80006a0:	e01a      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80006a2:	230c      	movs	r3, #12
 80006a4:	e018      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	e016      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80006aa:	2314      	movs	r3, #20
 80006ac:	e014      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	e012      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80006b2:	231c      	movs	r3, #28
 80006b4:	e010      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e00e      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e00c      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80006be:	2308      	movs	r3, #8
 80006c0:	e00a      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80006c2:	230c      	movs	r3, #12
 80006c4:	e008      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80006c6:	2310      	movs	r3, #16
 80006c8:	e006      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80006ca:	2314      	movs	r3, #20
 80006cc:	e004      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80006ce:	2318      	movs	r3, #24
 80006d0:	e002      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80006d2:	231c      	movs	r3, #28
 80006d4:	e000      	b.n	80006d8 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2bff      	cmp	r3, #255	; 0xff
 80006fc:	d801      	bhi.n	8000702 <MCAL_GPIO_Init+0x1e>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	e001      	b.n	8000706 <MCAL_GPIO_Init+0x22>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3304      	adds	r3, #4
 8000706:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff31 	bl	8000574 <Get_CRLH_Position>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	230f      	movs	r3, #15
 8000718:	4093      	lsls	r3, r2
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	401a      	ands	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	2b07      	cmp	r3, #7
 800072c:	d00b      	beq.n	8000746 <MCAL_GPIO_Init+0x62>
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	2b06      	cmp	r3, #6
 8000734:	d007      	beq.n	8000746 <MCAL_GPIO_Init+0x62>
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d003      	beq.n	8000746 <MCAL_GPIO_Init+0x62>
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	789b      	ldrb	r3, [r3, #2]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d10e      	bne.n	8000764 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	3b04      	subs	r3, #4
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	b25a      	sxtb	r2, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b25b      	sxtb	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f003 030f 	and.w	r3, r3, #15
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e02c      	b.n	80007be <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d003      	beq.n	8000774 <MCAL_GPIO_Init+0x90>
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d107      	bne.n	8000784 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	789b      	ldrb	r3, [r3, #2]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	f003 030f 	and.w	r3, r3, #15
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e01c      	b.n	80007be <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	2b08      	cmp	r3, #8
 800078a:	d102      	bne.n	8000792 <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 800078c:	2304      	movs	r3, #4
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e015      	b.n	80007be <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000792:	2308      	movs	r3, #8
 8000794:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	789b      	ldrb	r3, [r3, #2]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d107      	bne.n	80007ae <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	8812      	ldrh	r2, [r2, #0]
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	e007      	b.n	80007be <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	8812      	ldrh	r2, [r2, #0]
 80007b6:	43d2      	mvns	r2, r2
 80007b8:	401a      	ands	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007be:	7bfc      	ldrb	r4, [r7, #15]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fed5 	bl	8000574 <Get_CRLH_Position>
 80007ca:	4603      	mov	r3, r0
 80007cc:	fa04 f203 	lsl.w	r2, r4, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	601a      	str	r2, [r3, #0]


}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd90      	pop	{r4, r7, pc}

080007e2 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	807b      	strh	r3, [r7, #2]
 80007ee:	4613      	mov	r3, r2
 80007f0:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 80007f2:	787b      	ldrb	r3, [r7, #1]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d003      	beq.n	8000800 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80007fe:	e002      	b.n	8000806 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	615a      	str	r2, [r3, #20]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <I2C1_EV_IRQHandler+0xec>)
 800081c:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000826:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000830:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00a      	beq.n	8000858 <I2C1_EV_IRQHandler+0x48>
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000850:	2100      	movs	r1, #0
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f000 f866 	bl	8000924 <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f003 0302 	and.w	r3, r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d014      	beq.n	8000892 <I2C1_EV_IRQHandler+0x82>
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d011      	beq.n	8000892 <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10b      	bne.n	8000892 <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 800088a:	2102      	movs	r1, #2
 800088c:	6978      	ldr	r0, [r7, #20]
 800088e:	f000 f849 	bl	8000924 <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00f      	beq.n	80008c2 <I2C1_EV_IRQHandler+0xb2>
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00c      	beq.n	80008c2 <I2C1_EV_IRQHandler+0xb2>
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d009      	beq.n	80008c2 <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80008ba:	2103      	movs	r1, #3
 80008bc:	6978      	ldr	r0, [r7, #20]
 80008be:	f000 f831 	bl	8000924 <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00f      	beq.n	80008f2 <I2C1_EV_IRQHandler+0xe2>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00c      	beq.n	80008f2 <I2C1_EV_IRQHandler+0xe2>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d009      	beq.n	80008f2 <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80008ea:	2104      	movs	r1, #4
 80008ec:	6978      	ldr	r0, [r7, #20]
 80008ee:	f000 f819 	bl	8000924 <Slave_States>

		}
	}

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40005400 	.word	0x40005400

08000900 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a32      	ldr	r2, [pc, #200]	; (80009fc <Slave_States+0xd8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d856      	bhi.n	80009f4 <Slave_States+0xd0>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <Slave_States+0x28>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000967 	.word	0x08000967
 8000950:	08000961 	.word	0x08000961
 8000954:	0800098b 	.word	0x0800098b
 8000958:	080009a3 	.word	0x080009a3
 800095c:	080009c7 	.word	0x080009c7
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000964:	e046      	b.n	80009f4 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	2b00      	cmp	r3, #0
 8000970:	d03b      	beq.n	80009ea <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4922      	ldr	r1, [pc, #136]	; (8000a00 <Slave_States+0xdc>)
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	3320      	adds	r3, #32
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2000      	movs	r0, #0
 8000986:	4798      	blx	r3
		}

		break ;
 8000988:	e02f      	b.n	80009ea <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	491c      	ldr	r1, [pc, #112]	; (8000a00 <Slave_States+0xdc>)
 800098e:	4613      	mov	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	3320      	adds	r3, #32
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2002      	movs	r0, #2
 800099e:	4798      	blx	r3

		break ;
 80009a0:	e028      	b.n	80009f4 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01f      	beq.n	80009ee <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4913      	ldr	r1, [pc, #76]	; (8000a00 <Slave_States+0xdc>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3320      	adds	r3, #32
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2003      	movs	r0, #3
 80009c2:	4798      	blx	r3
		}

		break ;
 80009c4:	e013      	b.n	80009ee <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10f      	bne.n	80009f2 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	490a      	ldr	r1, [pc, #40]	; (8000a00 <Slave_States+0xdc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	3320      	adds	r3, #32
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2004      	movs	r0, #4
 80009e6:	4798      	blx	r3
		}

		break ;
 80009e8:	e003      	b.n	80009f2 <Slave_States+0xce>
		break ;
 80009ea:	bf00      	nop
 80009ec:	e002      	b.n	80009f4 <Slave_States+0xd0>
		break ;
 80009ee:	bf00      	nop
 80009f0:	e000      	b.n	80009f4 <Slave_States+0xd0>
		break ;
 80009f2:	bf00      	nop
	}
	}

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	20000060 	.word	0x20000060

08000a04 <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d049      	beq.n	8000ab2 <MCAL_RCC_CLK_Init+0xae>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	f300 80cc 	bgt.w	8000bbc <MCAL_RCC_CLK_Init+0x1b8>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80c8 	beq.w	8000bba <MCAL_RCC_CLK_Init+0x1b6>
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	f040 80c6 	bne.w	8000bbc <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8000a30:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a64      	ldr	r2, [pc, #400]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a3a:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8000a3c:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a46:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8000a48:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a52:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b48      	cmp	r3, #72	; 0x48
 8000a58:	d106      	bne.n	8000a68 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 8000a5a:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a60:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000a64:	6053      	str	r3, [r2, #4]
			break;
 8000a66:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000a68:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a56      	ldr	r2, [pc, #344]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a72:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 8000a74:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a7a:	f023 0303 	bic.w	r3, r3, #3
 8000a7e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 8000a80:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 8000a8c:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a4d      	ldr	r2, [pc, #308]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 8000a98:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000a9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000aa2:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 8000aa4:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000aaa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000aae:	6053      	str	r3, [r2, #4]




		break;
 8000ab0:	e084      	b.n	8000bbc <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ab8:	f023 0301 	bic.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac8:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	3b10      	subs	r3, #16
 8000ace:	2b14      	cmp	r3, #20
 8000ad0:	d85d      	bhi.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <MCAL_RCC_CLK_Init+0xd4>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000b2d 	.word	0x08000b2d
 8000adc:	08000b8f 	.word	0x08000b8f
 8000ae0:	08000b8f 	.word	0x08000b8f
 8000ae4:	08000b8f 	.word	0x08000b8f
 8000ae8:	08000b3b 	.word	0x08000b3b
 8000aec:	08000b8f 	.word	0x08000b8f
 8000af0:	08000b8f 	.word	0x08000b8f
 8000af4:	08000b8f 	.word	0x08000b8f
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b8f 	.word	0x08000b8f
 8000b00:	08000b57 	.word	0x08000b57
 8000b04:	08000b8f 	.word	0x08000b8f
 8000b08:	08000b65 	.word	0x08000b65
 8000b0c:	08000b8f 	.word	0x08000b8f
 8000b10:	08000b8f 	.word	0x08000b8f
 8000b14:	08000b8f 	.word	0x08000b8f
 8000b18:	08000b73 	.word	0x08000b73
 8000b1c:	08000b8f 	.word	0x08000b8f
 8000b20:	08000b8f 	.word	0x08000b8f
 8000b24:	08000b8f 	.word	0x08000b8f
 8000b28:	08000b81 	.word	0x08000b81
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b36:	6053      	str	r3, [r2, #4]
			break;
 8000b38:	e029      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b40:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000b44:	6053      	str	r3, [r2, #4]
			break;
 8000b46:	e022      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b52:	6053      	str	r3, [r2, #4]
			break;
 8000b54:	e01b      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b5c:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 8000b60:	6053      	str	r3, [r2, #4]
			break;
 8000b62:	e014      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b6a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000b6e:	6053      	str	r3, [r2, #4]
			break;
 8000b70:	e00d      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b78:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000b7c:	6053      	str	r3, [r2, #4]
			break;
 8000b7e:	e006      	b.n	8000b8e <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b86:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000b8a:	6053      	str	r3, [r2, #4]
			break;
 8000b8c:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b98:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 8000b9a:	bf00      	nop
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f9      	beq.n	8000b9c <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <MCAL_RCC_CLK_Init+0x1c4>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]



		break;
 8000bb8:	e000      	b.n	8000bbc <MCAL_RCC_CLK_Init+0x1b8>
		break;
 8000bba:	bf00      	nop
	}
	}
	return status;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000

08000bcc <TIMER1_Init>:

uint8_t PinStepper_flag = 0;


void TIMER1_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER1_CLK_EN();
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <TIMER1_Init+0x4c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <TIMER1_Init+0x4c>)
 8000bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be0:	6193      	str	r3, [r2, #24]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER1->PSC = (Clock_Speed_MHz - 1);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <TIMER1_Init+0x50>)
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER1->ARR = 0xC350;  // 25000*2us = 0.05s
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <TIMER1_Init+0x50>)
 8000bec:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER1->CR1 |= (1<<0);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <TIMER1_Init+0x50>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <TIMER1_Init+0x50>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER1->SR) & (1<<0)));
 8000bfe:	bf00      	nop
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <TIMER1_Init+0x50>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f9      	beq.n	8000c00 <TIMER1_Init+0x34>
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <Delay_Timer1_us>:
	}
}


void Delay_Timer1_us(int us)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	TIMER1->CNT = 0;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <Delay_Timer1_us+0x28>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER1->CNT) < us);
 8000c2e:	bf00      	nop
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <Delay_Timer1_us+0x28>)
 8000c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3fa      	bcc.n	8000c30 <Delay_Timer1_us+0x10>
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <Delay_Timer1_ms>:


void Delay_Timer1_ms(int ms)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e006      	b.n	8000c68 <Delay_Timer1_ms+0x1c>
	{
		Delay_Timer1_us(1000);
 8000c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5e:	f7ff ffdf 	bl	8000c20 <Delay_Timer1_us>
	for(i=0;i<ms;i++)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf4      	blt.n	8000c5a <Delay_Timer1_ms+0xe>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b098      	sub	sp, #96	; 0x60
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	72fb      	strb	r3, [r7, #11]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8000c94:	2300      	movs	r3, #0
 8000c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c98:	2301      	movs	r3, #1
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 8000c9c:	e017      	b.n	8000cce <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8000c9e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000ca2:	4a91      	ldr	r2, [pc, #580]	; (8000ee8 <PWM+0x26c>)
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb6:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8000cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000cbe:	d303      	bcc.n	8000cc8 <PWM+0x4c>
			Prescalar_Value += 2;
 8000cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8000cc6:	e002      	b.n	8000cce <PWM+0x52>
		}else{
			loop_flag = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 8000cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d0e3      	beq.n	8000c9e <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4a84      	ldr	r2, [pc, #528]	; (8000eec <PWM+0x270>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f040 80d8 	bne.w	8000e90 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8000ce0:	4b83      	ldr	r3, [pc, #524]	; (8000ef0 <PWM+0x274>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a82      	ldr	r2, [pc, #520]	; (8000ef0 <PWM+0x274>)
 8000ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cea:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8000cec:	4b80      	ldr	r3, [pc, #512]	; (8000ef0 <PWM+0x274>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a7f      	ldr	r2, [pc, #508]	; (8000ef0 <PWM+0x274>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000cf8:	4b7d      	ldr	r3, [pc, #500]	; (8000ef0 <PWM+0x274>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a7c      	ldr	r2, [pc, #496]	; (8000ef0 <PWM+0x274>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 0201 	bic.w	r2, r3, #1
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	f200 8336 	bhi.w	8001384 <PWM+0x708>
 8000d18:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <PWM+0xa4>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d31 	.word	0x08000d31
 8000d24:	08000d89 	.word	0x08000d89
 8000d28:	08000de1 	.word	0x08000de1
 8000d2c:	08000e39 	.word	0x08000e39
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000d30:	4b70      	ldr	r3, [pc, #448]	; (8000ef4 <PWM+0x278>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000d36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	486e      	ldr	r0, [pc, #440]	; (8000ef8 <PWM+0x27c>)
 8000d3e:	f7ff fcd1 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f043 0208 	orr.w	r2, r3, #8
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000d66:	7abb      	ldrb	r3, [r7, #10]
 8000d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	4a63      	ldr	r2, [pc, #396]	; (8000efc <PWM+0x280>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	095a      	lsrs	r2, r3, #5
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 8000d86:	e2fd      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000d88:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <PWM+0x284>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4858      	ldr	r0, [pc, #352]	; (8000ef8 <PWM+0x27c>)
 8000d96:	f7ff fca5 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	f043 0210 	orr.w	r2, r3, #16
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dc2:	fb02 f303 	mul.w	r3, r2, r3
 8000dc6:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <PWM+0x280>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	095a      	lsrs	r2, r3, #5
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000dde:	e2d1      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000de0:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <PWM+0x288>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000de6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dea:	4619      	mov	r1, r3
 8000dec:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <PWM+0x27c>)
 8000dee:	f7ff fc79 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f043 0208 	orr.w	r2, r3, #8
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8000e16:	7abb      	ldrb	r3, [r7, #10]
 8000e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <PWM+0x280>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	095a      	lsrs	r2, r3, #5
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8000e36:	e2a5      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <PWM+0x28c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000e3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e42:	4619      	mov	r1, r3
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <PWM+0x27c>)
 8000e46:	f7ff fc4d 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4a21      	ldr	r2, [pc, #132]	; (8000efc <PWM+0x280>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	095a      	lsrs	r2, r3, #5
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8000e8e:	e279      	b.n	8001384 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e96:	f040 80d1 	bne.w	800103c <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <PWM+0x274>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <PWM+0x274>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <PWM+0x274>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <PWM+0x274>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <PWM+0x274>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <PWM+0x274>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 0201 	bic.w	r2, r3, #1
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8000eca:	7afb      	ldrb	r3, [r7, #11]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f200 8259 	bhi.w	8001384 <PWM+0x708>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <PWM+0x25c>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f0d 	.word	0x08000f0d
 8000edc:	08000f59 	.word	0x08000f59
 8000ee0:	08000fa5 	.word	0x08000fa5
 8000ee4:	08000ff1 	.word	0x08000ff1
 8000ee8:	000f4240 	.word	0x000f4240
 8000eec:	40012c00 	.word	0x40012c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	08002730 	.word	0x08002730
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	51eb851f 	.word	0x51eb851f
 8000f00:	08002734 	.word	0x08002734
 8000f04:	08002738 	.word	0x08002738
 8000f08:	0800273c 	.word	0x0800273c
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000f0c:	4b9d      	ldr	r3, [pc, #628]	; (8001184 <PWM+0x508>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f16:	4619      	mov	r1, r3
 8000f18:	489b      	ldr	r0, [pc, #620]	; (8001188 <PWM+0x50c>)
 8000f1a:	f7ff fbe3 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f043 0208 	orr.w	r2, r3, #8
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	4a90      	ldr	r2, [pc, #576]	; (800118c <PWM+0x510>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	095a      	lsrs	r2, r3, #5
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8000f56:	e215      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000f58:	4b8d      	ldr	r3, [pc, #564]	; (8001190 <PWM+0x514>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000f5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4888      	ldr	r0, [pc, #544]	; (8001188 <PWM+0x50c>)
 8000f66:	f7ff fbbd 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8000f8e:	7abb      	ldrb	r3, [r7, #10]
 8000f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a7d      	ldr	r2, [pc, #500]	; (800118c <PWM+0x510>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	095a      	lsrs	r2, r3, #5
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8000fa2:	e1ef      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000fa4:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <PWM+0x518>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000faa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4875      	ldr	r0, [pc, #468]	; (8001188 <PWM+0x50c>)
 8000fb2:	f7ff fb97 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f043 0208 	orr.w	r2, r3, #8
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8000fda:	7abb      	ldrb	r3, [r7, #10]
 8000fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a6a      	ldr	r2, [pc, #424]	; (800118c <PWM+0x510>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	095a      	lsrs	r2, r3, #5
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8000fee:	e1c9      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <PWM+0x51c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8000ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4862      	ldr	r0, [pc, #392]	; (8001188 <PWM+0x50c>)
 8000ffe:	f7ff fb71 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <PWM+0x510>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	095a      	lsrs	r2, r3, #5
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 800103a:	e1a3      	b.n	8001384 <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a57      	ldr	r2, [pc, #348]	; (800119c <PWM+0x520>)
 8001040:	4293      	cmp	r3, r2
 8001042:	f040 80db 	bne.w	80011fc <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <PWM+0x524>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a55      	ldr	r2, [pc, #340]	; (80011a0 <PWM+0x524>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <PWM+0x524>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <PWM+0x524>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 800105e:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <PWM+0x524>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <PWM+0x524>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800106a:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <PWM+0x524>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <PWM+0x524>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 0201 	bic.w	r2, r3, #1
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	2b03      	cmp	r3, #3
 8001086:	f200 817d 	bhi.w	8001384 <PWM+0x708>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <PWM+0x414>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010ed 	.word	0x080010ed
 8001098:	08001139 	.word	0x08001139
 800109c:	080011b1 	.word	0x080011b1
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80010a0:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <PWM+0x528>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4619      	mov	r1, r3
 80010ac:	4836      	ldr	r0, [pc, #216]	; (8001188 <PWM+0x50c>)
 80010ae:	f7ff fb19 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f043 0208 	orr.w	r2, r3, #8
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a2b      	ldr	r2, [pc, #172]	; (800118c <PWM+0x510>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	095a      	lsrs	r2, r3, #5
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80010ea:	e14b      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <PWM+0x52c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4823      	ldr	r0, [pc, #140]	; (8001188 <PWM+0x50c>)
 80010fa:	f7ff faf3 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	f043 0210 	orr.w	r2, r3, #16
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001122:	7abb      	ldrb	r3, [r7, #10]
 8001124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <PWM+0x510>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	095a      	lsrs	r2, r3, #5
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8001136:	e125      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <PWM+0x508>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4619      	mov	r1, r3
 8001144:	4819      	ldr	r0, [pc, #100]	; (80011ac <PWM+0x530>)
 8001146:	f7ff facd 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f043 0208 	orr.w	r2, r3, #8
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800116e:	7abb      	ldrb	r3, [r7, #10]
 8001170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <PWM+0x510>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	095a      	lsrs	r2, r3, #5
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001182:	e0ff      	b.n	8001384 <PWM+0x708>
 8001184:	08002740 	.word	0x08002740
 8001188:	40010800 	.word	0x40010800
 800118c:	51eb851f 	.word	0x51eb851f
 8001190:	08002744 	.word	0x08002744
 8001194:	08002748 	.word	0x08002748
 8001198:	0800274c 	.word	0x0800274c
 800119c:	40000400 	.word	0x40000400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	08002750 	.word	0x08002750
 80011a8:	08002754 	.word	0x08002754
 80011ac:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <PWM+0x744>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4881      	ldr	r0, [pc, #516]	; (80013c4 <PWM+0x748>)
 80011be:	f7ff fa91 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80011e6:	7abb      	ldrb	r3, [r7, #10]
 80011e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <PWM+0x74c>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	095a      	lsrs	r2, r3, #5
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80011fa:	e0c3      	b.n	8001384 <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a73      	ldr	r2, [pc, #460]	; (80013cc <PWM+0x750>)
 8001200:	4293      	cmp	r3, r2
 8001202:	f040 80bf 	bne.w	8001384 <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <PWM+0x754>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <PWM+0x754>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <PWM+0x754>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <PWM+0x754>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 800121e:	4b6c      	ldr	r3, [pc, #432]	; (80013d0 <PWM+0x754>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a6b      	ldr	r2, [pc, #428]	; (80013d0 <PWM+0x754>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 0201 	bic.w	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	2b03      	cmp	r3, #3
 800123a:	f200 80a3 	bhi.w	8001384 <PWM+0x708>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <PWM+0x5c8>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001255 	.word	0x08001255
 8001248:	080012a1 	.word	0x080012a1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001339 	.word	0x08001339
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001254:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <PWM+0x758>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4619      	mov	r1, r3
 8001260:	4858      	ldr	r0, [pc, #352]	; (80013c4 <PWM+0x748>)
 8001262:	f7ff fa3f 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f043 0208 	orr.w	r2, r3, #8
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800128a:	7abb      	ldrb	r3, [r7, #10]
 800128c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <PWM+0x74c>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	095a      	lsrs	r2, r3, #5
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 800129e:	e071      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <PWM+0x75c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4845      	ldr	r0, [pc, #276]	; (80013c4 <PWM+0x748>)
 80012ae:	f7ff fa19 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <PWM+0x74c>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	095a      	lsrs	r2, r3, #5
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80012ea:	e04b      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <PWM+0x760>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4832      	ldr	r0, [pc, #200]	; (80013c4 <PWM+0x748>)
 80012fa:	f7ff f9f3 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f043 0208 	orr.w	r2, r3, #8
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001322:	7abb      	ldrb	r3, [r7, #10]
 8001324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <PWM+0x74c>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	095a      	lsrs	r2, r3, #5
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8001336:	e025      	b.n	8001384 <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <PWM+0x764>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <PWM+0x748>)
 8001346:	f7ff f9cd 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800136e:	7abb      	ldrb	r3, [r7, #10]
 8001370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <PWM+0x74c>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	095a      	lsrs	r2, r3, #5
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8001382:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8001396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3760      	adds	r7, #96	; 0x60
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08002744 	.word	0x08002744
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	51eb851f 	.word	0x51eb851f
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08002750 	.word	0x08002750
 80013d8:	08002754 	.word	0x08002754
 80013dc:	08002730 	.word	0x08002730
 80013e0:	08002734 	.word	0x08002734

080013e4 <TIMER3_Stop>:
	TIMER2->CNT = 0;
	TIMER2->CR1 |= (1<<0);
}

void TIMER3_Stop()
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <TIMER3_Stop+0x18>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <TIMER3_Stop+0x18>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40000400 	.word	0x40000400

08001400 <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	70fb      	strb	r3, [r7, #3]
 8001412:	460b      	mov	r3, r1
 8001414:	803b      	strh	r3, [r7, #0]
 8001416:	4613      	mov	r3, r2
 8001418:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 800141a:	4b9b      	ldr	r3, [pc, #620]	; (8001688 <PWM_Move_Steps+0x288>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 8001420:	4a9a      	ldr	r2, [pc, #616]	; (800168c <PWM_Move_Steps+0x28c>)
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 800142c:	2300      	movs	r3, #0
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
 8001430:	2301      	movs	r3, #1
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(loop_flag == 1)
 8001434:	e017      	b.n	8001466 <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8001436:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800143a:	4a95      	ldr	r2, [pc, #596]	; (8001690 <PWM_Move_Steps+0x290>)
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	4619      	mov	r1, r3
 8001442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	fbb1 f3f3 	udiv	r3, r1, r3
 800144e:	653b      	str	r3, [r7, #80]	; 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8001450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001452:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001456:	d303      	bcc.n	8001460 <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 8001458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145a:	3302      	adds	r3, #2
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145e:	e002      	b.n	8001466 <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(loop_flag == 1)
 8001466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800146a:	2b01      	cmp	r3, #1
 800146c:	d0e3      	beq.n	8001436 <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a88      	ldr	r2, [pc, #544]	; (8001694 <PWM_Move_Steps+0x294>)
 8001472:	4293      	cmp	r3, r2
 8001474:	f040 8120 	bne.w	80016b8 <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 8001478:	4b87      	ldr	r3, [pc, #540]	; (8001698 <PWM_Move_Steps+0x298>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a86      	ldr	r2, [pc, #536]	; (8001698 <PWM_Move_Steps+0x298>)
 800147e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001482:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <PWM_Move_Steps+0x298>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a83      	ldr	r2, [pc, #524]	; (8001698 <PWM_Move_Steps+0x298>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001490:	4b81      	ldr	r3, [pc, #516]	; (8001698 <PWM_Move_Steps+0x298>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a80      	ldr	r2, [pc, #512]	; (8001698 <PWM_Move_Steps+0x298>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 800149c:	4b7f      	ldr	r3, [pc, #508]	; (800169c <PWM_Move_Steps+0x29c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7e      	ldr	r2, [pc, #504]	; (800169c <PWM_Move_Steps+0x29c>)
 80014a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 80014a8:	4b7c      	ldr	r3, [pc, #496]	; (800169c <PWM_Move_Steps+0x29c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a7b      	ldr	r2, [pc, #492]	; (800169c <PWM_Move_Steps+0x29c>)
 80014ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 80014b4:	4b79      	ldr	r3, [pc, #484]	; (800169c <PWM_Move_Steps+0x29c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a78      	ldr	r2, [pc, #480]	; (800169c <PWM_Move_Steps+0x29c>)
 80014ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014be:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <PWM_Move_Steps+0x29c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a75      	ldr	r2, [pc, #468]	; (800169c <PWM_Move_Steps+0x29c>)
 80014c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014ca:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 0201 	bic.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	f200 83c2 	bhi.w	8001c64 <PWM_Move_Steps+0x864>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <PWM_Move_Steps+0xe8>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	0800155d 	.word	0x0800155d
 80014f0:	080015c1 	.word	0x080015c1
 80014f4:	08001625 	.word	0x08001625
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80014f8:	4b69      	ldr	r3, [pc, #420]	; (80016a0 <PWM_Move_Steps+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80014fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001502:	4619      	mov	r1, r3
 8001504:	4867      	ldr	r0, [pc, #412]	; (80016a4 <PWM_Move_Steps+0x2a4>)
 8001506:	f7ff f8ed 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f043 0208 	orr.w	r2, r3, #8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800152e:	78bb      	ldrb	r3, [r7, #2]
 8001530:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	4a5c      	ldr	r2, [pc, #368]	; (80016a8 <PWM_Move_Steps+0x2a8>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	095a      	lsrs	r2, r3, #5
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f043 0203 	orr.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]
			break;
 800155a:	e383      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <PWM_Move_Steps+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001562:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001566:	4619      	mov	r1, r3
 8001568:	484e      	ldr	r0, [pc, #312]	; (80016a4 <PWM_Move_Steps+0x2a4>)
 800156a:	f7ff f8bb 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001592:	78bb      	ldrb	r3, [r7, #2]
 8001594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <PWM_Move_Steps+0x2a8>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	095a      	lsrs	r2, r3, #5
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b101 << 0);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f043 0205 	orr.w	r2, r3, #5
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60da      	str	r2, [r3, #12]
			break;
 80015be:	e351      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80015c0:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <PWM_Move_Steps+0x2b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80015c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ca:	4619      	mov	r1, r3
 80015cc:	4835      	ldr	r0, [pc, #212]	; (80016a4 <PWM_Move_Steps+0x2a4>)
 80015ce:	f7ff f889 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f043 0208 	orr.w	r2, r3, #8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80015f6:	78bb      	ldrb	r3, [r7, #2]
 80015f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <PWM_Move_Steps+0x2a8>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	095a      	lsrs	r2, r3, #5
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f043 0209 	orr.w	r2, r3, #9
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60da      	str	r2, [r3, #12]
			break;
 8001622:	e31f      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <PWM_Move_Steps+0x2b4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800162a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <PWM_Move_Steps+0x2a4>)
 8001632:	f7ff f857 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800165a:	78bb      	ldrb	r3, [r7, #2]
 800165c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <PWM_Move_Steps+0x2a8>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	095a      	lsrs	r2, r3, #5
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b10001 << 0);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f043 0211 	orr.w	r2, r3, #17
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
			break;
 8001686:	e2ed      	b.n	8001c64 <PWM_Move_Steps+0x864>
 8001688:	200000a9 	.word	0x200000a9
 800168c:	200000aa 	.word	0x200000aa
 8001690:	000f4240 	.word	0x000f4240
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40021000 	.word	0x40021000
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	08002730 	.word	0x08002730
 80016a4:	40010800 	.word	0x40010800
 80016a8:	51eb851f 	.word	0x51eb851f
 80016ac:	08002734 	.word	0x08002734
 80016b0:	08002738 	.word	0x08002738
 80016b4:	0800273c 	.word	0x0800273c
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016be:	f040 80dd 	bne.w	800187c <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 80016c2:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <PWM_Move_Steps+0x544>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a9f      	ldr	r2, [pc, #636]	; (8001944 <PWM_Move_Steps+0x544>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80016ce:	4b9d      	ldr	r3, [pc, #628]	; (8001944 <PWM_Move_Steps+0x544>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a9c      	ldr	r2, [pc, #624]	; (8001944 <PWM_Move_Steps+0x544>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80016da:	4b9a      	ldr	r3, [pc, #616]	; (8001944 <PWM_Move_Steps+0x544>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a99      	ldr	r2, [pc, #612]	; (8001944 <PWM_Move_Steps+0x544>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 80016e6:	4b98      	ldr	r3, [pc, #608]	; (8001948 <PWM_Move_Steps+0x548>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a97      	ldr	r2, [pc, #604]	; (8001948 <PWM_Move_Steps+0x548>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0201 	bic.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	2b03      	cmp	r3, #3
 8001702:	f200 82af 	bhi.w	8001c64 <PWM_Move_Steps+0x864>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <PWM_Move_Steps+0x30c>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	0800171d 	.word	0x0800171d
 8001710:	08001775 	.word	0x08001775
 8001714:	080017cd 	.word	0x080017cd
 8001718:	08001825 	.word	0x08001825
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800171c:	4b8b      	ldr	r3, [pc, #556]	; (800194c <PWM_Move_Steps+0x54c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001722:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001726:	4619      	mov	r1, r3
 8001728:	4889      	ldr	r0, [pc, #548]	; (8001950 <PWM_Move_Steps+0x550>)
 800172a:	f7fe ffdb 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f043 0208 	orr.w	r2, r3, #8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a7e      	ldr	r2, [pc, #504]	; (8001954 <PWM_Move_Steps+0x554>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	095a      	lsrs	r2, r3, #5
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f043 0203 	orr.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60da      	str	r2, [r3, #12]
			break;
 8001772:	e277      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001774:	4b78      	ldr	r3, [pc, #480]	; (8001958 <PWM_Move_Steps+0x558>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800177a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800177e:	4619      	mov	r1, r3
 8001780:	4873      	ldr	r0, [pc, #460]	; (8001950 <PWM_Move_Steps+0x550>)
 8001782:	f7fe ffaf 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a68      	ldr	r2, [pc, #416]	; (8001954 <PWM_Move_Steps+0x554>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	095a      	lsrs	r2, r3, #5
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f043 0205 	orr.w	r2, r3, #5
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60da      	str	r2, [r3, #12]
			break;
 80017ca:	e24b      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80017cc:	4b63      	ldr	r3, [pc, #396]	; (800195c <PWM_Move_Steps+0x55c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80017d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d6:	4619      	mov	r1, r3
 80017d8:	485d      	ldr	r0, [pc, #372]	; (8001950 <PWM_Move_Steps+0x550>)
 80017da:	f7fe ff83 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f043 0208 	orr.w	r2, r3, #8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001802:	78bb      	ldrb	r3, [r7, #2]
 8001804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4a52      	ldr	r2, [pc, #328]	; (8001954 <PWM_Move_Steps+0x554>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	095a      	lsrs	r2, r3, #5
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f043 0209 	orr.w	r2, r3, #9
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60da      	str	r2, [r3, #12]
			break;
 8001822:	e21f      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <PWM_Move_Steps+0x560>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4847      	ldr	r0, [pc, #284]	; (8001950 <PWM_Move_Steps+0x550>)
 8001832:	f7fe ff57 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800185a:	78bb      	ldrb	r3, [r7, #2]
 800185c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	4a3c      	ldr	r2, [pc, #240]	; (8001954 <PWM_Move_Steps+0x554>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	095a      	lsrs	r2, r3, #5
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f043 0211 	orr.w	r2, r3, #17
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60da      	str	r2, [r3, #12]
			break;
 800187a:	e1f3      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a39      	ldr	r2, [pc, #228]	; (8001964 <PWM_Move_Steps+0x564>)
 8001880:	4293      	cmp	r3, r2
 8001882:	f040 80f7 	bne.w	8001a74 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <PWM_Move_Steps+0x544>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a2e      	ldr	r2, [pc, #184]	; (8001944 <PWM_Move_Steps+0x544>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <PWM_Move_Steps+0x544>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <PWM_Move_Steps+0x544>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <PWM_Move_Steps+0x544>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <PWM_Move_Steps+0x544>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <PWM_Move_Steps+0x544>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a25      	ldr	r2, [pc, #148]	; (8001944 <PWM_Move_Steps+0x544>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <PWM_Move_Steps+0x548>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <PWM_Move_Steps+0x548>)
 80018bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018c0:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0201 	bic.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	f200 81c7 	bhi.w	8001c64 <PWM_Move_Steps+0x864>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <PWM_Move_Steps+0x4dc>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	0800196d 	.word	0x0800196d
 80018e4:	080019c5 	.word	0x080019c5
 80018e8:	08001a1d 	.word	0x08001a1d
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <PWM_Move_Steps+0x568>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4815      	ldr	r0, [pc, #84]	; (8001950 <PWM_Move_Steps+0x550>)
 80018fa:	f7fe fef3 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f043 0208 	orr.w	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001922:	78bb      	ldrb	r3, [r7, #2]
 8001924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <PWM_Move_Steps+0x554>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	095a      	lsrs	r2, r3, #5
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f043 0203 	orr.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60da      	str	r2, [r3, #12]
			break;
 8001942:	e18f      	b.n	8001c64 <PWM_Move_Steps+0x864>
 8001944:	40021000 	.word	0x40021000
 8001948:	e000e100 	.word	0xe000e100
 800194c:	08002740 	.word	0x08002740
 8001950:	40010800 	.word	0x40010800
 8001954:	51eb851f 	.word	0x51eb851f
 8001958:	08002744 	.word	0x08002744
 800195c:	08002748 	.word	0x08002748
 8001960:	0800274c 	.word	0x0800274c
 8001964:	40000400 	.word	0x40000400
 8001968:	08002750 	.word	0x08002750
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800196c:	4b9c      	ldr	r3, [pc, #624]	; (8001be0 <PWM_Move_Steps+0x7e0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	489a      	ldr	r0, [pc, #616]	; (8001be4 <PWM_Move_Steps+0x7e4>)
 800197a:	f7fe feb3 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	f043 0210 	orr.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4a8f      	ldr	r2, [pc, #572]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	095a      	lsrs	r2, r3, #5
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f043 0205 	orr.w	r2, r3, #5
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
			break;
 80019c2:	e14f      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80019c4:	4b89      	ldr	r3, [pc, #548]	; (8001bec <PWM_Move_Steps+0x7ec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	4619      	mov	r1, r3
 80019d0:	4887      	ldr	r0, [pc, #540]	; (8001bf0 <PWM_Move_Steps+0x7f0>)
 80019d2:	f7fe fe87 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f043 0208 	orr.w	r2, r3, #8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80019fa:	78bb      	ldrb	r3, [r7, #2]
 80019fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	095a      	lsrs	r2, r3, #5
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
			break;
 8001a1a:	e123      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <PWM_Move_Steps+0x7f4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4871      	ldr	r0, [pc, #452]	; (8001bf0 <PWM_Move_Steps+0x7f0>)
 8001a2a:	f7fe fe5b 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	095a      	lsrs	r2, r3, #5
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60da      	str	r2, [r3, #12]
			break;
 8001a72:	e0f7      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a60      	ldr	r2, [pc, #384]	; (8001bf8 <PWM_Move_Steps+0x7f8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f040 80f3 	bne.w	8001c64 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <PWM_Move_Steps+0x7fc>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <PWM_Move_Steps+0x800>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <PWM_Move_Steps+0x800>)
 8001aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aac:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0201 	bic.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	f200 80d1 	bhi.w	8001c64 <PWM_Move_Steps+0x864>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PWM_Move_Steps+0x6c8>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001b31 	.word	0x08001b31
 8001ad0:	08001b89 	.word	0x08001b89
 8001ad4:	08001c0d 	.word	0x08001c0d
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <PWM_Move_Steps+0x804>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4842      	ldr	r0, [pc, #264]	; (8001bf0 <PWM_Move_Steps+0x7f0>)
 8001ae6:	f7fe fdfd 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f043 0208 	orr.w	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8001b0e:	78bb      	ldrb	r3, [r7, #2]
 8001b10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	095a      	lsrs	r2, r3, #5
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f043 0203 	orr.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
			break;
 8001b2e:	e099      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <PWM_Move_Steps+0x7e0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482c      	ldr	r0, [pc, #176]	; (8001bf0 <PWM_Move_Steps+0x7f0>)
 8001b3e:	f7fe fdd1 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8001b66:	78bb      	ldrb	r3, [r7, #2]
 8001b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	095a      	lsrs	r2, r3, #5
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b001 << 0);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60da      	str	r2, [r3, #12]
			break;
 8001b86:	e06d      	b.n	8001c64 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <PWM_Move_Steps+0x808>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <PWM_Move_Steps+0x7f0>)
 8001b96:	f7fe fda5 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f043 0208 	orr.w	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8001bbe:	78bb      	ldrb	r3, [r7, #2]
 8001bc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <PWM_Move_Steps+0x7e8>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	095a      	lsrs	r2, r3, #5
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60da      	str	r2, [r3, #12]
			break;
 8001bde:	e041      	b.n	8001c64 <PWM_Move_Steps+0x864>
 8001be0:	08002754 	.word	0x08002754
 8001be4:	40010800 	.word	0x40010800
 8001be8:	51eb851f 	.word	0x51eb851f
 8001bec:	08002740 	.word	0x08002740
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	08002744 	.word	0x08002744
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	08002750 	.word	0x08002750
 8001c08:	08002730 	.word	0x08002730
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <PWM_Move_Steps+0x8ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <PWM_Move_Steps+0x8b0>)
 8001c1a:	f7fe fd63 	bl	80006e4 <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8001c42:	78bb      	ldrb	r3, [r7, #2]
 8001c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <PWM_Move_Steps+0x8b4>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	095a      	lsrs	r2, r3, #5
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
			break;
 8001c62:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 8001c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28


	TIMERx->DIER |=(0b1<<0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]





}
 8001ca2:	bf00      	nop
 8001ca4:	3758      	adds	r7, #88	; 0x58
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08002734 	.word	0x08002734
 8001cb0:	40010c00 	.word	0x40010c00
 8001cb4:	51eb851f 	.word	0x51eb851f

08001cb8 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <TIM2_IRQHandler+0x68>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d128      	bne.n	8001d16 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cde:	f023 0302 	bic.w	r3, r3, #2
 8001ce2:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <TIM2_IRQHandler+0x6c>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <TIM2_IRQHandler+0x6c>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <TIM2_IRQHandler+0x6c>)
 8001cf6:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001cf8:	e00d      	b.n	8001d16 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <TIM2_IRQHandler+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 8001d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <TIM2_IRQHandler+0x70>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200000a9 	.word	0x200000a9
 8001d24:	200000aa 	.word	0x200000aa
 8001d28:	200000a8 	.word	0x200000a8

08001d2c <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <TIM3_IRQHandler+0x5c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d122      	bne.n	8001d7e <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d4a:	f023 0302 	bic.w	r3, r3, #2
 8001d4e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <TIM3_IRQHandler+0x64>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <TIM3_IRQHandler+0x64>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <TIM3_IRQHandler+0x64>)
 8001d62:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001d64:	e00b      	b.n	8001d7e <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <TIM3_IRQHandler+0x5c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <TIM3_IRQHandler+0x60>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <TIM3_IRQHandler+0x68>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200000a9 	.word	0x200000a9
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	200000aa 	.word	0x200000aa
 8001d94:	200000a8 	.word	0x200000a8

08001d98 <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <TIM4_IRQHandler+0x5c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d122      	bne.n	8001dea <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001db6:	f023 0302 	bic.w	r3, r3, #2
 8001dba:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <TIM4_IRQHandler+0x64>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <TIM4_IRQHandler+0x64>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <TIM4_IRQHandler+0x64>)
 8001dce:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8001dd0:	e00b      	b.n	8001dea <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <TIM4_IRQHandler+0x5c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <TIM4_IRQHandler+0x60>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <TIM4_IRQHandler+0x68>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200000a9 	.word	0x200000a9
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	200000aa 	.word	0x200000aa
 8001e00:	200000a8 	.word	0x200000a8

08001e04 <which_UART>:




static uint8_t which_UART(USART_Typedef * USARTx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <which_UART+0x38>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <which_UART+0x14>
		return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e00c      	b.n	8001e32 <which_UART+0x2e>
	else if(USARTx == USART2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <which_UART+0x3c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <which_UART+0x20>
		return 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e006      	b.n	8001e32 <which_UART+0x2e>
	else if(USARTx == USART3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <which_UART+0x40>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <which_UART+0x2c>
		return 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e000      	b.n	8001e32 <which_UART+0x2e>
	return 3;
 8001e30:	2303      	movs	r3, #3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40004400 	.word	0x40004400
 8001e44:	40004800 	.word	0x40004800

08001e48 <MCAL_UART_Init>:
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_Typedef * USARTx, UART_Config* UARTCfg)
{
 8001e48:	b4b0      	push	{r4, r5, r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	uint32_t Pclk = 36000000,BRR;
 8001e52:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <MCAL_UART_Init+0x184>)
 8001e54:	60fb      	str	r3, [r7, #12]



	// 1- Enable clock for the given USART Peripheral

	if(USARTx == USART1){
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a5d      	ldr	r2, [pc, #372]	; (8001fd0 <MCAL_UART_Init+0x188>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10e      	bne.n	8001e7c <MCAL_UART_Init+0x34>
		Global_UART_Config[0] = *UARTCfg;
 8001e5e:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <MCAL_UART_Init+0x18c>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4614      	mov	r4, r2
 8001e64:	461d      	mov	r5, r3
 8001e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	6023      	str	r3, [r4, #0]
		RCC_USART1_CLK_EN();
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a59      	ldr	r2, [pc, #356]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	e026      	b.n	8001eca <MCAL_UART_Init+0x82>
	}
	else if(USARTx == USART2){
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <MCAL_UART_Init+0x194>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10f      	bne.n	8001ea4 <MCAL_UART_Init+0x5c>
		Global_UART_Config[1] = *UARTCfg;
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <MCAL_UART_Init+0x18c>)
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	f103 0414 	add.w	r4, r3, #20
 8001e8c:	4615      	mov	r5, r2
 8001e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	6023      	str	r3, [r4, #0]
		RCC_USART2_CLK_EN();
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	e012      	b.n	8001eca <MCAL_UART_Init+0x82>
	}else if(USARTx == USART3){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <MCAL_UART_Init+0x198>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10e      	bne.n	8001eca <MCAL_UART_Init+0x82>
		Global_UART_Config[2] = *UARTCfg;
 8001eac:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <MCAL_UART_Init+0x18c>)
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001eb4:	4615      	mov	r5, r2
 8001eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	6023      	str	r3, [r4, #0]
		RCC_USART3_CLK_EN();
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <MCAL_UART_Init+0x190>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	61d3      	str	r3, [r2, #28]
	}



	// 2- Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60da      	str	r2, [r3, #12]

	// 3- Enable the Tx/Rx according to the USART_Mode_Configuration item
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]

	// 4- Payload length CR1
	USARTx->CR1 |= UARTCfg->Payload_length;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	7a12      	ldrb	r2, [r2, #8]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60da      	str	r2, [r3, #12]

	// Parity bits CR1
	USARTx->CR1 |= UARTCfg->Parity;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	7a52      	ldrb	r2, [r2, #9]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]

	// Stop bits CR2
	USARTx->CR2 |= UARTCfg->StopBits;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	7a92      	ldrb	r2, [r2, #10]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]

	// Flow control CR3
	USARTx->CR3 |= UARTCfg->HWFlowCtrl;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	7ad2      	ldrb	r2, [r2, #11]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	615a      	str	r2, [r3, #20]
//		Pclk = MCAL_RCC_GetPCLK2Freq();
//	}else{
//		Pclk = MCAL_RCC_GetPCLK1Freq();
	//}

	BRR = UART_BRR_Register(Pclk,UARTCfg->BaudRate);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	0119      	lsls	r1, r3, #4
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	009a      	lsls	r2, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	fb00 f303 	mul.w	r3, r0, r3
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <MCAL_UART_Init+0x19c>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	430b      	orrs	r3, r1
 8001f64:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	609a      	str	r2, [r3, #8]


	// Enable / Disable Interrupts
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7b1b      	ldrb	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d026      	beq.n	8001fc2 <MCAL_UART_Init+0x17a>
	{
		USARTx->CR1 |= (UARTCfg->IRQ_Enable);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	7b12      	ldrb	r2, [r2, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60da      	str	r2, [r3, #12]

		// Enable NVIC for USARTx IRQ

		if(USARTx == USART1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <MCAL_UART_Init+0x188>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d106      	bne.n	8001f98 <MCAL_UART_Init+0x150>
			NVIC_IRQ37_USART1_Enable;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}

}
 8001f96:	e014      	b.n	8001fc2 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <MCAL_UART_Init+0x194>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d106      	bne.n	8001fae <MCAL_UART_Init+0x166>
			NVIC_IRQ38_USART2_Enable;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	e009      	b.n	8001fc2 <MCAL_UART_Init+0x17a>
		else if(USARTx == USART3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <MCAL_UART_Init+0x198>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d105      	bne.n	8001fc2 <MCAL_UART_Init+0x17a>
			NVIC_IRQ39_USART3_Enable;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <MCAL_UART_Init+0x1a0>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bcb0      	pop	{r4, r5, r7}
 8001fca:	4770      	bx	lr
 8001fcc:	02255100 	.word	0x02255100
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	200000ac 	.word	0x200000ac
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	40004800 	.word	0x40004800
 8001fe4:	51eb851f 	.word	0x51eb851f
 8001fe8:	e000e104 	.word	0xe000e104

08001fec <MCAL_UART_SendData>:




void MCAL_UART_SendData(USART_Typedef * USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	71fb      	strb	r3, [r7, #7]
	// Wait until TXE flag is set (Empty)
	if(PollingEn == Enable){
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8002000:	bf00      	nop
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f9      	beq.n	8002002 <MCAL_UART_SendData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fef8 	bl	8001e04 <which_UART>
 8002014:	4603      	mov	r3, r0
 8002016:	75fb      	strb	r3, [r7, #23]
	if(Global_UART_Config[index].Payload_length == UART_Payload_Length_9B)
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
	}
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <MCAL_UART_ReceiveData>:
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */


void MCAL_UART_ReceiveData(USART_Typedef * USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism PollingEn)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	71fb      	strb	r3, [r7, #7]
	// Wait until RXNE flag is set in the SR
	if(PollingEn == Enable){
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 8002040:	bf00      	nop
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f9      	beq.n	8002042 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t index = which_UART(USARTx);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fed8 	bl	8001e04 <which_UART>
 8002054:	4603      	mov	r3, r0
 8002056:	75fb      	strb	r3, [r7, #23]
			// MSB is parity not data (8 bits data, 1 parity)
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
		}
	}else
	{    // 8 bits data
		if(Global_UART_Config[index].Parity == UART_Parity_NONE)
 8002058:	7dfa      	ldrb	r2, [r7, #23]
 800205a:	490f      	ldr	r1, [pc, #60]	; (8002098 <MCAL_UART_ReceiveData+0x6c>)
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3309      	adds	r3, #9
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <MCAL_UART_ReceiveData+0x52>
		{
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	b29a      	uxth	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	801a      	strh	r2, [r3, #0]
		}


	}

}
 800207c:	e007      	b.n	800208e <MCAL_UART_ReceiveData+0x62>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002088:	b29a      	uxth	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	801a      	strh	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200000ac 	.word	0x200000ac

0800209c <MCAL_UART_GPIO_SetPins>:
 */



void MCAL_UART_GPIO_SetPins(USART_Typedef * USARTx)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;


	if(USARTx == USART1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <MCAL_UART_GPIO_SetPins+0xb8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d118      	bne.n	80020de <MCAL_UART_GPIO_SetPins+0x42>
	{
		// PA9 --> Tx
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80020ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80020b2:	2306      	movs	r3, #6
 80020b4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	4619      	mov	r1, r3
 80020c0:	4825      	ldr	r0, [pc, #148]	; (8002158 <MCAL_UART_GPIO_SetPins+0xbc>)
 80020c2:	f7fe fb0f 	bl	80006e4 <MCAL_GPIO_Init>


		// PA10 --> Rx
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80020cc:	2308      	movs	r3, #8
 80020ce:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4820      	ldr	r0, [pc, #128]	; (8002158 <MCAL_UART_GPIO_SetPins+0xbc>)
 80020d8:	f7fe fb04 	bl	80006e4 <MCAL_GPIO_Init>
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
		}

	}
}
 80020dc:	e036      	b.n	800214c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <MCAL_UART_GPIO_SetPins+0xc0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d116      	bne.n	8002114 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80020e6:	2304      	movs	r3, #4
 80020e8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 80020ea:	2306      	movs	r3, #6
 80020ec:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	4817      	ldr	r0, [pc, #92]	; (8002158 <MCAL_UART_GPIO_SetPins+0xbc>)
 80020fa:	f7fe faf3 	bl	80006e4 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80020fe:	2308      	movs	r3, #8
 8002100:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8002102:	2308      	movs	r3, #8
 8002104:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	4619      	mov	r1, r3
 800210c:	4812      	ldr	r0, [pc, #72]	; (8002158 <MCAL_UART_GPIO_SetPins+0xbc>)
 800210e:	f7fe fae9 	bl	80006e4 <MCAL_GPIO_Init>
}
 8002112:	e01b      	b.n	800214c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MCAL_UART_GPIO_SetPins+0xc4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d117      	bne.n	800214c <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800211c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002120:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_OUTPUT_PUSHPULL;
 8002122:	2306      	movs	r3, #6
 8002124:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <MCAL_UART_GPIO_SetPins+0xc8>)
 8002132:	f7fe fad7 	bl	80006e4 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8002136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800213a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800213c:	2308      	movs	r3, #8
 800213e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	4619      	mov	r1, r3
 8002146:	4807      	ldr	r0, [pc, #28]	; (8002164 <MCAL_UART_GPIO_SetPins+0xc8>)
 8002148:	f7fe facc 	bl	80006e4 <MCAL_GPIO_Init>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013800 	.word	0x40013800
 8002158:	40010800 	.word	0x40010800
 800215c:	40004400 	.word	0x40004400
 8002160:	40004800 	.word	0x40004800
 8002164:	40010c00 	.word	0x40010c00

08002168 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <USART1_IRQHandler+0x10>)
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	4798      	blx	r3
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000ac 	.word	0x200000ac

0800217c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <USART2_IRQHandler+0x10>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	4798      	blx	r3
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200000ac 	.word	0x200000ac

08002190 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <USART3_IRQHandler+0x10>)
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	4798      	blx	r3
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000ac 	.word	0x200000ac

080021a4 <UART_Receiver_Callback>:
Robot_State MyCurrentState = Idle;


// Test succedded ----------------------------------------------------
void UART_Receiver_Callback(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80021a8:	2201      	movs	r2, #1
 80021aa:	4914      	ldr	r1, [pc, #80]	; (80021fc <UART_Receiver_Callback+0x58>)
 80021ac:	4814      	ldr	r0, [pc, #80]	; (8002200 <UART_Receiver_Callback+0x5c>)
 80021ae:	f7ff ff3d 	bl	800202c <MCAL_UART_ReceiveData>
	if(RecievedFromServer == PARKING_REQUEST || RecievedFromServer == RETRIEVAL_REQUEST){
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <UART_Receiver_Callback+0x58>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b42      	cmp	r3, #66	; 0x42
 80021ba:	d004      	beq.n	80021c6 <UART_Receiver_Callback+0x22>
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <UART_Receiver_Callback+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b45      	cmp	r3, #69	; 0x45
 80021c4:	d113      	bne.n	80021ee <UART_Receiver_Callback+0x4a>
		newMessageArrived = 1;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <UART_Receiver_Callback+0x60>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		if(RecievedFromServer == PARKING_REQUEST)
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <UART_Receiver_Callback+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b42      	cmp	r3, #66	; 0x42
 80021d4:	d103      	bne.n	80021de <UART_Receiver_Callback+0x3a>
			isAParking = 1;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <UART_Receiver_Callback+0x64>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e007      	b.n	80021ee <UART_Receiver_Callback+0x4a>
		else if(RecievedFromServer == RETRIEVAL_REQUEST)
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <UART_Receiver_Callback+0x58>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b45      	cmp	r3, #69	; 0x45
 80021e6:	d102      	bne.n	80021ee <UART_Receiver_Callback+0x4a>
			isRetrieving = 1;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <UART_Receiver_Callback+0x68>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]


	}
	MCAL_UART_SendData(USART2, &Buffer, Enable);
 80021ee:	2201      	movs	r2, #1
 80021f0:	4907      	ldr	r1, [pc, #28]	; (8002210 <UART_Receiver_Callback+0x6c>)
 80021f2:	4803      	ldr	r0, [pc, #12]	; (8002200 <UART_Receiver_Callback+0x5c>)
 80021f4:	f7ff fefa 	bl	8001fec <MCAL_UART_SendData>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200000e8 	.word	0x200000e8
 8002200:	40004400 	.word	0x40004400
 8002204:	200000ee 	.word	0x200000ee
 8002208:	200000ea 	.word	0x200000ea
 800220c:	200000e9 	.word	0x200000e9
 8002210:	20000000 	.word	0x20000000

08002214 <main>:
uint8_t Done_Moving_Backward = 0;


uint8_t DoneSending = 0;

int main(void) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b094      	sub	sp, #80	; 0x50
 8002218:	af02      	add	r7, sp, #8



	Clock_Init();
 800221a:	f000 f9fd 	bl	8002618 <Clock_Init>

	UART_Config UART_Cfg;
	UART_Cfg.BaudRate = UART_BaudRate_115200;
 800221e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
	UART_Cfg.HWFlowCtrl = UART_HWFlowCtrl_NONE;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	UART_Cfg.IRQ_Enable = UART_IRQ_Enable_RXNE;
 800222a:	2320      	movs	r3, #32
 800222c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	UART_Cfg.P_IRQ_CallBack = UART_Receiver_Callback;
 8002230:	4bb6      	ldr	r3, [pc, #728]	; (800250c <main+0x2f8>)
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
	UART_Cfg.Parity = UART_Parity_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	UART_Cfg.Payload_length = UART_Payload_Length_8B;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	UART_Cfg.StopBits = UART_StopBits_1;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	UART_Cfg.USART_Mode = UART_Mode_Tx_Rx;
 8002246:	230c      	movs	r3, #12
 8002248:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MCAL_UART_Init(USART2, &UART_Cfg);
 800224c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002250:	4619      	mov	r1, r3
 8002252:	48af      	ldr	r0, [pc, #700]	; (8002510 <main+0x2fc>)
 8002254:	f7ff fdf8 	bl	8001e48 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART2);
 8002258:	48ad      	ldr	r0, [pc, #692]	; (8002510 <main+0x2fc>)
 800225a:	f7ff ff1f 	bl	800209c <MCAL_UART_GPIO_SetPins>




	Motor_Config_t DC_Motor1 =
 800225e:	4bad      	ldr	r3, [pc, #692]	; (8002514 <main+0x300>)
 8002260:	f107 0420 	add.w	r4, r7, #32
 8002264:	461d      	mov	r5, r3
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	6023      	str	r3, [r4, #0]
			.DC_PortNumber1 = GPIOA,
			.DC_PortNumber2 = GPIOA,
			.PWM_Timer = TIMER3, //A6
			.PWM_Channel = TIMER_CH1
	};
	Motor_Config_t DC_Motor2 =
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <main+0x304>)
 8002270:	f107 040c 	add.w	r4, r7, #12
 8002274:	461d      	mov	r5, r3
 8002276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227a:	682b      	ldr	r3, [r5, #0]
 800227c:	6023      	str	r3, [r4, #0]
			.PWM_Timer = TIMER3, // B1
			.PWM_Channel = TIMER_CH4
	};


	Motor_intialize(&DC_Motor1);
 800227e:	f107 0320 	add.w	r3, r7, #32
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ff74 	bl	8000170 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4618      	mov	r0, r3
 800228e:	f7fd ff6f 	bl	8000170 <Motor_intialize>

	GPIO_PinConfig_t Stepper1DirPin = {
 8002292:	4ba2      	ldr	r3, [pc, #648]	; (800251c <main+0x308>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60bb      	str	r3, [r7, #8]
			.GPIO_PinNumber = GPIO_PIN_8,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t Stepper2DirPin = {
 8002298:	4ba1      	ldr	r3, [pc, #644]	; (8002520 <main+0x30c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	607b      	str	r3, [r7, #4]
			.GPIO_PinNumber = GPIO_PIN_6,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	GPIO_PinConfig_t IR = {
 800229e:	4ba1      	ldr	r3, [pc, #644]	; (8002524 <main+0x310>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	603b      	str	r3, [r7, #0]
			.GPIO_PinNumber = GPIO_PIN_13,
			.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};

	MCAL_GPIO_Init(GPIOC, &IR);
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	489f      	ldr	r0, [pc, #636]	; (8002528 <main+0x314>)
 80022aa:	f7fe fa1b 	bl	80006e4 <MCAL_GPIO_Init>
	Stepper_Init(&Stepper1DirPin);
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd fff4 	bl	80002a0 <Stepper_Init>
	Stepper_Init(&Stepper2DirPin);
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fd fff0 	bl	80002a0 <Stepper_Init>




	while (1) {
		if(newMessageArrived)
 80022c0:	4b9a      	ldr	r3, [pc, #616]	; (800252c <main+0x318>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8192 	beq.w	80025f0 <main+0x3dc>
		{
			newMessageArrived = 0;
 80022cc:	4b97      	ldr	r3, [pc, #604]	; (800252c <main+0x318>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]


			if(RecievedFromServer == PARKING_REQUEST || RecievedFromServer == RETRIEVAL_REQUEST){
 80022d2:	4b97      	ldr	r3, [pc, #604]	; (8002530 <main+0x31c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b42      	cmp	r3, #66	; 0x42
 80022da:	d004      	beq.n	80022e6 <main+0xd2>
 80022dc:	4b94      	ldr	r3, [pc, #592]	; (8002530 <main+0x31c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b45      	cmp	r3, #69	; 0x45
 80022e4:	d112      	bne.n	800230c <main+0xf8>


				Done_Moving_Backward = 0;
 80022e6:	4b93      	ldr	r3, [pc, #588]	; (8002534 <main+0x320>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
				Done_Moving_Forward = 0;
 80022ec:	4b92      	ldr	r3, [pc, #584]	; (8002538 <main+0x324>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
				mySendChar = RECEIVED_OK;
 80022f2:	4b92      	ldr	r3, [pc, #584]	; (800253c <main+0x328>)
 80022f4:	2243      	movs	r2, #67	; 0x43
 80022f6:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80022f8:	2201      	movs	r2, #1
 80022fa:	4990      	ldr	r1, [pc, #576]	; (800253c <main+0x328>)
 80022fc:	4884      	ldr	r0, [pc, #528]	; (8002510 <main+0x2fc>)
 80022fe:	f7ff fe75 	bl	8001fec <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002302:	2201      	movs	r2, #1
 8002304:	498a      	ldr	r1, [pc, #552]	; (8002530 <main+0x31c>)
 8002306:	4882      	ldr	r0, [pc, #520]	; (8002510 <main+0x2fc>)
 8002308:	f7ff fe90 	bl	800202c <MCAL_UART_ReceiveData>
			}
			if(RecievedFromServer == FIRST_REKEB){
 800230c:	4b88      	ldr	r3, [pc, #544]	; (8002530 <main+0x31c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b46      	cmp	r3, #70	; 0x46
 8002314:	d16f      	bne.n	80023f6 <main+0x1e2>
				RecievedFromServer = 0;
 8002316:	4b86      	ldr	r3, [pc, #536]	; (8002530 <main+0x31c>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]

				mySendChar = 0;
 800231c:	4b87      	ldr	r3, [pc, #540]	; (800253c <main+0x328>)
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]

				if(isAParking)
 8002322:	4b87      	ldr	r3, [pc, #540]	; (8002540 <main+0x32c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <main+0x124>
				{
					mySendChar = START_PARKING;
 800232c:	4b83      	ldr	r3, [pc, #524]	; (800253c <main+0x328>)
 800232e:	2255      	movs	r2, #85	; 0x55
 8002330:	801a      	strh	r2, [r3, #0]
					MyCurrentState = Parking_Started;
 8002332:	4b84      	ldr	r3, [pc, #528]	; (8002544 <main+0x330>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
				}
				if(isRetrieving)
 8002338:	4b83      	ldr	r3, [pc, #524]	; (8002548 <main+0x334>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <main+0x13a>
				{
					mySendChar = START_RETRIEVING;
 8002342:	4b7e      	ldr	r3, [pc, #504]	; (800253c <main+0x328>)
 8002344:	224c      	movs	r2, #76	; 0x4c
 8002346:	801a      	strh	r2, [r3, #0]
					MyCurrentState = Retreiving_Staretd;
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <main+0x330>)
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
				}

//				mySendChar = START_PARKING;
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 800234e:	2201      	movs	r2, #1
 8002350:	497a      	ldr	r1, [pc, #488]	; (800253c <main+0x328>)
 8002352:	486f      	ldr	r0, [pc, #444]	; (8002510 <main+0x2fc>)
 8002354:	f7ff fe4a 	bl	8001fec <MCAL_UART_SendData>


				// 3- Move forward -- distance (Main Track)
				while(!Done_Moving_Forward)
 8002358:	e038      	b.n	80023cc <main+0x1b8>
				{
					Motor_Move_ForWard(&DC_Motor1, 100);
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2164      	movs	r1, #100	; 0x64
 8002360:	4618      	mov	r0, r3
 8002362:	f7fd ff53 	bl	800020c <Motor_Move_ForWard>
					Motor_Move_ForWard(&DC_Motor2, 100);
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	2164      	movs	r1, #100	; 0x64
 800236c:	4618      	mov	r0, r3
 800236e:	f7fd ff4d 	bl	800020c <Motor_Move_ForWard>
					Delay_Timer1_ms(3000);
 8002372:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002376:	f7fe fc69 	bl	8000c4c <Delay_Timer1_ms>
					Motor_TurnOff(&DC_Motor1);
 800237a:	f107 0320 	add.w	r3, r7, #32
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ff1c 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff17 	bl	80001bc <Motor_TurnOff>
					Done_Moving_Forward = 1;
 800238e:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <main+0x324>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
					Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_UP);  // B9 --> Step
 8002394:	2301      	movs	r3, #1
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2332      	movs	r3, #50	; 0x32
 80023a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023a4:	2103      	movs	r1, #3
 80023a6:	4869      	ldr	r0, [pc, #420]	; (800254c <main+0x338>)
 80023a8:	f7fd ff9e 	bl	80002e8 <Stepper_Move_Steps>
					Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 700, Stepper_UP);  // B7 --> Step
 80023ac:	2301      	movs	r3, #1
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2332      	movs	r3, #50	; 0x32
 80023b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023bc:	2101      	movs	r1, #1
 80023be:	4863      	ldr	r0, [pc, #396]	; (800254c <main+0x338>)
 80023c0:	f7fd ff92 	bl	80002e8 <Stepper_Move_Steps>
					Delay_Timer1_ms(3000);
 80023c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023c8:	f7fe fc40 	bl	8000c4c <Delay_Timer1_ms>
				while(!Done_Moving_Forward)
 80023cc:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <main+0x324>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0c2      	beq.n	800235a <main+0x146>
				}


				mySendChar = ARRIVED_INFRONTOF_SLOT;
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <main+0x328>)
 80023d6:	2248      	movs	r2, #72	; 0x48
 80023d8:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80023da:	2201      	movs	r2, #1
 80023dc:	4957      	ldr	r1, [pc, #348]	; (800253c <main+0x328>)
 80023de:	484c      	ldr	r0, [pc, #304]	; (8002510 <main+0x2fc>)
 80023e0:	f7ff fe04 	bl	8001fec <MCAL_UART_SendData>

				MyCurrentState = Arrived_At_ParkingSlot;
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <main+0x330>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80023ea:	2201      	movs	r2, #1
 80023ec:	4950      	ldr	r1, [pc, #320]	; (8002530 <main+0x31c>)
 80023ee:	4848      	ldr	r0, [pc, #288]	; (8002510 <main+0x2fc>)
 80023f0:	f7ff fe1c 	bl	800202c <MCAL_UART_ReceiveData>
 80023f4:	e00c      	b.n	8002410 <main+0x1fc>
			}else{
				mySendChar = RECEIVED_OK;
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <main+0x328>)
 80023f8:	2243      	movs	r2, #67	; 0x43
 80023fa:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80023fc:	2201      	movs	r2, #1
 80023fe:	494f      	ldr	r1, [pc, #316]	; (800253c <main+0x328>)
 8002400:	4843      	ldr	r0, [pc, #268]	; (8002510 <main+0x2fc>)
 8002402:	f7ff fdf3 	bl	8001fec <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002406:	2201      	movs	r2, #1
 8002408:	4949      	ldr	r1, [pc, #292]	; (8002530 <main+0x31c>)
 800240a:	4841      	ldr	r0, [pc, #260]	; (8002510 <main+0x2fc>)
 800240c:	f7ff fe0e 	bl	800202c <MCAL_UART_ReceiveData>


			}
			if(RecievedFromServer == DONE_PARKING || RecievedFromServer == DONE_RETREIVING){
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <main+0x31c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b4a      	cmp	r3, #74	; 0x4a
 8002418:	d004      	beq.n	8002424 <main+0x210>
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <main+0x31c>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b4e      	cmp	r3, #78	; 0x4e
 8002422:	d151      	bne.n	80024c8 <main+0x2b4>
				RecievedFromServer = 0;
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <main+0x31c>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
				// 7- Backward distance -- (Main track)
				while(!Done_Moving_Backward)
 800242a:	e038      	b.n	800249e <main+0x28a>
				{
					Motor_Move_BackWard(&DC_Motor1, 100);
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd ff0f 	bl	8000256 <Motor_Move_BackWard>
					Motor_Move_BackWard(&DC_Motor2, 100);
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2164      	movs	r1, #100	; 0x64
 800243e:	4618      	mov	r0, r3
 8002440:	f7fd ff09 	bl	8000256 <Motor_Move_BackWard>
					Delay_Timer1_ms(3000);
 8002444:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002448:	f7fe fc00 	bl	8000c4c <Delay_Timer1_ms>
					Motor_TurnOff(&DC_Motor1);
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd feb3 	bl	80001bc <Motor_TurnOff>
					Motor_TurnOff(&DC_Motor2);
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd feae 	bl	80001bc <Motor_TurnOff>
					// 8- Lower the other robot
					Stepper_Move_Steps(TIMER4, TIMER_CH4, 800, 50, 700, Stepper_Down);  // B9 --> Step
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2332      	movs	r3, #50	; 0x32
 800246c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002470:	2103      	movs	r1, #3
 8002472:	4836      	ldr	r0, [pc, #216]	; (800254c <main+0x338>)
 8002474:	f7fd ff38 	bl	80002e8 <Stepper_Move_Steps>
					Stepper_Move_Steps(TIMER4, TIMER_CH2, 800, 50, 700, Stepper_Down);  // B7 --> Step
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2332      	movs	r3, #50	; 0x32
 8002484:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002488:	2101      	movs	r1, #1
 800248a:	4830      	ldr	r0, [pc, #192]	; (800254c <main+0x338>)
 800248c:	f7fd ff2c 	bl	80002e8 <Stepper_Move_Steps>
					Delay_Timer1_ms(3000);
 8002490:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002494:	f7fe fbda 	bl	8000c4c <Delay_Timer1_ms>
					Done_Moving_Backward = 1;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <main+0x320>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
				while(!Done_Moving_Backward)
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <main+0x320>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0c2      	beq.n	800242c <main+0x218>
				}


				mySendChar = ARRIVED_AT_ENTRY;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <main+0x328>)
 80024a8:	2249      	movs	r2, #73	; 0x49
 80024aa:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80024ac:	2201      	movs	r2, #1
 80024ae:	4923      	ldr	r1, [pc, #140]	; (800253c <main+0x328>)
 80024b0:	4817      	ldr	r0, [pc, #92]	; (8002510 <main+0x2fc>)
 80024b2:	f7ff fd9b 	bl	8001fec <MCAL_UART_SendData>

				MyCurrentState = Arrived_At_Entry;
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <main+0x330>)
 80024b8:	2204      	movs	r2, #4
 80024ba:	701a      	strb	r2, [r3, #0]
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80024bc:	2201      	movs	r2, #1
 80024be:	491c      	ldr	r1, [pc, #112]	; (8002530 <main+0x31c>)
 80024c0:	4813      	ldr	r0, [pc, #76]	; (8002510 <main+0x2fc>)
 80024c2:	f7ff fdb3 	bl	800202c <MCAL_UART_ReceiveData>
 80024c6:	e00c      	b.n	80024e2 <main+0x2ce>
			}else{
				mySendChar = ARRIVED_INFRONTOF_SLOT;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <main+0x328>)
 80024ca:	2248      	movs	r2, #72	; 0x48
 80024cc:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80024ce:	2201      	movs	r2, #1
 80024d0:	491a      	ldr	r1, [pc, #104]	; (800253c <main+0x328>)
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <main+0x2fc>)
 80024d4:	f7ff fd8a 	bl	8001fec <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 80024d8:	2201      	movs	r2, #1
 80024da:	4915      	ldr	r1, [pc, #84]	; (8002530 <main+0x31c>)
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <main+0x2fc>)
 80024de:	f7ff fda5 	bl	800202c <MCAL_UART_ReceiveData>
			}
			if(RecievedFromServer == FIRST_HOME){
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <main+0x31c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b47      	cmp	r3, #71	; 0x47
 80024ea:	d14a      	bne.n	8002582 <main+0x36e>
				RecievedFromServer = 0;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <main+0x31c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]

				if(isAParking)
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <main+0x32c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d029      	beq.n	8002550 <main+0x33c>
				{
					mySendChar = FINISH_PARKING;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <main+0x328>)
 80024fe:	2258      	movs	r2, #88	; 0x58
 8002500:	801a      	strh	r2, [r3, #0]
					MyCurrentState = Parking_Finished;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <main+0x330>)
 8002504:	2205      	movs	r2, #5
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e02d      	b.n	8002566 <main+0x352>
 800250a:	bf00      	nop
 800250c:	080021a5 	.word	0x080021a5
 8002510:	40004400 	.word	0x40004400
 8002514:	08002758 	.word	0x08002758
 8002518:	0800276c 	.word	0x0800276c
 800251c:	08002780 	.word	0x08002780
 8002520:	08002784 	.word	0x08002784
 8002524:	08002788 	.word	0x08002788
 8002528:	40011000 	.word	0x40011000
 800252c:	200000ee 	.word	0x200000ee
 8002530:	200000e8 	.word	0x200000e8
 8002534:	200000f1 	.word	0x200000f1
 8002538:	200000f0 	.word	0x200000f0
 800253c:	200000ec 	.word	0x200000ec
 8002540:	200000ea 	.word	0x200000ea
 8002544:	200000ef 	.word	0x200000ef
 8002548:	200000e9 	.word	0x200000e9
 800254c:	40000800 	.word	0x40000800
				}else if(isRetrieving)
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <main+0x3e8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <main+0x352>
				{
					mySendChar = FINISH_RETRIEVING;
 800255a:	4b29      	ldr	r3, [pc, #164]	; (8002600 <main+0x3ec>)
 800255c:	224d      	movs	r2, #77	; 0x4d
 800255e:	801a      	strh	r2, [r3, #0]
					MyCurrentState = Retreiving_Finished;
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <main+0x3f0>)
 8002562:	2206      	movs	r2, #6
 8002564:	701a      	strb	r2, [r3, #0]
				}

//				mySendChar = FINISH_PARKING;
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8002566:	2201      	movs	r2, #1
 8002568:	4925      	ldr	r1, [pc, #148]	; (8002600 <main+0x3ec>)
 800256a:	4827      	ldr	r0, [pc, #156]	; (8002608 <main+0x3f4>)
 800256c:	f7ff fd3e 	bl	8001fec <MCAL_UART_SendData>


				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002570:	2201      	movs	r2, #1
 8002572:	4926      	ldr	r1, [pc, #152]	; (800260c <main+0x3f8>)
 8002574:	4824      	ldr	r0, [pc, #144]	; (8002608 <main+0x3f4>)
 8002576:	f7ff fd59 	bl	800202c <MCAL_UART_ReceiveData>


				RecievedFromServer = 0;
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <main+0x3f8>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e00c      	b.n	800259c <main+0x388>
			}else{
				mySendChar = ARRIVED_AT_ENTRY;
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <main+0x3ec>)
 8002584:	2249      	movs	r2, #73	; 0x49
 8002586:	801a      	strh	r2, [r3, #0]
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 8002588:	2201      	movs	r2, #1
 800258a:	491d      	ldr	r1, [pc, #116]	; (8002600 <main+0x3ec>)
 800258c:	481e      	ldr	r0, [pc, #120]	; (8002608 <main+0x3f4>)
 800258e:	f7ff fd2d 	bl	8001fec <MCAL_UART_SendData>
				MCAL_UART_ReceiveData(USART2, &RecievedFromServer, Enable);
 8002592:	2201      	movs	r2, #1
 8002594:	491d      	ldr	r1, [pc, #116]	; (800260c <main+0x3f8>)
 8002596:	481c      	ldr	r0, [pc, #112]	; (8002608 <main+0x3f4>)
 8002598:	f7ff fd48 	bl	800202c <MCAL_UART_ReceiveData>
			}
			if(RecievedFromServer == IM_DONE)
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <main+0x3f8>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b4b      	cmp	r3, #75	; 0x4b
 80025a4:	d109      	bne.n	80025ba <main+0x3a6>
			{
				RecievedFromServer = 0;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <main+0x3f8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
				isAParking = 0;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <main+0x3fc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
				isRetrieving = 0;
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <main+0x3e8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e015      	b.n	80025e6 <main+0x3d2>

			}else{
				if(isAParking)
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <main+0x3fc>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <main+0x3b8>
					mySendChar = FINISH_PARKING;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <main+0x3ec>)
 80025c6:	2258      	movs	r2, #88	; 0x58
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	e007      	b.n	80025dc <main+0x3c8>
				else if(isRetrieving)
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <main+0x3e8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <main+0x3c8>
					mySendChar = FINISH_RETRIEVING;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <main+0x3ec>)
 80025d8:	224d      	movs	r2, #77	; 0x4d
 80025da:	801a      	strh	r2, [r3, #0]

//				mySendChar = FINISH_PARKING;
				MCAL_UART_SendData(USART2, &mySendChar, Enable);
 80025dc:	2201      	movs	r2, #1
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <main+0x3ec>)
 80025e0:	4809      	ldr	r0, [pc, #36]	; (8002608 <main+0x3f4>)
 80025e2:	f7ff fd03 	bl	8001fec <MCAL_UART_SendData>


			}
			MCAL_UART_SendData(USART2, &Buffer, Enable);
 80025e6:	2201      	movs	r2, #1
 80025e8:	490a      	ldr	r1, [pc, #40]	; (8002614 <main+0x400>)
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <main+0x3f4>)
 80025ec:	f7ff fcfe 	bl	8001fec <MCAL_UART_SendData>


		}


		Delay_Timer1_ms(3000);
 80025f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025f4:	f7fe fb2a 	bl	8000c4c <Delay_Timer1_ms>
		if(newMessageArrived)
 80025f8:	e662      	b.n	80022c0 <main+0xac>
 80025fa:	bf00      	nop
 80025fc:	200000e9 	.word	0x200000e9
 8002600:	200000ec 	.word	0x200000ec
 8002604:	200000ef 	.word	0x200000ef
 8002608:	40004400 	.word	0x40004400
 800260c:	200000e8 	.word	0x200000e8
 8002610:	200000ea 	.word	0x200000ea
 8002614:	20000000 	.word	0x20000000

08002618 <Clock_Init>:
}



void Clock_Init()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 800261c:	2148      	movs	r1, #72	; 0x48
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe f9f0 	bl	8000a04 <MCAL_RCC_CLK_Init>

	RCC_GPIOC_CLK_EN();
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <Clock_Init+0x60>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <Clock_Init+0x60>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <Clock_Init+0x60>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a10      	ldr	r2, [pc, #64]	; (8002678 <Clock_Init+0x60>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	61d3      	str	r3, [r2, #28]

	RCC_GPIOB_CLK_EN();
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <Clock_Init+0x60>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <Clock_Init+0x60>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <Clock_Init+0x60>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <Clock_Init+0x60>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <Clock_Init+0x60>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <Clock_Init+0x60>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6193      	str	r3, [r2, #24]
	RCC_I2C1_CLK_EN();
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <Clock_Init+0x60>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <Clock_Init+0x60>)
 8002666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266a:	61d3      	str	r3, [r2, #28]

	TIMER1_Init(RCC_CLK_8M);
 800266c:	2008      	movs	r0, #8
 800266e:	f7fe faad 	bl	8000bcc <TIMER1_Init>

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000

0800267c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800267e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002680:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002684:	480c      	ldr	r0, [pc, #48]	; (80026b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002686:	490d      	ldr	r1, [pc, #52]	; (80026bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <LoopForever+0xe>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <LoopForever+0x16>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026aa:	f000 f811 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ae:	f7ff fdb1 	bl	8002214 <main>

080026b2 <LoopForever>:

LoopForever:
  b LoopForever
 80026b2:	e7fe      	b.n	80026b2 <LoopForever>
  ldr   r0, =_estack
 80026b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80026c0:	08002794 	.word	0x08002794
  ldr r2, =_sbss
 80026c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80026c8:	200000f4 	.word	0x200000f4

080026cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC1_2_IRQHandler>
	...

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2600      	movs	r6, #0
 80026d4:	4d0c      	ldr	r5, [pc, #48]	; (8002708 <__libc_init_array+0x38>)
 80026d6:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	f000 f81a 	bl	8002718 <_init>
 80026e4:	2600      	movs	r6, #0
 80026e6:	4d0a      	ldr	r5, [pc, #40]	; (8002710 <__libc_init_array+0x40>)
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <__libc_init_array+0x44>)
 80026ea:	1b64      	subs	r4, r4, r5
 80026ec:	10a4      	asrs	r4, r4, #2
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	0800278c 	.word	0x0800278c
 800270c:	0800278c 	.word	0x0800278c
 8002710:	0800278c 	.word	0x0800278c
 8002714:	08002790 	.word	0x08002790

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
