
New_Beta_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003948  08003948  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003948  08003948  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003948  08003948  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08003950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000038  08003988  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003988  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004ee6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001392  00000000  00000000  00024f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001c88  00000000  00000000  0002631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000460  00000000  00000000  00027fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000378  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000038d7  00000000  00000000  00028780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000071eb  00000000  00000000  0002c057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000d798  00000000  00000000  00033242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010c4  00000000  00000000  000409dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	080038b8 	.word	0x080038b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	080038b8 	.word	0x080038b8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	; 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bba:	2afd      	cmp	r2, #253	; 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	; 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	; 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	; 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <Motor_intialize>:


#include "../includes/DC_Motor.h"


void  Motor_intialize(Motor_Config_t *Motor){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Motor_IN1={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin1Number,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t Motor_IN1={
 8000f4c:	81bb      	strh	r3, [r7, #12]
 8000f4e:	2304      	movs	r3, #4
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	2302      	movs	r3, #2
 8000f54:	73fb      	strb	r3, [r7, #15]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber, &Motor_IN1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fec3 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t Motor_IN2={
			.GPIO_MODE=GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_PinNumber=Motor->DC_Pin2Number,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	885b      	ldrh	r3, [r3, #2]
	GPIO_PinConfig_t Motor_IN2={
 8000f6a:	813b      	strh	r3, [r7, #8]
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	72bb      	strb	r3, [r7, #10]
 8000f70:	2302      	movs	r3, #2
 8000f72:	72fb      	strb	r3, [r7, #11]
			.GPIO_OUTPUT_SPEED=GPIO_SPEED_2MHZ
	};
	MCAL_GPIO_Init(Motor->DC_PortNumber, &Motor_IN2);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 feb4 	bl	8001cec <MCAL_GPIO_Init>


//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Motor_TurnOff>:





void Motor_TurnOff(Motor_Config_t *Motor){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin1Number, GPIO_PIN_LOW);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6858      	ldr	r0, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f000 ff3a 	bl	8001e18 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin2Number, GPIO_PIN_LOW);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6858      	ldr	r0, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	885b      	ldrh	r3, [r3, #2]
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f000 ff32 	bl	8001e18 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <Motor_TurnOff+0x48>)
 8000fba:	f000 ff2d 	bl	8001e18 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <Motor_TurnOff+0x48>)
 8000fc4:	f000 ff28 	bl	8001e18 <MCAL_GPIO_WritePin>

	TIMER3_Stop();
 8000fc8:	f001 fd32 	bl	8002a30 <TIMER3_Stop>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <Motor_Move_ForWard>:




void Motor_Move_ForWard(Motor_Config_t *Motor, uint8_t speed){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
//
//
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_HIGH);
//	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_HIGH);

	PWM(Motor->PWM_Timer, Motor->PWM_Channel, speed, 1000, RCC_CLK_8M);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6898      	ldr	r0, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b19      	ldrb	r1, [r3, #12]
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	2308      	movs	r3, #8
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	f001 f95d 	bl	80022b4 <PWM>

	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin1Number,GPIO_PIN_HIGH);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6858      	ldr	r0, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	f000 ff07 	bl	8001e18 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(Motor->DC_PortNumber, Motor->DC_Pin2Number,GPIO_PIN_LOW);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6858      	ldr	r0, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	885b      	ldrh	r3, [r3, #2]
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f000 feff 	bl	8001e18 <MCAL_GPIO_WritePin>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <LCD_enuInit>:
/*	Return:			Returns Error State 	                       	*/
/*	Notes:			None  	*/
/********************************************************************/


ES_t LCD_enuInit(LCD_t * Copy_pstrConfigs) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState = ES_NOT_OK;
 800102c:	2301      	movs	r3, #1
 800102e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	LCD_pstrConfigs = Copy_pstrConfigs;
 8001032:	4a6f      	ldr	r2, [pc, #444]	; (80011f0 <LCD_enuInit+0x1cc>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]



	GPIO_PinConfig_t RS = {
			.GPIO_PinNumber = Copy_pstrConfigs->RS_Pin,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	889b      	ldrh	r3, [r3, #4]
	GPIO_PinConfig_t RS = {
 800103c:	863b      	strh	r3, [r7, #48]	; 0x30
 800103e:	2304      	movs	r3, #4
 8001040:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001044:	2302      	movs	r3, #2
 8001046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &RS);
 800104a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104e:	4619      	mov	r1, r3
 8001050:	4868      	ldr	r0, [pc, #416]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001052:	f000 fe4b 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t EN = {
			.GPIO_PinNumber = Copy_pstrConfigs->En_Pin,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	891b      	ldrh	r3, [r3, #8]
	GPIO_PinConfig_t EN = {
 800105a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800105c:	2304      	movs	r3, #4
 800105e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001062:	2302      	movs	r3, #2
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &EN);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4861      	ldr	r0, [pc, #388]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001070:	f000 fe3c 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t D7 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D7_Pin,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	895b      	ldrh	r3, [r3, #10]
	GPIO_PinConfig_t D7 = {
 8001078:	853b      	strh	r3, [r7, #40]	; 0x28
 800107a:	2304      	movs	r3, #4
 800107c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001080:	2302      	movs	r3, #2
 8001082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D7);
 8001086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108a:	4619      	mov	r1, r3
 800108c:	4859      	ldr	r0, [pc, #356]	; (80011f4 <LCD_enuInit+0x1d0>)
 800108e:	f000 fe2d 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t D6 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D6_Pin,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	899b      	ldrh	r3, [r3, #12]
	GPIO_PinConfig_t D6 = {
 8001096:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001098:	2304      	movs	r3, #4
 800109a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109e:	2302      	movs	r3, #2
 80010a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D6);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4852      	ldr	r0, [pc, #328]	; (80011f4 <LCD_enuInit+0x1d0>)
 80010ac:	f000 fe1e 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t D5 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D5_Pin,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	89db      	ldrh	r3, [r3, #14]
	GPIO_PinConfig_t D5 = {
 80010b4:	843b      	strh	r3, [r7, #32]
 80010b6:	2304      	movs	r3, #4
 80010b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010bc:	2302      	movs	r3, #2
 80010be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};

	MCAL_GPIO_Init(GPIOB, &D5);
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4619      	mov	r1, r3
 80010c8:	484a      	ldr	r0, [pc, #296]	; (80011f4 <LCD_enuInit+0x1d0>)
 80010ca:	f000 fe0f 	bl	8001cec <MCAL_GPIO_Init>

	GPIO_PinConfig_t D4 = {
			.GPIO_PinNumber = Copy_pstrConfigs->D4_Pin,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8a1b      	ldrh	r3, [r3, #16]
	GPIO_PinConfig_t D4 = {
 80010d2:	83bb      	strh	r3, [r7, #28]
 80010d4:	2304      	movs	r3, #4
 80010d6:	77bb      	strb	r3, [r7, #30]
 80010d8:	2302      	movs	r3, #2
 80010da:	77fb      	strb	r3, [r7, #31]
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
	};
	MCAL_GPIO_Init(GPIOB, &D4);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4844      	ldr	r0, [pc, #272]	; (80011f4 <LCD_enuInit+0x1d0>)
 80010e4:	f000 fe02 	bl	8001cec <MCAL_GPIO_Init>

	TIMER3_Init(RCC_CLK_8M);
 80010e8:	2008      	movs	r0, #8
 80010ea:	f001 f88b 	bl	8002204 <TIMER3_Init>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_HIGH);
	Delay_Timer3_ms(35); //power on
 80010ee:	2023      	movs	r0, #35	; 0x23
 80010f0:	f001 f8c8 	bl	8002284 <Delay_Timer3_ms>
	//MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_LOW);

	if(Copy_pstrConfigs->Mode == LCD_4Bit){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d10a      	bne.n	8001112 <LCD_enuInit+0xee>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	889b      	ldrh	r3, [r3, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	483b      	ldr	r0, [pc, #236]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001106:	f000 fe87 	bl	8001e18 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_FOUR_BIT);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f000 f874 	bl	80011f8 <LCD_enuWriteAndLatch>
 8001110:	e041      	b.n	8001196 <LCD_enuInit+0x172>
	}

	else if(Copy_pstrConfigs->Mode == LCD_8Bit){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d13d      	bne.n	8001196 <LCD_enuInit+0x172>

		MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	889b      	ldrh	r3, [r3, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4834      	ldr	r0, [pc, #208]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001124:	f000 fe78 	bl	8001e18 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(FUNC_SET_EIGHT_BIT);
 8001128:	2038      	movs	r0, #56	; 0x38
 800112a:	f000 f865 	bl	80011f8 <LCD_enuWriteAndLatch>

		GPIO_PinConfig_t D3 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D3_Pin,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	8a5b      	ldrh	r3, [r3, #18]
		GPIO_PinConfig_t D3 = {
 8001132:	833b      	strh	r3, [r7, #24]
 8001134:	2304      	movs	r3, #4
 8001136:	76bb      	strb	r3, [r7, #26]
 8001138:	2302      	movs	r3, #2
 800113a:	76fb      	strb	r3, [r7, #27]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D3);
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	4619      	mov	r1, r3
 8001142:	482c      	ldr	r0, [pc, #176]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001144:	f000 fdd2 	bl	8001cec <MCAL_GPIO_Init>

		GPIO_PinConfig_t D2 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D2_Pin,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8a9b      	ldrh	r3, [r3, #20]
		GPIO_PinConfig_t D2 = {
 800114c:	82bb      	strh	r3, [r7, #20]
 800114e:	2304      	movs	r3, #4
 8001150:	75bb      	strb	r3, [r7, #22]
 8001152:	2302      	movs	r3, #2
 8001154:	75fb      	strb	r3, [r7, #23]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D2);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <LCD_enuInit+0x1d0>)
 800115e:	f000 fdc5 	bl	8001cec <MCAL_GPIO_Init>

		GPIO_PinConfig_t D1 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D1_Pin,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8adb      	ldrh	r3, [r3, #22]
		GPIO_PinConfig_t D1 = {
 8001166:	823b      	strh	r3, [r7, #16]
 8001168:	2304      	movs	r3, #4
 800116a:	74bb      	strb	r3, [r7, #18]
 800116c:	2302      	movs	r3, #2
 800116e:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOB, &D1);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001178:	f000 fdb8 	bl	8001cec <MCAL_GPIO_Init>

		GPIO_PinConfig_t D0 = {
				.GPIO_PinNumber = Copy_pstrConfigs->D0_Pin,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	8b1b      	ldrh	r3, [r3, #24]
		GPIO_PinConfig_t D0 = {
 8001180:	81bb      	strh	r3, [r7, #12]
 8001182:	2304      	movs	r3, #4
 8001184:	73bb      	strb	r3, [r7, #14]
 8001186:	2302      	movs	r3, #2
 8001188:	73fb      	strb	r3, [r7, #15]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};
		MCAL_GPIO_Init(GPIOB, &D0);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	4818      	ldr	r0, [pc, #96]	; (80011f4 <LCD_enuInit+0x1d0>)
 8001192:	f000 fdab 	bl	8001cec <MCAL_GPIO_Init>
	}


	Delay_Timer3_ms(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f001 f874 	bl	8002284 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <LCD_enuInit+0x1d0>)
 80011a6:	f000 fe37 	bl	8001e18 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(DISPLAY_ON_CURSOR_OFF);
 80011aa:	200c      	movs	r0, #12
 80011ac:	f000 f824 	bl	80011f8 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f001 f867 	bl	8002284 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LCD_enuInit+0x1d0>)
 80011c0:	f000 fe2a 	bl	8001e18 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f817 	bl	80011f8 <LCD_enuWriteAndLatch>

	Delay_Timer3_ms(3);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f001 f85a 	bl	8002284 <Delay_Timer3_ms>
	MCAL_GPIO_WritePin(GPIOB, Copy_pstrConfigs->RS_Pin, GPIO_PIN_LOW);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <LCD_enuInit+0x1d0>)
 80011da:	f000 fe1d 	bl	8001e18 <MCAL_GPIO_WritePin>
	LCD_enuWriteAndLatch(ENTRY_MOOD);
 80011de:	2006      	movs	r0, #6
 80011e0:	f000 f80a 	bl	80011f8 <LCD_enuWriteAndLatch>

	return Local_ErrorState;
 80011e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000054 	.word	0x20000054
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <LCD_enuWriteAndLatch>:

static ES_t LCD_enuWriteAndLatch(uint8_t Copy_u8Data) {/************ static makes sure the function is local and can not be externed*****************/
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]

	/******* make sure RW_PORT low to be in write mode *****/
	/******* make sure EN_PORT low to be ready for the latch	*****/

	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RW_Pin, GPIO_PIN_LOW); // low as we write data or instruction
 8001206:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	88db      	ldrh	r3, [r3, #6]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	487c      	ldr	r0, [pc, #496]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001212:	f000 fe01 	bl	8001e18 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW); // low to be ready for the latch -> H-L
 8001216:	4b7a      	ldr	r3, [pc, #488]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	891b      	ldrh	r3, [r3, #8]
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4878      	ldr	r0, [pc, #480]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001222:	f000 fdf9 	bl	8001e18 <MCAL_GPIO_WritePin>

	/********** Data Writing ************/

	if (Copy_u8Data == FUNC_SET_FOUR_BIT) // function set for four bit mode needs extra send operation
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b28      	cmp	r3, #40	; 0x28
 800122a:	d152      	bne.n	80012d2 <LCD_enuWriteAndLatch+0xda>
	{
		uint8_t Local_u8RS_Value;
		Local_u8RS_Value = MCAL_GPIO_ReadPin(GPIOB,LCD_pstrConfigs->RS_Pin);
 800122c:	4b74      	ldr	r3, [pc, #464]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	889b      	ldrh	r3, [r3, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	4873      	ldr	r0, [pc, #460]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001236:	f000 fdd8 	bl	8001dea <MCAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	73bb      	strb	r3, [r7, #14]
		if(Local_u8RS_Value == 0){


		}

		if (Local_u8RS_Value == GPIO_PIN_LOW) //CHECK if RS is set in instructions mode else it is to display ')' 0x28
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d146      	bne.n	80012d2 <LCD_enuWriteAndLatch+0xda>
		{

			//if true we need to write upper four bits twice.. once here in the if condition the other in the ordinary #if four bit mode
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8001244:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	8959      	ldrh	r1, [r3, #10]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	09db      	lsrs	r3, r3, #7
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	486c      	ldr	r0, [pc, #432]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001254:	f000 fde0 	bl	8001e18 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8001258:	4b69      	ldr	r3, [pc, #420]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	8999      	ldrh	r1, [r3, #12]
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	4865      	ldr	r0, [pc, #404]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 800126e:	f000 fdd3 	bl	8001e18 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	89d9      	ldrh	r1, [r3, #14]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	485f      	ldr	r0, [pc, #380]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001288:	f000 fdc6 	bl	8001e18 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 800128c:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	8a19      	ldrh	r1, [r3, #16]
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4858      	ldr	r0, [pc, #352]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80012a2:	f000 fdb9 	bl	8001e18 <MCAL_GPIO_WritePin>

			/**********the latch ************/

			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 80012a6:	4b56      	ldr	r3, [pc, #344]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	891b      	ldrh	r3, [r3, #8]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	4854      	ldr	r0, [pc, #336]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80012b2:	f000 fdb1 	bl	8001e18 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 ffe4 	bl	8002284 <Delay_Timer3_ms>
			MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	891b      	ldrh	r3, [r3, #8]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	484f      	ldr	r0, [pc, #316]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80012c8:	f000 fda6 	bl	8001e18 <MCAL_GPIO_WritePin>
			Delay_Timer3_ms(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 ffd9 	bl	8002284 <Delay_Timer3_ms>

		}
	}
	if(LCD_pstrConfigs->Mode == LCD_4Bit){
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	f040 8095 	bne.w	8001408 <LCD_enuWriteAndLatch+0x210>

		//4-4
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 80012de:	4b48      	ldr	r3, [pc, #288]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	8959      	ldrh	r1, [r3, #10]
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	09db      	lsrs	r3, r3, #7
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4845      	ldr	r0, [pc, #276]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80012ee:	f000 fd93 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 80012f2:	4b43      	ldr	r3, [pc, #268]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	8999      	ldrh	r1, [r3, #12]
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	483f      	ldr	r0, [pc, #252]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001308:	f000 fd86 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	89d9      	ldrh	r1, [r3, #14]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	095b      	lsrs	r3, r3, #5
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4838      	ldr	r0, [pc, #224]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001322:	f000 fd79 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	8a19      	ldrh	r1, [r3, #16]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4832      	ldr	r0, [pc, #200]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 800133c:	f000 fd6c 	bl	8001e18 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	482e      	ldr	r0, [pc, #184]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 800134c:	f000 fd64 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f000 ff97 	bl	8002284 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	891b      	ldrh	r3, [r3, #8]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4828      	ldr	r0, [pc, #160]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001362:	f000 fd59 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 ff8c 	bl	8002284 <Delay_Timer3_ms>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	8959      	ldrh	r1, [r3, #10]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	4820      	ldr	r0, [pc, #128]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 8001382:	f000 fd49 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	8999      	ldrh	r1, [r3, #12]
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 800139c:	f000 fd3c 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	89d9      	ldrh	r1, [r3, #14]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80013b6:	f000 fd2f 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	8a19      	ldrh	r1, [r3, #16]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	480e      	ldr	r0, [pc, #56]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80013cc:	f000 fd24 	bl	8001e18 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	891b      	ldrh	r3, [r3, #8]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4619      	mov	r1, r3
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80013dc:	f000 fd1c 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f000 ff4f 	bl	8002284 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW);
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <LCD_enuWriteAndLatch+0x208>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	891b      	ldrh	r3, [r3, #8]
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <LCD_enuWriteAndLatch+0x20c>)
 80013f2:	f000 fd11 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 ff44 	bl	8002284 <Delay_Timer3_ms>
 80013fc:	e082      	b.n	8001504 <LCD_enuWriteAndLatch+0x30c>
 80013fe:	bf00      	nop
 8001400:	20000054 	.word	0x20000054
 8001404:	40010c00 	.word	0x40010c00
	}


	else if (LCD_pstrConfigs->Mode == LCD_8Bit){
 8001408:	4b41      	ldr	r3, [pc, #260]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d178      	bne.n	8001504 <LCD_enuWriteAndLatch+0x30c>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D7_Pin, (Copy_u8Data >> SHIFT_PIN_7) & MASK_BIT);
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	8959      	ldrh	r1, [r3, #10]
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	09db      	lsrs	r3, r3, #7
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	483c      	ldr	r0, [pc, #240]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 8001422:	f000 fcf9 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D6_Pin, (Copy_u8Data >> SHIFT_PIN_6) & MASK_BIT);
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	8999      	ldrh	r1, [r3, #12]
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	099b      	lsrs	r3, r3, #6
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4836      	ldr	r0, [pc, #216]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 800143c:	f000 fcec 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D5_Pin, (Copy_u8Data >> SHIFT_PIN_5) & MASK_BIT);
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	89d9      	ldrh	r1, [r3, #14]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	482f      	ldr	r0, [pc, #188]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 8001456:	f000 fcdf 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D4_Pin, (Copy_u8Data >> SHIFT_PIN_4) & MASK_BIT);
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	8a19      	ldrh	r1, [r3, #16]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4829      	ldr	r0, [pc, #164]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 8001470:	f000 fcd2 	bl	8001e18 <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D3_Pin, (Copy_u8Data >> SHIFT_PIN_3) & MASK_BIT);
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	8a59      	ldrh	r1, [r3, #18]
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	4822      	ldr	r0, [pc, #136]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 800148a:	f000 fcc5 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D2_Pin, (Copy_u8Data >> SHIFT_PIN_2) & MASK_BIT);
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	8a99      	ldrh	r1, [r3, #20]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 80014a4:	f000 fcb8 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D1_Pin, (Copy_u8Data >> SHIFT_PIN_1) & MASK_BIT);
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	8ad9      	ldrh	r1, [r3, #22]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4815      	ldr	r0, [pc, #84]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 80014be:	f000 fcab 	bl	8001e18 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->D0_Pin, (Copy_u8Data >> SHIFT_PIN_0) & MASK_BIT);
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	8b19      	ldrh	r1, [r3, #24]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 80014d4:	f000 fca0 	bl	8001e18 <MCAL_GPIO_WritePin>
		/*		the latch		*/
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_HIGH );
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	891b      	ldrh	r3, [r3, #8]
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 80014e4:	f000 fc98 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fecb 	bl	8002284 <Delay_Timer3_ms>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->En_Pin, GPIO_PIN_LOW );
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <LCD_enuWriteAndLatch+0x318>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	891b      	ldrh	r3, [r3, #8]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <LCD_enuWriteAndLatch+0x31c>)
 80014fa:	f000 fc8d 	bl	8001e18 <MCAL_GPIO_WritePin>
		Delay_Timer3_ms(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fec0 	bl	8002284 <Delay_Timer3_ms>
	}

	return Local_ErrorState;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000054 	.word	0x20000054
 8001514:	40010c00 	.word	0x40010c00

08001518 <LCD_enuSendString>:
	LCD_enuWriteAndLatch(Copy_u8Command);

	return Local_ErrorState;
}

ES_t LCD_enuSendString(const char * Copy_pcString) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]

	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8001524:	e00e      	b.n	8001544 <LCD_enuSendString+0x2c>
	{
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);	// High for Data
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <LCD_enuSendString+0x40>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <LCD_enuSendString+0x44>)
 8001532:	f000 fc71 	bl	8001e18 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(*Copy_pcString++);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe5a 	bl	80011f8 <LCD_enuWriteAndLatch>
	while (*Copy_pcString != 0) //Notice 0 == \0(end of string seq)    but '0' == ASCII of 48
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ec      	bne.n	8001526 <LCD_enuSendString+0xe>
	}

	return Local_ErrorState;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000054 	.word	0x20000054
 800155c:	40010c00 	.word	0x40010c00

08001560 <LCD_enuJumpCursorTo>:
	LCD_enuWriteAndLatch(CLEAR_DISPLAY);

	return Local_ErrorState;
}

ES_t LCD_enuJumpCursorTo(uint8_t Copy_u8StartX_Position, uint8_t Copy_u8StartY_Position) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]

//	MCAL_GPIO_WritePin(RS_PORT , RS_PIN , GPIO_PIN_LOW);   // Low for Command
	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_LOW);   // Low for Command
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <LCD_enuJumpCursorTo+0x94>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	481e      	ldr	r0, [pc, #120]	; (80015f8 <LCD_enuJumpCursorTo+0x98>)
 8001580:	f000 fc4a 	bl	8001e18 <MCAL_GPIO_WritePin>

	if (Copy_u8StartX_Position == 1) {
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <LCD_enuJumpCursorTo+0x3c>
		LCD_enuWriteAndLatch((START_OF_LINE1 + Copy_u8StartY_Position));
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	3b80      	subs	r3, #128	; 0x80
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe31 	bl	80011f8 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e025      	b.n	80015e8 <LCD_enuJumpCursorTo+0x88>
	}

	else if (Copy_u8StartX_Position == 2) {
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d108      	bne.n	80015b4 <LCD_enuJumpCursorTo+0x54>
		LCD_enuWriteAndLatch((START_OF_LINE2 + Copy_u8StartY_Position));
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	3b40      	subs	r3, #64	; 0x40
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe25 	bl	80011f8 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e019      	b.n	80015e8 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 3) {
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d108      	bne.n	80015cc <LCD_enuJumpCursorTo+0x6c>
		LCD_enuWriteAndLatch((START_OF_LINE3 + Copy_u8StartY_Position));
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	3b6c      	subs	r3, #108	; 0x6c
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe19 	bl	80011f8 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e00d      	b.n	80015e8 <LCD_enuJumpCursorTo+0x88>
	}
	else if (Copy_u8StartX_Position == 4) {
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d108      	bne.n	80015e4 <LCD_enuJumpCursorTo+0x84>
		LCD_enuWriteAndLatch((START_OF_LINE4 + Copy_u8StartY_Position));
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	3b2c      	subs	r3, #44	; 0x2c
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe0d 	bl	80011f8 <LCD_enuWriteAndLatch>
		Local_ErrorState = ES_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e001      	b.n	80015e8 <LCD_enuJumpCursorTo+0x88>
	} else {
		Local_ErrorState = ES_NOT_OK;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000054 	.word	0x20000054
 80015f8:	40010c00 	.word	0x40010c00

080015fc <LCD_enuDisplayIntNum>:
//
//
//	return Local_ErrorState;
//}

ES_t LCD_enuDisplayIntNum(int Copy_s32IntNumber) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	uint8_t Local_ErrorState = ES_NOT_OK;
 8001604:	2301      	movs	r3, #1
 8001606:	74bb      	strb	r3, [r7, #18]

	uint32_t Local_u32Remainder;
	uint32_t Local_u32ReverseNum = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
	uint8_t Local_u8DigitsNum = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	74fb      	strb	r3, [r7, #19]
	/******** number given will be displayed reversely cause of LCD prints each number of the whole number individually ******/
	/*********  so we will reverse the whole number just to be displayed correctly at the end of function **********/
	if (Copy_s32IntNumber < 0) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da0d      	bge.n	8001632 <LCD_enuDisplayIntNum+0x36>
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   //high for data
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <LCD_enuDisplayIntNum+0xf4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	4834      	ldr	r0, [pc, #208]	; (80016f4 <LCD_enuDisplayIntNum+0xf8>)
 8001622:	f000 fbf9 	bl	8001e18 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch('-');
 8001626:	202d      	movs	r0, #45	; 0x2d
 8001628:	f7ff fde6 	bl	80011f8 <LCD_enuWriteAndLatch>

		Copy_s32IntNumber *= -1; //after printing negative sign we convert the number to positive and procced
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	425b      	negs	r3, r3
 8001630:	607b      	str	r3, [r7, #4]
	}
	if(Copy_s32IntNumber == 0){
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d12c      	bne.n	8001692 <LCD_enuDisplayIntNum+0x96>
    	MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH);   // High for Data
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <LCD_enuDisplayIntNum+0xf4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	4619      	mov	r1, r3
 8001642:	482c      	ldr	r0, [pc, #176]	; (80016f4 <LCD_enuDisplayIntNum+0xf8>)
 8001644:	f000 fbe8 	bl	8001e18 <MCAL_GPIO_WritePin>
    	LCD_enuWriteAndLatch('0');
 8001648:	2030      	movs	r0, #48	; 0x30
 800164a:	f7ff fdd5 	bl	80011f8 <LCD_enuWriteAndLatch>
	}
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 800164e:	e020      	b.n	8001692 <LCD_enuDisplayIntNum+0x96>
			{
		Local_u32Remainder = Copy_s32IntNumber % 10;
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <LCD_enuDisplayIntNum+0xfc>)
 8001654:	fb83 2301 	smull	r2, r3, r3, r1
 8001658:	109a      	asrs	r2, r3, #2
 800165a:	17cb      	asrs	r3, r1, #31
 800165c:	1ad2      	subs	r2, r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1aca      	subs	r2, r1, r3
 8001668:	60fa      	str	r2, [r7, #12]
		Local_u32ReverseNum = Local_u32ReverseNum * 10 + Local_u32Remainder;
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
		Local_u8DigitsNum++; //counting number of digits for the original number
 800167c:	7cfb      	ldrb	r3, [r7, #19]
 800167e:	3301      	adds	r3, #1
 8001680:	74fb      	strb	r3, [r7, #19]
	for (; Copy_s32IntNumber > 0; Copy_s32IntNumber /= 10) //number reversing loop
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <LCD_enuDisplayIntNum+0xfc>)
 8001686:	fb82 1203 	smull	r1, r2, r2, r3
 800168a:	1092      	asrs	r2, r2, #2
 800168c:	17db      	asrs	r3, r3, #31
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dcdb      	bgt.n	8001650 <LCD_enuDisplayIntNum+0x54>
	}

	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 8001698:	e022      	b.n	80016e0 <LCD_enuDisplayIntNum+0xe4>
			{ // for number of cycles equal to Local_u8DigitsNum , print digits

		uint8_t Local_u8NumToPrint = Local_u32ReverseNum % 10;
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <LCD_enuDisplayIntNum+0x100>)
 800169e:	fba3 2301 	umull	r2, r3, r3, r1
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	747b      	strb	r3, [r7, #17]
		MCAL_GPIO_WritePin(GPIOB,LCD_pstrConfigs->RS_Pin, GPIO_PIN_HIGH); //high for data
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <LCD_enuDisplayIntNum+0xf4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	889b      	ldrh	r3, [r3, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LCD_enuDisplayIntNum+0xf8>)
 80016be:	f000 fbab 	bl	8001e18 <MCAL_GPIO_WritePin>
		LCD_enuWriteAndLatch(Local_u8NumToPrint + '0');
 80016c2:	7c7b      	ldrb	r3, [r7, #17]
 80016c4:	3330      	adds	r3, #48	; 0x30
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd95 	bl	80011f8 <LCD_enuWriteAndLatch>
		Local_u8DigitsNum--;
 80016ce:	7cfb      	ldrb	r3, [r7, #19]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	74fb      	strb	r3, [r7, #19]
	for (; Local_u8DigitsNum > 0; Local_u32ReverseNum /= 10) //reversed number displaying loop
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <LCD_enuDisplayIntNum+0x100>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	7cfb      	ldrb	r3, [r7, #19]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1d9      	bne.n	800169a <LCD_enuDisplayIntNum+0x9e>
	}

	return Local_ErrorState;
 80016e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000054 	.word	0x20000054
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	66666667 	.word	0x66666667
 80016fc:	cccccccd 	.word	0xcccccccd

08001700 <Stepper_Init>:


static uint16_t Global_Stepper_Pin;

void Stepper_Init(GPIO_PinConfig_t* DirPin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t StepperDir =
	{
			.GPIO_MODE = DirPin->GPIO_MODE,
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
			.GPIO_PinNumber = DirPin->GPIO_PinNumber
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	881b      	ldrh	r3, [r3, #0]
	GPIO_PinConfig_t StepperDir =
 800170c:	81bb      	strh	r3, [r7, #12]
			.GPIO_MODE = DirPin->GPIO_MODE,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	789b      	ldrb	r3, [r3, #2]
	GPIO_PinConfig_t StepperDir =
 8001712:	73bb      	strb	r3, [r7, #14]
			.GPIO_OUTPUT_SPEED = DirPin->GPIO_OUTPUT_SPEED,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	78db      	ldrb	r3, [r3, #3]
	GPIO_PinConfig_t StepperDir =
 8001718:	73fb      	strb	r3, [r7, #15]
	};
	Global_Stepper_Pin = DirPin->GPIO_PinNumber;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <Stepper_Init+0x40>)
 8001720:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(StepperDir_Port, &StepperDir);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <Stepper_Init+0x44>)
 800172a:	f000 fadf 	bl	8001cec <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_LOW);
 800172e:	2200      	movs	r2, #0
 8001730:	2102      	movs	r1, #2
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <Stepper_Init+0x44>)
 8001734:	f000 fb70 	bl	8001e18 <MCAL_GPIO_WritePin>

}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000058 	.word	0x20000058
 8001744:	40010c00 	.word	0x40010c00

08001748 <Stepper_Move_Steps>:


void Stepper_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency, Stepper_Direction Direction)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af02      	add	r7, sp, #8
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	803b      	strh	r3, [r7, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	70bb      	strb	r3, [r7, #2]
	switch(Direction)
 8001762:	7d3b      	ldrb	r3, [r7, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <Stepper_Move_Steps+0x26>
 8001768:	2b01      	cmp	r3, #1
 800176a:	d008      	beq.n	800177e <Stepper_Move_Steps+0x36>
 800176c:	e00f      	b.n	800178e <Stepper_Move_Steps+0x46>
	{
	case Stepper_Down:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_LOW);
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <Stepper_Move_Steps+0x64>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <Stepper_Move_Steps+0x68>)
 8001778:	f000 fb4e 	bl	8001e18 <MCAL_GPIO_WritePin>
		break;
 800177c:	e007      	b.n	800178e <Stepper_Move_Steps+0x46>
	case Stepper_UP:
		MCAL_GPIO_WritePin(StepperDir_Port, Global_Stepper_Pin, GPIO_PIN_HIGH);
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <Stepper_Move_Steps+0x64>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <Stepper_Move_Steps+0x68>)
 8001788:	f000 fb46 	bl	8001e18 <MCAL_GPIO_WritePin>
		break;
 800178c:	bf00      	nop
	}
	PWM_Move_Steps(TIMERx, ChannelX, steps, dutyCycle, frequency, RCC_CLK_36M);
 800178e:	78b8      	ldrb	r0, [r7, #2]
 8001790:	883a      	ldrh	r2, [r7, #0]
 8001792:	78f9      	ldrb	r1, [r7, #3]
 8001794:	2324      	movs	r3, #36	; 0x24
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4603      	mov	r3, r0
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f001 f954 	bl	8002a4c <PWM_Move_Steps>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000058 	.word	0x20000058
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <HC_SR04_Init>:
/********************************************************************/

#include "UltraSonic_Private.h"


ES_t HC_SR04_Init(HC_SR04_Config_t* Copy_pArrUltrasonicConfigs) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	TIMER3_Init(RCC_CLK_8M);
 80017bc:	2008      	movs	r0, #8
 80017be:	f000 fd21 	bl	8002204 <TIMER3_Init>

	uint8_t Local_Iterator = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
 80017ca:	e024      	b.n	8001816 <HC_SR04_Init+0x62>

		GPIO_PinConfig_t Trigger = {
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].triggerPin,
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Trigger = {
 80017d8:	823b      	strh	r3, [r7, #16]
 80017da:	2304      	movs	r3, #4
 80017dc:	74bb      	strb	r3, [r7, #18]
 80017de:	2302      	movs	r3, #2
 80017e0:	74fb      	strb	r3, [r7, #19]
				.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
				.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ,
		};

		MCAL_GPIO_Init(GPIOA, &Trigger);
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	4811      	ldr	r0, [pc, #68]	; (8001830 <HC_SR04_Init+0x7c>)
 80017ea:	f000 fa7f 	bl	8001cec <MCAL_GPIO_Init>

		GPIO_PinConfig_t Echo = {
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
				.GPIO_PinNumber = Copy_pArrUltrasonicConfigs[Local_Iterator].echoPin,
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	795b      	ldrb	r3, [r3, #5]
 80017fc:	b29b      	uxth	r3, r3
		GPIO_PinConfig_t Echo = {
 80017fe:	81bb      	strh	r3, [r7, #12]
 8001800:	2301      	movs	r3, #1
 8001802:	73bb      	strb	r3, [r7, #14]
				.GPIO_MODE = GPIO_MODE_INPUT_FLOATING,
		};

		MCAL_GPIO_Init(GPIOA, &Echo);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <HC_SR04_Init+0x7c>)
 800180c:	f000 fa6e 	bl	8001cec <MCAL_GPIO_Init>
	for(Local_Iterator = 0;Local_Iterator<HC_Num;Local_Iterator++){
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	3301      	adds	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HC_SR04_Init+0x80>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	7dfa      	ldrb	r2, [r7, #23]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3d5      	bcc.n	80017cc <HC_SR04_Init+0x18>
	}


	Private_pConfigs = Copy_pArrUltrasonicConfigs;
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HC_SR04_Init+0x84>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]

    return ES_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40010800 	.word	0x40010800
 8001834:	2000001a 	.word	0x2000001a
 8001838:	2000005c 	.word	0x2000005c

0800183c <HC_SR04_Trigger>:

void HC_SR04_Trigger(uint8_t Sensor_Num) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    // Send a 10us pulse on the trigger pin to initiate measurement
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_HIGH);
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HC_SR04_Trigger+0x48>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	b29b      	uxth	r3, r3
 8001854:	2201      	movs	r2, #1
 8001856:	4619      	mov	r1, r3
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <HC_SR04_Trigger+0x4c>)
 800185a:	f000 fadd 	bl	8001e18 <MCAL_GPIO_WritePin>
    Delay_Timer3_us(10); // Delay for 10us
 800185e:	200a      	movs	r0, #10
 8001860:	f000 fcfa 	bl	8002258 <Delay_Timer3_us>
	MCAL_GPIO_WritePin(GPIOA, Private_pConfigs[Sensor_Num].triggerPin, GPIO_PIN_LOW);
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HC_SR04_Trigger+0x48>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <HC_SR04_Trigger+0x4c>)
 8001878:	f000 face 	bl	8001e18 <MCAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000005c 	.word	0x2000005c
 8001888:	40010800 	.word	0x40010800
 800188c:	00000000 	.word	0x00000000

08001890 <HC_SR04_ReadDistance>:

ES_t HC_SR04_ReadDistance(uint8_t Sensor_Num,uint32_t* distance_cm) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
    // Send trigger signal to start measurement
    HC_SR04_Trigger(Sensor_Num);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffcc 	bl	800183c <HC_SR04_Trigger>

    uint8_t echoValue;
    // Wait for the rising edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HC_SR04_ReadDistance+0xc8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HC_SR04_ReadDistance+0xc8>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 fa93 	bl	8001dea <MCAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	75fb      	strb	r3, [r7, #23]
    }
    while ( echoValue == GPIO_PIN_LOW);
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ea      	beq.n	80018a4 <HC_SR04_ReadDistance+0x14>

    uint32_t startTime = Get_TIMER3_Counter();
 80018ce:	f001 f8a5 	bl	8002a1c <Get_TIMER3_Counter>
 80018d2:	6138      	str	r0, [r7, #16]
//    STK_enuGetElapsedTimeUs(&startTime);

    // Wait for the falling edge of the echo signal
    do{
    	echoValue = MCAL_GPIO_ReadPin(Private_pConfigs[Sensor_Num].port,Private_pConfigs[Sensor_Num].echoPin);
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HC_SR04_ReadDistance+0xc8>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HC_SR04_ReadDistance+0xc8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	f000 fa7b 	bl	8001dea <MCAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	75fb      	strb	r3, [r7, #23]
    }
    while (echoValue == GPIO_PIN_HIGH);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d0ea      	beq.n	80018d4 <HC_SR04_ReadDistance+0x44>

    uint32_t endTime = Get_TIMER3_Counter();
 80018fe:	f001 f88d 	bl	8002a1c <Get_TIMER3_Counter>
 8001902:	60f8      	str	r0, [r7, #12]
//    STK_enuGetElapsedTimeUs(&endTime);

    // Calculate distance in centimeters
    uint32_t pulseDuration = endTime - startTime;
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	60bb      	str	r3, [r7, #8]
    *distance_cm = (pulseDuration * 0.0343) / 2; // Speed of sound is approximately 343 m/s
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f7fe fd71 	bl	80003f4 <__aeabi_ui2d>
 8001912:	a30f      	add	r3, pc, #60	; (adr r3, 8001950 <HC_SR04_ReadDistance+0xc0>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fde6 	bl	80004e8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	f7fe ff06 	bl	800073c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7fe ffe8 	bl	800090c <__aeabi_d2uiz>
 800193c:	4602      	mov	r2, r0
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]

    return ES_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	04816f00 	.word	0x04816f00
 8001954:	3fa18fc5 	.word	0x3fa18fc5
 8001958:	2000005c 	.word	0x2000005c

0800195c <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <EXTI0_IRQHandler+0x1c>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <EXTI0_IRQHandler+0x1c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <EXTI0_IRQHandler+0x20>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4798      	blx	r3

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40010400 	.word	0x40010400
 800197c:	20000060 	.word	0x20000060

08001980 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <EXTI1_IRQHandler+0x1c>)
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <EXTI1_IRQHandler+0x1c>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EXTI1_IRQHandler+0x20>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4798      	blx	r3
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40010400 	.word	0x40010400
 80019a0:	20000060 	.word	0x20000060

080019a4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <EXTI2_IRQHandler+0x1c>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <EXTI2_IRQHandler+0x1c>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <EXTI2_IRQHandler+0x20>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4798      	blx	r3
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40010400 	.word	0x40010400
 80019c4:	20000060 	.word	0x20000060

080019c8 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <EXTI3_IRQHandler+0x1c>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <EXTI3_IRQHandler+0x1c>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EXTI3_IRQHandler+0x20>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40010400 	.word	0x40010400
 80019e8:	20000060 	.word	0x20000060

080019ec <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <EXTI4_IRQHandler+0x1c>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <EXTI4_IRQHandler+0x1c>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <EXTI4_IRQHandler+0x20>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	4798      	blx	r3
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40010400 	.word	0x40010400
 8001a0c:	20000060 	.word	0x20000060

08001a10 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <EXTI9_5_IRQHandler+0x22>
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a26:	f043 0320 	orr.w	r3, r3, #32
 8001a2a:	6153      	str	r3, [r2, #20]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <EXTI9_5_IRQHandler+0xa4>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <EXTI9_5_IRQHandler+0x40>
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	6153      	str	r3, [r2, #20]
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <EXTI9_5_IRQHandler+0xa4>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <EXTI9_5_IRQHandler+0x5e>
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	6153      	str	r3, [r2, #20]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <EXTI9_5_IRQHandler+0xa4>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <EXTI9_5_IRQHandler+0x7c>
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6153      	str	r3, [r2, #20]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <EXTI9_5_IRQHandler+0xa4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <EXTI9_5_IRQHandler+0x9a>
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <EXTI9_5_IRQHandler+0xa0>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6153      	str	r3, [r2, #20]
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <EXTI9_5_IRQHandler+0xa4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	4798      	blx	r3
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010400 	.word	0x40010400
 8001ab4:	20000060 	.word	0x20000060

08001ab8 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <EXTI15_10_IRQHandler+0x22>
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad2:	6153      	str	r3, [r2, #20]
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <EXTI15_10_IRQHandler+0x40>
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <EXTI15_10_IRQHandler+0x5e>
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b0e:	6153      	str	r3, [r2, #20]
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <EXTI15_10_IRQHandler+0x7c>
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <EXTI15_10_IRQHandler+0x9a>
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6153      	str	r3, [r2, #20]
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <EXTI15_10_IRQHandler+0xb8>
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <EXTI15_10_IRQHandler+0xbc>)
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <EXTI15_10_IRQHandler+0xc0>)
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	4798      	blx	r3
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40010400 	.word	0x40010400
 8001b78:	20000060 	.word	0x20000060

08001b7c <Get_CRLH_Position>:
#include "../inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8c:	f000 80a5 	beq.w	8001cda <Get_CRLH_Position+0x15e>
 8001b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b94:	f300 80a3 	bgt.w	8001cde <Get_CRLH_Position+0x162>
 8001b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9c:	f000 809b 	beq.w	8001cd6 <Get_CRLH_Position+0x15a>
 8001ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ba4:	f300 809b 	bgt.w	8001cde <Get_CRLH_Position+0x162>
 8001ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bac:	f000 8091 	beq.w	8001cd2 <Get_CRLH_Position+0x156>
 8001bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb4:	f300 8093 	bgt.w	8001cde <Get_CRLH_Position+0x162>
 8001bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbc:	f000 8087 	beq.w	8001cce <Get_CRLH_Position+0x152>
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	f300 808b 	bgt.w	8001cde <Get_CRLH_Position+0x162>
 8001bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bcc:	d07d      	beq.n	8001cca <Get_CRLH_Position+0x14e>
 8001bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd2:	f300 8084 	bgt.w	8001cde <Get_CRLH_Position+0x162>
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bda:	d074      	beq.n	8001cc6 <Get_CRLH_Position+0x14a>
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	dc7d      	bgt.n	8001cde <Get_CRLH_Position+0x162>
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be6:	d06c      	beq.n	8001cc2 <Get_CRLH_Position+0x146>
 8001be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bec:	dc77      	bgt.n	8001cde <Get_CRLH_Position+0x162>
 8001bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf2:	d064      	beq.n	8001cbe <Get_CRLH_Position+0x142>
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	dc71      	bgt.n	8001cde <Get_CRLH_Position+0x162>
 8001bfa:	2b80      	cmp	r3, #128	; 0x80
 8001bfc:	d05d      	beq.n	8001cba <Get_CRLH_Position+0x13e>
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	dc6d      	bgt.n	8001cde <Get_CRLH_Position+0x162>
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	dc48      	bgt.n	8001c98 <Get_CRLH_Position+0x11c>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dd69      	ble.n	8001cde <Get_CRLH_Position+0x162>
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	2b1f      	cmp	r3, #31
 8001c0e:	d866      	bhi.n	8001cde <Get_CRLH_Position+0x162>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <Get_CRLH_Position+0x9c>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001cdf 	.word	0x08001cdf
 8001c24:	08001ca7 	.word	0x08001ca7
 8001c28:	08001cdf 	.word	0x08001cdf
 8001c2c:	08001cdf 	.word	0x08001cdf
 8001c30:	08001cdf 	.word	0x08001cdf
 8001c34:	08001cab 	.word	0x08001cab
 8001c38:	08001cdf 	.word	0x08001cdf
 8001c3c:	08001cdf 	.word	0x08001cdf
 8001c40:	08001cdf 	.word	0x08001cdf
 8001c44:	08001cdf 	.word	0x08001cdf
 8001c48:	08001cdf 	.word	0x08001cdf
 8001c4c:	08001cdf 	.word	0x08001cdf
 8001c50:	08001cdf 	.word	0x08001cdf
 8001c54:	08001caf 	.word	0x08001caf
 8001c58:	08001cdf 	.word	0x08001cdf
 8001c5c:	08001cdf 	.word	0x08001cdf
 8001c60:	08001cdf 	.word	0x08001cdf
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001cdf 	.word	0x08001cdf
 8001c6c:	08001cdf 	.word	0x08001cdf
 8001c70:	08001cdf 	.word	0x08001cdf
 8001c74:	08001cdf 	.word	0x08001cdf
 8001c78:	08001cdf 	.word	0x08001cdf
 8001c7c:	08001cdf 	.word	0x08001cdf
 8001c80:	08001cdf 	.word	0x08001cdf
 8001c84:	08001cdf 	.word	0x08001cdf
 8001c88:	08001cdf 	.word	0x08001cdf
 8001c8c:	08001cdf 	.word	0x08001cdf
 8001c90:	08001cdf 	.word	0x08001cdf
 8001c94:	08001cb3 	.word	0x08001cb3
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d00c      	beq.n	8001cb6 <Get_CRLH_Position+0x13a>
 8001c9c:	e01f      	b.n	8001cde <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e01e      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e01c      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	e01a      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8001caa:	230c      	movs	r3, #12
 8001cac:	e018      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8001cae:	2310      	movs	r3, #16
 8001cb0:	e016      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8001cb2:	2314      	movs	r3, #20
 8001cb4:	e014      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8001cb6:	2318      	movs	r3, #24
 8001cb8:	e012      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8001cba:	231c      	movs	r3, #28
 8001cbc:	e010      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e00e      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e00c      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	e00a      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8001cca:	230c      	movs	r3, #12
 8001ccc:	e008      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	e006      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8001cd2:	2314      	movs	r3, #20
 8001cd4:	e004      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8001cd6:	2318      	movs	r3, #24
 8001cd8:	e002      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8001cda:	231c      	movs	r3, #28
 8001cdc:	e000      	b.n	8001ce0 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d801      	bhi.n	8001d0a <MCAL_GPIO_Init+0x1e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	e001      	b.n	8001d0e <MCAL_GPIO_Init+0x22>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <Get_CRLH_Position>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	230f      	movs	r3, #15
 8001d20:	4093      	lsls	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	401a      	ands	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	789b      	ldrb	r3, [r3, #2]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d00b      	beq.n	8001d4e <MCAL_GPIO_Init+0x62>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d007      	beq.n	8001d4e <MCAL_GPIO_Init+0x62>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	789b      	ldrb	r3, [r3, #2]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d003      	beq.n	8001d4e <MCAL_GPIO_Init+0x62>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d10e      	bne.n	8001d6c <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	3b04      	subs	r3, #4
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	78db      	ldrb	r3, [r3, #3]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e02c      	b.n	8001dc6 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	789b      	ldrb	r3, [r3, #2]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d003      	beq.n	8001d7c <MCAL_GPIO_Init+0x90>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e01c      	b.n	8001dc6 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d102      	bne.n	8001d9a <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8001d94:	2304      	movs	r3, #4
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e015      	b.n	8001dc6 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	e007      	b.n	8001dc6 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	8812      	ldrh	r2, [r2, #0]
 8001dbe:	43d2      	mvns	r2, r2
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001dc6:	7bfc      	ldrb	r4, [r7, #15]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fed5 	bl	8001b7c <Get_CRLH_Position>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	fa04 f203 	lsl.w	r2, r4, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	601a      	str	r2, [r3, #0]


}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <MCAL_GPIO_ReadPin>:
 * Note					- None
 */


uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_LOW)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_HIGH;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <MCAL_GPIO_WritePin>:
 * Note					- None
 */


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_LOW)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <MCAL_GPIO_WritePin+0x1e>
		// Using BSRR (Port bit set/reset register) {doesnt't need |= sth)
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8001e34:	e002      	b.n	8001e3c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	615a      	str	r2, [r3, #20]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
	...

08001e48 <I2C1_EV_IRQHandler>:




void I2C1_EV_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
	volatile uint8_t dummy_read = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71fb      	strb	r3, [r7, #7]
	I2C_Typedef *I2Cx = I2C1;
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <I2C1_EV_IRQHandler+0xec>)
 8001e54:	617b      	str	r3, [r7, #20]

	uint32_t temp1,temp2,temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	60bb      	str	r3, [r7, #8]

	// Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <I2C1_EV_IRQHandler+0x48>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <I2C1_EV_IRQHandler+0x48>
	{
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
		I2Cx->CR1 |= 0x0000;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f000 f866 	bl	8001f5c <Slave_States>


	}
	//----------------------------------------------------------
	temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode   : Address matched with own address
	if(temp1 && temp3)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d014      	beq.n	8001eca <I2C1_EV_IRQHandler+0x82>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <I2C1_EV_IRQHandler+0x82>
	{
		// interrupt is generated because of ADDR event
		//check for device mode
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10b      	bne.n	8001eca <I2C1_EV_IRQHandler+0x82>

		}else
		{
			//slave mode
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = I2Cx->SR1;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	71fb      	strb	r3, [r7, #7]
			dummy_read = I2Cx->SR2;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	71fb      	strb	r3, [r7, #7]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	6978      	ldr	r0, [r7, #20]
 8001ec6:	f000 f849 	bl	8001f5c <Slave_States>

		}
	}
	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00f      	beq.n	8001efa <I2C1_EV_IRQHandler+0xb2>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <I2C1_EV_IRQHandler+0xb2>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <I2C1_EV_IRQHandler+0xb2>
	{
		//Check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <I2C1_EV_IRQHandler+0xb2>
		{

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f000 f831 	bl	8001f5c <Slave_States>
		}
	}

	//----------------------------------------------------------

	temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	60bb      	str	r3, [r7, #8]
	// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	if(temp1 && temp2 && temp3)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00f      	beq.n	8001f2a <I2C1_EV_IRQHandler+0xe2>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00c      	beq.n	8001f2a <I2C1_EV_IRQHandler+0xe2>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <I2C1_EV_IRQHandler+0xe2>
	{
		//check device mode .
		if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <I2C1_EV_IRQHandler+0xe2>
			//The device is master

		}else
		{
			//slave
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001f22:	2104      	movs	r1, #4
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f000 f819 	bl	8001f5c <Slave_States>

		}
	}

}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40005400 	.word	0x40005400

08001f38 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <Slave_States>:



void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a32      	ldr	r2, [pc, #200]	; (8002034 <Slave_States+0xd8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d856      	bhi.n	800202c <Slave_States+0xd0>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <Slave_States+0x28>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001f9f 	.word	0x08001f9f
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fc3 	.word	0x08001fc3
 8001f90:	08001fdb 	.word	0x08001fdb
 8001f94:	08001fff 	.word	0x08001fff
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001f9c:	e046      	b.n	800202c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03b      	beq.n	8002022 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	4922      	ldr	r1, [pc, #136]	; (8002038 <Slave_States+0xdc>)
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3320      	adds	r3, #32
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	4798      	blx	r3
		}

		break ;
 8001fc0:	e02f      	b.n	8002022 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	491c      	ldr	r1, [pc, #112]	; (8002038 <Slave_States+0xdc>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	3320      	adds	r3, #32
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	4798      	blx	r3

		break ;
 8001fd8:	e028      	b.n	800202c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01f      	beq.n	8002026 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	4913      	ldr	r1, [pc, #76]	; (8002038 <Slave_States+0xdc>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	4798      	blx	r3
		}

		break ;
 8001ffc:	e013      	b.n	8002026 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	490a      	ldr	r1, [pc, #40]	; (8002038 <Slave_States+0xdc>)
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3320      	adds	r3, #32
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2004      	movs	r0, #4
 800201e:	4798      	blx	r3
		}

		break ;
 8002020:	e003      	b.n	800202a <Slave_States+0xce>
		break ;
 8002022:	bf00      	nop
 8002024:	e002      	b.n	800202c <Slave_States+0xd0>
		break ;
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <Slave_States+0xd0>
		break ;
 800202a:	bf00      	nop
	}
	}

}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005400 	.word	0x40005400
 8002038:	2000009c 	.word	0x2000009c

0800203c <MCAL_RCC_CLK_Init>:
 *
 */


CLK_STATUS MCAL_RCC_CLK_Init(RCC_CLK_SRC clock_source, CLOCK_SPEED clock_speed)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
	CLK_STATUS status = CLK_NOT_READY;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]


	switch(clock_source)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d049      	beq.n	80020ea <MCAL_RCC_CLK_Init+0xae>
 8002056:	2b02      	cmp	r3, #2
 8002058:	f300 80cc 	bgt.w	80021f4 <MCAL_RCC_CLK_Init+0x1b8>
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80c8 	beq.w	80021f2 <MCAL_RCC_CLK_Init+0x1b6>
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 80c6 	bne.w	80021f4 <MCAL_RCC_CLK_Init+0x1b8>
	}

	case HSE_CLK:
	{
		// HSE not bypassed
		RCC->CR &= ~(1<<18);
 8002068:	4b65      	ldr	r3, [pc, #404]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a64      	ldr	r2, [pc, #400]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]
		// Enable HSE
		RCC->CR |= (1<<16);
 8002074:	4b62      	ldr	r3, [pc, #392]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a61      	ldr	r2, [pc, #388]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
		// Make HSE to be input to PLL, to multiply it by some value
		RCC->CFGR |= (1<<16); // 1: HSE oscillator clock selected as PLL input clock
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	6053      	str	r3, [r2, #4]


		switch(clock_speed)
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	2b48      	cmp	r3, #72	; 0x48
 8002090:	d106      	bne.n	80020a0 <MCAL_RCC_CLK_Init+0x64>
		{
		case RCC_CLK_72M:
			RCC->CFGR |= (PLL_MUL9<<18);  // Multiply by 9 --> 8*9 = 72MHz
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a5a      	ldr	r2, [pc, #360]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002098:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800209c:	6053      	str	r3, [r2, #4]
			break;
 800209e:	bf00      	nop
					0: PLL OFF
					1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 80020a0:	4b57      	ldr	r3, [pc, #348]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a56      	ldr	r2, [pc, #344]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

		// Select PLL as clock source
		RCC->CFGR &= ~(0b11<<0);
 80020ac:	4b54      	ldr	r3, [pc, #336]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a53      	ldr	r2, [pc, #332]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (0b10<<0);
 80020b8:	4b51      	ldr	r3, [pc, #324]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a50      	ldr	r2, [pc, #320]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	6053      	str	r3, [r2, #4]
//		1100: SYSCLK divided by 64
//		1101: SYSCLK divided by 128
//		1110: SYSCLK divided by 256
//		1111: SYSCLK divided by

		RCC->CFGR |= (0b1000 << 4);   // SYSCLK Divided by 2
 80020c4:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	6053      	str	r3, [r2, #4]
//		110: HCLK divided by 8
//		111: HCLK divided by 16


		// RCC->CFGR |= (0b100 << 11);
		RCC->CFGR &=~(0b111<<11);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020d6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020da:	6053      	str	r3, [r2, #4]

		RCC->CFGR &=~(0b111<<8);
 80020dc:	4b48      	ldr	r3, [pc, #288]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a47      	ldr	r2, [pc, #284]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020e6:	6053      	str	r3, [r2, #4]




		break;
 80020e8:	e084      	b.n	80021f4 <MCAL_RCC_CLK_Init+0x1b8>
			indirectly as system clock or is selected to become the system clock.
			0: Internal 8 MHz RC oscillator OFF
			1: Internal 8 MHz RC oscillator ON
		 */

		RCC->CR &= ~(1<<0);
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a44      	ldr	r2, [pc, #272]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6013      	str	r3, [r2, #0]
			Set and cleared by software to select PLL clock source. This bit can be written only when PLL is
			disabled.
			0: HSI oscillator clock / 2 selected as PLL input clock
			1: Clock from PREDIV1 selected as PLL input clock
		 */
		RCC->CFGR &= ~(1<<16);
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a41      	ldr	r2, [pc, #260]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	6053      	str	r3, [r2, #4]
			1101: PLL input clock x 6.5
			111x: Reserved
		 *
		 */

		switch(clock_speed)
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	3b10      	subs	r3, #16
 8002106:	2b14      	cmp	r3, #20
 8002108:	d85d      	bhi.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <MCAL_RCC_CLK_Init+0xd4>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002165 	.word	0x08002165
 8002114:	080021c7 	.word	0x080021c7
 8002118:	080021c7 	.word	0x080021c7
 800211c:	080021c7 	.word	0x080021c7
 8002120:	08002173 	.word	0x08002173
 8002124:	080021c7 	.word	0x080021c7
 8002128:	080021c7 	.word	0x080021c7
 800212c:	080021c7 	.word	0x080021c7
 8002130:	08002181 	.word	0x08002181
 8002134:	080021c7 	.word	0x080021c7
 8002138:	0800218f 	.word	0x0800218f
 800213c:	080021c7 	.word	0x080021c7
 8002140:	0800219d 	.word	0x0800219d
 8002144:	080021c7 	.word	0x080021c7
 8002148:	080021c7 	.word	0x080021c7
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021ab 	.word	0x080021ab
 8002154:	080021c7 	.word	0x080021c7
 8002158:	080021c7 	.word	0x080021c7
 800215c:	080021c7 	.word	0x080021c7
 8002160:	080021b9 	.word	0x080021b9
		{
		case RCC_CLK_16M:
			RCC->CFGR |= (PLL_MUL4<<18);
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 800216a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800216e:	6053      	str	r3, [r2, #4]
			break;
 8002170:	e029      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_20M:
			RCC->CFGR |= (PLL_MUL5<<18);
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002178:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800217c:	6053      	str	r3, [r2, #4]
			break;
 800217e:	e022      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_24M:
			RCC->CFGR |= (PLL_MUL6<<18);
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218a:	6053      	str	r3, [r2, #4]
			break;
 800218c:	e01b      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_26M:
			RCC->CFGR |= (PULL_MUL6_5<<18);
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 8002194:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 8002198:	6053      	str	r3, [r2, #4]
			break;
 800219a:	e014      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_28M:
			RCC->CFGR |= (PLL_MUL7<<18);
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021a2:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80021a6:	6053      	str	r3, [r2, #4]
			break;
 80021a8:	e00d      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_32M:
			RCC->CFGR |= (PLL_MUL8<<18);
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021b0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80021b4:	6053      	str	r3, [r2, #4]
			break;
 80021b6:	e006      	b.n	80021c6 <MCAL_RCC_CLK_Init+0x18a>
		case RCC_CLK_36M:
			RCC->CFGR |= (PLL_MUL9<<18);
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021be:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80021c2:	6053      	str	r3, [r2, #4]
			break;
 80021c4:	bf00      	nop
			0: PLL OFF
			1: PLL ON
		 *
		 */

		RCC->CR |= (1<<24);
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]
			Set by hardware to indicate that the PLL is locked.
			0: PLL unlocked
			1: PLL locked
		 */

		while(!(RCC->CR & (1<<25)));
 80021d2:	bf00      	nop
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f9      	beq.n	80021d4 <MCAL_RCC_CLK_Init+0x198>
			10: PLL selected as system clock
			11: Not allowed
		 *
		 */

		RCC->CFGR |= (0b10 <<0);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <MCAL_RCC_CLK_Init+0x1c4>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	6053      	str	r3, [r2, #4]


		status = CLK_READY;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]



		break;
 80021f0:	e000      	b.n	80021f4 <MCAL_RCC_CLK_Init+0x1b8>
		break;
 80021f2:	bf00      	nop
	}
	}
	return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000

08002204 <TIMER3_Init>:




void TIMER3_Init(CLOCK_SPEED Clock_Speed_MHz)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
	// Enable clock for timer2
	RCC_TIMER3_CLK_EN();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <TIMER3_Init+0x4c>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <TIMER3_Init+0x4c>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	61d3      	str	r3, [r2, #28]
	// If 36MHz clock used (36MHz/(35+1)=1MHz clock)
	//	TIMER2->PSC = 35;


	// Generic Prescalar (To get 1MHz clock speed for timer)
	TIMER3->PSC = (Clock_Speed_MHz - 1);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <TIMER3_Init+0x50>)
 8002220:	629a      	str	r2, [r3, #40]	; 0x28

	// Choose a value for auto reload register (we didn't use the maximum value because we doesn't have long delays)
	// Timer 2 will generate an interrupt every 50 milliseconds
	// The auto-reload register (ARR) is used for the purpose of resetting the timer counter back to 0 when it reaches the value specified in ARR.
	// This process is often referred to as "wrapping" or "overflowing."
	TIMER3->ARR = 0xC350;  // 50000*1us = 0.05s
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <TIMER3_Init+0x50>)
 8002224:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable Timer2
	TIMER3->CR1 |= (1<<0);
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <TIMER3_Init+0x50>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <TIMER3_Init+0x50>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]


	//Wait until the update flag (UIF) in the status register (SR) of TIM2 becomes 1.
	// This indicates that the timer
	// has finished counting to its ARR value and generated an interrupt.
	while(!((TIMER3->SR) & (1<<0)));
 8002236:	bf00      	nop
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <TIMER3_Init+0x50>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f9      	beq.n	8002238 <TIMER3_Init+0x34>
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	40000400 	.word	0x40000400

08002258 <Delay_Timer3_us>:


void Delay_Timer3_us(int us)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	TIMER3->CNT = 0;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <Delay_Timer3_us+0x28>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
	while((TIMER3->CNT) < us);
 8002266:	bf00      	nop
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <Delay_Timer3_us+0x28>)
 800226a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3fa      	bcc.n	8002268 <Delay_Timer3_us+0x10>
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40000400 	.word	0x40000400

08002284 <Delay_Timer3_ms>:


void Delay_Timer3_ms(int ms)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<ms;i++)
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e006      	b.n	80022a0 <Delay_Timer3_ms+0x1c>
	{
		Delay_Timer3_us(1000);
 8002292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002296:	f7ff ffdf 	bl	8002258 <Delay_Timer3_us>
	for(i=0;i<ms;i++)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf4      	blt.n	8002292 <Delay_Timer3_ms+0xe>
	}
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <PWM>:




void PWM(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint8_t dutyCycle, uint32_t frequency, CLOCK_SPEED Clock_Speed_MHz)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b098      	sub	sp, #96	; 0x60
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	72fb      	strb	r3, [r7, #11]
 80022c2:	4613      	mov	r3, r2
 80022c4:	72bb      	strb	r3, [r7, #10]
	// Disabling timer to make configurations



	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 80022cc:	2300      	movs	r3, #0
 80022ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80022d0:	2301      	movs	r3, #1
 80022d2:	657b      	str	r3, [r7, #84]	; 0x54

	while(loop_flag == 1)
 80022d4:	e017      	b.n	8002306 <PWM+0x52>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 80022d6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80022da:	4a91      	ldr	r2, [pc, #580]	; (8002520 <PWM+0x26c>)
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ee:	65bb      	str	r3, [r7, #88]	; 0x58
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 80022f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80022f6:	d303      	bcc.n	8002300 <PWM+0x4c>
			Prescalar_Value += 2;
 80022f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fa:	3302      	adds	r3, #2
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
 80022fe:	e002      	b.n	8002306 <PWM+0x52>
		}else{
			loop_flag = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(loop_flag == 1)
 8002306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800230a:	2b01      	cmp	r3, #1
 800230c:	d0e3      	beq.n	80022d6 <PWM+0x22>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a84      	ldr	r2, [pc, #528]	; (8002524 <PWM+0x270>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80d8 	bne.w	80024c8 <PWM+0x214>
	{
		RCC_TIMER1_CLK_EN();
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <PWM+0x274>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a82      	ldr	r2, [pc, #520]	; (8002528 <PWM+0x274>)
 800231e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002322:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <PWM+0x274>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a7f      	ldr	r2, [pc, #508]	; (8002528 <PWM+0x274>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002330:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <PWM+0x274>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <PWM+0x274>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6193      	str	r3, [r2, #24]

		TIMERx->CR1 &= ~(1<<0);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 0201 	bic.w	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002348:	7afb      	ldrb	r3, [r7, #11]
 800234a:	2b03      	cmp	r3, #3
 800234c:	f200 8336 	bhi.w	80029bc <PWM+0x708>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <PWM+0xa4>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	080023c1 	.word	0x080023c1
 8002360:	08002419 	.word	0x08002419
 8002364:	08002471 	.word	0x08002471
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002368:	4b70      	ldr	r3, [pc, #448]	; (800252c <PWM+0x278>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800236e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002372:	4619      	mov	r1, r3
 8002374:	486e      	ldr	r0, [pc, #440]	; (8002530 <PWM+0x27c>)
 8002376:	f7ff fcb9 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f043 0208 	orr.w	r2, r3, #8
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800239e:	7abb      	ldrb	r3, [r7, #10]
 80023a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	4a63      	ldr	r2, [pc, #396]	; (8002534 <PWM+0x280>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095a      	lsrs	r2, r3, #5
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
			break;
 80023be:	e2fd      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80023c0:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <PWM+0x284>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80023c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023ca:	4619      	mov	r1, r3
 80023cc:	4858      	ldr	r0, [pc, #352]	; (8002530 <PWM+0x27c>)
 80023ce:	f7ff fc8d 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80023f6:	7abb      	ldrb	r3, [r7, #10]
 80023f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <PWM+0x280>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	095a      	lsrs	r2, r3, #5
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002416:	e2d1      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002418:	4b48      	ldr	r3, [pc, #288]	; (800253c <PWM+0x288>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800241e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002422:	4619      	mov	r1, r3
 8002424:	4842      	ldr	r0, [pc, #264]	; (8002530 <PWM+0x27c>)
 8002426:	f7ff fc61 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800244e:	7abb      	ldrb	r3, [r7, #10]
 8002450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	4a37      	ldr	r2, [pc, #220]	; (8002534 <PWM+0x280>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095a      	lsrs	r2, r3, #5
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800246e:	e2a5      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <PWM+0x28c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800247a:	4619      	mov	r1, r3
 800247c:	482c      	ldr	r0, [pc, #176]	; (8002530 <PWM+0x27c>)
 800247e:	f7ff fc35 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80024a6:	7abb      	ldrb	r3, [r7, #10]
 80024a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <PWM+0x280>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095a      	lsrs	r2, r3, #5
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80024c6:	e279      	b.n	80029bc <PWM+0x708>
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	f040 80d1 	bne.w	8002674 <PWM+0x3c0>
	{
		RCC_TIMER2_CLK_EN();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <PWM+0x274>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <PWM+0x274>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <PWM+0x274>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a11      	ldr	r2, [pc, #68]	; (8002528 <PWM+0x274>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <PWM+0x274>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <PWM+0x274>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6193      	str	r3, [r2, #24]


		TIMERx->CR1 &= ~(1<<0);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0201 	bic.w	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	2b03      	cmp	r3, #3
 8002506:	f200 8259 	bhi.w	80029bc <PWM+0x708>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <PWM+0x25c>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002545 	.word	0x08002545
 8002514:	08002591 	.word	0x08002591
 8002518:	080025dd 	.word	0x080025dd
 800251c:	08002629 	.word	0x08002629
 8002520:	000f4240 	.word	0x000f4240
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40021000 	.word	0x40021000
 800252c:	080038d0 	.word	0x080038d0
 8002530:	40010800 	.word	0x40010800
 8002534:	51eb851f 	.word	0x51eb851f
 8002538:	080038d4 	.word	0x080038d4
 800253c:	080038d8 	.word	0x080038d8
 8002540:	080038dc 	.word	0x080038dc
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002544:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <PWM+0x508>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800254a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800254e:	4619      	mov	r1, r3
 8002550:	489b      	ldr	r0, [pc, #620]	; (80027c0 <PWM+0x50c>)
 8002552:	f7ff fbcb 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f043 0208 	orr.w	r2, r3, #8
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800257a:	7abb      	ldrb	r3, [r7, #10]
 800257c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	4a90      	ldr	r2, [pc, #576]	; (80027c4 <PWM+0x510>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095a      	lsrs	r2, r3, #5
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 800258e:	e215      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002590:	4b8d      	ldr	r3, [pc, #564]	; (80027c8 <PWM+0x514>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002596:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259a:	4619      	mov	r1, r3
 800259c:	4888      	ldr	r0, [pc, #544]	; (80027c0 <PWM+0x50c>)
 800259e:	f7ff fba5 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80025c6:	7abb      	ldrb	r3, [r7, #10]
 80025c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <PWM+0x510>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095a      	lsrs	r2, r3, #5
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 80025da:	e1ef      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <PWM+0x518>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80025e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025e6:	4619      	mov	r1, r3
 80025e8:	4875      	ldr	r0, [pc, #468]	; (80027c0 <PWM+0x50c>)
 80025ea:	f7ff fb7f 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f043 0208 	orr.w	r2, r3, #8
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002612:	7abb      	ldrb	r3, [r7, #10]
 8002614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <PWM+0x510>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095a      	lsrs	r2, r3, #5
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 8002626:	e1c9      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <PWM+0x51c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800262e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002632:	4619      	mov	r1, r3
 8002634:	4862      	ldr	r0, [pc, #392]	; (80027c0 <PWM+0x50c>)
 8002636:	f7ff fb59 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800265e:	7abb      	ldrb	r3, [r7, #10]
 8002660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <PWM+0x510>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095a      	lsrs	r2, r3, #5
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002672:	e1a3      	b.n	80029bc <PWM+0x708>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a57      	ldr	r2, [pc, #348]	; (80027d4 <PWM+0x520>)
 8002678:	4293      	cmp	r3, r2
 800267a:	f040 80db 	bne.w	8002834 <PWM+0x580>
	{
		RCC_TIMER3_CLK_EN();
 800267e:	4b56      	ldr	r3, [pc, #344]	; (80027d8 <PWM+0x524>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a55      	ldr	r2, [pc, #340]	; (80027d8 <PWM+0x524>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 800268a:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <PWM+0x524>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <PWM+0x524>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002696:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <PWM+0x524>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <PWM+0x524>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80026a2:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <PWM+0x524>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	4a4c      	ldr	r2, [pc, #304]	; (80027d8 <PWM+0x524>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0201 	bic.w	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	f200 817d 	bhi.w	80029bc <PWM+0x708>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <PWM+0x414>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	08002725 	.word	0x08002725
 80026d0:	08002771 	.word	0x08002771
 80026d4:	080027e9 	.word	0x080027e9
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80026d8:	4b40      	ldr	r3, [pc, #256]	; (80027dc <PWM+0x528>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 80026de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026e2:	4619      	mov	r1, r3
 80026e4:	4836      	ldr	r0, [pc, #216]	; (80027c0 <PWM+0x50c>)
 80026e6:	f7ff fb01 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f043 0208 	orr.w	r2, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800270e:	7abb      	ldrb	r3, [r7, #10]
 8002710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <PWM+0x510>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095a      	lsrs	r2, r3, #5
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 8002722:	e14b      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <PWM+0x52c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 800272a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272e:	4619      	mov	r1, r3
 8002730:	4823      	ldr	r0, [pc, #140]	; (80027c0 <PWM+0x50c>)
 8002732:	f7ff fadb 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f043 0210 	orr.w	r2, r3, #16
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800275a:	7abb      	ldrb	r3, [r7, #10]
 800275c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <PWM+0x510>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095a      	lsrs	r2, r3, #5
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 800276e:	e125      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <PWM+0x508>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800277a:	4619      	mov	r1, r3
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <PWM+0x530>)
 800277e:	f7ff fab5 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f043 0208 	orr.w	r2, r3, #8
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 80027a6:	7abb      	ldrb	r3, [r7, #10]
 80027a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <PWM+0x510>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	095a      	lsrs	r2, r3, #5
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 80027ba:	e0ff      	b.n	80029bc <PWM+0x708>
 80027bc:	080038e0 	.word	0x080038e0
 80027c0:	40010800 	.word	0x40010800
 80027c4:	51eb851f 	.word	0x51eb851f
 80027c8:	080038e4 	.word	0x080038e4
 80027cc:	080038e8 	.word	0x080038e8
 80027d0:	080038ec 	.word	0x080038ec
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40021000 	.word	0x40021000
 80027dc:	080038f0 	.word	0x080038f0
 80027e0:	080038f4 	.word	0x080038f4
 80027e4:	40010c00 	.word	0x40010c00
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80027e8:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <PWM+0x744>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	4619      	mov	r1, r3
 80027f4:	4881      	ldr	r0, [pc, #516]	; (80029fc <PWM+0x748>)
 80027f6:	f7ff fa79 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800281e:	7abb      	ldrb	r3, [r7, #10]
 8002820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a76      	ldr	r2, [pc, #472]	; (8002a00 <PWM+0x74c>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	095a      	lsrs	r2, r3, #5
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 8002832:	e0c3      	b.n	80029bc <PWM+0x708>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <PWM+0x750>)
 8002838:	4293      	cmp	r3, r2
 800283a:	f040 80bf 	bne.w	80029bc <PWM+0x708>
	{
		RCC_TIMER4_CLK_EN();
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <PWM+0x754>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a71      	ldr	r2, [pc, #452]	; (8002a08 <PWM+0x754>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 800284a:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <PWM+0x754>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <PWM+0x754>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <PWM+0x754>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <PWM+0x754>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6193      	str	r3, [r2, #24]



		TIMERx->CR1 &= ~(1<<0);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0201 	bic.w	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	2b03      	cmp	r3, #3
 8002872:	f200 80a3 	bhi.w	80029bc <PWM+0x708>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <PWM+0x5c8>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	080028d9 	.word	0x080028d9
 8002884:	08002925 	.word	0x08002925
 8002888:	08002971 	.word	0x08002971
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800288c:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <PWM+0x758>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002892:	f107 0320 	add.w	r3, r7, #32
 8002896:	4619      	mov	r1, r3
 8002898:	4858      	ldr	r0, [pc, #352]	; (80029fc <PWM+0x748>)
 800289a:	f7ff fa27 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f043 0208 	orr.w	r2, r3, #8
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	4a4d      	ldr	r2, [pc, #308]	; (8002a00 <PWM+0x74c>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095a      	lsrs	r2, r3, #5
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
			//TIMERx->DIER |= (0b11 << 0);
			break;
 80028d6:	e071      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <PWM+0x75c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4845      	ldr	r0, [pc, #276]	; (80029fc <PWM+0x748>)
 80028e6:	f7ff fa01 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 800290e:	7abb      	ldrb	r3, [r7, #10]
 8002910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <PWM+0x74c>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	095a      	lsrs	r2, r3, #5
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
			//TIMERx->DIER |= (0b101 << 0);
			break;
 8002922:	e04b      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <PWM+0x760>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	4619      	mov	r1, r3
 8002930:	4832      	ldr	r0, [pc, #200]	; (80029fc <PWM+0x748>)
 8002932:	f7ff f9db 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800295a:	7abb      	ldrb	r3, [r7, #10]
 800295c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <PWM+0x74c>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095a      	lsrs	r2, r3, #5
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c
			//TIMERx->DIER |= (0b1001 << 0);
			break;
 800296e:	e025      	b.n	80029bc <PWM+0x708>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <PWM+0x764>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	481f      	ldr	r0, [pc, #124]	; (80029fc <PWM+0x748>)
 800297e:	f7ff f9b5 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 80029a6:	7abb      	ldrb	r3, [r7, #10]
 80029a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <PWM+0x74c>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095a      	lsrs	r2, r3, #5
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
			//TIMERx->DIER |= (0b10001 << 0);
			break;
 80029ba:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	1e5a      	subs	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	3760      	adds	r7, #96	; 0x60
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	080038e4 	.word	0x080038e4
 80029fc:	40010c00 	.word	0x40010c00
 8002a00:	51eb851f 	.word	0x51eb851f
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080038f0 	.word	0x080038f0
 8002a10:	080038f4 	.word	0x080038f4
 8002a14:	080038d0 	.word	0x080038d0
 8002a18:	080038d4 	.word	0x080038d4

08002a1c <Get_TIMER3_Counter>:
{
	return (TIMER2->CNT);
}

uint32_t Get_TIMER3_Counter()
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	return (TIMER3->CNT);
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <Get_TIMER3_Counter+0x10>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40000400 	.word	0x40000400

08002a30 <TIMER3_Stop>:
	// Bit 0 CEN: Counter enable
	TIMER2->CR1 &= ~(1<<0);
}

void TIMER3_Stop()
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
	// Bit 0 CEN: Counter enable
	TIMER3->CR1 &= ~(1<<0);
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <TIMER3_Stop+0x18>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <TIMER3_Stop+0x18>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40000400 	.word	0x40000400

08002a4c <PWM_Move_Steps>:




void PWM_Move_Steps(TIMER_Typedef *TIMERx, Timer_Channel ChannelX, uint16_t steps,uint8_t dutyCycle, uint32_t frequency,CLOCK_SPEED Clock_Speed_MHz)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b096      	sub	sp, #88	; 0x58
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	70fb      	strb	r3, [r7, #3]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	803b      	strh	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70bb      	strb	r3, [r7, #2]
	stepper_Flag = 1;
 8002a66:	4b9b      	ldr	r3, [pc, #620]	; (8002cd4 <PWM_Move_Steps+0x288>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
	stepper_Steps = steps;
 8002a6c:	4a9a      	ldr	r2, [pc, #616]	; (8002cd8 <PWM_Move_Steps+0x28c>)
 8002a6e:	883b      	ldrh	r3, [r7, #0]
 8002a70:	8013      	strh	r3, [r2, #0]




	// Choose appropriate values for ARR and PSC
	uint8_t loop_flag = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t top_Value = 0, Prescalar_Value = 1;    // fCK_PSC / (PSC[15:0] + 1)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(loop_flag == 1)
 8002a80:	e017      	b.n	8002ab2 <PWM_Move_Steps+0x66>
	{
		top_Value = ((Clock_Speed_MHz*1000000) / (frequency * Prescalar_Value));
 8002a82:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002a86:	4a95      	ldr	r2, [pc, #596]	; (8002cdc <PWM_Move_Steps+0x290>)
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
		if(top_Value >= 32000){   // Just an arbitrary threshold that could fit the ARR register
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002aa2:	d303      	bcc.n	8002aac <PWM_Move_Steps+0x60>
			Prescalar_Value += 2;
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aaa:	e002      	b.n	8002ab2 <PWM_Move_Steps+0x66>
		}else{
			loop_flag = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(loop_flag == 1)
 8002ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d0e3      	beq.n	8002a82 <PWM_Move_Steps+0x36>
		}
	}


	// ===================== TIMER1 ===============================
	if(TIMERx == TIMER1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a88      	ldr	r2, [pc, #544]	; (8002ce0 <PWM_Move_Steps+0x294>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f040 8120 	bne.w	8002d04 <PWM_Move_Steps+0x2b8>
	{

		RCC_TIMER1_CLK_EN();
 8002ac4:	4b87      	ldr	r3, [pc, #540]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002aca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ace:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8002ad0:	4b84      	ldr	r3, [pc, #528]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a83      	ldr	r2, [pc, #524]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002adc:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4a80      	ldr	r2, [pc, #512]	; (8002ce4 <PWM_Move_Steps+0x298>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6193      	str	r3, [r2, #24]


		NVIC_IRQ24_TIMER1_BRK_Enable;
 8002ae8:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a7e      	ldr	r2, [pc, #504]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]
		NVIC_IRQ25_TIMER1_UP_Enable;
 8002af4:	4b7c      	ldr	r3, [pc, #496]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7b      	ldr	r2, [pc, #492]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afe:	6013      	str	r3, [r2, #0]
		NVIC_IRQ26_TIMER1_TRG_COM_Enable;
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a78      	ldr	r2, [pc, #480]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002b06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b0a:	6013      	str	r3, [r2, #0]
		NVIC_IRQ27_TIMER1_CC_Enable;
 8002b0c:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a75      	ldr	r2, [pc, #468]	; (8002ce8 <PWM_Move_Steps+0x29c>)
 8002b12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b16:	6013      	str	r3, [r2, #0]

		TIMERx->CR1 &= ~(1<<0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0201 	bic.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 83c2 	bhi.w	80032b0 <PWM_Move_Steps+0x864>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <PWM_Move_Steps+0xe8>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002ba9 	.word	0x08002ba9
 8002b3c:	08002c0d 	.word	0x08002c0d
 8002b40:	08002c71 	.word	0x08002c71
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002b44:	4b69      	ldr	r3, [pc, #420]	; (8002cec <PWM_Move_Steps+0x2a0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002b4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4867      	ldr	r0, [pc, #412]	; (8002cf0 <PWM_Move_Steps+0x2a4>)
 8002b52:	f7ff f8cb 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f043 0208 	orr.w	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002b7a:	78bb      	ldrb	r3, [r7, #2]
 8002b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a5c      	ldr	r2, [pc, #368]	; (8002cf4 <PWM_Move_Steps+0x2a8>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095a      	lsrs	r2, r3, #5
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b11 << 0);  // Update interrupt enable && Capture/Compare 1 interrupt enable
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f043 0203 	orr.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]
			break;
 8002ba6:	e383      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <PWM_Move_Steps+0x2ac>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	647b      	str	r3, [r7, #68]	; 0x44
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002bae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	484e      	ldr	r0, [pc, #312]	; (8002cf0 <PWM_Move_Steps+0x2a4>)
 8002bb6:	f7ff f899 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	4a43      	ldr	r2, [pc, #268]	; (8002cf4 <PWM_Move_Steps+0x2a8>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	095a      	lsrs	r2, r3, #5
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b101 << 0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f043 0205 	orr.w	r2, r3, #5
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
			break;
 8002c0a:	e351      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_10,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <PWM_Move_Steps+0x2b0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	643b      	str	r3, [r7, #64]	; 0x40
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c16:	4619      	mov	r1, r3
 8002c18:	4835      	ldr	r0, [pc, #212]	; (8002cf0 <PWM_Move_Steps+0x2a4>)
 8002c1a:	f7ff f867 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002c42:	78bb      	ldrb	r3, [r7, #2]
 8002c44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <PWM_Move_Steps+0x2a8>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095a      	lsrs	r2, r3, #5
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b1001 << 0);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f043 0209 	orr.w	r2, r3, #9
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
			break;
 8002c6e:	e31f      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_11,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <PWM_Move_Steps+0x2b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	63fb      	str	r3, [r7, #60]	; 0x3c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <PWM_Move_Steps+0x2a4>)
 8002c7e:	f7ff f835 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002ca6:	78bb      	ldrb	r3, [r7, #2]
 8002ca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <PWM_Move_Steps+0x2a8>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095a      	lsrs	r2, r3, #5
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->BDTR |=(1<<15); // Main output enable
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->DIER |= (0b10001 << 0);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f043 0211 	orr.w	r2, r3, #17
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
			break;
 8002cd2:	e2ed      	b.n	80032b0 <PWM_Move_Steps+0x864>
 8002cd4:	200000e5 	.word	0x200000e5
 8002cd8:	200000e6 	.word	0x200000e6
 8002cdc:	000f4240 	.word	0x000f4240
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	080038d0 	.word	0x080038d0
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	51eb851f 	.word	0x51eb851f
 8002cf8:	080038d4 	.word	0x080038d4
 8002cfc:	080038d8 	.word	0x080038d8
 8002d00:	080038dc 	.word	0x080038dc
		}
		}
	}

	// ===================== TIMER2 ===============================
	else if(TIMERx == TIMER2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	f040 80dd 	bne.w	8002ec8 <PWM_Move_Steps+0x47c>
	{


		RCC_TIMER2_CLK_EN();
 8002d0e:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a9f      	ldr	r2, [pc, #636]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002d1a:	4b9d      	ldr	r3, [pc, #628]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	4a9c      	ldr	r2, [pc, #624]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002d26:	4b9a      	ldr	r3, [pc, #616]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	4a99      	ldr	r2, [pc, #612]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6193      	str	r3, [r2, #24]


		NVIC_IRQ28_TIMER2_Enable;
 8002d32:	4b98      	ldr	r3, [pc, #608]	; (8002f94 <PWM_Move_Steps+0x548>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a97      	ldr	r2, [pc, #604]	; (8002f94 <PWM_Move_Steps+0x548>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6013      	str	r3, [r2, #0]


		TIMERx->CR1 &= ~(1<<0);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]

		switch(ChannelX){
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	f200 82af 	bhi.w	80032b0 <PWM_Move_Steps+0x864>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <PWM_Move_Steps+0x30c>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002e19 	.word	0x08002e19
 8002d64:	08002e71 	.word	0x08002e71
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <PWM_Move_Steps+0x54c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002d6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d72:	4619      	mov	r1, r3
 8002d74:	4889      	ldr	r0, [pc, #548]	; (8002f9c <PWM_Move_Steps+0x550>)
 8002d76:	f7fe ffb9 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f043 0208 	orr.w	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002d9e:	78bb      	ldrb	r3, [r7, #2]
 8002da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <PWM_Move_Steps+0x554>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095a      	lsrs	r2, r3, #5
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f043 0203 	orr.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
			break;
 8002dbe:	e277      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002dc0:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <PWM_Move_Steps+0x558>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4873      	ldr	r0, [pc, #460]	; (8002f9c <PWM_Move_Steps+0x550>)
 8002dce:	f7fe ff8d 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002df6:	78bb      	ldrb	r3, [r7, #2]
 8002df8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a68      	ldr	r2, [pc, #416]	; (8002fa0 <PWM_Move_Steps+0x554>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095a      	lsrs	r2, r3, #5
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f043 0205 	orr.w	r2, r3, #5
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]
			break;
 8002e16:	e24b      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_2,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e18:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <PWM_Move_Steps+0x55c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e22:	4619      	mov	r1, r3
 8002e24:	485d      	ldr	r0, [pc, #372]	; (8002f9c <PWM_Move_Steps+0x550>)
 8002e26:	f7fe ff61 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8002e4e:	78bb      	ldrb	r3, [r7, #2]
 8002e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <PWM_Move_Steps+0x554>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	095a      	lsrs	r2, r3, #5
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b1001 << 0);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f043 0209 	orr.w	r2, r3, #9
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60da      	str	r2, [r3, #12]
			break;
 8002e6e:	e21f      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_3,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002e70:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <PWM_Move_Steps+0x560>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4847      	ldr	r0, [pc, #284]	; (8002f9c <PWM_Move_Steps+0x550>)
 8002e7e:	f7fe ff35 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a3c      	ldr	r2, [pc, #240]	; (8002fa0 <PWM_Move_Steps+0x554>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	095a      	lsrs	r2, r3, #5
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b10001 << 0);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f043 0211 	orr.w	r2, r3, #17
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60da      	str	r2, [r3, #12]
			break;
 8002ec6:	e1f3      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

	}

	// ===================== TIMER3 ===============================
	else if(TIMERx == TIMER3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a39      	ldr	r2, [pc, #228]	; (8002fb0 <PWM_Move_Steps+0x564>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f040 80f7 	bne.w	80030c0 <PWM_Move_Steps+0x674>
	{


		RCC_TIMER3_CLK_EN();
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a2e      	ldr	r2, [pc, #184]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <PWM_Move_Steps+0x544>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6193      	str	r3, [r2, #24]

		NVIC_IRQ29_TIMER3_Enable;
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <PWM_Move_Steps+0x548>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <PWM_Move_Steps+0x548>)
 8002f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f0c:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0201 	bic.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	f200 81c7 	bhi.w	80032b0 <PWM_Move_Steps+0x864>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <PWM_Move_Steps+0x4dc>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002fb9 	.word	0x08002fb9
 8002f30:	08003011 	.word	0x08003011
 8002f34:	08003069 	.word	0x08003069
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <PWM_Move_Steps+0x568>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f42:	4619      	mov	r1, r3
 8002f44:	4815      	ldr	r0, [pc, #84]	; (8002f9c <PWM_Move_Steps+0x550>)
 8002f46:	f7fe fed1 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f043 0208 	orr.w	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 8002f6e:	78bb      	ldrb	r3, [r7, #2]
 8002f70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <PWM_Move_Steps+0x554>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	095a      	lsrs	r2, r3, #5
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f043 0203 	orr.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]
			break;
 8002f8e:	e18f      	b.n	80032b0 <PWM_Move_Steps+0x864>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	080038e0 	.word	0x080038e0
 8002f9c:	40010800 	.word	0x40010800
 8002fa0:	51eb851f 	.word	0x51eb851f
 8002fa4:	080038e4 	.word	0x080038e4
 8002fa8:	080038e8 	.word	0x080038e8
 8002fac:	080038ec 	.word	0x080038ec
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	080038f0 	.word	0x080038f0
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8002fb8:	4b9c      	ldr	r3, [pc, #624]	; (800322c <PWM_Move_Steps+0x7e0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
			MCAL_GPIO_Init(GPIOA, &GPIO_PinCfg);
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	489a      	ldr	r0, [pc, #616]	; (8003230 <PWM_Move_Steps+0x7e4>)
 8002fc6:	f7fe fe91 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 8002fee:	78bb      	ldrb	r3, [r7, #2]
 8002ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	4a8f      	ldr	r2, [pc, #572]	; (8003234 <PWM_Move_Steps+0x7e8>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095a      	lsrs	r2, r3, #5
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f043 0205 	orr.w	r2, r3, #5
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
			break;
 800300e:	e14f      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_0,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003010:	4b89      	ldr	r3, [pc, #548]	; (8003238 <PWM_Move_Steps+0x7ec>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	623b      	str	r3, [r7, #32]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003016:	f107 0320 	add.w	r3, r7, #32
 800301a:	4619      	mov	r1, r3
 800301c:	4887      	ldr	r0, [pc, #540]	; (800323c <PWM_Move_Steps+0x7f0>)
 800301e:	f7fe fe65 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f043 0208 	orr.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 8003046:	78bb      	ldrb	r3, [r7, #2]
 8003048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4a79      	ldr	r2, [pc, #484]	; (8003234 <PWM_Move_Steps+0x7e8>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095a      	lsrs	r2, r3, #5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]
			break;
 8003066:	e123      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_1,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003068:	4b75      	ldr	r3, [pc, #468]	; (8003240 <PWM_Move_Steps+0x7f4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61fb      	str	r3, [r7, #28]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	4871      	ldr	r0, [pc, #452]	; (800323c <PWM_Move_Steps+0x7f0>)
 8003076:	f7fe fe39 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800309e:	78bb      	ldrb	r3, [r7, #2]
 80030a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a63      	ldr	r2, [pc, #396]	; (8003234 <PWM_Move_Steps+0x7e8>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095a      	lsrs	r2, r3, #5
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]
			break;
 80030be:	e0f7      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}
		}
	}

	// ===================== TIMER4 ===============================
	else if(TIMERx == TIMER4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a60      	ldr	r2, [pc, #384]	; (8003244 <PWM_Move_Steps+0x7f8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f040 80f3 	bne.w	80032b0 <PWM_Move_Steps+0x864>
	{


		RCC_TIMER4_CLK_EN();
 80030ca:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a5e      	ldr	r2, [pc, #376]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	61d3      	str	r3, [r2, #28]
		RCC_GPIOB_CLK_EN();
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a58      	ldr	r2, [pc, #352]	; (8003248 <PWM_Move_Steps+0x7fc>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]

		NVIC_IRQ30_TIMER4_Enable;
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <PWM_Move_Steps+0x800>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a56      	ldr	r2, [pc, #344]	; (800324c <PWM_Move_Steps+0x800>)
 80030f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030f8:	6013      	str	r3, [r2, #0]



		TIMERx->CR1 &= ~(1<<0);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]


		switch(ChannelX){
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	2b03      	cmp	r3, #3
 800310a:	f200 80d1 	bhi.w	80032b0 <PWM_Move_Steps+0x864>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <PWM_Move_Steps+0x6c8>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	0800317d 	.word	0x0800317d
 800311c:	080031d5 	.word	0x080031d5
 8003120:	08003259 	.word	0x08003259
		case TIMER_CH1:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_6,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <PWM_Move_Steps+0x804>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800312a:	f107 0318 	add.w	r3, r7, #24
 800312e:	4619      	mov	r1, r3
 8003130:	4842      	ldr	r0, [pc, #264]	; (800323c <PWM_Move_Steps+0x7f0>)
 8003132:	f7fe fddb 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<3);  // Output compare 1 preload enable
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f043 0208 	orr.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<0);  // Capture/Compare 1 output enable
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 4);  // PWM mode 1 - In upcounting, channel 1 is active
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
			TIMERx->CCR1 = (top_Value * dutyCycle / 100);
 800315a:	78bb      	ldrb	r3, [r7, #2]
 800315c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <PWM_Move_Steps+0x7e8>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095a      	lsrs	r2, r3, #5
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->DIER |= (0b11 << 0);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f043 0203 	orr.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60da      	str	r2, [r3, #12]
			break;
 800317a:	e099      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH2:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_7,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <PWM_Move_Steps+0x7e0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	617b      	str	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	482c      	ldr	r0, [pc, #176]	; (800323c <PWM_Move_Steps+0x7f0>)
 800318a:	f7fe fdaf 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR1 |= (1<<11);  // Output compare 2 preload enable
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	619a      	str	r2, [r3, #24]
			TIMERx->CCER |= (1<<4);   // Capture/Compare 2 output enable
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR1 |= (0b110 << 12);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	619a      	str	r2, [r3, #24]
			TIMERx->CCR2 = (top_Value * dutyCycle / 100);
 80031b2:	78bb      	ldrb	r3, [r7, #2]
 80031b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <PWM_Move_Steps+0x7e8>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095a      	lsrs	r2, r3, #5
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->DIER |= (0b101 << 0);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f043 0205 	orr.w	r2, r3, #5
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60da      	str	r2, [r3, #12]
			break;
 80031d2:	e06d      	b.n	80032b0 <PWM_Move_Steps+0x864>
		}

		case TIMER_CH3:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_8,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 80031d4:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <PWM_Move_Steps+0x808>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	613b      	str	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 80031da:	f107 0310 	add.w	r3, r7, #16
 80031de:	4619      	mov	r1, r3
 80031e0:	4816      	ldr	r0, [pc, #88]	; (800323c <PWM_Move_Steps+0x7f0>)
 80031e2:	f7fe fd83 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<3);  // Output compare 3 preload enable
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<8);   // Capture/Compare 2 output enable
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 4);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	61da      	str	r2, [r3, #28]
			TIMERx->CCR3 = (top_Value * dutyCycle / 100);
 800320a:	78bb      	ldrb	r3, [r7, #2]
 800320c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <PWM_Move_Steps+0x7e8>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095a      	lsrs	r2, r3, #5
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->DIER |= (0b0001 << 0);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
			break;
 800322a:	e041      	b.n	80032b0 <PWM_Move_Steps+0x864>
 800322c:	080038f4 	.word	0x080038f4
 8003230:	40010800 	.word	0x40010800
 8003234:	51eb851f 	.word	0x51eb851f
 8003238:	080038e0 	.word	0x080038e0
 800323c:	40010c00 	.word	0x40010c00
 8003240:	080038e4 	.word	0x080038e4
 8003244:	40000800 	.word	0x40000800
 8003248:	40021000 	.word	0x40021000
 800324c:	e000e100 	.word	0xe000e100
 8003250:	080038f0 	.word	0x080038f0
 8003254:	080038d0 	.word	0x080038d0
		}

		case TIMER_CH4:
		{
			GPIO_PinConfig_t GPIO_PinCfg = {GPIO_PIN_9,GPIO_MODE_AF_OUTPUT_PUSHPULL,GPIO_SPEED_10MHZ};
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <PWM_Move_Steps+0x8ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &GPIO_PinCfg);
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4619      	mov	r1, r3
 8003264:	4825      	ldr	r0, [pc, #148]	; (80032fc <PWM_Move_Steps+0x8b0>)
 8003266:	f7fe fd41 	bl	8001cec <MCAL_GPIO_Init>
			TIMERx->CCMR2 |= (1<<11);  // Output compare 4 preload enable
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	61da      	str	r2, [r3, #28]
			TIMERx->CCER |= (1<<12);   // Capture/Compare 2 output enable
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]
			TIMERx->CCMR2 |= (0b110 << 12);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	61da      	str	r2, [r3, #28]
			TIMERx->CCR4 = (top_Value * dutyCycle / 100);
 800328e:	78bb      	ldrb	r3, [r7, #2]
 8003290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <PWM_Move_Steps+0x8b4>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095a      	lsrs	r2, r3, #5
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->DIER |= (0b00001 << 0);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]
			break;
 80032ae:	bf00      	nop


	//	Bit 7 ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->CR1 |= (1<<7);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]

	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	// ARR register value (Frequency value)
	TIMERx->ARR = top_Value;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c

	// Prescaler Value
	TIMERx->PSC = (Prescalar_Value - 1);
 80032c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28


	TIMERx->DIER |=(0b1<<0);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]


	//  Re-initialize the counter and generates an update of the registers (UG)
	TIMERx->EGR |= (1<<0);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	615a      	str	r2, [r3, #20]

	// Enable the timer
	TIMERx->CR1 |= (1<<0);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]





}
 80032ee:	bf00      	nop
 80032f0:	3758      	adds	r7, #88	; 0x58
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	080038d4 	.word	0x080038d4
 80032fc:	40010c00 	.word	0x40010c00
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <TIM2_IRQHandler>:




void TIM2_IRQHandler()
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <TIM2_IRQHandler+0x68>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d128      	bne.n	8003362 <TIM2_IRQHandler+0x5e>
	{
		TIMER2->SR &= ~(1<<0);
 8003310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6113      	str	r3, [r2, #16]
		TIMER2->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332a:	f023 0302 	bic.w	r3, r3, #2
 800332e:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <TIM2_IRQHandler+0x6c>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <TIM2_IRQHandler+0x42>
			stepper_Steps--;
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <TIM2_IRQHandler+0x6c>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <TIM2_IRQHandler+0x6c>)
 8003342:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 8003344:	e00d      	b.n	8003362 <TIM2_IRQHandler+0x5e>
			stepper_Flag = 0;
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <TIM2_IRQHandler+0x68>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
			TIMER2->CR1 &= ~(1<<0);   // Disable timer
 800334c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <TIM2_IRQHandler+0x70>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	200000e5 	.word	0x200000e5
 8003370:	200000e6 	.word	0x200000e6
 8003374:	200000e4 	.word	0x200000e4

08003378 <TIM3_IRQHandler>:




void TIM3_IRQHandler()
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 800337c:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <TIM3_IRQHandler+0x5c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d122      	bne.n	80033ca <TIM3_IRQHandler+0x52>
	{
		TIMER3->SR &= ~(1<<0);
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <TIM3_IRQHandler+0x60>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <TIM3_IRQHandler+0x60>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6113      	str	r3, [r2, #16]
		TIMER3->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <TIM3_IRQHandler+0x60>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <TIM3_IRQHandler+0x60>)
 8003396:	f023 0302 	bic.w	r3, r3, #2
 800339a:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <TIM3_IRQHandler+0x64>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <TIM3_IRQHandler+0x3a>
			stepper_Steps--;
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <TIM3_IRQHandler+0x64>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <TIM3_IRQHandler+0x64>)
 80033ae:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 80033b0:	e00b      	b.n	80033ca <TIM3_IRQHandler+0x52>
			stepper_Flag = 0;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <TIM3_IRQHandler+0x5c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
			TIMER3->CR1 &= ~(1<<0);   // Disable timer
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <TIM3_IRQHandler+0x60>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <TIM3_IRQHandler+0x60>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <TIM3_IRQHandler+0x68>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	200000e5 	.word	0x200000e5
 80033d8:	40000400 	.word	0x40000400
 80033dc:	200000e6 	.word	0x200000e6
 80033e0:	200000e4 	.word	0x200000e4

080033e4 <TIM4_IRQHandler>:




void TIM4_IRQHandler()
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
	if(stepper_Flag == 1)
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <TIM4_IRQHandler+0x5c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d122      	bne.n	8003436 <TIM4_IRQHandler+0x52>
	{
		TIMER4->SR &= ~(1<<0);
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <TIM4_IRQHandler+0x60>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <TIM4_IRQHandler+0x60>)
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6113      	str	r3, [r2, #16]
		TIMER4->SR &= ~(1<<1);  // Capture/compare 1 interrupt flag
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <TIM4_IRQHandler+0x60>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4a10      	ldr	r2, [pc, #64]	; (8003444 <TIM4_IRQHandler+0x60>)
 8003402:	f023 0302 	bic.w	r3, r3, #2
 8003406:	6113      	str	r3, [r2, #16]

		if(stepper_Steps != 0){
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <TIM4_IRQHandler+0x64>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <TIM4_IRQHandler+0x3a>
			stepper_Steps--;
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <TIM4_IRQHandler+0x64>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <TIM4_IRQHandler+0x64>)
 800341a:	801a      	strh	r2, [r3, #0]
			PinStepper_flag = 1;
		}
	}else{   // For further usage rather than stepper

	}
}
 800341c:	e00b      	b.n	8003436 <TIM4_IRQHandler+0x52>
			stepper_Flag = 0;
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <TIM4_IRQHandler+0x5c>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
			TIMER4->CR1 &= ~(1<<0);   // Disable timer
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <TIM4_IRQHandler+0x60>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <TIM4_IRQHandler+0x60>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6013      	str	r3, [r2, #0]
			PinStepper_flag = 1;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <TIM4_IRQHandler+0x68>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	200000e5 	.word	0x200000e5
 8003444:	40000800 	.word	0x40000800
 8003448:	200000e6 	.word	0x200000e6
 800344c:	200000e4 	.word	0x200000e4

08003450 <USART1_IRQHandler>:


// ISR

void USART1_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_CallBack();
 8003454:	4b02      	ldr	r3, [pc, #8]	; (8003460 <USART1_IRQHandler+0x10>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4798      	blx	r3
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200000e8 	.word	0x200000e8

08003464 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_CallBack();
 8003468:	4b02      	ldr	r3, [pc, #8]	; (8003474 <USART2_IRQHandler+0x10>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	4798      	blx	r3
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200000e8 	.word	0x200000e8

08003478 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_CallBack();
 800347c:	4b02      	ldr	r3, [pc, #8]	; (8003488 <USART3_IRQHandler+0x10>)
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	4798      	blx	r3
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200000e8 	.word	0x200000e8

0800348c <main>:





int main(void) {
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b097      	sub	sp, #92	; 0x5c
 8003490:	af02      	add	r7, sp, #8

	Clock_Init();
 8003492:	f000 f98b 	bl	80037ac <Clock_Init>
	//	MPU6050_CalculateError();



	// ------------------ Motors Configuration --------------
	Motor_Config_t DC_Motor1 =
 8003496:	4bb4      	ldr	r3, [pc, #720]	; (8003768 <main+0x2dc>)
 8003498:	f107 0420 	add.w	r4, r7, #32
 800349c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800349e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.DC_Pin2Number = GPIO_PIN_10,
			.DC_PortNumber = GPIOA,
			.PWM_Timer = TIMER4,
			.PWM_Channel = TIMER_CH2
	};
	Motor_Config_t DC_Motor2 =
 80034a2:	4bb2      	ldr	r3, [pc, #712]	; (800376c <main+0x2e0>)
 80034a4:	f107 0410 	add.w	r4, r7, #16
 80034a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.DC_PortNumber = GPIOA,
			.PWM_Timer = TIMER4,
			.PWM_Channel = TIMER_CH1
	};

	Motor_intialize(&DC_Motor1);
 80034ae:	f107 0320 	add.w	r3, r7, #32
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fd44 	bl	8000f40 <Motor_intialize>

	Motor_intialize(&DC_Motor2);
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fd3f 	bl	8000f40 <Motor_intialize>


	GPIO_PinConfig_t StepperDirPin = {
 80034c2:	4bab      	ldr	r3, [pc, #684]	; (8003770 <main+0x2e4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
			.GPIO_PinNumber = GPIO_PIN_9,
			.GPIO_MODE = GPIO_MODE_OUTPUT_PUSHPULL,
			.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHZ
	};
	Stepper_Init(&StepperDirPin);
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe f917 	bl	8001700 <Stepper_Init>



	LCD_enuInit(&LCD_Configs);
 80034d2:	48a8      	ldr	r0, [pc, #672]	; (8003774 <main+0x2e8>)
 80034d4:	f7fd fda6 	bl	8001024 <LCD_enuInit>

	HC_SR04_Init(UltraSonic_Configs);
 80034d8:	48a7      	ldr	r0, [pc, #668]	; (8003778 <main+0x2ec>)
 80034da:	f7fe f96b 	bl	80017b4 <HC_SR04_Init>


	// Local variables
	uint32_t Ultra1Distance = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
	uint32_t Ultra2Distance = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]

	float integral = 0;
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	float derivative = 0;
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	float error = 0;
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
	float error_previous = 0;
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
	int correction_steps = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	643b      	str	r3, [r7, #64]	; 0x40

	while (1) {

		// Main algorithm

		if(PinStepper_flag == 1)
 8003502:	4b9e      	ldr	r3, [pc, #632]	; (800377c <main+0x2f0>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <main+0x8e>
		{
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_LOW);
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	489c      	ldr	r0, [pc, #624]	; (8003780 <main+0x2f4>)
 8003510:	f7fe fc82 	bl	8001e18 <MCAL_GPIO_WritePin>
			PinStepper_flag = 0;
 8003514:	4b99      	ldr	r3, [pc, #612]	; (800377c <main+0x2f0>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
		}


		LCD_enuJumpCursorTo(1, 0);
 800351a:	2100      	movs	r1, #0
 800351c:	2001      	movs	r0, #1
 800351e:	f7fe f81f 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuSendString("START");
 8003522:	4898      	ldr	r0, [pc, #608]	; (8003784 <main+0x2f8>)
 8003524:	f7fd fff8 	bl	8001518 <LCD_enuSendString>

		HC_SR04_ReadDistance(0,&Ultra1Distance);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4619      	mov	r1, r3
 800352e:	2000      	movs	r0, #0
 8003530:	f7fe f9ae 	bl	8001890 <HC_SR04_ReadDistance>
		HC_SR04_ReadDistance(1,&Ultra2Distance);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4619      	mov	r1, r3
 8003538:	2001      	movs	r0, #1
 800353a:	f7fe f9a9 	bl	8001890 <HC_SR04_ReadDistance>

		LCD_enuJumpCursorTo(1, 0);
 800353e:	2100      	movs	r1, #0
 8003540:	2001      	movs	r0, #1
 8003542:	f7fe f80d 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuSendString("Reading ");
 8003546:	4890      	ldr	r0, [pc, #576]	; (8003788 <main+0x2fc>)
 8003548:	f7fd ffe6 	bl	8001518 <LCD_enuSendString>

		LCD_enuJumpCursorTo(2, 0);
 800354c:	2100      	movs	r1, #0
 800354e:	2002      	movs	r0, #2
 8003550:	f7fe f806 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuSendString("1st:    ");
 8003554:	488d      	ldr	r0, [pc, #564]	; (800378c <main+0x300>)
 8003556:	f7fd ffdf 	bl	8001518 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 5);
 800355a:	2105      	movs	r1, #5
 800355c:	2002      	movs	r0, #2
 800355e:	f7fd ffff 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra1Distance);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe f849 	bl	80015fc <LCD_enuDisplayIntNum>

		LCD_enuJumpCursorTo(2, 9);
 800356a:	2109      	movs	r1, #9
 800356c:	2002      	movs	r0, #2
 800356e:	f7fd fff7 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuSendString("2nd:    ");
 8003572:	4887      	ldr	r0, [pc, #540]	; (8003790 <main+0x304>)
 8003574:	f7fd ffd0 	bl	8001518 <LCD_enuSendString>
		LCD_enuJumpCursorTo(2, 13);
 8003578:	210d      	movs	r1, #13
 800357a:	2002      	movs	r0, #2
 800357c:	f7fd fff0 	bl	8001560 <LCD_enuJumpCursorTo>
		LCD_enuDisplayIntNum(Ultra2Distance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe f83a 	bl	80015fc <LCD_enuDisplayIntNum>



		if (Ultra1Distance <= 5) {
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	f200 80e8 	bhi.w	8003760 <main+0x2d4>

			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_LOW);
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	487f      	ldr	r0, [pc, #508]	; (8003794 <main+0x308>)
 8003596:	f7fe fc3f 	bl	8001e18 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_LOW);
 800359a:	2200      	movs	r2, #0
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	487d      	ldr	r0, [pc, #500]	; (8003794 <main+0x308>)
 80035a0:	f7fe fc3a 	bl	8001e18 <MCAL_GPIO_WritePin>

			Motor_Move_ForWard(&DC_Motor1, 100);
 80035a4:	f107 0320 	add.w	r3, r7, #32
 80035a8:	2164      	movs	r1, #100	; 0x64
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fd14 	bl	8000fd8 <Motor_Move_ForWard>
			Motor_Move_ForWard(&DC_Motor2, 100);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fd0e 	bl	8000fd8 <Motor_Move_ForWard>

			Delay_Timer3_ms(2000);
 80035bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80035c0:	f7fe fe60 	bl	8002284 <Delay_Timer3_ms>

			Motor_TurnOff(&DC_Motor1);
 80035c4:	f107 0320 	add.w	r3, r7, #32
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fcdf 	bl	8000f8c <Motor_TurnOff>
			Motor_TurnOff(&DC_Motor2);
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fcda 	bl	8000f8c <Motor_TurnOff>

			Delay_Timer3_ms(1000);
 80035d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035dc:	f7fe fe52 	bl	8002284 <Delay_Timer3_ms>

			if(Ultra2Distance<=2){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d80d      	bhi.n	8003602 <main+0x176>
				// 8000 =~ 2cm
						// Move stepper up
				Stepper_Move_Steps(TIMER2, TIMER_CH1, 8000, 50, 500, Stepper_UP);
 80035e6:	2301      	movs	r3, #1
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2332      	movs	r3, #50	; 0x32
 80035f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80035f6:	2100      	movs	r1, #0
 80035f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035fc:	f7fe f8a4 	bl	8001748 <Stepper_Move_Steps>
 8003600:	e0ae      	b.n	8003760 <main+0x2d4>

			}else if(Ultra2Distance>=4){ // 5
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d90d      	bls.n	8003624 <main+0x198>
				// Move stepper down
				Stepper_Move_Steps(TIMER2, TIMER_CH1, 8000, 50, 500, Stepper_Down);
 8003608:	2300      	movs	r3, #0
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2332      	movs	r3, #50	; 0x32
 8003614:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003618:	2100      	movs	r1, #0
 800361a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800361e:	f7fe f893 	bl	8001748 <Stepper_Move_Steps>
 8003622:	e09d      	b.n	8003760 <main+0x2d4>

			} // 3
			else{

				// Calculate error
				error = TARGET_DISTANCE_MAX - Ultra2Distance;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	425b      	negs	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fa45 	bl	8000ab8 <__aeabi_ui2f>
 800362e:	4603      	mov	r3, r0
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48

				do{
					// Proportional term
					float P = Kp * error;
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <main+0x30c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800363a:	f7fd fa95 	bl	8000b68 <__aeabi_fmul>
 800363e:	4603      	mov	r3, r0
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38

					// Integral term
					if (Ki != 0) {
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <main+0x310>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fc20 	bl	8000e90 <__aeabi_fcmpeq>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d119      	bne.n	800368a <main+0x1fe>
						integral += error;
 8003656:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003658:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800365a:	f7fd f97d 	bl	8000958 <__addsf3>
 800365e:	4603      	mov	r3, r0
 8003660:	64fb      	str	r3, [r7, #76]	; 0x4c
						if (integral > 100)
 8003662:	494f      	ldr	r1, [pc, #316]	; (80037a0 <main+0x314>)
 8003664:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003666:	f7fd fc3b 	bl	8000ee0 <__aeabi_fcmpgt>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <main+0x1ea>
							integral = 100;
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <main+0x314>)
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003674:	e00c      	b.n	8003690 <main+0x204>
						else if (integral < -100)
 8003676:	494b      	ldr	r1, [pc, #300]	; (80037a4 <main+0x318>)
 8003678:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800367a:	f7fd fc13 	bl	8000ea4 <__aeabi_fcmplt>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <main+0x204>
							integral = -100;
 8003684:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <main+0x318>)
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	e002      	b.n	8003690 <main+0x204>
					} else {
						integral = 0;
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
					}
					float I = Ki * integral;
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <main+0x310>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003698:	f7fd fa66 	bl	8000b68 <__aeabi_fmul>
 800369c:	4603      	mov	r3, r0
 800369e:	637b      	str	r3, [r7, #52]	; 0x34

					// Derivative term
					derivative = error - error_previous;
 80036a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036a4:	f7fd f956 	bl	8000954 <__aeabi_fsub>
 80036a8:	4603      	mov	r3, r0
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
					float D = Kd * derivative;
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <main+0x31c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4619      	mov	r1, r3
 80036b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036b4:	f7fd fa58 	bl	8000b68 <__aeabi_fmul>
 80036b8:	4603      	mov	r3, r0
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30

					// Calculate PID output
					correction_steps = P + I + D;
 80036bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036c0:	f7fd f94a 	bl	8000958 <__addsf3>
 80036c4:	4603      	mov	r3, r0
 80036c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd f945 	bl	8000958 <__addsf3>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fc0f 	bl	8000ef4 <__aeabi_f2iz>
 80036d6:	4603      	mov	r3, r0
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40

					// Limit correction steps to avoid excessive adjustments
					if (correction_steps > 100) {
 80036da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036dc:	2b64      	cmp	r3, #100	; 0x64
 80036de:	dd02      	ble.n	80036e6 <main+0x25a>
						correction_steps = 100;
 80036e0:	2364      	movs	r3, #100	; 0x64
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
 80036e4:	e006      	b.n	80036f4 <main+0x268>
					} else if (correction_steps < -100) {
 80036e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80036ec:	da02      	bge.n	80036f4 <main+0x268>
						correction_steps = -100;
 80036ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
					}
					Stepper_Move_Steps(TIMER2, TIMER_CH1,(uint16_t)(1500 + correction_steps), 50, 500, Stepper_UP);
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2332      	movs	r3, #50	; 0x32
 800370a:	2100      	movs	r1, #0
 800370c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003710:	f7fe f81a 	bl	8001748 <Stepper_Move_Steps>
					// Update previous error for next iteration
					error_previous = error;
 8003714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003716:	647b      	str	r3, [r7, #68]	; 0x44

					//					Delay_Timer3_ms(1000);

					// re-read the distance
					HC_SR04_ReadDistance(1,&Ultra2Distance);
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	4619      	mov	r1, r3
 800371c:	2001      	movs	r0, #1
 800371e:	f7fe f8b7 	bl	8001890 <HC_SR04_ReadDistance>
					LCD_enuJumpCursorTo(2, 9);
 8003722:	2109      	movs	r1, #9
 8003724:	2002      	movs	r0, #2
 8003726:	f7fd ff1b 	bl	8001560 <LCD_enuJumpCursorTo>
					LCD_enuSendString("2nd:    ");
 800372a:	4819      	ldr	r0, [pc, #100]	; (8003790 <main+0x304>)
 800372c:	f7fd fef4 	bl	8001518 <LCD_enuSendString>
					LCD_enuJumpCursorTo(2, 13);
 8003730:	210d      	movs	r1, #13
 8003732:	2002      	movs	r0, #2
 8003734:	f7fd ff14 	bl	8001560 <LCD_enuJumpCursorTo>
					LCD_enuDisplayIntNum(Ultra2Distance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd ff5e 	bl	80015fc <LCD_enuDisplayIntNum>

					// re-Calculate error
					error = TARGET_DISTANCE_MAX - Ultra2Distance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	425b      	negs	r3, r3
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd f9b7 	bl	8000ab8 <__aeabi_ui2f>
 800374a:	4603      	mov	r3, r0
 800374c:	64bb      	str	r3, [r7, #72]	; 0x48

				}while(error);// control
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003754:	f7fd fb9c 	bl	8000e90 <__aeabi_fcmpeq>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f43f af69 	beq.w	8003632 <main+0x1a6>

			}

		}

		Delay_Timer3_ms(10);
 8003760:	200a      	movs	r0, #10
 8003762:	f7fe fd8f 	bl	8002284 <Delay_Timer3_ms>
		if(PinStepper_flag == 1)
 8003766:	e6cc      	b.n	8003502 <main+0x76>
 8003768:	08003924 	.word	0x08003924
 800376c:	08003934 	.word	0x08003934
 8003770:	08003944 	.word	0x08003944
 8003774:	20000000 	.word	0x20000000
 8003778:	2000001c 	.word	0x2000001c
 800377c:	200000e4 	.word	0x200000e4
 8003780:	40010800 	.word	0x40010800
 8003784:	080038f8 	.word	0x080038f8
 8003788:	08003900 	.word	0x08003900
 800378c:	0800390c 	.word	0x0800390c
 8003790:	08003918 	.word	0x08003918
 8003794:	40010c00 	.word	0x40010c00
 8003798:	2000002c 	.word	0x2000002c
 800379c:	20000030 	.word	0x20000030
 80037a0:	42c80000 	.word	0x42c80000
 80037a4:	c2c80000 	.word	0xc2c80000
 80037a8:	20000034 	.word	0x20000034

080037ac <Clock_Init>:
	}
}


void Clock_Init()
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	MCAL_RCC_CLK_Init(HSE_CLK, RCC_CLK_72M);  // is a must due to MPU6050
 80037b0:	2148      	movs	r1, #72	; 0x48
 80037b2:	2001      	movs	r0, #1
 80037b4:	f7fe fc42 	bl	800203c <MCAL_RCC_CLK_Init>

	RCC_GPIOB_CLK_EN();
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <Clock_Init+0x6c>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <Clock_Init+0x6c>)
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <Clock_Init+0x6c>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <Clock_Init+0x6c>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <Clock_Init+0x6c>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <Clock_Init+0x6c>)
 80037d6:	f043 0310 	orr.w	r3, r3, #16
 80037da:	6193      	str	r3, [r2, #24]

	RCC_USART2_CLK_EN();
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <Clock_Init+0x6c>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <Clock_Init+0x6c>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e6:	61d3      	str	r3, [r2, #28]
	RCC_AFIO_CLK_EN();
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <Clock_Init+0x6c>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <Clock_Init+0x6c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6193      	str	r3, [r2, #24]
	RCC_I2C1_CLK_EN();
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <Clock_Init+0x6c>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a07      	ldr	r2, [pc, #28]	; (8003818 <Clock_Init+0x6c>)
 80037fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037fe:	61d3      	str	r3, [r2, #28]


	// Timer 3 for delay purposes
	RCC_TIMER3_CLK_EN();
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <Clock_Init+0x6c>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <Clock_Init+0x6c>)
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	61d3      	str	r3, [r2, #28]
	TIMER3_Init(RCC_CLK_36M);
 800380c:	2024      	movs	r0, #36	; 0x24
 800380e:	f7fe fcf9 	bl	8002204 <TIMER3_Init>
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800381e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003820:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <LoopForever+0x6>)
  ldr r1, =_edata
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LoopForever+0xe>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <LoopForever+0x16>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800384a:	f000 f811 	bl	8003870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800384e:	f7ff fe1d 	bl	800348c <main>

08003852 <LoopForever>:

LoopForever:
  b LoopForever
 8003852:	e7fe      	b.n	8003852 <LoopForever>
  ldr   r0, =_estack
 8003854:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8003860:	08003950 	.word	0x08003950
  ldr r2, =_sbss
 8003864:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8003868:	20000124 	.word	0x20000124

0800386c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC1_2_IRQHandler>
	...

08003870 <__libc_init_array>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	2600      	movs	r6, #0
 8003874:	4d0c      	ldr	r5, [pc, #48]	; (80038a8 <__libc_init_array+0x38>)
 8003876:	4c0d      	ldr	r4, [pc, #52]	; (80038ac <__libc_init_array+0x3c>)
 8003878:	1b64      	subs	r4, r4, r5
 800387a:	10a4      	asrs	r4, r4, #2
 800387c:	42a6      	cmp	r6, r4
 800387e:	d109      	bne.n	8003894 <__libc_init_array+0x24>
 8003880:	f000 f81a 	bl	80038b8 <_init>
 8003884:	2600      	movs	r6, #0
 8003886:	4d0a      	ldr	r5, [pc, #40]	; (80038b0 <__libc_init_array+0x40>)
 8003888:	4c0a      	ldr	r4, [pc, #40]	; (80038b4 <__libc_init_array+0x44>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	42a6      	cmp	r6, r4
 8003890:	d105      	bne.n	800389e <__libc_init_array+0x2e>
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	f855 3b04 	ldr.w	r3, [r5], #4
 8003898:	4798      	blx	r3
 800389a:	3601      	adds	r6, #1
 800389c:	e7ee      	b.n	800387c <__libc_init_array+0xc>
 800389e:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a2:	4798      	blx	r3
 80038a4:	3601      	adds	r6, #1
 80038a6:	e7f2      	b.n	800388e <__libc_init_array+0x1e>
 80038a8:	08003948 	.word	0x08003948
 80038ac:	08003948 	.word	0x08003948
 80038b0:	08003948 	.word	0x08003948
 80038b4:	0800394c 	.word	0x0800394c

080038b8 <_init>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr

080038c4 <_fini>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr
